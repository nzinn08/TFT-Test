
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08004c20  08004c20  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c20  08004c20  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000004  08004c2c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004c2c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e054  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f22  00000000  00000000  0002e080  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  0002ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  000307f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001833c  00000000  00000000  00030f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cc0  00000000  00000000  0004929c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000788f0  00000000  00000000  00051f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca84c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d14  00000000  00000000  000ca8c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004690 	.word	0x08004690

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08004690 	.word	0x08004690

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	000c      	movs	r4, r1
 800022a:	0309      	lsls	r1, r1, #12
 800022c:	b5c0      	push	{r6, r7, lr}
 800022e:	0a49      	lsrs	r1, r1, #9
 8000230:	0f47      	lsrs	r7, r0, #29
 8000232:	005e      	lsls	r6, r3, #1
 8000234:	4339      	orrs	r1, r7
 8000236:	031f      	lsls	r7, r3, #12
 8000238:	0fdb      	lsrs	r3, r3, #31
 800023a:	469c      	mov	ip, r3
 800023c:	0065      	lsls	r5, r4, #1
 800023e:	0a7b      	lsrs	r3, r7, #9
 8000240:	0f57      	lsrs	r7, r2, #29
 8000242:	431f      	orrs	r7, r3
 8000244:	0d6d      	lsrs	r5, r5, #21
 8000246:	0fe4      	lsrs	r4, r4, #31
 8000248:	0d76      	lsrs	r6, r6, #21
 800024a:	46a1      	mov	r9, r4
 800024c:	00c0      	lsls	r0, r0, #3
 800024e:	46b8      	mov	r8, r7
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	1bab      	subs	r3, r5, r6
 8000254:	4564      	cmp	r4, ip
 8000256:	d07b      	beq.n	8000350 <__aeabi_dadd+0x130>
 8000258:	2b00      	cmp	r3, #0
 800025a:	dd5f      	ble.n	800031c <__aeabi_dadd+0xfc>
 800025c:	2e00      	cmp	r6, #0
 800025e:	d000      	beq.n	8000262 <__aeabi_dadd+0x42>
 8000260:	e0a4      	b.n	80003ac <__aeabi_dadd+0x18c>
 8000262:	003e      	movs	r6, r7
 8000264:	4316      	orrs	r6, r2
 8000266:	d100      	bne.n	800026a <__aeabi_dadd+0x4a>
 8000268:	e112      	b.n	8000490 <__aeabi_dadd+0x270>
 800026a:	1e5e      	subs	r6, r3, #1
 800026c:	2e00      	cmp	r6, #0
 800026e:	d000      	beq.n	8000272 <__aeabi_dadd+0x52>
 8000270:	e19e      	b.n	80005b0 <__aeabi_dadd+0x390>
 8000272:	1a87      	subs	r7, r0, r2
 8000274:	4643      	mov	r3, r8
 8000276:	42b8      	cmp	r0, r7
 8000278:	4180      	sbcs	r0, r0
 800027a:	2501      	movs	r5, #1
 800027c:	1ac9      	subs	r1, r1, r3
 800027e:	4240      	negs	r0, r0
 8000280:	1a09      	subs	r1, r1, r0
 8000282:	020b      	lsls	r3, r1, #8
 8000284:	d400      	bmi.n	8000288 <__aeabi_dadd+0x68>
 8000286:	e131      	b.n	80004ec <__aeabi_dadd+0x2cc>
 8000288:	0249      	lsls	r1, r1, #9
 800028a:	0a4e      	lsrs	r6, r1, #9
 800028c:	2e00      	cmp	r6, #0
 800028e:	d100      	bne.n	8000292 <__aeabi_dadd+0x72>
 8000290:	e16e      	b.n	8000570 <__aeabi_dadd+0x350>
 8000292:	0030      	movs	r0, r6
 8000294:	f000 fe52 	bl	8000f3c <__clzsi2>
 8000298:	0003      	movs	r3, r0
 800029a:	3b08      	subs	r3, #8
 800029c:	2b1f      	cmp	r3, #31
 800029e:	dd00      	ble.n	80002a2 <__aeabi_dadd+0x82>
 80002a0:	e161      	b.n	8000566 <__aeabi_dadd+0x346>
 80002a2:	2220      	movs	r2, #32
 80002a4:	0039      	movs	r1, r7
 80002a6:	1ad2      	subs	r2, r2, r3
 80002a8:	409e      	lsls	r6, r3
 80002aa:	40d1      	lsrs	r1, r2
 80002ac:	409f      	lsls	r7, r3
 80002ae:	430e      	orrs	r6, r1
 80002b0:	429d      	cmp	r5, r3
 80002b2:	dd00      	ble.n	80002b6 <__aeabi_dadd+0x96>
 80002b4:	e151      	b.n	800055a <__aeabi_dadd+0x33a>
 80002b6:	1b5d      	subs	r5, r3, r5
 80002b8:	1c6b      	adds	r3, r5, #1
 80002ba:	2b1f      	cmp	r3, #31
 80002bc:	dd00      	ble.n	80002c0 <__aeabi_dadd+0xa0>
 80002be:	e17c      	b.n	80005ba <__aeabi_dadd+0x39a>
 80002c0:	2120      	movs	r1, #32
 80002c2:	1ac9      	subs	r1, r1, r3
 80002c4:	003d      	movs	r5, r7
 80002c6:	0030      	movs	r0, r6
 80002c8:	408f      	lsls	r7, r1
 80002ca:	4088      	lsls	r0, r1
 80002cc:	40dd      	lsrs	r5, r3
 80002ce:	1e79      	subs	r1, r7, #1
 80002d0:	418f      	sbcs	r7, r1
 80002d2:	0031      	movs	r1, r6
 80002d4:	2207      	movs	r2, #7
 80002d6:	4328      	orrs	r0, r5
 80002d8:	40d9      	lsrs	r1, r3
 80002da:	2500      	movs	r5, #0
 80002dc:	4307      	orrs	r7, r0
 80002de:	403a      	ands	r2, r7
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	d009      	beq.n	80002f8 <__aeabi_dadd+0xd8>
 80002e4:	230f      	movs	r3, #15
 80002e6:	403b      	ands	r3, r7
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d005      	beq.n	80002f8 <__aeabi_dadd+0xd8>
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	42bb      	cmp	r3, r7
 80002f0:	41bf      	sbcs	r7, r7
 80002f2:	427f      	negs	r7, r7
 80002f4:	19c9      	adds	r1, r1, r7
 80002f6:	001f      	movs	r7, r3
 80002f8:	020b      	lsls	r3, r1, #8
 80002fa:	d400      	bmi.n	80002fe <__aeabi_dadd+0xde>
 80002fc:	e226      	b.n	800074c <__aeabi_dadd+0x52c>
 80002fe:	1c6a      	adds	r2, r5, #1
 8000300:	4bc6      	ldr	r3, [pc, #792]	; (800061c <__aeabi_dadd+0x3fc>)
 8000302:	0555      	lsls	r5, r2, #21
 8000304:	0d6d      	lsrs	r5, r5, #21
 8000306:	429a      	cmp	r2, r3
 8000308:	d100      	bne.n	800030c <__aeabi_dadd+0xec>
 800030a:	e106      	b.n	800051a <__aeabi_dadd+0x2fa>
 800030c:	4ac4      	ldr	r2, [pc, #784]	; (8000620 <__aeabi_dadd+0x400>)
 800030e:	08ff      	lsrs	r7, r7, #3
 8000310:	400a      	ands	r2, r1
 8000312:	0753      	lsls	r3, r2, #29
 8000314:	0252      	lsls	r2, r2, #9
 8000316:	433b      	orrs	r3, r7
 8000318:	0b12      	lsrs	r2, r2, #12
 800031a:	e08e      	b.n	800043a <__aeabi_dadd+0x21a>
 800031c:	2b00      	cmp	r3, #0
 800031e:	d000      	beq.n	8000322 <__aeabi_dadd+0x102>
 8000320:	e0b8      	b.n	8000494 <__aeabi_dadd+0x274>
 8000322:	1c6b      	adds	r3, r5, #1
 8000324:	055b      	lsls	r3, r3, #21
 8000326:	0d5b      	lsrs	r3, r3, #21
 8000328:	2b01      	cmp	r3, #1
 800032a:	dc00      	bgt.n	800032e <__aeabi_dadd+0x10e>
 800032c:	e130      	b.n	8000590 <__aeabi_dadd+0x370>
 800032e:	1a87      	subs	r7, r0, r2
 8000330:	4643      	mov	r3, r8
 8000332:	42b8      	cmp	r0, r7
 8000334:	41b6      	sbcs	r6, r6
 8000336:	1acb      	subs	r3, r1, r3
 8000338:	4276      	negs	r6, r6
 800033a:	1b9e      	subs	r6, r3, r6
 800033c:	0233      	lsls	r3, r6, #8
 800033e:	d500      	bpl.n	8000342 <__aeabi_dadd+0x122>
 8000340:	e14c      	b.n	80005dc <__aeabi_dadd+0x3bc>
 8000342:	003b      	movs	r3, r7
 8000344:	4333      	orrs	r3, r6
 8000346:	d1a1      	bne.n	800028c <__aeabi_dadd+0x6c>
 8000348:	2200      	movs	r2, #0
 800034a:	2400      	movs	r4, #0
 800034c:	2500      	movs	r5, #0
 800034e:	e070      	b.n	8000432 <__aeabi_dadd+0x212>
 8000350:	2b00      	cmp	r3, #0
 8000352:	dc00      	bgt.n	8000356 <__aeabi_dadd+0x136>
 8000354:	e0e5      	b.n	8000522 <__aeabi_dadd+0x302>
 8000356:	2e00      	cmp	r6, #0
 8000358:	d100      	bne.n	800035c <__aeabi_dadd+0x13c>
 800035a:	e083      	b.n	8000464 <__aeabi_dadd+0x244>
 800035c:	4eaf      	ldr	r6, [pc, #700]	; (800061c <__aeabi_dadd+0x3fc>)
 800035e:	42b5      	cmp	r5, r6
 8000360:	d060      	beq.n	8000424 <__aeabi_dadd+0x204>
 8000362:	2680      	movs	r6, #128	; 0x80
 8000364:	0436      	lsls	r6, r6, #16
 8000366:	4337      	orrs	r7, r6
 8000368:	46b8      	mov	r8, r7
 800036a:	2b38      	cmp	r3, #56	; 0x38
 800036c:	dc00      	bgt.n	8000370 <__aeabi_dadd+0x150>
 800036e:	e13e      	b.n	80005ee <__aeabi_dadd+0x3ce>
 8000370:	4643      	mov	r3, r8
 8000372:	4313      	orrs	r3, r2
 8000374:	001f      	movs	r7, r3
 8000376:	1e7a      	subs	r2, r7, #1
 8000378:	4197      	sbcs	r7, r2
 800037a:	183f      	adds	r7, r7, r0
 800037c:	4287      	cmp	r7, r0
 800037e:	4180      	sbcs	r0, r0
 8000380:	4240      	negs	r0, r0
 8000382:	1809      	adds	r1, r1, r0
 8000384:	020b      	lsls	r3, r1, #8
 8000386:	d400      	bmi.n	800038a <__aeabi_dadd+0x16a>
 8000388:	e0b0      	b.n	80004ec <__aeabi_dadd+0x2cc>
 800038a:	4ba4      	ldr	r3, [pc, #656]	; (800061c <__aeabi_dadd+0x3fc>)
 800038c:	3501      	adds	r5, #1
 800038e:	429d      	cmp	r5, r3
 8000390:	d100      	bne.n	8000394 <__aeabi_dadd+0x174>
 8000392:	e0c3      	b.n	800051c <__aeabi_dadd+0x2fc>
 8000394:	4aa2      	ldr	r2, [pc, #648]	; (8000620 <__aeabi_dadd+0x400>)
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	400a      	ands	r2, r1
 800039a:	2101      	movs	r1, #1
 800039c:	400f      	ands	r7, r1
 800039e:	431f      	orrs	r7, r3
 80003a0:	0851      	lsrs	r1, r2, #1
 80003a2:	07d3      	lsls	r3, r2, #31
 80003a4:	2207      	movs	r2, #7
 80003a6:	431f      	orrs	r7, r3
 80003a8:	403a      	ands	r2, r7
 80003aa:	e799      	b.n	80002e0 <__aeabi_dadd+0xc0>
 80003ac:	4e9b      	ldr	r6, [pc, #620]	; (800061c <__aeabi_dadd+0x3fc>)
 80003ae:	42b5      	cmp	r5, r6
 80003b0:	d038      	beq.n	8000424 <__aeabi_dadd+0x204>
 80003b2:	2680      	movs	r6, #128	; 0x80
 80003b4:	0436      	lsls	r6, r6, #16
 80003b6:	4337      	orrs	r7, r6
 80003b8:	46b8      	mov	r8, r7
 80003ba:	2b38      	cmp	r3, #56	; 0x38
 80003bc:	dd00      	ble.n	80003c0 <__aeabi_dadd+0x1a0>
 80003be:	e0dc      	b.n	800057a <__aeabi_dadd+0x35a>
 80003c0:	2b1f      	cmp	r3, #31
 80003c2:	dc00      	bgt.n	80003c6 <__aeabi_dadd+0x1a6>
 80003c4:	e130      	b.n	8000628 <__aeabi_dadd+0x408>
 80003c6:	001e      	movs	r6, r3
 80003c8:	4647      	mov	r7, r8
 80003ca:	3e20      	subs	r6, #32
 80003cc:	40f7      	lsrs	r7, r6
 80003ce:	46bc      	mov	ip, r7
 80003d0:	2b20      	cmp	r3, #32
 80003d2:	d004      	beq.n	80003de <__aeabi_dadd+0x1be>
 80003d4:	2640      	movs	r6, #64	; 0x40
 80003d6:	1af3      	subs	r3, r6, r3
 80003d8:	4646      	mov	r6, r8
 80003da:	409e      	lsls	r6, r3
 80003dc:	4332      	orrs	r2, r6
 80003de:	0017      	movs	r7, r2
 80003e0:	4663      	mov	r3, ip
 80003e2:	1e7a      	subs	r2, r7, #1
 80003e4:	4197      	sbcs	r7, r2
 80003e6:	431f      	orrs	r7, r3
 80003e8:	e0cc      	b.n	8000584 <__aeabi_dadd+0x364>
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d100      	bne.n	80003f0 <__aeabi_dadd+0x1d0>
 80003ee:	e204      	b.n	80007fa <__aeabi_dadd+0x5da>
 80003f0:	4643      	mov	r3, r8
 80003f2:	4313      	orrs	r3, r2
 80003f4:	d100      	bne.n	80003f8 <__aeabi_dadd+0x1d8>
 80003f6:	e159      	b.n	80006ac <__aeabi_dadd+0x48c>
 80003f8:	074b      	lsls	r3, r1, #29
 80003fa:	08c0      	lsrs	r0, r0, #3
 80003fc:	4318      	orrs	r0, r3
 80003fe:	2380      	movs	r3, #128	; 0x80
 8000400:	08c9      	lsrs	r1, r1, #3
 8000402:	031b      	lsls	r3, r3, #12
 8000404:	4219      	tst	r1, r3
 8000406:	d008      	beq.n	800041a <__aeabi_dadd+0x1fa>
 8000408:	4645      	mov	r5, r8
 800040a:	08ed      	lsrs	r5, r5, #3
 800040c:	421d      	tst	r5, r3
 800040e:	d104      	bne.n	800041a <__aeabi_dadd+0x1fa>
 8000410:	4643      	mov	r3, r8
 8000412:	08d0      	lsrs	r0, r2, #3
 8000414:	0759      	lsls	r1, r3, #29
 8000416:	4308      	orrs	r0, r1
 8000418:	0029      	movs	r1, r5
 800041a:	0f42      	lsrs	r2, r0, #29
 800041c:	00c9      	lsls	r1, r1, #3
 800041e:	4d7f      	ldr	r5, [pc, #508]	; (800061c <__aeabi_dadd+0x3fc>)
 8000420:	4311      	orrs	r1, r2
 8000422:	00c0      	lsls	r0, r0, #3
 8000424:	074b      	lsls	r3, r1, #29
 8000426:	08ca      	lsrs	r2, r1, #3
 8000428:	497c      	ldr	r1, [pc, #496]	; (800061c <__aeabi_dadd+0x3fc>)
 800042a:	08c0      	lsrs	r0, r0, #3
 800042c:	4303      	orrs	r3, r0
 800042e:	428d      	cmp	r5, r1
 8000430:	d068      	beq.n	8000504 <__aeabi_dadd+0x2e4>
 8000432:	0312      	lsls	r2, r2, #12
 8000434:	056d      	lsls	r5, r5, #21
 8000436:	0b12      	lsrs	r2, r2, #12
 8000438:	0d6d      	lsrs	r5, r5, #21
 800043a:	2100      	movs	r1, #0
 800043c:	0312      	lsls	r2, r2, #12
 800043e:	0018      	movs	r0, r3
 8000440:	0b13      	lsrs	r3, r2, #12
 8000442:	0d0a      	lsrs	r2, r1, #20
 8000444:	0512      	lsls	r2, r2, #20
 8000446:	431a      	orrs	r2, r3
 8000448:	4b76      	ldr	r3, [pc, #472]	; (8000624 <__aeabi_dadd+0x404>)
 800044a:	052d      	lsls	r5, r5, #20
 800044c:	4013      	ands	r3, r2
 800044e:	432b      	orrs	r3, r5
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	07e4      	lsls	r4, r4, #31
 8000454:	085b      	lsrs	r3, r3, #1
 8000456:	4323      	orrs	r3, r4
 8000458:	0019      	movs	r1, r3
 800045a:	bc1c      	pop	{r2, r3, r4}
 800045c:	4690      	mov	r8, r2
 800045e:	4699      	mov	r9, r3
 8000460:	46a2      	mov	sl, r4
 8000462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000464:	003e      	movs	r6, r7
 8000466:	4316      	orrs	r6, r2
 8000468:	d012      	beq.n	8000490 <__aeabi_dadd+0x270>
 800046a:	1e5e      	subs	r6, r3, #1
 800046c:	2e00      	cmp	r6, #0
 800046e:	d000      	beq.n	8000472 <__aeabi_dadd+0x252>
 8000470:	e100      	b.n	8000674 <__aeabi_dadd+0x454>
 8000472:	1887      	adds	r7, r0, r2
 8000474:	4287      	cmp	r7, r0
 8000476:	4180      	sbcs	r0, r0
 8000478:	4441      	add	r1, r8
 800047a:	4240      	negs	r0, r0
 800047c:	1809      	adds	r1, r1, r0
 800047e:	2501      	movs	r5, #1
 8000480:	020b      	lsls	r3, r1, #8
 8000482:	d533      	bpl.n	80004ec <__aeabi_dadd+0x2cc>
 8000484:	2502      	movs	r5, #2
 8000486:	e785      	b.n	8000394 <__aeabi_dadd+0x174>
 8000488:	4664      	mov	r4, ip
 800048a:	0033      	movs	r3, r6
 800048c:	4641      	mov	r1, r8
 800048e:	0010      	movs	r0, r2
 8000490:	001d      	movs	r5, r3
 8000492:	e7c7      	b.n	8000424 <__aeabi_dadd+0x204>
 8000494:	2d00      	cmp	r5, #0
 8000496:	d000      	beq.n	800049a <__aeabi_dadd+0x27a>
 8000498:	e0da      	b.n	8000650 <__aeabi_dadd+0x430>
 800049a:	000c      	movs	r4, r1
 800049c:	4304      	orrs	r4, r0
 800049e:	d0f3      	beq.n	8000488 <__aeabi_dadd+0x268>
 80004a0:	1c5c      	adds	r4, r3, #1
 80004a2:	d100      	bne.n	80004a6 <__aeabi_dadd+0x286>
 80004a4:	e19f      	b.n	80007e6 <__aeabi_dadd+0x5c6>
 80004a6:	4c5d      	ldr	r4, [pc, #372]	; (800061c <__aeabi_dadd+0x3fc>)
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d100      	bne.n	80004ae <__aeabi_dadd+0x28e>
 80004ac:	e12f      	b.n	800070e <__aeabi_dadd+0x4ee>
 80004ae:	43db      	mvns	r3, r3
 80004b0:	2b38      	cmp	r3, #56	; 0x38
 80004b2:	dd00      	ble.n	80004b6 <__aeabi_dadd+0x296>
 80004b4:	e166      	b.n	8000784 <__aeabi_dadd+0x564>
 80004b6:	2b1f      	cmp	r3, #31
 80004b8:	dd00      	ble.n	80004bc <__aeabi_dadd+0x29c>
 80004ba:	e183      	b.n	80007c4 <__aeabi_dadd+0x5a4>
 80004bc:	2420      	movs	r4, #32
 80004be:	0005      	movs	r5, r0
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	000f      	movs	r7, r1
 80004c4:	40dd      	lsrs	r5, r3
 80004c6:	40d9      	lsrs	r1, r3
 80004c8:	40a0      	lsls	r0, r4
 80004ca:	4643      	mov	r3, r8
 80004cc:	40a7      	lsls	r7, r4
 80004ce:	1a5b      	subs	r3, r3, r1
 80004d0:	1e44      	subs	r4, r0, #1
 80004d2:	41a0      	sbcs	r0, r4
 80004d4:	4698      	mov	r8, r3
 80004d6:	432f      	orrs	r7, r5
 80004d8:	4338      	orrs	r0, r7
 80004da:	1a17      	subs	r7, r2, r0
 80004dc:	42ba      	cmp	r2, r7
 80004de:	4192      	sbcs	r2, r2
 80004e0:	4643      	mov	r3, r8
 80004e2:	4252      	negs	r2, r2
 80004e4:	1a99      	subs	r1, r3, r2
 80004e6:	4664      	mov	r4, ip
 80004e8:	0035      	movs	r5, r6
 80004ea:	e6ca      	b.n	8000282 <__aeabi_dadd+0x62>
 80004ec:	2207      	movs	r2, #7
 80004ee:	403a      	ands	r2, r7
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d000      	beq.n	80004f6 <__aeabi_dadd+0x2d6>
 80004f4:	e6f6      	b.n	80002e4 <__aeabi_dadd+0xc4>
 80004f6:	074b      	lsls	r3, r1, #29
 80004f8:	08ca      	lsrs	r2, r1, #3
 80004fa:	4948      	ldr	r1, [pc, #288]	; (800061c <__aeabi_dadd+0x3fc>)
 80004fc:	08ff      	lsrs	r7, r7, #3
 80004fe:	433b      	orrs	r3, r7
 8000500:	428d      	cmp	r5, r1
 8000502:	d196      	bne.n	8000432 <__aeabi_dadd+0x212>
 8000504:	0019      	movs	r1, r3
 8000506:	4311      	orrs	r1, r2
 8000508:	d100      	bne.n	800050c <__aeabi_dadd+0x2ec>
 800050a:	e19e      	b.n	800084a <__aeabi_dadd+0x62a>
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0309      	lsls	r1, r1, #12
 8000510:	430a      	orrs	r2, r1
 8000512:	0312      	lsls	r2, r2, #12
 8000514:	0b12      	lsrs	r2, r2, #12
 8000516:	4d41      	ldr	r5, [pc, #260]	; (800061c <__aeabi_dadd+0x3fc>)
 8000518:	e78f      	b.n	800043a <__aeabi_dadd+0x21a>
 800051a:	0015      	movs	r5, r2
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	e78b      	b.n	800043a <__aeabi_dadd+0x21a>
 8000522:	2b00      	cmp	r3, #0
 8000524:	d000      	beq.n	8000528 <__aeabi_dadd+0x308>
 8000526:	e0c7      	b.n	80006b8 <__aeabi_dadd+0x498>
 8000528:	1c6b      	adds	r3, r5, #1
 800052a:	055f      	lsls	r7, r3, #21
 800052c:	0d7f      	lsrs	r7, r7, #21
 800052e:	2f01      	cmp	r7, #1
 8000530:	dc00      	bgt.n	8000534 <__aeabi_dadd+0x314>
 8000532:	e0f1      	b.n	8000718 <__aeabi_dadd+0x4f8>
 8000534:	4d39      	ldr	r5, [pc, #228]	; (800061c <__aeabi_dadd+0x3fc>)
 8000536:	42ab      	cmp	r3, r5
 8000538:	d100      	bne.n	800053c <__aeabi_dadd+0x31c>
 800053a:	e0b9      	b.n	80006b0 <__aeabi_dadd+0x490>
 800053c:	1885      	adds	r5, r0, r2
 800053e:	000a      	movs	r2, r1
 8000540:	4285      	cmp	r5, r0
 8000542:	4189      	sbcs	r1, r1
 8000544:	4442      	add	r2, r8
 8000546:	4249      	negs	r1, r1
 8000548:	1851      	adds	r1, r2, r1
 800054a:	2207      	movs	r2, #7
 800054c:	07cf      	lsls	r7, r1, #31
 800054e:	086d      	lsrs	r5, r5, #1
 8000550:	432f      	orrs	r7, r5
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	403a      	ands	r2, r7
 8000556:	001d      	movs	r5, r3
 8000558:	e6c2      	b.n	80002e0 <__aeabi_dadd+0xc0>
 800055a:	2207      	movs	r2, #7
 800055c:	4930      	ldr	r1, [pc, #192]	; (8000620 <__aeabi_dadd+0x400>)
 800055e:	1aed      	subs	r5, r5, r3
 8000560:	4031      	ands	r1, r6
 8000562:	403a      	ands	r2, r7
 8000564:	e6bc      	b.n	80002e0 <__aeabi_dadd+0xc0>
 8000566:	003e      	movs	r6, r7
 8000568:	3828      	subs	r0, #40	; 0x28
 800056a:	4086      	lsls	r6, r0
 800056c:	2700      	movs	r7, #0
 800056e:	e69f      	b.n	80002b0 <__aeabi_dadd+0x90>
 8000570:	0038      	movs	r0, r7
 8000572:	f000 fce3 	bl	8000f3c <__clzsi2>
 8000576:	3020      	adds	r0, #32
 8000578:	e68e      	b.n	8000298 <__aeabi_dadd+0x78>
 800057a:	4643      	mov	r3, r8
 800057c:	4313      	orrs	r3, r2
 800057e:	001f      	movs	r7, r3
 8000580:	1e7a      	subs	r2, r7, #1
 8000582:	4197      	sbcs	r7, r2
 8000584:	1bc7      	subs	r7, r0, r7
 8000586:	42b8      	cmp	r0, r7
 8000588:	4180      	sbcs	r0, r0
 800058a:	4240      	negs	r0, r0
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	e678      	b.n	8000282 <__aeabi_dadd+0x62>
 8000590:	000e      	movs	r6, r1
 8000592:	003b      	movs	r3, r7
 8000594:	4306      	orrs	r6, r0
 8000596:	4313      	orrs	r3, r2
 8000598:	2d00      	cmp	r5, #0
 800059a:	d161      	bne.n	8000660 <__aeabi_dadd+0x440>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d000      	beq.n	80005a2 <__aeabi_dadd+0x382>
 80005a0:	e0f4      	b.n	800078c <__aeabi_dadd+0x56c>
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_dadd+0x388>
 80005a6:	e11b      	b.n	80007e0 <__aeabi_dadd+0x5c0>
 80005a8:	4664      	mov	r4, ip
 80005aa:	0039      	movs	r1, r7
 80005ac:	0010      	movs	r0, r2
 80005ae:	e739      	b.n	8000424 <__aeabi_dadd+0x204>
 80005b0:	4f1a      	ldr	r7, [pc, #104]	; (800061c <__aeabi_dadd+0x3fc>)
 80005b2:	42bb      	cmp	r3, r7
 80005b4:	d07a      	beq.n	80006ac <__aeabi_dadd+0x48c>
 80005b6:	0033      	movs	r3, r6
 80005b8:	e6ff      	b.n	80003ba <__aeabi_dadd+0x19a>
 80005ba:	0030      	movs	r0, r6
 80005bc:	3d1f      	subs	r5, #31
 80005be:	40e8      	lsrs	r0, r5
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d003      	beq.n	80005cc <__aeabi_dadd+0x3ac>
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	409e      	lsls	r6, r3
 80005ca:	4337      	orrs	r7, r6
 80005cc:	1e7b      	subs	r3, r7, #1
 80005ce:	419f      	sbcs	r7, r3
 80005d0:	2207      	movs	r2, #7
 80005d2:	4307      	orrs	r7, r0
 80005d4:	403a      	ands	r2, r7
 80005d6:	2100      	movs	r1, #0
 80005d8:	2500      	movs	r5, #0
 80005da:	e789      	b.n	80004f0 <__aeabi_dadd+0x2d0>
 80005dc:	1a17      	subs	r7, r2, r0
 80005de:	4643      	mov	r3, r8
 80005e0:	42ba      	cmp	r2, r7
 80005e2:	41b6      	sbcs	r6, r6
 80005e4:	1a59      	subs	r1, r3, r1
 80005e6:	4276      	negs	r6, r6
 80005e8:	1b8e      	subs	r6, r1, r6
 80005ea:	4664      	mov	r4, ip
 80005ec:	e64e      	b.n	800028c <__aeabi_dadd+0x6c>
 80005ee:	2b1f      	cmp	r3, #31
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_dadd+0x3d4>
 80005f2:	e0ad      	b.n	8000750 <__aeabi_dadd+0x530>
 80005f4:	2620      	movs	r6, #32
 80005f6:	4647      	mov	r7, r8
 80005f8:	1af6      	subs	r6, r6, r3
 80005fa:	40b7      	lsls	r7, r6
 80005fc:	46b9      	mov	r9, r7
 80005fe:	0017      	movs	r7, r2
 8000600:	46b2      	mov	sl, r6
 8000602:	40df      	lsrs	r7, r3
 8000604:	464e      	mov	r6, r9
 8000606:	433e      	orrs	r6, r7
 8000608:	0037      	movs	r7, r6
 800060a:	4656      	mov	r6, sl
 800060c:	40b2      	lsls	r2, r6
 800060e:	1e56      	subs	r6, r2, #1
 8000610:	41b2      	sbcs	r2, r6
 8000612:	4317      	orrs	r7, r2
 8000614:	4642      	mov	r2, r8
 8000616:	40da      	lsrs	r2, r3
 8000618:	1889      	adds	r1, r1, r2
 800061a:	e6ae      	b.n	800037a <__aeabi_dadd+0x15a>
 800061c:	000007ff 	.word	0x000007ff
 8000620:	ff7fffff 	.word	0xff7fffff
 8000624:	800fffff 	.word	0x800fffff
 8000628:	2620      	movs	r6, #32
 800062a:	4647      	mov	r7, r8
 800062c:	1af6      	subs	r6, r6, r3
 800062e:	40b7      	lsls	r7, r6
 8000630:	46b9      	mov	r9, r7
 8000632:	0017      	movs	r7, r2
 8000634:	46b2      	mov	sl, r6
 8000636:	40df      	lsrs	r7, r3
 8000638:	464e      	mov	r6, r9
 800063a:	433e      	orrs	r6, r7
 800063c:	0037      	movs	r7, r6
 800063e:	4656      	mov	r6, sl
 8000640:	40b2      	lsls	r2, r6
 8000642:	1e56      	subs	r6, r2, #1
 8000644:	41b2      	sbcs	r2, r6
 8000646:	4317      	orrs	r7, r2
 8000648:	4642      	mov	r2, r8
 800064a:	40da      	lsrs	r2, r3
 800064c:	1a89      	subs	r1, r1, r2
 800064e:	e799      	b.n	8000584 <__aeabi_dadd+0x364>
 8000650:	4c7f      	ldr	r4, [pc, #508]	; (8000850 <__aeabi_dadd+0x630>)
 8000652:	42a6      	cmp	r6, r4
 8000654:	d05b      	beq.n	800070e <__aeabi_dadd+0x4ee>
 8000656:	2480      	movs	r4, #128	; 0x80
 8000658:	0424      	lsls	r4, r4, #16
 800065a:	425b      	negs	r3, r3
 800065c:	4321      	orrs	r1, r4
 800065e:	e727      	b.n	80004b0 <__aeabi_dadd+0x290>
 8000660:	2e00      	cmp	r6, #0
 8000662:	d10c      	bne.n	800067e <__aeabi_dadd+0x45e>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x44a>
 8000668:	e0cb      	b.n	8000802 <__aeabi_dadd+0x5e2>
 800066a:	4664      	mov	r4, ip
 800066c:	0039      	movs	r1, r7
 800066e:	0010      	movs	r0, r2
 8000670:	4d77      	ldr	r5, [pc, #476]	; (8000850 <__aeabi_dadd+0x630>)
 8000672:	e6d7      	b.n	8000424 <__aeabi_dadd+0x204>
 8000674:	4f76      	ldr	r7, [pc, #472]	; (8000850 <__aeabi_dadd+0x630>)
 8000676:	42bb      	cmp	r3, r7
 8000678:	d018      	beq.n	80006ac <__aeabi_dadd+0x48c>
 800067a:	0033      	movs	r3, r6
 800067c:	e675      	b.n	800036a <__aeabi_dadd+0x14a>
 800067e:	2b00      	cmp	r3, #0
 8000680:	d014      	beq.n	80006ac <__aeabi_dadd+0x48c>
 8000682:	074b      	lsls	r3, r1, #29
 8000684:	08c0      	lsrs	r0, r0, #3
 8000686:	4318      	orrs	r0, r3
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	08c9      	lsrs	r1, r1, #3
 800068c:	031b      	lsls	r3, r3, #12
 800068e:	4219      	tst	r1, r3
 8000690:	d007      	beq.n	80006a2 <__aeabi_dadd+0x482>
 8000692:	08fc      	lsrs	r4, r7, #3
 8000694:	421c      	tst	r4, r3
 8000696:	d104      	bne.n	80006a2 <__aeabi_dadd+0x482>
 8000698:	0779      	lsls	r1, r7, #29
 800069a:	08d0      	lsrs	r0, r2, #3
 800069c:	4308      	orrs	r0, r1
 800069e:	46e1      	mov	r9, ip
 80006a0:	0021      	movs	r1, r4
 80006a2:	464c      	mov	r4, r9
 80006a4:	0f42      	lsrs	r2, r0, #29
 80006a6:	00c9      	lsls	r1, r1, #3
 80006a8:	4311      	orrs	r1, r2
 80006aa:	00c0      	lsls	r0, r0, #3
 80006ac:	4d68      	ldr	r5, [pc, #416]	; (8000850 <__aeabi_dadd+0x630>)
 80006ae:	e6b9      	b.n	8000424 <__aeabi_dadd+0x204>
 80006b0:	001d      	movs	r5, r3
 80006b2:	2200      	movs	r2, #0
 80006b4:	2300      	movs	r3, #0
 80006b6:	e6c0      	b.n	800043a <__aeabi_dadd+0x21a>
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d15b      	bne.n	8000774 <__aeabi_dadd+0x554>
 80006bc:	000d      	movs	r5, r1
 80006be:	4305      	orrs	r5, r0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x4a4>
 80006c2:	e6e2      	b.n	800048a <__aeabi_dadd+0x26a>
 80006c4:	1c5d      	adds	r5, r3, #1
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x4aa>
 80006c8:	e0b0      	b.n	800082c <__aeabi_dadd+0x60c>
 80006ca:	4d61      	ldr	r5, [pc, #388]	; (8000850 <__aeabi_dadd+0x630>)
 80006cc:	42ae      	cmp	r6, r5
 80006ce:	d01f      	beq.n	8000710 <__aeabi_dadd+0x4f0>
 80006d0:	43db      	mvns	r3, r3
 80006d2:	2b38      	cmp	r3, #56	; 0x38
 80006d4:	dc71      	bgt.n	80007ba <__aeabi_dadd+0x59a>
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	dd00      	ble.n	80006dc <__aeabi_dadd+0x4bc>
 80006da:	e096      	b.n	800080a <__aeabi_dadd+0x5ea>
 80006dc:	2520      	movs	r5, #32
 80006de:	000f      	movs	r7, r1
 80006e0:	1aed      	subs	r5, r5, r3
 80006e2:	40af      	lsls	r7, r5
 80006e4:	46b9      	mov	r9, r7
 80006e6:	0007      	movs	r7, r0
 80006e8:	46aa      	mov	sl, r5
 80006ea:	40df      	lsrs	r7, r3
 80006ec:	464d      	mov	r5, r9
 80006ee:	433d      	orrs	r5, r7
 80006f0:	002f      	movs	r7, r5
 80006f2:	4655      	mov	r5, sl
 80006f4:	40a8      	lsls	r0, r5
 80006f6:	40d9      	lsrs	r1, r3
 80006f8:	1e45      	subs	r5, r0, #1
 80006fa:	41a8      	sbcs	r0, r5
 80006fc:	4488      	add	r8, r1
 80006fe:	4307      	orrs	r7, r0
 8000700:	18bf      	adds	r7, r7, r2
 8000702:	4297      	cmp	r7, r2
 8000704:	4192      	sbcs	r2, r2
 8000706:	4251      	negs	r1, r2
 8000708:	4441      	add	r1, r8
 800070a:	0035      	movs	r5, r6
 800070c:	e63a      	b.n	8000384 <__aeabi_dadd+0x164>
 800070e:	4664      	mov	r4, ip
 8000710:	0035      	movs	r5, r6
 8000712:	4641      	mov	r1, r8
 8000714:	0010      	movs	r0, r2
 8000716:	e685      	b.n	8000424 <__aeabi_dadd+0x204>
 8000718:	000b      	movs	r3, r1
 800071a:	4303      	orrs	r3, r0
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x502>
 8000720:	e663      	b.n	80003ea <__aeabi_dadd+0x1ca>
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f5      	beq.n	8000712 <__aeabi_dadd+0x4f2>
 8000726:	4643      	mov	r3, r8
 8000728:	4313      	orrs	r3, r2
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x50e>
 800072c:	e67a      	b.n	8000424 <__aeabi_dadd+0x204>
 800072e:	1887      	adds	r7, r0, r2
 8000730:	4287      	cmp	r7, r0
 8000732:	4180      	sbcs	r0, r0
 8000734:	2207      	movs	r2, #7
 8000736:	4441      	add	r1, r8
 8000738:	4240      	negs	r0, r0
 800073a:	1809      	adds	r1, r1, r0
 800073c:	403a      	ands	r2, r7
 800073e:	020b      	lsls	r3, r1, #8
 8000740:	d400      	bmi.n	8000744 <__aeabi_dadd+0x524>
 8000742:	e6d5      	b.n	80004f0 <__aeabi_dadd+0x2d0>
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <__aeabi_dadd+0x634>)
 8000746:	3501      	adds	r5, #1
 8000748:	4019      	ands	r1, r3
 800074a:	e5c9      	b.n	80002e0 <__aeabi_dadd+0xc0>
 800074c:	0038      	movs	r0, r7
 800074e:	e669      	b.n	8000424 <__aeabi_dadd+0x204>
 8000750:	001e      	movs	r6, r3
 8000752:	4647      	mov	r7, r8
 8000754:	3e20      	subs	r6, #32
 8000756:	40f7      	lsrs	r7, r6
 8000758:	46bc      	mov	ip, r7
 800075a:	2b20      	cmp	r3, #32
 800075c:	d004      	beq.n	8000768 <__aeabi_dadd+0x548>
 800075e:	2640      	movs	r6, #64	; 0x40
 8000760:	1af3      	subs	r3, r6, r3
 8000762:	4646      	mov	r6, r8
 8000764:	409e      	lsls	r6, r3
 8000766:	4332      	orrs	r2, r6
 8000768:	0017      	movs	r7, r2
 800076a:	4663      	mov	r3, ip
 800076c:	1e7a      	subs	r2, r7, #1
 800076e:	4197      	sbcs	r7, r2
 8000770:	431f      	orrs	r7, r3
 8000772:	e602      	b.n	800037a <__aeabi_dadd+0x15a>
 8000774:	4d36      	ldr	r5, [pc, #216]	; (8000850 <__aeabi_dadd+0x630>)
 8000776:	42ae      	cmp	r6, r5
 8000778:	d0ca      	beq.n	8000710 <__aeabi_dadd+0x4f0>
 800077a:	2580      	movs	r5, #128	; 0x80
 800077c:	042d      	lsls	r5, r5, #16
 800077e:	425b      	negs	r3, r3
 8000780:	4329      	orrs	r1, r5
 8000782:	e7a6      	b.n	80006d2 <__aeabi_dadd+0x4b2>
 8000784:	4308      	orrs	r0, r1
 8000786:	1e41      	subs	r1, r0, #1
 8000788:	4188      	sbcs	r0, r1
 800078a:	e6a6      	b.n	80004da <__aeabi_dadd+0x2ba>
 800078c:	2b00      	cmp	r3, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x572>
 8000790:	e648      	b.n	8000424 <__aeabi_dadd+0x204>
 8000792:	1a87      	subs	r7, r0, r2
 8000794:	4643      	mov	r3, r8
 8000796:	42b8      	cmp	r0, r7
 8000798:	41b6      	sbcs	r6, r6
 800079a:	1acb      	subs	r3, r1, r3
 800079c:	4276      	negs	r6, r6
 800079e:	1b9e      	subs	r6, r3, r6
 80007a0:	0233      	lsls	r3, r6, #8
 80007a2:	d54b      	bpl.n	800083c <__aeabi_dadd+0x61c>
 80007a4:	1a17      	subs	r7, r2, r0
 80007a6:	4643      	mov	r3, r8
 80007a8:	42ba      	cmp	r2, r7
 80007aa:	4192      	sbcs	r2, r2
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	4252      	negs	r2, r2
 80007b0:	1a89      	subs	r1, r1, r2
 80007b2:	2207      	movs	r2, #7
 80007b4:	4664      	mov	r4, ip
 80007b6:	403a      	ands	r2, r7
 80007b8:	e592      	b.n	80002e0 <__aeabi_dadd+0xc0>
 80007ba:	4301      	orrs	r1, r0
 80007bc:	000f      	movs	r7, r1
 80007be:	1e79      	subs	r1, r7, #1
 80007c0:	418f      	sbcs	r7, r1
 80007c2:	e79d      	b.n	8000700 <__aeabi_dadd+0x4e0>
 80007c4:	001c      	movs	r4, r3
 80007c6:	000f      	movs	r7, r1
 80007c8:	3c20      	subs	r4, #32
 80007ca:	40e7      	lsrs	r7, r4
 80007cc:	2b20      	cmp	r3, #32
 80007ce:	d003      	beq.n	80007d8 <__aeabi_dadd+0x5b8>
 80007d0:	2440      	movs	r4, #64	; 0x40
 80007d2:	1ae3      	subs	r3, r4, r3
 80007d4:	4099      	lsls	r1, r3
 80007d6:	4308      	orrs	r0, r1
 80007d8:	1e41      	subs	r1, r0, #1
 80007da:	4188      	sbcs	r0, r1
 80007dc:	4338      	orrs	r0, r7
 80007de:	e67c      	b.n	80004da <__aeabi_dadd+0x2ba>
 80007e0:	2200      	movs	r2, #0
 80007e2:	2400      	movs	r4, #0
 80007e4:	e625      	b.n	8000432 <__aeabi_dadd+0x212>
 80007e6:	1a17      	subs	r7, r2, r0
 80007e8:	4643      	mov	r3, r8
 80007ea:	42ba      	cmp	r2, r7
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	1a59      	subs	r1, r3, r1
 80007f0:	4252      	negs	r2, r2
 80007f2:	1a89      	subs	r1, r1, r2
 80007f4:	4664      	mov	r4, ip
 80007f6:	0035      	movs	r5, r6
 80007f8:	e543      	b.n	8000282 <__aeabi_dadd+0x62>
 80007fa:	4641      	mov	r1, r8
 80007fc:	0010      	movs	r0, r2
 80007fe:	4d14      	ldr	r5, [pc, #80]	; (8000850 <__aeabi_dadd+0x630>)
 8000800:	e610      	b.n	8000424 <__aeabi_dadd+0x204>
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	2400      	movs	r4, #0
 8000806:	0312      	lsls	r2, r2, #12
 8000808:	e680      	b.n	800050c <__aeabi_dadd+0x2ec>
 800080a:	001d      	movs	r5, r3
 800080c:	000f      	movs	r7, r1
 800080e:	3d20      	subs	r5, #32
 8000810:	40ef      	lsrs	r7, r5
 8000812:	46bc      	mov	ip, r7
 8000814:	2b20      	cmp	r3, #32
 8000816:	d003      	beq.n	8000820 <__aeabi_dadd+0x600>
 8000818:	2540      	movs	r5, #64	; 0x40
 800081a:	1aeb      	subs	r3, r5, r3
 800081c:	4099      	lsls	r1, r3
 800081e:	4308      	orrs	r0, r1
 8000820:	0007      	movs	r7, r0
 8000822:	4663      	mov	r3, ip
 8000824:	1e78      	subs	r0, r7, #1
 8000826:	4187      	sbcs	r7, r0
 8000828:	431f      	orrs	r7, r3
 800082a:	e769      	b.n	8000700 <__aeabi_dadd+0x4e0>
 800082c:	1887      	adds	r7, r0, r2
 800082e:	4297      	cmp	r7, r2
 8000830:	419b      	sbcs	r3, r3
 8000832:	4441      	add	r1, r8
 8000834:	425b      	negs	r3, r3
 8000836:	18c9      	adds	r1, r1, r3
 8000838:	0035      	movs	r5, r6
 800083a:	e5a3      	b.n	8000384 <__aeabi_dadd+0x164>
 800083c:	003b      	movs	r3, r7
 800083e:	4333      	orrs	r3, r6
 8000840:	d0ce      	beq.n	80007e0 <__aeabi_dadd+0x5c0>
 8000842:	2207      	movs	r2, #7
 8000844:	0031      	movs	r1, r6
 8000846:	403a      	ands	r2, r7
 8000848:	e652      	b.n	80004f0 <__aeabi_dadd+0x2d0>
 800084a:	2300      	movs	r3, #0
 800084c:	001a      	movs	r2, r3
 800084e:	e5f4      	b.n	800043a <__aeabi_dadd+0x21a>
 8000850:	000007ff 	.word	0x000007ff
 8000854:	ff7fffff 	.word	0xff7fffff

08000858 <__aeabi_ddiv>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	4657      	mov	r7, sl
 800085c:	46de      	mov	lr, fp
 800085e:	464e      	mov	r6, r9
 8000860:	4645      	mov	r5, r8
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	4683      	mov	fp, r0
 8000866:	0007      	movs	r7, r0
 8000868:	030e      	lsls	r6, r1, #12
 800086a:	0048      	lsls	r0, r1, #1
 800086c:	b085      	sub	sp, #20
 800086e:	4692      	mov	sl, r2
 8000870:	001c      	movs	r4, r3
 8000872:	0b36      	lsrs	r6, r6, #12
 8000874:	0d40      	lsrs	r0, r0, #21
 8000876:	0fcd      	lsrs	r5, r1, #31
 8000878:	2800      	cmp	r0, #0
 800087a:	d100      	bne.n	800087e <__aeabi_ddiv+0x26>
 800087c:	e09d      	b.n	80009ba <__aeabi_ddiv+0x162>
 800087e:	4b95      	ldr	r3, [pc, #596]	; (8000ad4 <__aeabi_ddiv+0x27c>)
 8000880:	4298      	cmp	r0, r3
 8000882:	d039      	beq.n	80008f8 <__aeabi_ddiv+0xa0>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	00f6      	lsls	r6, r6, #3
 8000888:	041b      	lsls	r3, r3, #16
 800088a:	431e      	orrs	r6, r3
 800088c:	4a92      	ldr	r2, [pc, #584]	; (8000ad8 <__aeabi_ddiv+0x280>)
 800088e:	0f7b      	lsrs	r3, r7, #29
 8000890:	4333      	orrs	r3, r6
 8000892:	4699      	mov	r9, r3
 8000894:	4694      	mov	ip, r2
 8000896:	0003      	movs	r3, r0
 8000898:	4463      	add	r3, ip
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2300      	movs	r3, #0
 800089e:	2600      	movs	r6, #0
 80008a0:	00ff      	lsls	r7, r7, #3
 80008a2:	9302      	str	r3, [sp, #8]
 80008a4:	0323      	lsls	r3, r4, #12
 80008a6:	0b1b      	lsrs	r3, r3, #12
 80008a8:	4698      	mov	r8, r3
 80008aa:	0063      	lsls	r3, r4, #1
 80008ac:	0fe4      	lsrs	r4, r4, #31
 80008ae:	4652      	mov	r2, sl
 80008b0:	0d5b      	lsrs	r3, r3, #21
 80008b2:	9401      	str	r4, [sp, #4]
 80008b4:	d100      	bne.n	80008b8 <__aeabi_ddiv+0x60>
 80008b6:	e0b3      	b.n	8000a20 <__aeabi_ddiv+0x1c8>
 80008b8:	4986      	ldr	r1, [pc, #536]	; (8000ad4 <__aeabi_ddiv+0x27c>)
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d100      	bne.n	80008c0 <__aeabi_ddiv+0x68>
 80008be:	e09e      	b.n	80009fe <__aeabi_ddiv+0x1a6>
 80008c0:	4642      	mov	r2, r8
 80008c2:	00d1      	lsls	r1, r2, #3
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0412      	lsls	r2, r2, #16
 80008c8:	430a      	orrs	r2, r1
 80008ca:	4651      	mov	r1, sl
 80008cc:	0f49      	lsrs	r1, r1, #29
 80008ce:	4311      	orrs	r1, r2
 80008d0:	468b      	mov	fp, r1
 80008d2:	4981      	ldr	r1, [pc, #516]	; (8000ad8 <__aeabi_ddiv+0x280>)
 80008d4:	4652      	mov	r2, sl
 80008d6:	468c      	mov	ip, r1
 80008d8:	9900      	ldr	r1, [sp, #0]
 80008da:	4463      	add	r3, ip
 80008dc:	1acb      	subs	r3, r1, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	002b      	movs	r3, r5
 80008e6:	4063      	eors	r3, r4
 80008e8:	469a      	mov	sl, r3
 80008ea:	2e0f      	cmp	r6, #15
 80008ec:	d900      	bls.n	80008f0 <__aeabi_ddiv+0x98>
 80008ee:	e105      	b.n	8000afc <__aeabi_ddiv+0x2a4>
 80008f0:	4b7a      	ldr	r3, [pc, #488]	; (8000adc <__aeabi_ddiv+0x284>)
 80008f2:	00b6      	lsls	r6, r6, #2
 80008f4:	599b      	ldr	r3, [r3, r6]
 80008f6:	469f      	mov	pc, r3
 80008f8:	465b      	mov	r3, fp
 80008fa:	4333      	orrs	r3, r6
 80008fc:	4699      	mov	r9, r3
 80008fe:	d000      	beq.n	8000902 <__aeabi_ddiv+0xaa>
 8000900:	e0b8      	b.n	8000a74 <__aeabi_ddiv+0x21c>
 8000902:	2302      	movs	r3, #2
 8000904:	2608      	movs	r6, #8
 8000906:	2700      	movs	r7, #0
 8000908:	9000      	str	r0, [sp, #0]
 800090a:	9302      	str	r3, [sp, #8]
 800090c:	e7ca      	b.n	80008a4 <__aeabi_ddiv+0x4c>
 800090e:	46cb      	mov	fp, r9
 8000910:	003a      	movs	r2, r7
 8000912:	9902      	ldr	r1, [sp, #8]
 8000914:	9501      	str	r5, [sp, #4]
 8000916:	9b01      	ldr	r3, [sp, #4]
 8000918:	469a      	mov	sl, r3
 800091a:	2902      	cmp	r1, #2
 800091c:	d027      	beq.n	800096e <__aeabi_ddiv+0x116>
 800091e:	2903      	cmp	r1, #3
 8000920:	d100      	bne.n	8000924 <__aeabi_ddiv+0xcc>
 8000922:	e280      	b.n	8000e26 <__aeabi_ddiv+0x5ce>
 8000924:	2901      	cmp	r1, #1
 8000926:	d044      	beq.n	80009b2 <__aeabi_ddiv+0x15a>
 8000928:	496d      	ldr	r1, [pc, #436]	; (8000ae0 <__aeabi_ddiv+0x288>)
 800092a:	9b00      	ldr	r3, [sp, #0]
 800092c:	468c      	mov	ip, r1
 800092e:	4463      	add	r3, ip
 8000930:	001c      	movs	r4, r3
 8000932:	2c00      	cmp	r4, #0
 8000934:	dd38      	ble.n	80009a8 <__aeabi_ddiv+0x150>
 8000936:	0753      	lsls	r3, r2, #29
 8000938:	d000      	beq.n	800093c <__aeabi_ddiv+0xe4>
 800093a:	e213      	b.n	8000d64 <__aeabi_ddiv+0x50c>
 800093c:	08d2      	lsrs	r2, r2, #3
 800093e:	465b      	mov	r3, fp
 8000940:	01db      	lsls	r3, r3, #7
 8000942:	d509      	bpl.n	8000958 <__aeabi_ddiv+0x100>
 8000944:	4659      	mov	r1, fp
 8000946:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <__aeabi_ddiv+0x28c>)
 8000948:	4019      	ands	r1, r3
 800094a:	468b      	mov	fp, r1
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	00c9      	lsls	r1, r1, #3
 8000950:	468c      	mov	ip, r1
 8000952:	9b00      	ldr	r3, [sp, #0]
 8000954:	4463      	add	r3, ip
 8000956:	001c      	movs	r4, r3
 8000958:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <__aeabi_ddiv+0x290>)
 800095a:	429c      	cmp	r4, r3
 800095c:	dc07      	bgt.n	800096e <__aeabi_ddiv+0x116>
 800095e:	465b      	mov	r3, fp
 8000960:	0564      	lsls	r4, r4, #21
 8000962:	075f      	lsls	r7, r3, #29
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	4317      	orrs	r7, r2
 8000968:	0b1b      	lsrs	r3, r3, #12
 800096a:	0d62      	lsrs	r2, r4, #21
 800096c:	e002      	b.n	8000974 <__aeabi_ddiv+0x11c>
 800096e:	2300      	movs	r3, #0
 8000970:	2700      	movs	r7, #0
 8000972:	4a58      	ldr	r2, [pc, #352]	; (8000ad4 <__aeabi_ddiv+0x27c>)
 8000974:	2100      	movs	r1, #0
 8000976:	031b      	lsls	r3, r3, #12
 8000978:	0b1c      	lsrs	r4, r3, #12
 800097a:	0d0b      	lsrs	r3, r1, #20
 800097c:	051b      	lsls	r3, r3, #20
 800097e:	4323      	orrs	r3, r4
 8000980:	0514      	lsls	r4, r2, #20
 8000982:	4a5a      	ldr	r2, [pc, #360]	; (8000aec <__aeabi_ddiv+0x294>)
 8000984:	0038      	movs	r0, r7
 8000986:	4013      	ands	r3, r2
 8000988:	431c      	orrs	r4, r3
 800098a:	4653      	mov	r3, sl
 800098c:	0064      	lsls	r4, r4, #1
 800098e:	07db      	lsls	r3, r3, #31
 8000990:	0864      	lsrs	r4, r4, #1
 8000992:	431c      	orrs	r4, r3
 8000994:	0021      	movs	r1, r4
 8000996:	b005      	add	sp, #20
 8000998:	bc3c      	pop	{r2, r3, r4, r5}
 800099a:	4690      	mov	r8, r2
 800099c:	4699      	mov	r9, r3
 800099e:	46a2      	mov	sl, r4
 80009a0:	46ab      	mov	fp, r5
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a4:	2201      	movs	r2, #1
 80009a6:	4252      	negs	r2, r2
 80009a8:	2301      	movs	r3, #1
 80009aa:	1b1b      	subs	r3, r3, r4
 80009ac:	2b38      	cmp	r3, #56	; 0x38
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_ddiv+0x15a>
 80009b0:	e1ad      	b.n	8000d0e <__aeabi_ddiv+0x4b6>
 80009b2:	2200      	movs	r2, #0
 80009b4:	2300      	movs	r3, #0
 80009b6:	2700      	movs	r7, #0
 80009b8:	e7dc      	b.n	8000974 <__aeabi_ddiv+0x11c>
 80009ba:	465b      	mov	r3, fp
 80009bc:	4333      	orrs	r3, r6
 80009be:	4699      	mov	r9, r3
 80009c0:	d05e      	beq.n	8000a80 <__aeabi_ddiv+0x228>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_ddiv+0x170>
 80009c6:	e18a      	b.n	8000cde <__aeabi_ddiv+0x486>
 80009c8:	0030      	movs	r0, r6
 80009ca:	f000 fab7 	bl	8000f3c <__clzsi2>
 80009ce:	0003      	movs	r3, r0
 80009d0:	3b0b      	subs	r3, #11
 80009d2:	2b1c      	cmp	r3, #28
 80009d4:	dd00      	ble.n	80009d8 <__aeabi_ddiv+0x180>
 80009d6:	e17b      	b.n	8000cd0 <__aeabi_ddiv+0x478>
 80009d8:	221d      	movs	r2, #29
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	465a      	mov	r2, fp
 80009de:	0001      	movs	r1, r0
 80009e0:	40da      	lsrs	r2, r3
 80009e2:	3908      	subs	r1, #8
 80009e4:	408e      	lsls	r6, r1
 80009e6:	0013      	movs	r3, r2
 80009e8:	465f      	mov	r7, fp
 80009ea:	4333      	orrs	r3, r6
 80009ec:	4699      	mov	r9, r3
 80009ee:	408f      	lsls	r7, r1
 80009f0:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <__aeabi_ddiv+0x298>)
 80009f2:	2600      	movs	r6, #0
 80009f4:	1a1b      	subs	r3, r3, r0
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	e752      	b.n	80008a4 <__aeabi_ddiv+0x4c>
 80009fe:	4641      	mov	r1, r8
 8000a00:	4653      	mov	r3, sl
 8000a02:	430b      	orrs	r3, r1
 8000a04:	493b      	ldr	r1, [pc, #236]	; (8000af4 <__aeabi_ddiv+0x29c>)
 8000a06:	469b      	mov	fp, r3
 8000a08:	468c      	mov	ip, r1
 8000a0a:	9b00      	ldr	r3, [sp, #0]
 8000a0c:	4463      	add	r3, ip
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	465b      	mov	r3, fp
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d13b      	bne.n	8000a8e <__aeabi_ddiv+0x236>
 8000a16:	2302      	movs	r3, #2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	431e      	orrs	r6, r3
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	e761      	b.n	80008e4 <__aeabi_ddiv+0x8c>
 8000a20:	4643      	mov	r3, r8
 8000a22:	4313      	orrs	r3, r2
 8000a24:	469b      	mov	fp, r3
 8000a26:	d037      	beq.n	8000a98 <__aeabi_ddiv+0x240>
 8000a28:	4643      	mov	r3, r8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_ddiv+0x1d8>
 8000a2e:	e162      	b.n	8000cf6 <__aeabi_ddiv+0x49e>
 8000a30:	4640      	mov	r0, r8
 8000a32:	f000 fa83 	bl	8000f3c <__clzsi2>
 8000a36:	0003      	movs	r3, r0
 8000a38:	3b0b      	subs	r3, #11
 8000a3a:	2b1c      	cmp	r3, #28
 8000a3c:	dd00      	ble.n	8000a40 <__aeabi_ddiv+0x1e8>
 8000a3e:	e153      	b.n	8000ce8 <__aeabi_ddiv+0x490>
 8000a40:	0002      	movs	r2, r0
 8000a42:	4641      	mov	r1, r8
 8000a44:	3a08      	subs	r2, #8
 8000a46:	4091      	lsls	r1, r2
 8000a48:	4688      	mov	r8, r1
 8000a4a:	211d      	movs	r1, #29
 8000a4c:	1acb      	subs	r3, r1, r3
 8000a4e:	4651      	mov	r1, sl
 8000a50:	40d9      	lsrs	r1, r3
 8000a52:	000b      	movs	r3, r1
 8000a54:	4641      	mov	r1, r8
 8000a56:	430b      	orrs	r3, r1
 8000a58:	469b      	mov	fp, r3
 8000a5a:	4653      	mov	r3, sl
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	001a      	movs	r2, r3
 8000a60:	9b00      	ldr	r3, [sp, #0]
 8000a62:	4925      	ldr	r1, [pc, #148]	; (8000af8 <__aeabi_ddiv+0x2a0>)
 8000a64:	469c      	mov	ip, r3
 8000a66:	4460      	add	r0, ip
 8000a68:	0003      	movs	r3, r0
 8000a6a:	468c      	mov	ip, r1
 8000a6c:	4463      	add	r3, ip
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2100      	movs	r1, #0
 8000a72:	e737      	b.n	80008e4 <__aeabi_ddiv+0x8c>
 8000a74:	2303      	movs	r3, #3
 8000a76:	46b1      	mov	r9, r6
 8000a78:	9000      	str	r0, [sp, #0]
 8000a7a:	260c      	movs	r6, #12
 8000a7c:	9302      	str	r3, [sp, #8]
 8000a7e:	e711      	b.n	80008a4 <__aeabi_ddiv+0x4c>
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	2604      	movs	r6, #4
 8000a88:	2700      	movs	r7, #0
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	e70a      	b.n	80008a4 <__aeabi_ddiv+0x4c>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	46c3      	mov	fp, r8
 8000a92:	431e      	orrs	r6, r3
 8000a94:	2103      	movs	r1, #3
 8000a96:	e725      	b.n	80008e4 <__aeabi_ddiv+0x8c>
 8000a98:	3301      	adds	r3, #1
 8000a9a:	431e      	orrs	r6, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	e720      	b.n	80008e4 <__aeabi_ddiv+0x8c>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	469a      	mov	sl, r3
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	2700      	movs	r7, #0
 8000aaa:	031b      	lsls	r3, r3, #12
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <__aeabi_ddiv+0x27c>)
 8000aae:	e761      	b.n	8000974 <__aeabi_ddiv+0x11c>
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	031b      	lsls	r3, r3, #12
 8000ab6:	4219      	tst	r1, r3
 8000ab8:	d100      	bne.n	8000abc <__aeabi_ddiv+0x264>
 8000aba:	e0e2      	b.n	8000c82 <__aeabi_ddiv+0x42a>
 8000abc:	4659      	mov	r1, fp
 8000abe:	4219      	tst	r1, r3
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_ddiv+0x26c>
 8000ac2:	e0de      	b.n	8000c82 <__aeabi_ddiv+0x42a>
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	031b      	lsls	r3, r3, #12
 8000ac8:	0017      	movs	r7, r2
 8000aca:	0b1b      	lsrs	r3, r3, #12
 8000acc:	46a2      	mov	sl, r4
 8000ace:	4a01      	ldr	r2, [pc, #4]	; (8000ad4 <__aeabi_ddiv+0x27c>)
 8000ad0:	e750      	b.n	8000974 <__aeabi_ddiv+0x11c>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	000007ff 	.word	0x000007ff
 8000ad8:	fffffc01 	.word	0xfffffc01
 8000adc:	080046c8 	.word	0x080046c8
 8000ae0:	000003ff 	.word	0x000003ff
 8000ae4:	feffffff 	.word	0xfeffffff
 8000ae8:	000007fe 	.word	0x000007fe
 8000aec:	800fffff 	.word	0x800fffff
 8000af0:	fffffc0d 	.word	0xfffffc0d
 8000af4:	fffff801 	.word	0xfffff801
 8000af8:	000003f3 	.word	0x000003f3
 8000afc:	45d9      	cmp	r9, fp
 8000afe:	d900      	bls.n	8000b02 <__aeabi_ddiv+0x2aa>
 8000b00:	e0cb      	b.n	8000c9a <__aeabi_ddiv+0x442>
 8000b02:	d100      	bne.n	8000b06 <__aeabi_ddiv+0x2ae>
 8000b04:	e0c6      	b.n	8000c94 <__aeabi_ddiv+0x43c>
 8000b06:	003c      	movs	r4, r7
 8000b08:	4648      	mov	r0, r9
 8000b0a:	2700      	movs	r7, #0
 8000b0c:	9b00      	ldr	r3, [sp, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	465b      	mov	r3, fp
 8000b14:	0e16      	lsrs	r6, r2, #24
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	431e      	orrs	r6, r3
 8000b1a:	0213      	lsls	r3, r2, #8
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	0433      	lsls	r3, r6, #16
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	4699      	mov	r9, r3
 8000b24:	0c31      	lsrs	r1, r6, #16
 8000b26:	9101      	str	r1, [sp, #4]
 8000b28:	f7ff fb74 	bl	8000214 <__aeabi_uidivmod>
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	4342      	muls	r2, r0
 8000b30:	040b      	lsls	r3, r1, #16
 8000b32:	0c21      	lsrs	r1, r4, #16
 8000b34:	0005      	movs	r5, r0
 8000b36:	4319      	orrs	r1, r3
 8000b38:	428a      	cmp	r2, r1
 8000b3a:	d907      	bls.n	8000b4c <__aeabi_ddiv+0x2f4>
 8000b3c:	1989      	adds	r1, r1, r6
 8000b3e:	3d01      	subs	r5, #1
 8000b40:	428e      	cmp	r6, r1
 8000b42:	d803      	bhi.n	8000b4c <__aeabi_ddiv+0x2f4>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	d901      	bls.n	8000b4c <__aeabi_ddiv+0x2f4>
 8000b48:	1e85      	subs	r5, r0, #2
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	1a88      	subs	r0, r1, r2
 8000b4e:	9901      	ldr	r1, [sp, #4]
 8000b50:	f7ff fb60 	bl	8000214 <__aeabi_uidivmod>
 8000b54:	0409      	lsls	r1, r1, #16
 8000b56:	468c      	mov	ip, r1
 8000b58:	464a      	mov	r2, r9
 8000b5a:	0421      	lsls	r1, r4, #16
 8000b5c:	4664      	mov	r4, ip
 8000b5e:	4342      	muls	r2, r0
 8000b60:	0c09      	lsrs	r1, r1, #16
 8000b62:	0003      	movs	r3, r0
 8000b64:	4321      	orrs	r1, r4
 8000b66:	428a      	cmp	r2, r1
 8000b68:	d904      	bls.n	8000b74 <__aeabi_ddiv+0x31c>
 8000b6a:	1989      	adds	r1, r1, r6
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	428e      	cmp	r6, r1
 8000b70:	d800      	bhi.n	8000b74 <__aeabi_ddiv+0x31c>
 8000b72:	e0f1      	b.n	8000d58 <__aeabi_ddiv+0x500>
 8000b74:	042d      	lsls	r5, r5, #16
 8000b76:	431d      	orrs	r5, r3
 8000b78:	46ab      	mov	fp, r5
 8000b7a:	4643      	mov	r3, r8
 8000b7c:	1a89      	subs	r1, r1, r2
 8000b7e:	4642      	mov	r2, r8
 8000b80:	0c28      	lsrs	r0, r5, #16
 8000b82:	0412      	lsls	r2, r2, #16
 8000b84:	0c1d      	lsrs	r5, r3, #16
 8000b86:	465b      	mov	r3, fp
 8000b88:	0c14      	lsrs	r4, r2, #16
 8000b8a:	0022      	movs	r2, r4
 8000b8c:	041b      	lsls	r3, r3, #16
 8000b8e:	0c1b      	lsrs	r3, r3, #16
 8000b90:	435a      	muls	r2, r3
 8000b92:	9403      	str	r4, [sp, #12]
 8000b94:	436b      	muls	r3, r5
 8000b96:	4344      	muls	r4, r0
 8000b98:	9502      	str	r5, [sp, #8]
 8000b9a:	4368      	muls	r0, r5
 8000b9c:	191b      	adds	r3, r3, r4
 8000b9e:	0c15      	lsrs	r5, r2, #16
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	d903      	bls.n	8000bae <__aeabi_ddiv+0x356>
 8000ba6:	2480      	movs	r4, #128	; 0x80
 8000ba8:	0264      	lsls	r4, r4, #9
 8000baa:	46a4      	mov	ip, r4
 8000bac:	4460      	add	r0, ip
 8000bae:	0c1c      	lsrs	r4, r3, #16
 8000bb0:	0415      	lsls	r5, r2, #16
 8000bb2:	041b      	lsls	r3, r3, #16
 8000bb4:	0c2d      	lsrs	r5, r5, #16
 8000bb6:	1820      	adds	r0, r4, r0
 8000bb8:	195d      	adds	r5, r3, r5
 8000bba:	4281      	cmp	r1, r0
 8000bbc:	d377      	bcc.n	8000cae <__aeabi_ddiv+0x456>
 8000bbe:	d073      	beq.n	8000ca8 <__aeabi_ddiv+0x450>
 8000bc0:	1a0c      	subs	r4, r1, r0
 8000bc2:	4aa2      	ldr	r2, [pc, #648]	; (8000e4c <__aeabi_ddiv+0x5f4>)
 8000bc4:	1b7d      	subs	r5, r7, r5
 8000bc6:	42af      	cmp	r7, r5
 8000bc8:	41bf      	sbcs	r7, r7
 8000bca:	4694      	mov	ip, r2
 8000bcc:	9b00      	ldr	r3, [sp, #0]
 8000bce:	427f      	negs	r7, r7
 8000bd0:	4463      	add	r3, ip
 8000bd2:	1be0      	subs	r0, r4, r7
 8000bd4:	001c      	movs	r4, r3
 8000bd6:	4286      	cmp	r6, r0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_ddiv+0x384>
 8000bda:	e0db      	b.n	8000d94 <__aeabi_ddiv+0x53c>
 8000bdc:	9901      	ldr	r1, [sp, #4]
 8000bde:	f7ff fb19 	bl	8000214 <__aeabi_uidivmod>
 8000be2:	464a      	mov	r2, r9
 8000be4:	4342      	muls	r2, r0
 8000be6:	040b      	lsls	r3, r1, #16
 8000be8:	0c29      	lsrs	r1, r5, #16
 8000bea:	0007      	movs	r7, r0
 8000bec:	4319      	orrs	r1, r3
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	d907      	bls.n	8000c02 <__aeabi_ddiv+0x3aa>
 8000bf2:	1989      	adds	r1, r1, r6
 8000bf4:	3f01      	subs	r7, #1
 8000bf6:	428e      	cmp	r6, r1
 8000bf8:	d803      	bhi.n	8000c02 <__aeabi_ddiv+0x3aa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	d901      	bls.n	8000c02 <__aeabi_ddiv+0x3aa>
 8000bfe:	1e87      	subs	r7, r0, #2
 8000c00:	1989      	adds	r1, r1, r6
 8000c02:	1a88      	subs	r0, r1, r2
 8000c04:	9901      	ldr	r1, [sp, #4]
 8000c06:	f7ff fb05 	bl	8000214 <__aeabi_uidivmod>
 8000c0a:	0409      	lsls	r1, r1, #16
 8000c0c:	464a      	mov	r2, r9
 8000c0e:	4689      	mov	r9, r1
 8000c10:	0429      	lsls	r1, r5, #16
 8000c12:	464d      	mov	r5, r9
 8000c14:	4342      	muls	r2, r0
 8000c16:	0c09      	lsrs	r1, r1, #16
 8000c18:	0003      	movs	r3, r0
 8000c1a:	4329      	orrs	r1, r5
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	d907      	bls.n	8000c30 <__aeabi_ddiv+0x3d8>
 8000c20:	1989      	adds	r1, r1, r6
 8000c22:	3b01      	subs	r3, #1
 8000c24:	428e      	cmp	r6, r1
 8000c26:	d803      	bhi.n	8000c30 <__aeabi_ddiv+0x3d8>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	d901      	bls.n	8000c30 <__aeabi_ddiv+0x3d8>
 8000c2c:	1e83      	subs	r3, r0, #2
 8000c2e:	1989      	adds	r1, r1, r6
 8000c30:	043f      	lsls	r7, r7, #16
 8000c32:	1a89      	subs	r1, r1, r2
 8000c34:	003a      	movs	r2, r7
 8000c36:	9f03      	ldr	r7, [sp, #12]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	0038      	movs	r0, r7
 8000c3c:	0413      	lsls	r3, r2, #16
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	4358      	muls	r0, r3
 8000c42:	4681      	mov	r9, r0
 8000c44:	9802      	ldr	r0, [sp, #8]
 8000c46:	0c15      	lsrs	r5, r2, #16
 8000c48:	436f      	muls	r7, r5
 8000c4a:	4343      	muls	r3, r0
 8000c4c:	4345      	muls	r5, r0
 8000c4e:	4648      	mov	r0, r9
 8000c50:	0c00      	lsrs	r0, r0, #16
 8000c52:	4684      	mov	ip, r0
 8000c54:	19db      	adds	r3, r3, r7
 8000c56:	4463      	add	r3, ip
 8000c58:	429f      	cmp	r7, r3
 8000c5a:	d903      	bls.n	8000c64 <__aeabi_ddiv+0x40c>
 8000c5c:	2080      	movs	r0, #128	; 0x80
 8000c5e:	0240      	lsls	r0, r0, #9
 8000c60:	4684      	mov	ip, r0
 8000c62:	4465      	add	r5, ip
 8000c64:	4648      	mov	r0, r9
 8000c66:	0c1f      	lsrs	r7, r3, #16
 8000c68:	0400      	lsls	r0, r0, #16
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	0c00      	lsrs	r0, r0, #16
 8000c6e:	197d      	adds	r5, r7, r5
 8000c70:	1818      	adds	r0, r3, r0
 8000c72:	42a9      	cmp	r1, r5
 8000c74:	d200      	bcs.n	8000c78 <__aeabi_ddiv+0x420>
 8000c76:	e084      	b.n	8000d82 <__aeabi_ddiv+0x52a>
 8000c78:	d100      	bne.n	8000c7c <__aeabi_ddiv+0x424>
 8000c7a:	e07f      	b.n	8000d7c <__aeabi_ddiv+0x524>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	e657      	b.n	8000932 <__aeabi_ddiv+0xda>
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	464a      	mov	r2, r9
 8000c86:	031b      	lsls	r3, r3, #12
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	031b      	lsls	r3, r3, #12
 8000c8c:	0b1b      	lsrs	r3, r3, #12
 8000c8e:	46aa      	mov	sl, r5
 8000c90:	4a6f      	ldr	r2, [pc, #444]	; (8000e50 <__aeabi_ddiv+0x5f8>)
 8000c92:	e66f      	b.n	8000974 <__aeabi_ddiv+0x11c>
 8000c94:	42ba      	cmp	r2, r7
 8000c96:	d900      	bls.n	8000c9a <__aeabi_ddiv+0x442>
 8000c98:	e735      	b.n	8000b06 <__aeabi_ddiv+0x2ae>
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	07dc      	lsls	r4, r3, #31
 8000c9e:	0858      	lsrs	r0, r3, #1
 8000ca0:	087b      	lsrs	r3, r7, #1
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	07ff      	lsls	r7, r7, #31
 8000ca6:	e734      	b.n	8000b12 <__aeabi_ddiv+0x2ba>
 8000ca8:	2400      	movs	r4, #0
 8000caa:	42af      	cmp	r7, r5
 8000cac:	d289      	bcs.n	8000bc2 <__aeabi_ddiv+0x36a>
 8000cae:	4447      	add	r7, r8
 8000cb0:	4547      	cmp	r7, r8
 8000cb2:	41a4      	sbcs	r4, r4
 8000cb4:	465b      	mov	r3, fp
 8000cb6:	4264      	negs	r4, r4
 8000cb8:	19a4      	adds	r4, r4, r6
 8000cba:	1864      	adds	r4, r4, r1
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	42a6      	cmp	r6, r4
 8000cc0:	d21e      	bcs.n	8000d00 <__aeabi_ddiv+0x4a8>
 8000cc2:	42a0      	cmp	r0, r4
 8000cc4:	d86d      	bhi.n	8000da2 <__aeabi_ddiv+0x54a>
 8000cc6:	d100      	bne.n	8000cca <__aeabi_ddiv+0x472>
 8000cc8:	e0b6      	b.n	8000e38 <__aeabi_ddiv+0x5e0>
 8000cca:	1a24      	subs	r4, r4, r0
 8000ccc:	469b      	mov	fp, r3
 8000cce:	e778      	b.n	8000bc2 <__aeabi_ddiv+0x36a>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	465a      	mov	r2, fp
 8000cd4:	3b28      	subs	r3, #40	; 0x28
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	2700      	movs	r7, #0
 8000cda:	4691      	mov	r9, r2
 8000cdc:	e688      	b.n	80009f0 <__aeabi_ddiv+0x198>
 8000cde:	4658      	mov	r0, fp
 8000ce0:	f000 f92c 	bl	8000f3c <__clzsi2>
 8000ce4:	3020      	adds	r0, #32
 8000ce6:	e672      	b.n	80009ce <__aeabi_ddiv+0x176>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	4652      	mov	r2, sl
 8000cec:	3b28      	subs	r3, #40	; 0x28
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	4693      	mov	fp, r2
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	e6b4      	b.n	8000a60 <__aeabi_ddiv+0x208>
 8000cf6:	4650      	mov	r0, sl
 8000cf8:	f000 f920 	bl	8000f3c <__clzsi2>
 8000cfc:	3020      	adds	r0, #32
 8000cfe:	e69a      	b.n	8000a36 <__aeabi_ddiv+0x1de>
 8000d00:	42a6      	cmp	r6, r4
 8000d02:	d1e2      	bne.n	8000cca <__aeabi_ddiv+0x472>
 8000d04:	45b8      	cmp	r8, r7
 8000d06:	d9dc      	bls.n	8000cc2 <__aeabi_ddiv+0x46a>
 8000d08:	1a34      	subs	r4, r6, r0
 8000d0a:	469b      	mov	fp, r3
 8000d0c:	e759      	b.n	8000bc2 <__aeabi_ddiv+0x36a>
 8000d0e:	2b1f      	cmp	r3, #31
 8000d10:	dc65      	bgt.n	8000dde <__aeabi_ddiv+0x586>
 8000d12:	4c50      	ldr	r4, [pc, #320]	; (8000e54 <__aeabi_ddiv+0x5fc>)
 8000d14:	9900      	ldr	r1, [sp, #0]
 8000d16:	46a4      	mov	ip, r4
 8000d18:	465c      	mov	r4, fp
 8000d1a:	4461      	add	r1, ip
 8000d1c:	0008      	movs	r0, r1
 8000d1e:	408c      	lsls	r4, r1
 8000d20:	0011      	movs	r1, r2
 8000d22:	4082      	lsls	r2, r0
 8000d24:	40d9      	lsrs	r1, r3
 8000d26:	1e50      	subs	r0, r2, #1
 8000d28:	4182      	sbcs	r2, r0
 8000d2a:	430c      	orrs	r4, r1
 8000d2c:	4314      	orrs	r4, r2
 8000d2e:	465a      	mov	r2, fp
 8000d30:	40da      	lsrs	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	0762      	lsls	r2, r4, #29
 8000d36:	d009      	beq.n	8000d4c <__aeabi_ddiv+0x4f4>
 8000d38:	220f      	movs	r2, #15
 8000d3a:	4022      	ands	r2, r4
 8000d3c:	2a04      	cmp	r2, #4
 8000d3e:	d005      	beq.n	8000d4c <__aeabi_ddiv+0x4f4>
 8000d40:	0022      	movs	r2, r4
 8000d42:	1d14      	adds	r4, r2, #4
 8000d44:	4294      	cmp	r4, r2
 8000d46:	4189      	sbcs	r1, r1
 8000d48:	4249      	negs	r1, r1
 8000d4a:	185b      	adds	r3, r3, r1
 8000d4c:	021a      	lsls	r2, r3, #8
 8000d4e:	d562      	bpl.n	8000e16 <__aeabi_ddiv+0x5be>
 8000d50:	2201      	movs	r2, #1
 8000d52:	2300      	movs	r3, #0
 8000d54:	2700      	movs	r7, #0
 8000d56:	e60d      	b.n	8000974 <__aeabi_ddiv+0x11c>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	d800      	bhi.n	8000d5e <__aeabi_ddiv+0x506>
 8000d5c:	e70a      	b.n	8000b74 <__aeabi_ddiv+0x31c>
 8000d5e:	1e83      	subs	r3, r0, #2
 8000d60:	1989      	adds	r1, r1, r6
 8000d62:	e707      	b.n	8000b74 <__aeabi_ddiv+0x31c>
 8000d64:	230f      	movs	r3, #15
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_ddiv+0x516>
 8000d6c:	e5e6      	b.n	800093c <__aeabi_ddiv+0xe4>
 8000d6e:	1d17      	adds	r7, r2, #4
 8000d70:	4297      	cmp	r7, r2
 8000d72:	4192      	sbcs	r2, r2
 8000d74:	4253      	negs	r3, r2
 8000d76:	449b      	add	fp, r3
 8000d78:	08fa      	lsrs	r2, r7, #3
 8000d7a:	e5e0      	b.n	800093e <__aeabi_ddiv+0xe6>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x52a>
 8000d80:	e5d7      	b.n	8000932 <__aeabi_ddiv+0xda>
 8000d82:	1871      	adds	r1, r6, r1
 8000d84:	1e53      	subs	r3, r2, #1
 8000d86:	42b1      	cmp	r1, r6
 8000d88:	d327      	bcc.n	8000dda <__aeabi_ddiv+0x582>
 8000d8a:	42a9      	cmp	r1, r5
 8000d8c:	d315      	bcc.n	8000dba <__aeabi_ddiv+0x562>
 8000d8e:	d058      	beq.n	8000e42 <__aeabi_ddiv+0x5ea>
 8000d90:	001a      	movs	r2, r3
 8000d92:	e773      	b.n	8000c7c <__aeabi_ddiv+0x424>
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_ddiv+0x542>
 8000d98:	e604      	b.n	80009a4 <__aeabi_ddiv+0x14c>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	449b      	add	fp, r3
 8000da0:	e5cd      	b.n	800093e <__aeabi_ddiv+0xe6>
 8000da2:	2302      	movs	r3, #2
 8000da4:	4447      	add	r7, r8
 8000da6:	4547      	cmp	r7, r8
 8000da8:	4189      	sbcs	r1, r1
 8000daa:	425b      	negs	r3, r3
 8000dac:	469c      	mov	ip, r3
 8000dae:	4249      	negs	r1, r1
 8000db0:	1989      	adds	r1, r1, r6
 8000db2:	190c      	adds	r4, r1, r4
 8000db4:	44e3      	add	fp, ip
 8000db6:	1a24      	subs	r4, r4, r0
 8000db8:	e703      	b.n	8000bc2 <__aeabi_ddiv+0x36a>
 8000dba:	4643      	mov	r3, r8
 8000dbc:	005f      	lsls	r7, r3, #1
 8000dbe:	4547      	cmp	r7, r8
 8000dc0:	419b      	sbcs	r3, r3
 8000dc2:	46b8      	mov	r8, r7
 8000dc4:	425b      	negs	r3, r3
 8000dc6:	199e      	adds	r6, r3, r6
 8000dc8:	3a02      	subs	r2, #2
 8000dca:	1989      	adds	r1, r1, r6
 8000dcc:	42a9      	cmp	r1, r5
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_ddiv+0x57a>
 8000dd0:	e754      	b.n	8000c7c <__aeabi_ddiv+0x424>
 8000dd2:	4540      	cmp	r0, r8
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_ddiv+0x580>
 8000dd6:	e751      	b.n	8000c7c <__aeabi_ddiv+0x424>
 8000dd8:	e5ab      	b.n	8000932 <__aeabi_ddiv+0xda>
 8000dda:	001a      	movs	r2, r3
 8000ddc:	e7f6      	b.n	8000dcc <__aeabi_ddiv+0x574>
 8000dde:	211f      	movs	r1, #31
 8000de0:	465f      	mov	r7, fp
 8000de2:	4249      	negs	r1, r1
 8000de4:	1b0c      	subs	r4, r1, r4
 8000de6:	40e7      	lsrs	r7, r4
 8000de8:	2b20      	cmp	r3, #32
 8000dea:	d007      	beq.n	8000dfc <__aeabi_ddiv+0x5a4>
 8000dec:	491a      	ldr	r1, [pc, #104]	; (8000e58 <__aeabi_ddiv+0x600>)
 8000dee:	9b00      	ldr	r3, [sp, #0]
 8000df0:	468c      	mov	ip, r1
 8000df2:	4463      	add	r3, ip
 8000df4:	0018      	movs	r0, r3
 8000df6:	465b      	mov	r3, fp
 8000df8:	4083      	lsls	r3, r0
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	1e50      	subs	r0, r2, #1
 8000dfe:	4182      	sbcs	r2, r0
 8000e00:	433a      	orrs	r2, r7
 8000e02:	2707      	movs	r7, #7
 8000e04:	2300      	movs	r3, #0
 8000e06:	4017      	ands	r7, r2
 8000e08:	d009      	beq.n	8000e1e <__aeabi_ddiv+0x5c6>
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	4011      	ands	r1, r2
 8000e10:	0014      	movs	r4, r2
 8000e12:	2904      	cmp	r1, #4
 8000e14:	d195      	bne.n	8000d42 <__aeabi_ddiv+0x4ea>
 8000e16:	0022      	movs	r2, r4
 8000e18:	075f      	lsls	r7, r3, #29
 8000e1a:	025b      	lsls	r3, r3, #9
 8000e1c:	0b1b      	lsrs	r3, r3, #12
 8000e1e:	08d2      	lsrs	r2, r2, #3
 8000e20:	4317      	orrs	r7, r2
 8000e22:	2200      	movs	r2, #0
 8000e24:	e5a6      	b.n	8000974 <__aeabi_ddiv+0x11c>
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	4659      	mov	r1, fp
 8000e2a:	031b      	lsls	r3, r3, #12
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	031b      	lsls	r3, r3, #12
 8000e30:	0017      	movs	r7, r2
 8000e32:	0b1b      	lsrs	r3, r3, #12
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <__aeabi_ddiv+0x5f8>)
 8000e36:	e59d      	b.n	8000974 <__aeabi_ddiv+0x11c>
 8000e38:	42bd      	cmp	r5, r7
 8000e3a:	d8b2      	bhi.n	8000da2 <__aeabi_ddiv+0x54a>
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	2400      	movs	r4, #0
 8000e40:	e6bf      	b.n	8000bc2 <__aeabi_ddiv+0x36a>
 8000e42:	4580      	cmp	r8, r0
 8000e44:	d3b9      	bcc.n	8000dba <__aeabi_ddiv+0x562>
 8000e46:	001a      	movs	r2, r3
 8000e48:	e7c3      	b.n	8000dd2 <__aeabi_ddiv+0x57a>
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	000003ff 	.word	0x000003ff
 8000e50:	000007ff 	.word	0x000007ff
 8000e54:	0000041e 	.word	0x0000041e
 8000e58:	0000043e 	.word	0x0000043e

08000e5c <__aeabi_d2iz>:
 8000e5c:	b530      	push	{r4, r5, lr}
 8000e5e:	4d14      	ldr	r5, [pc, #80]	; (8000eb0 <__aeabi_d2iz+0x54>)
 8000e60:	030a      	lsls	r2, r1, #12
 8000e62:	004b      	lsls	r3, r1, #1
 8000e64:	0b12      	lsrs	r2, r2, #12
 8000e66:	0d5b      	lsrs	r3, r3, #21
 8000e68:	0fc9      	lsrs	r1, r1, #31
 8000e6a:	2400      	movs	r4, #0
 8000e6c:	42ab      	cmp	r3, r5
 8000e6e:	dd11      	ble.n	8000e94 <__aeabi_d2iz+0x38>
 8000e70:	4c10      	ldr	r4, [pc, #64]	; (8000eb4 <__aeabi_d2iz+0x58>)
 8000e72:	42a3      	cmp	r3, r4
 8000e74:	dc10      	bgt.n	8000e98 <__aeabi_d2iz+0x3c>
 8000e76:	2480      	movs	r4, #128	; 0x80
 8000e78:	0364      	lsls	r4, r4, #13
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	4c0e      	ldr	r4, [pc, #56]	; (8000eb8 <__aeabi_d2iz+0x5c>)
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	2c1f      	cmp	r4, #31
 8000e82:	dd0c      	ble.n	8000e9e <__aeabi_d2iz+0x42>
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <__aeabi_d2iz+0x60>)
 8000e86:	1ac3      	subs	r3, r0, r3
 8000e88:	40da      	lsrs	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	425c      	negs	r4, r3
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_d2iz+0x38>
 8000e92:	001c      	movs	r4, r3
 8000e94:	0020      	movs	r0, r4
 8000e96:	bd30      	pop	{r4, r5, pc}
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <__aeabi_d2iz+0x64>)
 8000e9a:	18cc      	adds	r4, r1, r3
 8000e9c:	e7fa      	b.n	8000e94 <__aeabi_d2iz+0x38>
 8000e9e:	4d09      	ldr	r5, [pc, #36]	; (8000ec4 <__aeabi_d2iz+0x68>)
 8000ea0:	40e0      	lsrs	r0, r4
 8000ea2:	46ac      	mov	ip, r5
 8000ea4:	4463      	add	r3, ip
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	4303      	orrs	r3, r0
 8000eac:	e7ee      	b.n	8000e8c <__aeabi_d2iz+0x30>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	000003fe 	.word	0x000003fe
 8000eb4:	0000041d 	.word	0x0000041d
 8000eb8:	00000433 	.word	0x00000433
 8000ebc:	00000413 	.word	0x00000413
 8000ec0:	7fffffff 	.word	0x7fffffff
 8000ec4:	fffffbed 	.word	0xfffffbed

08000ec8 <__aeabi_i2d>:
 8000ec8:	b570      	push	{r4, r5, r6, lr}
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d02d      	beq.n	8000f2a <__aeabi_i2d+0x62>
 8000ece:	17c3      	asrs	r3, r0, #31
 8000ed0:	18c5      	adds	r5, r0, r3
 8000ed2:	405d      	eors	r5, r3
 8000ed4:	0fc4      	lsrs	r4, r0, #31
 8000ed6:	0028      	movs	r0, r5
 8000ed8:	f000 f830 	bl	8000f3c <__clzsi2>
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <__aeabi_i2d+0x6c>)
 8000ede:	1a1b      	subs	r3, r3, r0
 8000ee0:	055b      	lsls	r3, r3, #21
 8000ee2:	0d5b      	lsrs	r3, r3, #21
 8000ee4:	280a      	cmp	r0, #10
 8000ee6:	dd15      	ble.n	8000f14 <__aeabi_i2d+0x4c>
 8000ee8:	380b      	subs	r0, #11
 8000eea:	4085      	lsls	r5, r0
 8000eec:	2200      	movs	r2, #0
 8000eee:	032d      	lsls	r5, r5, #12
 8000ef0:	0b2d      	lsrs	r5, r5, #12
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	032d      	lsls	r5, r5, #12
 8000ef8:	0d0a      	lsrs	r2, r1, #20
 8000efa:	0b2d      	lsrs	r5, r5, #12
 8000efc:	0512      	lsls	r2, r2, #20
 8000efe:	432a      	orrs	r2, r5
 8000f00:	4d0d      	ldr	r5, [pc, #52]	; (8000f38 <__aeabi_i2d+0x70>)
 8000f02:	051b      	lsls	r3, r3, #20
 8000f04:	402a      	ands	r2, r5
 8000f06:	4313      	orrs	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	07e4      	lsls	r4, r4, #31
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	0019      	movs	r1, r3
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	0002      	movs	r2, r0
 8000f16:	0029      	movs	r1, r5
 8000f18:	3215      	adds	r2, #21
 8000f1a:	4091      	lsls	r1, r2
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	210b      	movs	r1, #11
 8000f20:	1a08      	subs	r0, r1, r0
 8000f22:	40c5      	lsrs	r5, r0
 8000f24:	032d      	lsls	r5, r5, #12
 8000f26:	0b2d      	lsrs	r5, r5, #12
 8000f28:	e7e3      	b.n	8000ef2 <__aeabi_i2d+0x2a>
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2500      	movs	r5, #0
 8000f30:	2200      	movs	r2, #0
 8000f32:	e7de      	b.n	8000ef2 <__aeabi_i2d+0x2a>
 8000f34:	0000041e 	.word	0x0000041e
 8000f38:	800fffff 	.word	0x800fffff

08000f3c <__clzsi2>:
 8000f3c:	211c      	movs	r1, #28
 8000f3e:	2301      	movs	r3, #1
 8000f40:	041b      	lsls	r3, r3, #16
 8000f42:	4298      	cmp	r0, r3
 8000f44:	d301      	bcc.n	8000f4a <__clzsi2+0xe>
 8000f46:	0c00      	lsrs	r0, r0, #16
 8000f48:	3910      	subs	r1, #16
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	d301      	bcc.n	8000f54 <__clzsi2+0x18>
 8000f50:	0a00      	lsrs	r0, r0, #8
 8000f52:	3908      	subs	r1, #8
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	4298      	cmp	r0, r3
 8000f58:	d301      	bcc.n	8000f5e <__clzsi2+0x22>
 8000f5a:	0900      	lsrs	r0, r0, #4
 8000f5c:	3904      	subs	r1, #4
 8000f5e:	a202      	add	r2, pc, #8	; (adr r2, 8000f68 <__clzsi2+0x2c>)
 8000f60:	5c10      	ldrb	r0, [r2, r0]
 8000f62:	1840      	adds	r0, r0, r1
 8000f64:	4770      	bx	lr
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	02020304 	.word	0x02020304
 8000f6c:	01010101 	.word	0x01010101
	...

08000f78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_Init+0x24>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_Init+0x24>)
 8000f82:	2110      	movs	r1, #16
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f809 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8e:	f002 fb0f 	bl	80035b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000fa8:	f000 ff80 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8000fac:	0002      	movs	r2, r0
 8000fae:	23fa      	movs	r3, #250	; 0xfa
 8000fb0:	0099      	lsls	r1, r3, #2
 8000fb2:	0010      	movs	r0, r2
 8000fb4:	f7ff f8a8 	bl	8000108 <__udivsi3>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 f8e7 	bl	800118e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 f8cb 	bl	8001164 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  uwTick++;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_IncTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_IncTick+0x14>)
 8000fe4:	601a      	str	r2, [r3, #0]
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000f4 	.word	0x200000f4

08000ff0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <HAL_GetTick+0x10>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	200000f4 	.word	0x200000f4

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff fff0 	bl	8000ff0 <HAL_GetTick>
 8001010:	0003      	movs	r3, r0
 8001012:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	d002      	beq.n	8001024 <HAL_Delay+0x20>
  {
     wait++;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	f7ff ffe3 	bl	8000ff0 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	429a      	cmp	r2, r3
 8001034:	d8f7      	bhi.n	8001026 <HAL_Delay+0x22>
  {
  }
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	0002      	movs	r2, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b7f      	cmp	r3, #127	; 0x7f
 8001054:	d932      	bls.n	80010bc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001056:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <NVIC_SetPriority+0xd4>)
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	0019      	movs	r1, r3
 800105e:	230f      	movs	r3, #15
 8001060:	400b      	ands	r3, r1
 8001062:	3b08      	subs	r3, #8
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3306      	adds	r3, #6
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	18d3      	adds	r3, r2, r3
 800106c:	3304      	adds	r3, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1dfa      	adds	r2, r7, #7
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	0011      	movs	r1, r2
 8001076:	2203      	movs	r2, #3
 8001078:	400a      	ands	r2, r1
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	21ff      	movs	r1, #255	; 0xff
 800107e:	4091      	lsls	r1, r2
 8001080:	000a      	movs	r2, r1
 8001082:	43d2      	mvns	r2, r2
 8001084:	401a      	ands	r2, r3
 8001086:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	019b      	lsls	r3, r3, #6
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	401a      	ands	r2, r3
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	0018      	movs	r0, r3
 8001096:	2303      	movs	r3, #3
 8001098:	4003      	ands	r3, r0
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109e:	481d      	ldr	r0, [pc, #116]	; (8001114 <NVIC_SetPriority+0xd4>)
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	001c      	movs	r4, r3
 80010a6:	230f      	movs	r3, #15
 80010a8:	4023      	ands	r3, r4
 80010aa:	3b08      	subs	r3, #8
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	430a      	orrs	r2, r1
 80010b0:	3306      	adds	r3, #6
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	18c3      	adds	r3, r0, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ba:	e027      	b.n	800110c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4a16      	ldr	r2, [pc, #88]	; (8001118 <NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	33c0      	adds	r3, #192	; 0xc0
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	589b      	ldr	r3, [r3, r2]
 80010cc:	1dfa      	adds	r2, r7, #7
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	0011      	movs	r1, r2
 80010d2:	2203      	movs	r2, #3
 80010d4:	400a      	ands	r2, r1
 80010d6:	00d2      	lsls	r2, r2, #3
 80010d8:	21ff      	movs	r1, #255	; 0xff
 80010da:	4091      	lsls	r1, r2
 80010dc:	000a      	movs	r2, r1
 80010de:	43d2      	mvns	r2, r2
 80010e0:	401a      	ands	r2, r3
 80010e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	019b      	lsls	r3, r3, #6
 80010e8:	22ff      	movs	r2, #255	; 0xff
 80010ea:	401a      	ands	r2, r3
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	0018      	movs	r0, r3
 80010f2:	2303      	movs	r3, #3
 80010f4:	4003      	ands	r3, r0
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <NVIC_SetPriority+0xd8>)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	430a      	orrs	r2, r1
 8001106:	33c0      	adds	r3, #192	; 0xc0
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	501a      	str	r2, [r3, r0]
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b003      	add	sp, #12
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	e000ed00 	.word	0xe000ed00
 8001118:	e000e100 	.word	0xe000e100

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <SysTick_Config+0x40>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d901      	bls.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e010      	b.n	8001154 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <SysTick_Config+0x44>)
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	3a01      	subs	r2, #1
 8001138:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	2301      	movs	r3, #1
 800113c:	425b      	negs	r3, r3
 800113e:	2103      	movs	r1, #3
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ff7d 	bl	8001040 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SysTick_Config+0x44>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x44>)
 800114e:	2207      	movs	r2, #7
 8001150:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	00ffffff 	.word	0x00ffffff
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	210f      	movs	r1, #15
 8001170:	187b      	adds	r3, r7, r1
 8001172:	1c02      	adds	r2, r0, #0
 8001174:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	187b      	adds	r3, r7, r1
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <NVIC_SetPriority>
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b004      	add	sp, #16
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ffbf 	bl	800111c <SysTick_Config>
 800119e:	0003      	movs	r3, r0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011be:	e155      	b.n	800146c <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4091      	lsls	r1, r2
 80011ca:	000a      	movs	r2, r1
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d100      	bne.n	80011d8 <HAL_GPIO_Init+0x30>
 80011d6:	e146      	b.n	8001466 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x40>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b12      	cmp	r3, #18
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	58d3      	ldr	r3, [r2, r3]
 80011f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2207      	movs	r2, #7
 80011fa:	4013      	ands	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2107      	movs	r1, #7
 8001214:	400b      	ands	r3, r1
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	6939      	ldr	r1, [r7, #16]
 800122e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2203      	movs	r2, #3
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d00b      	beq.n	8001284 <HAL_GPIO_Init+0xdc>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001278:	2b11      	cmp	r3, #17
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d130      	bne.n	80012e6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80012ba:	2201      	movs	r2, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	43da      	mvns	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	2201      	movs	r2, #1
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	43da      	mvns	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	055b      	lsls	r3, r3, #21
 800131e:	4013      	ands	r3, r2
 8001320:	d100      	bne.n	8001324 <HAL_GPIO_Init+0x17c>
 8001322:	e0a0      	b.n	8001466 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800132a:	2101      	movs	r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	4b54      	ldr	r3, [pc, #336]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	2201      	movs	r2, #1
 8001336:	4013      	ands	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800133c:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_GPIO_Init+0x2e0>)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	589b      	ldr	r3, [r3, r2]
 8001348:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2203      	movs	r2, #3
 800134e:	4013      	ands	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	409a      	lsls	r2, r3
 8001356:	0013      	movs	r3, r2
 8001358:	43da      	mvns	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	2390      	movs	r3, #144	; 0x90
 8001364:	05db      	lsls	r3, r3, #23
 8001366:	429a      	cmp	r2, r3
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x1f6>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a47      	ldr	r2, [pc, #284]	; (800148c <HAL_GPIO_Init+0x2e4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x1f2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a46      	ldr	r2, [pc, #280]	; (8001490 <HAL_GPIO_Init+0x2e8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x1ee>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a45      	ldr	r2, [pc, #276]	; (8001494 <HAL_GPIO_Init+0x2ec>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x1ea>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a44      	ldr	r2, [pc, #272]	; (8001498 <HAL_GPIO_Init+0x2f0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x1e6>
 800138a:	2304      	movs	r3, #4
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x1f8>
 800138e:	2305      	movs	r3, #5
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x1f8>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x1f8>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x1f8>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x1f8>
 800139e:	2300      	movs	r3, #0
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	2103      	movs	r1, #3
 80013a4:	400a      	ands	r2, r1
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013b0:	4935      	ldr	r1, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x2e0>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_GPIO_Init+0x2f4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	4013      	ands	r3, r2
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_GPIO_Init+0x2f4>)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_GPIO_Init+0x2f4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43da      	mvns	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	029b      	lsls	r3, r3, #10
 8001400:	4013      	ands	r3, r2
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_GPIO_Init+0x2f4>)
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_GPIO_Init+0x2f4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	035b      	lsls	r3, r3, #13
 800142a:	4013      	ands	r3, r2
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_GPIO_Init+0x2f4>)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_GPIO_Init+0x2f4>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	039b      	lsls	r3, r3, #14
 8001454:	4013      	ands	r3, r2
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_GPIO_Init+0x2f4>)
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	40da      	lsrs	r2, r3
 8001474:	1e13      	subs	r3, r2, #0
 8001476:	d000      	beq.n	800147a <HAL_GPIO_Init+0x2d2>
 8001478:	e6a2      	b.n	80011c0 <HAL_GPIO_Init+0x18>
  } 
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b006      	add	sp, #24
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	48000400 	.word	0x48000400
 8001490:	48000800 	.word	0x48000800
 8001494:	48000c00 	.word	0x48000c00
 8001498:	48001000 	.word	0x48001000
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	0008      	movs	r0, r1
 80014aa:	0011      	movs	r1, r2
 80014ac:	1cbb      	adds	r3, r7, #2
 80014ae:	1c02      	adds	r2, r0, #0
 80014b0:	801a      	strh	r2, [r3, #0]
 80014b2:	1c7b      	adds	r3, r7, #1
 80014b4:	1c0a      	adds	r2, r1, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b8:	1c7b      	adds	r3, r7, #1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c0:	1cbb      	adds	r3, r7, #2
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ca:	1cbb      	adds	r3, r7, #2
 80014cc:	881a      	ldrh	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	d100      	bne.n	80014f4 <HAL_RCC_OscConfig+0x18>
 80014f2:	e08d      	b.n	8001610 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014f4:	4bc5      	ldr	r3, [pc, #788]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	220c      	movs	r2, #12
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d00e      	beq.n	800151e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001500:	4bc2      	ldr	r3, [pc, #776]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	220c      	movs	r2, #12
 8001506:	4013      	ands	r3, r2
 8001508:	2b08      	cmp	r3, #8
 800150a:	d116      	bne.n	800153a <HAL_RCC_OscConfig+0x5e>
 800150c:	4bbf      	ldr	r3, [pc, #764]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	23c0      	movs	r3, #192	; 0xc0
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	401a      	ands	r2, r3
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	025b      	lsls	r3, r3, #9
 800151a:	429a      	cmp	r2, r3
 800151c:	d10d      	bne.n	800153a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151e:	4bbb      	ldr	r3, [pc, #748]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	029b      	lsls	r3, r3, #10
 8001526:	4013      	ands	r3, r2
 8001528:	d100      	bne.n	800152c <HAL_RCC_OscConfig+0x50>
 800152a:	e070      	b.n	800160e <HAL_RCC_OscConfig+0x132>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d000      	beq.n	8001536 <HAL_RCC_OscConfig+0x5a>
 8001534:	e06b      	b.n	800160e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e329      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_RCC_OscConfig+0x76>
 8001542:	4bb2      	ldr	r3, [pc, #712]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4bb1      	ldr	r3, [pc, #708]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e02f      	b.n	80015b2 <HAL_RCC_OscConfig+0xd6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x98>
 800155a:	4bac      	ldr	r3, [pc, #688]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4bab      	ldr	r3, [pc, #684]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001560:	49ab      	ldr	r1, [pc, #684]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 8001562:	400a      	ands	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	4ba9      	ldr	r3, [pc, #676]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4ba8      	ldr	r3, [pc, #672]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800156c:	49a9      	ldr	r1, [pc, #676]	; (8001814 <HAL_RCC_OscConfig+0x338>)
 800156e:	400a      	ands	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e01e      	b.n	80015b2 <HAL_RCC_OscConfig+0xd6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d10e      	bne.n	800159a <HAL_RCC_OscConfig+0xbe>
 800157c:	4ba3      	ldr	r3, [pc, #652]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4ba2      	ldr	r3, [pc, #648]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	02c9      	lsls	r1, r1, #11
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	4ba0      	ldr	r3, [pc, #640]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b9f      	ldr	r3, [pc, #636]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	0249      	lsls	r1, r1, #9
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0xd6>
 800159a:	4b9c      	ldr	r3, [pc, #624]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b9b      	ldr	r3, [pc, #620]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80015a0:	499b      	ldr	r1, [pc, #620]	; (8001810 <HAL_RCC_OscConfig+0x334>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	4b99      	ldr	r3, [pc, #612]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b98      	ldr	r3, [pc, #608]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80015ac:	4999      	ldr	r1, [pc, #612]	; (8001814 <HAL_RCC_OscConfig+0x338>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d014      	beq.n	80015e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fd19 	bl	8000ff0 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fd14 	bl	8000ff0 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e2db      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe8>
 80015e2:	e015      	b.n	8001610 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fd04 	bl	8000ff0 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ee:	f7ff fcff 	bl	8000ff0 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	; 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e2c6      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001600:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	4013      	ands	r3, r2
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x112>
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2202      	movs	r2, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d100      	bne.n	800161c <HAL_RCC_OscConfig+0x140>
 800161a:	e06c      	b.n	80016f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800161c:	4b7b      	ldr	r3, [pc, #492]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	220c      	movs	r2, #12
 8001622:	4013      	ands	r3, r2
 8001624:	d00e      	beq.n	8001644 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001626:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	220c      	movs	r2, #12
 800162c:	4013      	ands	r3, r2
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11f      	bne.n	8001672 <HAL_RCC_OscConfig+0x196>
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	23c0      	movs	r3, #192	; 0xc0
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	401a      	ands	r2, r3
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	429a      	cmp	r2, r3
 8001642:	d116      	bne.n	8001672 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001644:	4b71      	ldr	r3, [pc, #452]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2202      	movs	r2, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x17e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e299      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b6c      	ldr	r3, [pc, #432]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	22f8      	movs	r2, #248	; 0xf8
 8001660:	4393      	bics	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	00da      	lsls	r2, r3, #3
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001670:	e041      	b.n	80016f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d024      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167a:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001680:	2101      	movs	r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fcb3 	bl	8000ff0 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fcae 	bl	8000ff0 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e275      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f1      	beq.n	8001690 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ac:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	22f8      	movs	r2, #248	; 0xf8
 80016b2:	4393      	bics	r3, r2
 80016b4:	0019      	movs	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e018      	b.n	80016f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c4:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	438a      	bics	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc8e 	bl	8000ff0 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fc89 	bl	8000ff0 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e250      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ec:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f1      	bne.n	80016da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2208      	movs	r2, #8
 80016fc:	4013      	ands	r3, r2
 80016fe:	d036      	beq.n	800176e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d019      	beq.n	800173c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001708:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800170a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800170e:	2101      	movs	r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff fc6c 	bl	8000ff0 <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff fc67 	bl	8000ff0 <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e22e      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	2202      	movs	r2, #2
 8001736:	4013      	ands	r3, r2
 8001738:	d0f1      	beq.n	800171e <HAL_RCC_OscConfig+0x242>
 800173a:	e018      	b.n	800176e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001742:	2101      	movs	r1, #1
 8001744:	438a      	bics	r2, r1
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff fc52 	bl	8000ff0 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff fc4d 	bl	8000ff0 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e214      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d1f1      	bne.n	8001752 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2204      	movs	r2, #4
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x29e>
 8001778:	e0b6      	b.n	80018e8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2317      	movs	r3, #23
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	055b      	lsls	r3, r3, #21
 800178a:	4013      	ands	r3, r2
 800178c:	d111      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	0549      	lsls	r1, r1, #21
 8001798:	430a      	orrs	r2, r1
 800179a:	61da      	str	r2, [r3, #28]
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x330>)
 800179e:	69da      	ldr	r2, [r3, #28]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	055b      	lsls	r3, r3, #21
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017aa:	2317      	movs	r3, #23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_OscConfig+0x33c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	d11a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_RCC_OscConfig+0x33c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_OscConfig+0x33c>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0049      	lsls	r1, r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fc10 	bl	8000ff0 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff fc0b 	bl	8000ff0 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b64      	cmp	r3, #100	; 0x64
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1d2      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x33c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10f      	bne.n	800181c <HAL_RCC_OscConfig+0x340>
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_RCC_OscConfig+0x330>)
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4b02      	ldr	r3, [pc, #8]	; (800180c <HAL_RCC_OscConfig+0x330>)
 8001802:	2101      	movs	r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	621a      	str	r2, [r3, #32]
 8001808:	e036      	b.n	8001878 <HAL_RCC_OscConfig+0x39c>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40021000 	.word	0x40021000
 8001810:	fffeffff 	.word	0xfffeffff
 8001814:	fffbffff 	.word	0xfffbffff
 8001818:	40007000 	.word	0x40007000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x362>
 8001824:	4bca      	ldr	r3, [pc, #808]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	4bc9      	ldr	r3, [pc, #804]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800182a:	2101      	movs	r1, #1
 800182c:	438a      	bics	r2, r1
 800182e:	621a      	str	r2, [r3, #32]
 8001830:	4bc7      	ldr	r3, [pc, #796]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4bc6      	ldr	r3, [pc, #792]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001836:	2104      	movs	r1, #4
 8001838:	438a      	bics	r2, r1
 800183a:	621a      	str	r2, [r3, #32]
 800183c:	e01c      	b.n	8001878 <HAL_RCC_OscConfig+0x39c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x384>
 8001846:	4bc2      	ldr	r3, [pc, #776]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001848:	6a1a      	ldr	r2, [r3, #32]
 800184a:	4bc1      	ldr	r3, [pc, #772]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800184c:	2104      	movs	r1, #4
 800184e:	430a      	orrs	r2, r1
 8001850:	621a      	str	r2, [r3, #32]
 8001852:	4bbf      	ldr	r3, [pc, #764]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	4bbe      	ldr	r3, [pc, #760]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	621a      	str	r2, [r3, #32]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0x39c>
 8001860:	4bbb      	ldr	r3, [pc, #748]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	4bba      	ldr	r3, [pc, #744]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	621a      	str	r2, [r3, #32]
 800186c:	4bb8      	ldr	r3, [pc, #736]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4bb7      	ldr	r3, [pc, #732]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001872:	2104      	movs	r1, #4
 8001874:	438a      	bics	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d014      	beq.n	80018aa <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fbb6 	bl	8000ff0 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	e009      	b.n	800189e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff fbb1 	bl	8000ff0 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4aaf      	ldr	r2, [pc, #700]	; (8001b54 <HAL_RCC_OscConfig+0x678>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e177      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	4bac      	ldr	r3, [pc, #688]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x3ae>
 80018a8:	e013      	b.n	80018d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fba1 	bl	8000ff0 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	e009      	b.n	80018c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fb9c 	bl	8000ff0 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4aa5      	ldr	r2, [pc, #660]	; (8001b54 <HAL_RCC_OscConfig+0x678>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e162      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4ba1      	ldr	r3, [pc, #644]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018d2:	2317      	movs	r3, #23
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b9c      	ldr	r3, [pc, #624]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	4b9b      	ldr	r3, [pc, #620]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80018e2:	499d      	ldr	r1, [pc, #628]	; (8001b58 <HAL_RCC_OscConfig+0x67c>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2210      	movs	r2, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d12a      	bne.n	8001950 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018fa:	4b95      	ldr	r3, [pc, #596]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001900:	2104      	movs	r1, #4
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001906:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190a:	4b91      	ldr	r3, [pc, #580]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800190c:	2101      	movs	r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff fb6d 	bl	8000ff0 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800191c:	f7ff fb68 	bl	8000ff0 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e12f      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800192e:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d0f1      	beq.n	800191c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001938:	4b85      	ldr	r3, [pc, #532]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	22f8      	movs	r2, #248	; 0xf8
 800193e:	4393      	bics	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	00da      	lsls	r2, r3, #3
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34
 800194e:	e034      	b.n	80019ba <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	3305      	adds	r3, #5
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001958:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800195a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800195e:	2104      	movs	r1, #4
 8001960:	438a      	bics	r2, r1
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001964:	4b7a      	ldr	r3, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001968:	22f8      	movs	r2, #248	; 0xf8
 800196a:	4393      	bics	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	00da      	lsls	r2, r3, #3
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001976:	430a      	orrs	r2, r1
 8001978:	635a      	str	r2, [r3, #52]	; 0x34
 800197a:	e01e      	b.n	80019ba <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800197c:	4b74      	ldr	r3, [pc, #464]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800197e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001980:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001982:	2104      	movs	r1, #4
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 800198e:	2101      	movs	r1, #1
 8001990:	438a      	bics	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fb2c 	bl	8000ff0 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800199e:	f7ff fb27 	bl	8000ff0 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0ee      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019b0:	4b67      	ldr	r3, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f1      	bne.n	800199e <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2220      	movs	r2, #32
 80019c0:	4013      	ands	r3, r2
 80019c2:	d05c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	220c      	movs	r2, #12
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d00e      	beq.n	80019ee <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019d0:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	220c      	movs	r2, #12
 80019d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d114      	bne.n	8001a06 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80019dc:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	401a      	ands	r2, r3
 80019e6:	23c0      	movs	r3, #192	; 0xc0
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d10b      	bne.n	8001a06 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019ee:	4b58      	ldr	r3, [pc, #352]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 80019f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	4013      	ands	r3, r2
 80019f8:	d040      	beq.n	8001a7c <HAL_RCC_OscConfig+0x5a0>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d03c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0c3      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01b      	beq.n	8001a46 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a12:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0249      	lsls	r1, r1, #9
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fae8 	bl	8000ff0 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a26:	f7ff fae3 	bl	8000ff0 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0aa      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a38:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x54a>
 8001a44:	e01b      	b.n	8001a7e <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a46:	4b42      	ldr	r3, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a4c:	4943      	ldr	r1, [pc, #268]	; (8001b5c <HAL_RCC_OscConfig+0x680>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff facd 	bl	8000ff0 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5c:	f7ff fac8 	bl	8000ff0 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e08f      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	025b      	lsls	r3, r3, #9
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x580>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a7c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d100      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5ac>
 8001a86:	e081      	b.n	8001b8c <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	220c      	movs	r2, #12
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d100      	bne.n	8001a96 <HAL_RCC_OscConfig+0x5ba>
 8001a94:	e078      	b.n	8001b88 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d14c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001aa4:	492e      	ldr	r1, [pc, #184]	; (8001b60 <HAL_RCC_OscConfig+0x684>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff faa1 	bl	8000ff0 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff fa9c 	bl	8000ff0 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e063      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	049b      	lsls	r3, r3, #18
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_RCC_OscConfig+0x688>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	431a      	orrs	r2, r3
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0449      	lsls	r1, r1, #17
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fa6f 	bl	8000ff0 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff fa6a 	bl	8000ff0 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e031      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	049b      	lsls	r3, r3, #18
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x63c>
 8001b36:	e029      	b.n	8001b8c <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCC_OscConfig+0x674>)
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <HAL_RCC_OscConfig+0x684>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fa54 	bl	8000ff0 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x69e>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40021000 	.word	0x40021000
 8001b54:	00001388 	.word	0x00001388
 8001b58:	efffffff 	.word	0xefffffff
 8001b5c:	fffeffff 	.word	0xfffeffff
 8001b60:	feffffff 	.word	0xfeffffff
 8001b64:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa42 	bl	8000ff0 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCC_OscConfig+0x6bc>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	049b      	lsls	r3, r3, #18
 8001b82:	4013      	ands	r3, r2
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x68c>
 8001b86:	e001      	b.n	8001b8c <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b006      	add	sp, #24
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001baa:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d911      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb8:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4393      	bics	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0d8      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be6:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	22f0      	movs	r2, #240	; 0xf0
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x6a>
 8001c04:	e089      	b.n	8001d1a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	4013      	ands	r3, r2
 8001c18:	d120      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0b7      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	049b      	lsls	r3, r3, #18
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d114      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0ab      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	025b      	lsls	r3, r3, #9
 8001c46:	4013      	ands	r3, r2
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e09f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e098      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4393      	bics	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff f9be 	bl	8000ff0 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d111      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff f9b5 	bl	8000ff0 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a44      	ldr	r2, [pc, #272]	; (8001da0 <HAL_RCC_ClockConfig+0x204>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e07b      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d1ef      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xe6>
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d111      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cac:	e009      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7ff f99f 	bl	8000ff0 <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a39      	ldr	r2, [pc, #228]	; (8001da0 <HAL_RCC_ClockConfig+0x204>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e065      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d1ef      	bne.n	8001cae <HAL_RCC_ClockConfig+0x112>
 8001cce:	e024      	b.n	8001d1a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d11b      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f7ff f989 	bl	8000ff0 <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a2e      	ldr	r2, [pc, #184]	; (8001da0 <HAL_RCC_ClockConfig+0x204>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e04f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_ClockConfig+0x13e>
 8001cfa:	e00e      	b.n	8001d1a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f978 	bl	8000ff0 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <HAL_RCC_ClockConfig+0x204>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e03e      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	220c      	movs	r2, #12
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d211      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e020      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2204      	movs	r2, #4
 8001d52:	4013      	ands	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_RCC_ClockConfig+0x208>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d6a:	f000 f821 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d6e:	0001      	movs	r1, r0
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x200>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	220f      	movs	r2, #15
 8001d78:	4013      	ands	r3, r2
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_RCC_ClockConfig+0x20c>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	000a      	movs	r2, r1
 8001d80:	40da      	lsrs	r2, r3
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x210>)
 8001d84:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff f90a 	bl	8000fa0 <HAL_InitTick>
  
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	00001388 	.word	0x00001388
 8001da4:	fffff8ff 	.word	0xfffff8ff
 8001da8:	08004708 	.word	0x08004708
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b08f      	sub	sp, #60	; 0x3c
 8001db4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001db6:	2314      	movs	r3, #20
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	4a37      	ldr	r2, [pc, #220]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xec>)
 8001dc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dca:	c313      	stmia	r3!, {r0, r1, r4}
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd8:	2300      	movs	r3, #0
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	220c      	movs	r2, #12
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d006      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x52>
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d043      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xd0>
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d144      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e00:	e044      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	220f      	movs	r2, #15
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2214      	movs	r2, #20
 8001e0c:	18ba      	adds	r2, r7, r2
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	220f      	movs	r2, #15
 8001e18:	4013      	ands	r3, r2
 8001e1a:	1d3a      	adds	r2, r7, #4
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	401a      	ands	r2, r3
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e32:	481c      	ldr	r0, [pc, #112]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e34:	f7fe f968 	bl	8000108 <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	4353      	muls	r3, r2
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
 8001e42:	e01a      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	23c0      	movs	r3, #192	; 0xc0
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e58:	f7fe f956 	bl	8000108 <__udivsi3>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	001a      	movs	r2, r3
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	4353      	muls	r3, r2
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e6c:	f7fe f94c 	bl	8000108 <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	001a      	movs	r2, r3
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	4353      	muls	r3, r2
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e84:	e002      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b00f      	add	sp, #60	; 0x3c
 8001e94:	bd90      	pop	{r4, r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	080046a8 	.word	0x080046a8
 8001e9c:	080046b8 	.word	0x080046b8
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	02dc6c00 	.word	0x02dc6c00

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ec4:	f7ff fff2 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ec8:	0001      	movs	r1, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	40d9      	lsrs	r1, r3
 8001eda:	000b      	movs	r3, r1
}    
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004718 	.word	0x08004718

08001eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f08:	e08f      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	055b      	lsls	r3, r3, #21
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d111      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	4b6b      	ldr	r3, [pc, #428]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	61da      	str	r2, [r3, #28]
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b64      	ldr	r3, [pc, #400]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b61      	ldr	r3, [pc, #388]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b60      	ldr	r3, [pc, #384]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f848 	bl	8000ff0 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff f843 	bl	8000ff0 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0a6      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f84:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	23c0      	movs	r3, #192	; 0xc0
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d034      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	23c0      	movs	r3, #192	; 0xc0
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d02c      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa6:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fb0:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0249      	lsls	r1, r1, #9
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbe:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fc4:	4945      	ldr	r1, [pc, #276]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d013      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f80a 	bl	8000ff0 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	e009      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f805 	bl	8000ff0 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e067      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a34      	ldr	r2, [pc, #208]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002010:	430a      	orrs	r2, r1
 8002012:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002014:	2317      	movs	r3, #23
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002024:	492f      	ldr	r1, [pc, #188]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002026:	400a      	ands	r2, r1
 8002028:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	2203      	movs	r2, #3
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002044:	430a      	orrs	r2, r1
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2202      	movs	r2, #2
 800204e:	4013      	ands	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002062:	430a      	orrs	r2, r1
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	4013      	ands	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	2210      	movs	r2, #16
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002080:	430a      	orrs	r2, r1
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	4393      	bics	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b006      	add	sp, #24
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	fffffcff 	.word	0xfffffcff
 80020dc:	fffeffff 	.word	0xfffeffff
 80020e0:	00001388 	.word	0x00001388
 80020e4:	efffffff 	.word	0xefffffff
 80020e8:	fffcffff 	.word	0xfffcffff

080020ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e08a      	b.n	8002214 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	225d      	movs	r2, #93	; 0x5d
 8002108:	5c9b      	ldrb	r3, [r3, r2]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	225c      	movs	r2, #92	; 0x5c
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f001 fa6c 	bl	80035f8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	225d      	movs	r2, #93	; 0x5d
 8002124:	2102      	movs	r1, #2
 8002126:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	438a      	bics	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	23e0      	movs	r3, #224	; 0xe0
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	429a      	cmp	r2, r3
 8002142:	d902      	bls.n	800214a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e002      	b.n	8002150 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	23f0      	movs	r3, #240	; 0xf0
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	429a      	cmp	r2, r3
 800215a:	d008      	beq.n	800216e <HAL_SPI_Init+0x82>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	23e0      	movs	r3, #224	; 0xe0
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	429a      	cmp	r2, r3
 8002166:	d002      	beq.n	800216e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	23e0      	movs	r3, #224	; 0xe0
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	429a      	cmp	r2, r3
 8002180:	d903      	bls.n	800218a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
 8002188:	e002      	b.n	8002190 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6999      	ldr	r1, [r3, #24]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	400b      	ands	r3, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	431a      	orrs	r2, r3
 80021be:	0011      	movs	r1, r2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	2204      	movs	r2, #4
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	0011      	movs	r1, r2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4907      	ldr	r1, [pc, #28]	; (800221c <HAL_SPI_Init+0x130>)
 8002200:	400a      	ands	r2, r1
 8002202:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	225d      	movs	r2, #93	; 0x5d
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b004      	add	sp, #16
 800221a:	bd80      	pop	{r7, pc}
 800221c:	fffff7ff 	.word	0xfffff7ff

08002220 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	1dbb      	adds	r3, r7, #6
 800222e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	225c      	movs	r2, #92	; 0x5c
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_SPI_Transmit+0x2a>
 8002246:	2302      	movs	r3, #2
 8002248:	e14f      	b.n	80024ea <HAL_SPI_Transmit+0x2ca>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	225c      	movs	r2, #92	; 0x5c
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002252:	f7fe fecd 	bl	8000ff0 <HAL_GetTick>
 8002256:	0003      	movs	r3, r0
 8002258:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	225d      	movs	r2, #93	; 0x5d
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d004      	beq.n	8002270 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8002266:	231f      	movs	r3, #31
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2202      	movs	r2, #2
 800226c:	701a      	strb	r2, [r3, #0]
    goto error;
 800226e:	e131      	b.n	80024d4 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_SPI_Transmit+0x5e>
 8002276:	1dbb      	adds	r3, r7, #6
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 800227e:	231f      	movs	r3, #31
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
    goto error;
 8002286:	e125      	b.n	80024d4 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	225d      	movs	r2, #93	; 0x5d
 800228c:	2103      	movs	r1, #3
 800228e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1dba      	adds	r2, r7, #6
 80022a0:	8812      	ldrh	r2, [r2, #0]
 80022a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1dba      	adds	r2, r7, #6
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2244      	movs	r2, #68	; 0x44
 80022b6:	2100      	movs	r1, #0
 80022b8:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2246      	movs	r2, #70	; 0x46
 80022be:	2100      	movs	r1, #0
 80022c0:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d108      	bne.n	80022ec <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	01c9      	lsls	r1, r1, #7
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d007      	beq.n	800230a <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2140      	movs	r1, #64	; 0x40
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	23e0      	movs	r3, #224	; 0xe0
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	429a      	cmp	r2, r3
 8002314:	d948      	bls.n	80023a8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_SPI_Transmit+0x108>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d139      	bne.n	800239c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3302      	adds	r3, #2
 8002336:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002346:	e029      	b.n	800239c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2202      	movs	r2, #2
 8002350:	4013      	ands	r3, r2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d10f      	bne.n	8002376 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	881a      	ldrh	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	3302      	adds	r3, #2
 8002364:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002374:	e012      	b.n	800239c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_SPI_Transmit+0x172>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	d00c      	beq.n	800239c <HAL_SPI_Transmit+0x17c>
 8002382:	f7fe fe35 	bl	8000ff0 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d804      	bhi.n	800239c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002392:	231f      	movs	r3, #31
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2203      	movs	r2, #3
 8002398:	701a      	strb	r2, [r3, #0]
          goto error;
 800239a:	e09b      	b.n	80024d4 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1d0      	bne.n	8002348 <HAL_SPI_Transmit+0x128>
 80023a6:	e071      	b.n	800248c <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_SPI_Transmit+0x19a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d163      	bne.n	8002482 <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d90f      	bls.n	80023e4 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3302      	adds	r3, #2
 80023d2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b02      	subs	r3, #2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023e2:	e04e      	b.n	8002482 <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	60ba      	str	r2, [r7, #8]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	320c      	adds	r2, #12
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002402:	e03e      	b.n	8002482 <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2202      	movs	r2, #2
 800240c:	4013      	ands	r3, r2
 800240e:	2b02      	cmp	r3, #2
 8002410:	d124      	bne.n	800245c <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d90f      	bls.n	800243c <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	881a      	ldrh	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3302      	adds	r3, #2
 800242a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b02      	subs	r3, #2
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800243a:	e022      	b.n	8002482 <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	320c      	adds	r2, #12
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	87da      	strh	r2, [r3, #62]	; 0x3e
 800245a:	e012      	b.n	8002482 <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_SPI_Transmit+0x258>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	d00c      	beq.n	8002482 <HAL_SPI_Transmit+0x262>
 8002468:	f7fe fdc2 	bl	8000ff0 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d804      	bhi.n	8002482 <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8002478:	231f      	movs	r3, #31
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2203      	movs	r2, #3
 800247e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002480:	e028      	b.n	80024d4 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1bb      	bne.n	8002404 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 f916 	bl	80026c4 <SPI_EndRxTxTransaction>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d002      	beq.n	80024a2 <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 80024c8:	231f      	movs	r3, #31
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e000      	b.n	80024d4 <HAL_SPI_Transmit+0x2b4>
  }

error:
 80024d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	225d      	movs	r2, #93	; 0x5d
 80024d8:	2101      	movs	r1, #1
 80024da:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	225c      	movs	r2, #92	; 0x5c
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024e4:	231f      	movs	r3, #31
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b008      	add	sp, #32
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002502:	e050      	b.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	d04d      	beq.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002510:	f7fe fd6e 	bl	8000ff0 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d842      	bhi.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	21e0      	movs	r1, #224	; 0xe0
 800252c:	438a      	bics	r2, r1
 800252e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	2382      	movs	r3, #130	; 0x82
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	429a      	cmp	r2, r3
 800253a:	d113      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x70>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	429a      	cmp	r2, r3
 8002546:	d005      	beq.n	8002554 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	429a      	cmp	r2, r3
 8002552:	d107      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	438a      	bics	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	429a      	cmp	r2, r3
 800256e:	d110      	bne.n	8002592 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4914      	ldr	r1, [pc, #80]	; (80025cc <SPI_WaitFlagStateUntilTimeout+0xd8>)
 800257c:	400a      	ands	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	0189      	lsls	r1, r1, #6
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	225d      	movs	r2, #93	; 0x5d
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	225c      	movs	r2, #92	; 0x5c
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e00e      	b.n	80025c4 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d101      	bne.n	80025ba <SPI_WaitFlagStateUntilTimeout+0xc6>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <SPI_WaitFlagStateUntilTimeout+0xc8>
 80025ba:	2300      	movs	r3, #0
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d1a0      	bne.n	8002504 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	ffffdfff 	.word	0xffffdfff

080025d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80025de:	e062      	b.n	80026a6 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	23c0      	movs	r3, #192	; 0xc0
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d10c      	bne.n	8002604 <SPI_WaitFifoStateUntilTimeout+0x34>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	2117      	movs	r1, #23
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002600:	187b      	adds	r3, r7, r1
 8002602:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	3301      	adds	r3, #1
 8002608:	d04d      	beq.n	80026a6 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <SPI_WaitFifoStateUntilTimeout+0x50>
 8002610:	f7fe fcee 	bl	8000ff0 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d842      	bhi.n	80026a6 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	21e0      	movs	r1, #224	; 0xe0
 800262c:	438a      	bics	r2, r1
 800262e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	2382      	movs	r3, #130	; 0x82
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d113      	bne.n	8002664 <SPI_WaitFifoStateUntilTimeout+0x94>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	429a      	cmp	r2, r3
 8002646:	d005      	beq.n	8002654 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	438a      	bics	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	019b      	lsls	r3, r3, #6
 800266c:	429a      	cmp	r2, r3
 800266e:	d110      	bne.n	8002692 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4911      	ldr	r1, [pc, #68]	; (80026c0 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0189      	lsls	r1, r1, #6
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	225d      	movs	r2, #93	; 0x5d
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	225c      	movs	r2, #92	; 0x5c
 800269e:	2100      	movs	r1, #0
 80026a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e008      	b.n	80026b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d194      	bne.n	80025e0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b006      	add	sp, #24
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	ffffdfff 	.word	0xffffdfff

080026c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	0159      	lsls	r1, r3, #5
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	0013      	movs	r3, r2
 80026de:	2200      	movs	r2, #0
 80026e0:	f7ff ff76 	bl	80025d0 <SPI_WaitFifoStateUntilTimeout>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d007      	beq.n	80026f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	2220      	movs	r2, #32
 80026ee:	431a      	orrs	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e027      	b.n	8002748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	0013      	movs	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	f7ff fef5 	bl	80024f4 <SPI_WaitFlagStateUntilTimeout>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d007      	beq.n	800271e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	2220      	movs	r2, #32
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e014      	b.n	8002748 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	23c0      	movs	r3, #192	; 0xc0
 8002722:	00d9      	lsls	r1, r3, #3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	0013      	movs	r3, r2
 800272c:	2200      	movs	r2, #0
 800272e:	f7ff ff4f 	bl	80025d0 <SPI_WaitFifoStateUntilTimeout>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d007      	beq.n	8002746 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	2220      	movs	r2, #32
 800273c:	431a      	orrs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e000      	b.n	8002748 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e047      	b.n	80027f2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2269      	movs	r2, #105	; 0x69
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2268      	movs	r2, #104	; 0x68
 8002772:	2100      	movs	r1, #0
 8002774:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 ffb3 	bl	80036e4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2269      	movs	r2, #105	; 0x69
 8002782:	2124      	movs	r1, #36	; 0x24
 8002784:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	438a      	bics	r2, r1
 8002794:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 f831 	bl	8002800 <UART_SetConfig>
 800279e:	0003      	movs	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e024      	b.n	80027f2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f9e0 	bl	8002b78 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_UART_Init+0xac>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	212a      	movs	r1, #42	; 0x2a
 80027d4:	438a      	bics	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fa78 	bl	8002ce0 <UART_CheckIdleState>
 80027f0:	0003      	movs	r3, r0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b002      	add	sp, #8
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	ffffb7ff 	.word	0xffffb7ff

08002800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800280c:	2317      	movs	r3, #23
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2210      	movs	r2, #16
 8002812:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002814:	230a      	movs	r3, #10
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800281c:	2314      	movs	r3, #20
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2200      	movs	r2, #0
 8002822:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002824:	2313      	movs	r3, #19
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4ac1      	ldr	r2, [pc, #772]	; (8002b50 <UART_SetConfig+0x350>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4abc      	ldr	r2, [pc, #752]	; (8002b54 <UART_SetConfig+0x354>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4ab4      	ldr	r2, [pc, #720]	; (8002b58 <UART_SetConfig+0x358>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4ab0      	ldr	r2, [pc, #704]	; (8002b5c <UART_SetConfig+0x35c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d125      	bne.n	80028ea <UART_SetConfig+0xea>
 800289e:	4bb0      	ldr	r3, [pc, #704]	; (8002b60 <UART_SetConfig+0x360>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	2203      	movs	r2, #3
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d00f      	beq.n	80028ca <UART_SetConfig+0xca>
 80028aa:	d304      	bcc.n	80028b6 <UART_SetConfig+0xb6>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d011      	beq.n	80028d4 <UART_SetConfig+0xd4>
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d005      	beq.n	80028c0 <UART_SetConfig+0xc0>
 80028b4:	e013      	b.n	80028de <UART_SetConfig+0xde>
 80028b6:	2317      	movs	r3, #23
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e064      	b.n	800298a <UART_SetConfig+0x18a>
 80028c0:	2317      	movs	r3, #23
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e05f      	b.n	800298a <UART_SetConfig+0x18a>
 80028ca:	2317      	movs	r3, #23
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2204      	movs	r2, #4
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e05a      	b.n	800298a <UART_SetConfig+0x18a>
 80028d4:	2317      	movs	r3, #23
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2208      	movs	r2, #8
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e055      	b.n	800298a <UART_SetConfig+0x18a>
 80028de:	2317      	movs	r3, #23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2210      	movs	r2, #16
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	e04f      	b.n	800298a <UART_SetConfig+0x18a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a9d      	ldr	r2, [pc, #628]	; (8002b64 <UART_SetConfig+0x364>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d132      	bne.n	800295a <UART_SetConfig+0x15a>
 80028f4:	4b9a      	ldr	r3, [pc, #616]	; (8002b60 <UART_SetConfig+0x360>)
 80028f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f8:	23c0      	movs	r3, #192	; 0xc0
 80028fa:	029b      	lsls	r3, r3, #10
 80028fc:	4013      	ands	r3, r2
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	0252      	lsls	r2, r2, #9
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <UART_SetConfig+0x13a>
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	0252      	lsls	r2, r2, #9
 800290a:	4293      	cmp	r3, r2
 800290c:	d802      	bhi.n	8002914 <UART_SetConfig+0x114>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <UART_SetConfig+0x126>
 8002912:	e01c      	b.n	800294e <UART_SetConfig+0x14e>
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	0292      	lsls	r2, r2, #10
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <UART_SetConfig+0x144>
 800291c:	22c0      	movs	r2, #192	; 0xc0
 800291e:	0292      	lsls	r2, r2, #10
 8002920:	4293      	cmp	r3, r2
 8002922:	d005      	beq.n	8002930 <UART_SetConfig+0x130>
 8002924:	e013      	b.n	800294e <UART_SetConfig+0x14e>
 8002926:	2317      	movs	r3, #23
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e02c      	b.n	800298a <UART_SetConfig+0x18a>
 8002930:	2317      	movs	r3, #23
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2202      	movs	r2, #2
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e027      	b.n	800298a <UART_SetConfig+0x18a>
 800293a:	2317      	movs	r3, #23
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2204      	movs	r2, #4
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e022      	b.n	800298a <UART_SetConfig+0x18a>
 8002944:	2317      	movs	r3, #23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2208      	movs	r2, #8
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e01d      	b.n	800298a <UART_SetConfig+0x18a>
 800294e:	2317      	movs	r3, #23
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	2210      	movs	r2, #16
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	e017      	b.n	800298a <UART_SetConfig+0x18a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a82      	ldr	r2, [pc, #520]	; (8002b68 <UART_SetConfig+0x368>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d104      	bne.n	800296e <UART_SetConfig+0x16e>
 8002964:	2317      	movs	r3, #23
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e00d      	b.n	800298a <UART_SetConfig+0x18a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7e      	ldr	r2, [pc, #504]	; (8002b6c <UART_SetConfig+0x36c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d104      	bne.n	8002982 <UART_SetConfig+0x182>
 8002978:	2317      	movs	r3, #23
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e003      	b.n	800298a <UART_SetConfig+0x18a>
 8002982:	2317      	movs	r3, #23
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2210      	movs	r2, #16
 8002988:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	429a      	cmp	r2, r3
 8002994:	d000      	beq.n	8002998 <UART_SetConfig+0x198>
 8002996:	e077      	b.n	8002a88 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8002998:	2317      	movs	r3, #23
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d01c      	beq.n	80029dc <UART_SetConfig+0x1dc>
 80029a2:	dc02      	bgt.n	80029aa <UART_SetConfig+0x1aa>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <UART_SetConfig+0x1b4>
 80029a8:	e04f      	b.n	8002a4a <UART_SetConfig+0x24a>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d027      	beq.n	80029fe <UART_SetConfig+0x1fe>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d039      	beq.n	8002a26 <UART_SetConfig+0x226>
 80029b2:	e04a      	b.n	8002a4a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029b4:	f7ff fa84 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 80029b8:	0003      	movs	r3, r0
 80029ba:	005a      	lsls	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	18d2      	adds	r2, r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0019      	movs	r1, r3
 80029ca:	0010      	movs	r0, r2
 80029cc:	f7fd fb9c 	bl	8000108 <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	001a      	movs	r2, r3
 80029d4:	2314      	movs	r3, #20
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	801a      	strh	r2, [r3, #0]
        break;
 80029da:	e03b      	b.n	8002a54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	4a63      	ldr	r2, [pc, #396]	; (8002b70 <UART_SetConfig+0x370>)
 80029e4:	189a      	adds	r2, r3, r2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	0019      	movs	r1, r3
 80029ec:	0010      	movs	r0, r2
 80029ee:	f7fd fb8b 	bl	8000108 <__udivsi3>
 80029f2:	0003      	movs	r3, r0
 80029f4:	001a      	movs	r2, r3
 80029f6:	2314      	movs	r3, #20
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	801a      	strh	r2, [r3, #0]
        break;
 80029fc:	e02a      	b.n	8002a54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029fe:	f7ff f9d7 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8002a02:	0003      	movs	r3, r0
 8002a04:	005a      	lsls	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	18d2      	adds	r2, r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0019      	movs	r1, r3
 8002a14:	0010      	movs	r0, r2
 8002a16:	f7fd fb77 	bl	8000108 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2314      	movs	r3, #20
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	801a      	strh	r2, [r3, #0]
        break;
 8002a24:	e016      	b.n	8002a54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	0252      	lsls	r2, r2, #9
 8002a30:	189a      	adds	r2, r3, r2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0019      	movs	r1, r3
 8002a38:	0010      	movs	r0, r2
 8002a3a:	f7fd fb65 	bl	8000108 <__udivsi3>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	001a      	movs	r2, r3
 8002a42:	2314      	movs	r3, #20
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	801a      	strh	r2, [r3, #0]
        break;
 8002a48:	e004      	b.n	8002a54 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a4a:	2313      	movs	r3, #19
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
        break;
 8002a52:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002a54:	200a      	movs	r0, #10
 8002a56:	183b      	adds	r3, r7, r0
 8002a58:	2414      	movs	r4, #20
 8002a5a:	193a      	adds	r2, r7, r4
 8002a5c:	8812      	ldrh	r2, [r2, #0]
 8002a5e:	210f      	movs	r1, #15
 8002a60:	438a      	bics	r2, r1
 8002a62:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a64:	193b      	adds	r3, r7, r4
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	105b      	asrs	r3, r3, #1
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b299      	uxth	r1, r3
 8002a72:	183b      	adds	r3, r7, r0
 8002a74:	183a      	adds	r2, r7, r0
 8002a76:	8812      	ldrh	r2, [r2, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	183a      	adds	r2, r7, r0
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e05b      	b.n	8002b40 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 8002a88:	2317      	movs	r3, #23
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d01b      	beq.n	8002aca <UART_SetConfig+0x2ca>
 8002a92:	dc02      	bgt.n	8002a9a <UART_SetConfig+0x29a>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0x2a4>
 8002a98:	e04d      	b.n	8002b36 <UART_SetConfig+0x336>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d026      	beq.n	8002aec <UART_SetConfig+0x2ec>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d037      	beq.n	8002b12 <UART_SetConfig+0x312>
 8002aa2:	e048      	b.n	8002b36 <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002aa4:	f7ff fa0c 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	0002      	movs	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	18d2      	adds	r2, r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f7fd fb25 	bl	8000108 <__udivsi3>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60da      	str	r2, [r3, #12]
        break;
 8002ac8:	e03a      	b.n	8002b40 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <UART_SetConfig+0x374>)
 8002ad2:	189a      	adds	r2, r3, r2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0019      	movs	r1, r3
 8002ada:	0010      	movs	r0, r2
 8002adc:	f7fd fb14 	bl	8000108 <__udivsi3>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60da      	str	r2, [r3, #12]
        break;
 8002aea:	e029      	b.n	8002b40 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aec:	f7ff f960 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8002af0:	0002      	movs	r2, r0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	18d2      	adds	r2, r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7fd fb01 	bl	8000108 <__udivsi3>
 8002b06:	0003      	movs	r3, r0
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60da      	str	r2, [r3, #12]
        break;
 8002b10:	e016      	b.n	8002b40 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	085b      	lsrs	r3, r3, #1
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	0212      	lsls	r2, r2, #8
 8002b1c:	189a      	adds	r2, r3, r2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	0019      	movs	r1, r3
 8002b24:	0010      	movs	r0, r2
 8002b26:	f7fd faef 	bl	8000108 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60da      	str	r2, [r3, #12]
        break;
 8002b34:	e004      	b.n	8002b40 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b36:	2313      	movs	r3, #19
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
        break;
 8002b3e:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002b40:	2313      	movs	r3, #19
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	781b      	ldrb	r3, [r3, #0]

}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b007      	add	sp, #28
 8002b4c:	bd90      	pop	{r4, r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	efff69f3 	.word	0xefff69f3
 8002b54:	ffffcfff 	.word	0xffffcfff
 8002b58:	fffff4ff 	.word	0xfffff4ff
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40004800 	.word	0x40004800
 8002b6c:	40004c00 	.word	0x40004c00
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	007a1200 	.word	0x007a1200

08002b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <UART_AdvFeatureConfig+0x144>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d00b      	beq.n	8002bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <UART_AdvFeatureConfig+0x148>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	2204      	movs	r2, #4
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <UART_AdvFeatureConfig+0x14c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2208      	movs	r2, #8
 8002bec:	4013      	ands	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <UART_AdvFeatureConfig+0x150>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a2c      	ldr	r2, [pc, #176]	; (8002ccc <UART_AdvFeatureConfig+0x154>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2220      	movs	r2, #32
 8002c30:	4013      	ands	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <UART_AdvFeatureConfig+0x158>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2240      	movs	r2, #64	; 0x40
 8002c52:	4013      	ands	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <UART_AdvFeatureConfig+0x15c>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	035b      	lsls	r3, r3, #13
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d10b      	bne.n	8002c92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <UART_AdvFeatureConfig+0x160>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <UART_AdvFeatureConfig+0x164>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]
  }
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fffdffff 	.word	0xfffdffff
 8002cc0:	fffeffff 	.word	0xfffeffff
 8002cc4:	fffbffff 	.word	0xfffbffff
 8002cc8:	ffff7fff 	.word	0xffff7fff
 8002ccc:	ffffefff 	.word	0xffffefff
 8002cd0:	ffffdfff 	.word	0xffffdfff
 8002cd4:	ffefffff 	.word	0xffefffff
 8002cd8:	ff9fffff 	.word	0xff9fffff
 8002cdc:	fff7ffff 	.word	0xfff7ffff

08002ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002cf2:	f7fe f97d 	bl	8000ff0 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <UART_CheckIdleState+0xa4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <UART_CheckIdleState+0x2e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <UART_CheckIdleState+0xa8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d129      	bne.n	8002d62 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2208      	movs	r2, #8
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d10d      	bne.n	8002d38 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	0399      	lsls	r1, r3, #14
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <UART_CheckIdleState+0xac>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	0013      	movs	r3, r2
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f000 f830 	bl	8002d90 <UART_WaitOnFlagUntilTimeout>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e021      	b.n	8002d7c <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d10d      	bne.n	8002d62 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	03d9      	lsls	r1, r3, #15
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <UART_CheckIdleState+0xac>)
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	0013      	movs	r3, r2
 8002d54:	2200      	movs	r2, #0
 8002d56:	f000 f81b 	bl	8002d90 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d001      	beq.n	8002d62 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e00c      	b.n	8002d7c <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2269      	movs	r2, #105	; 0x69
 8002d66:	2120      	movs	r1, #32
 8002d68:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	226a      	movs	r2, #106	; 0x6a
 8002d6e:	2120      	movs	r1, #32
 8002d70:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2268      	movs	r2, #104	; 0x68
 8002d76:	2100      	movs	r1, #0
 8002d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b004      	add	sp, #16
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	01ffffff 	.word	0x01ffffff

08002d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	1dfb      	adds	r3, r7, #7
 8002d9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da0:	e02b      	b.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	3301      	adds	r3, #1
 8002da6:	d028      	beq.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dae:	f7fe f91f 	bl	8000ff0 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d21d      	bcs.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4916      	ldr	r1, [pc, #88]	; (8002e24 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	438a      	bics	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2269      	movs	r2, #105	; 0x69
 8002de2:	2120      	movs	r1, #32
 8002de4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	226a      	movs	r2, #106	; 0x6a
 8002dea:	2120      	movs	r1, #32
 8002dec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2268      	movs	r2, #104	; 0x68
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e00f      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	425a      	negs	r2, r3
 8002e0a:	4153      	adcs	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	001a      	movs	r2, r3
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0c4      	beq.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	fffffe5f 	.word	0xfffffe5f

08002e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e2e:	f7fe f8a3 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e32:	f000 fa33 	bl	800329c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e36:	f000 fb1d 	bl	8003474 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002e3a:	f000 fae7 	bl	800340c <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8002e3e:	f000 fa8d 	bl	800335c <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
  TFT_GFX tftDisplay(hspi2.Instance);
 8002e42:	4bed      	ldr	r3, [pc, #948]	; (80031f8 <main+0x3d0>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	003b      	movs	r3, r7
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fcf4 	bl	8003838 <_ZN7TFT_GFXC1EP11SPI_TypeDef>
  //Set background to black
  tftDisplay.setAddrWindow(0, 0, tftDisplay.width(), tftDisplay.height());
 8002e50:	003b      	movs	r3, r7
 8002e52:	0018      	movs	r0, r3
 8002e54:	f001 f956 	bl	8004104 <_ZN7TFT_GFX5widthEv>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	001c      	movs	r4, r3
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f001 f95a 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8002e64:	0003      	movs	r3, r0
 8002e66:	0038      	movs	r0, r7
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	0023      	movs	r3, r4
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	f000 fcf6 	bl	8003860 <_ZN7TFT_GFX13setAddrWindowEtttt>
  tftDisplay.writeColor(ILI9341_SADDLEBROWN, tftDisplay.height() * tftDisplay.width());
 8002e74:	003b      	movs	r3, r7
 8002e76:	0018      	movs	r0, r3
 8002e78:	f001 f94e 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	001c      	movs	r4, r3
 8002e80:	003b      	movs	r3, r7
 8002e82:	0018      	movs	r0, r3
 8002e84:	f001 f93e 	bl	8004104 <_ZN7TFT_GFX5widthEv>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	4363      	muls	r3, r4
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	49db      	ldr	r1, [pc, #876]	; (80031fc <main+0x3d4>)
 8002e90:	003b      	movs	r3, r7
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fea2 	bl	8003bdc <_ZN7TFT_GFX10writeColorEtm>
  //Draw on the background
  uint16_t x_inc = 20;
 8002e98:	210e      	movs	r1, #14
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2214      	movs	r2, #20
 8002e9e:	801a      	strh	r2, [r3, #0]
  int16_t init_x = 30;
 8002ea0:	250c      	movs	r5, #12
 8002ea2:	197b      	adds	r3, r7, r5
 8002ea4:	221e      	movs	r2, #30
 8002ea6:	801a      	strh	r2, [r3, #0]
  uint16_t displayColor = ILI9341_GREENYELLOW;
 8002ea8:	260a      	movs	r6, #10
 8002eaa:	19bb      	adds	r3, r7, r6
 8002eac:	4ad4      	ldr	r2, [pc, #848]	; (8003200 <main+0x3d8>)
 8002eae:	801a      	strh	r2, [r3, #0]
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'A', displayColor, displayColor, 5, 5);
 8002eb0:	197b      	adds	r3, r7, r5
 8002eb2:	881a      	ldrh	r2, [r3, #0]
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	197b      	adds	r3, r7, r5
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f001 f928 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fd fffc 	bl	8000ec8 <__aeabi_i2d>
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4bcc      	ldr	r3, [pc, #816]	; (8003204 <main+0x3dc>)
 8002ed4:	f7fd fcc0 	bl	8000858 <__aeabi_ddiv>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	000c      	movs	r4, r1
 8002edc:	0018      	movs	r0, r3
 8002ede:	0021      	movs	r1, r4
 8002ee0:	f7fd ffbc 	bl	8000e5c <__aeabi_d2iz>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	197b      	adds	r3, r7, r5
 8002eea:	2100      	movs	r1, #0
 8002eec:	5e59      	ldrsh	r1, [r3, r1]
 8002eee:	0038      	movs	r0, r7
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	19bb      	adds	r3, r7, r6
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	19bb      	adds	r3, r7, r6
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2341      	movs	r3, #65	; 0x41
 8002f06:	f000 ff19 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'l', displayColor, displayColor, 5, 5);
 8002f0a:	197b      	adds	r3, r7, r5
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	210e      	movs	r1, #14
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	197b      	adds	r3, r7, r5
 8002f1a:	801a      	strh	r2, [r3, #0]
 8002f1c:	003b      	movs	r3, r7
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f001 f8fa 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8002f24:	0003      	movs	r3, r0
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7fd ffce 	bl	8000ec8 <__aeabi_i2d>
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4bb5      	ldr	r3, [pc, #724]	; (8003204 <main+0x3dc>)
 8002f30:	f7fd fc92 	bl	8000858 <__aeabi_ddiv>
 8002f34:	0003      	movs	r3, r0
 8002f36:	000c      	movs	r4, r1
 8002f38:	0018      	movs	r0, r3
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	f7fd ff8e 	bl	8000e5c <__aeabi_d2iz>
 8002f40:	0003      	movs	r3, r0
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	197b      	adds	r3, r7, r5
 8002f46:	2100      	movs	r1, #0
 8002f48:	5e59      	ldrsh	r1, [r3, r1]
 8002f4a:	0038      	movs	r0, r7
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	9303      	str	r3, [sp, #12]
 8002f50:	2305      	movs	r3, #5
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	19bb      	adds	r3, r7, r6
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	19bb      	adds	r3, r7, r6
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	236c      	movs	r3, #108	; 0x6c
 8002f62:	f000 feeb 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'e', displayColor, displayColor, 5, 5);
 8002f66:	197b      	adds	r3, r7, r5
 8002f68:	881a      	ldrh	r2, [r3, #0]
 8002f6a:	210e      	movs	r1, #14
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	18d3      	adds	r3, r2, r3
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	197b      	adds	r3, r7, r5
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	003b      	movs	r3, r7
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f001 f8cc 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8002f80:	0003      	movs	r3, r0
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fd ffa0 	bl	8000ec8 <__aeabi_i2d>
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4b9e      	ldr	r3, [pc, #632]	; (8003204 <main+0x3dc>)
 8002f8c:	f7fd fc64 	bl	8000858 <__aeabi_ddiv>
 8002f90:	0003      	movs	r3, r0
 8002f92:	000c      	movs	r4, r1
 8002f94:	0018      	movs	r0, r3
 8002f96:	0021      	movs	r1, r4
 8002f98:	f7fd ff60 	bl	8000e5c <__aeabi_d2iz>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	197b      	adds	r3, r7, r5
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5e59      	ldrsh	r1, [r3, r1]
 8002fa6:	0038      	movs	r0, r7
 8002fa8:	2305      	movs	r3, #5
 8002faa:	9303      	str	r3, [sp, #12]
 8002fac:	2305      	movs	r3, #5
 8002fae:	9302      	str	r3, [sp, #8]
 8002fb0:	19bb      	adds	r3, r7, r6
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	19bb      	adds	r3, r7, r6
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2365      	movs	r3, #101	; 0x65
 8002fbe:	f000 febd 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'x', displayColor, displayColor, 5, 5);
 8002fc2:	197b      	adds	r3, r7, r5
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	210e      	movs	r1, #14
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	18d3      	adds	r3, r2, r3
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	197b      	adds	r3, r7, r5
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	003b      	movs	r3, r7
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f001 f89e 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7fd ff72 	bl	8000ec8 <__aeabi_i2d>
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4b87      	ldr	r3, [pc, #540]	; (8003204 <main+0x3dc>)
 8002fe8:	f7fd fc36 	bl	8000858 <__aeabi_ddiv>
 8002fec:	0003      	movs	r3, r0
 8002fee:	000c      	movs	r4, r1
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	0021      	movs	r1, r4
 8002ff4:	f7fd ff32 	bl	8000e5c <__aeabi_d2iz>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	b21a      	sxth	r2, r3
 8002ffc:	197b      	adds	r3, r7, r5
 8002ffe:	2100      	movs	r1, #0
 8003000:	5e59      	ldrsh	r1, [r3, r1]
 8003002:	0038      	movs	r0, r7
 8003004:	2305      	movs	r3, #5
 8003006:	9303      	str	r3, [sp, #12]
 8003008:	2305      	movs	r3, #5
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	19bb      	adds	r3, r7, r6
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	19bb      	adds	r3, r7, r6
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2378      	movs	r3, #120	; 0x78
 800301a:	f000 fe8f 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, ' ', displayColor, displayColor, 5, 5);
 800301e:	197b      	adds	r3, r7, r5
 8003020:	881a      	ldrh	r2, [r3, #0]
 8003022:	210e      	movs	r1, #14
 8003024:	187b      	adds	r3, r7, r1
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	b29a      	uxth	r2, r3
 800302c:	197b      	adds	r3, r7, r5
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	003b      	movs	r3, r7
 8003032:	0018      	movs	r0, r3
 8003034:	f001 f870 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8003038:	0003      	movs	r3, r0
 800303a:	0018      	movs	r0, r3
 800303c:	f7fd ff44 	bl	8000ec8 <__aeabi_i2d>
 8003040:	2200      	movs	r2, #0
 8003042:	4b70      	ldr	r3, [pc, #448]	; (8003204 <main+0x3dc>)
 8003044:	f7fd fc08 	bl	8000858 <__aeabi_ddiv>
 8003048:	0003      	movs	r3, r0
 800304a:	000c      	movs	r4, r1
 800304c:	0018      	movs	r0, r3
 800304e:	0021      	movs	r1, r4
 8003050:	f7fd ff04 	bl	8000e5c <__aeabi_d2iz>
 8003054:	0003      	movs	r3, r0
 8003056:	b21a      	sxth	r2, r3
 8003058:	197b      	adds	r3, r7, r5
 800305a:	2100      	movs	r1, #0
 800305c:	5e59      	ldrsh	r1, [r3, r1]
 800305e:	0038      	movs	r0, r7
 8003060:	2305      	movs	r3, #5
 8003062:	9303      	str	r3, [sp, #12]
 8003064:	2305      	movs	r3, #5
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	19bb      	adds	r3, r7, r6
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	19bb      	adds	r3, r7, r6
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2320      	movs	r3, #32
 8003076:	f000 fe61 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'i', displayColor, displayColor, 5, 5);
 800307a:	197b      	adds	r3, r7, r5
 800307c:	881a      	ldrh	r2, [r3, #0]
 800307e:	210e      	movs	r1, #14
 8003080:	187b      	adds	r3, r7, r1
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	18d3      	adds	r3, r2, r3
 8003086:	b29a      	uxth	r2, r3
 8003088:	197b      	adds	r3, r7, r5
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	003b      	movs	r3, r7
 800308e:	0018      	movs	r0, r3
 8003090:	f001 f842 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8003094:	0003      	movs	r3, r0
 8003096:	0018      	movs	r0, r3
 8003098:	f7fd ff16 	bl	8000ec8 <__aeabi_i2d>
 800309c:	2200      	movs	r2, #0
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <main+0x3dc>)
 80030a0:	f7fd fbda 	bl	8000858 <__aeabi_ddiv>
 80030a4:	0003      	movs	r3, r0
 80030a6:	000c      	movs	r4, r1
 80030a8:	0018      	movs	r0, r3
 80030aa:	0021      	movs	r1, r4
 80030ac:	f7fd fed6 	bl	8000e5c <__aeabi_d2iz>
 80030b0:	0003      	movs	r3, r0
 80030b2:	b21a      	sxth	r2, r3
 80030b4:	197b      	adds	r3, r7, r5
 80030b6:	2100      	movs	r1, #0
 80030b8:	5e59      	ldrsh	r1, [r3, r1]
 80030ba:	0038      	movs	r0, r7
 80030bc:	2305      	movs	r3, #5
 80030be:	9303      	str	r3, [sp, #12]
 80030c0:	2305      	movs	r3, #5
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	19bb      	adds	r3, r7, r6
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	19bb      	adds	r3, r7, r6
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2369      	movs	r3, #105	; 0x69
 80030d2:	f000 fe33 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'x', displayColor, displayColor, 5, 5);
 80030d6:	197b      	adds	r3, r7, r5
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	210e      	movs	r1, #14
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	18d3      	adds	r3, r2, r3
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	197b      	adds	r3, r7, r5
 80030e6:	801a      	strh	r2, [r3, #0]
 80030e8:	003b      	movs	r3, r7
 80030ea:	0018      	movs	r0, r3
 80030ec:	f001 f814 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 80030f0:	0003      	movs	r3, r0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd fee8 	bl	8000ec8 <__aeabi_i2d>
 80030f8:	2200      	movs	r2, #0
 80030fa:	4b42      	ldr	r3, [pc, #264]	; (8003204 <main+0x3dc>)
 80030fc:	f7fd fbac 	bl	8000858 <__aeabi_ddiv>
 8003100:	0003      	movs	r3, r0
 8003102:	000c      	movs	r4, r1
 8003104:	0018      	movs	r0, r3
 8003106:	0021      	movs	r1, r4
 8003108:	f7fd fea8 	bl	8000e5c <__aeabi_d2iz>
 800310c:	0003      	movs	r3, r0
 800310e:	b21a      	sxth	r2, r3
 8003110:	197b      	adds	r3, r7, r5
 8003112:	2100      	movs	r1, #0
 8003114:	5e59      	ldrsh	r1, [r3, r1]
 8003116:	0038      	movs	r0, r7
 8003118:	2305      	movs	r3, #5
 800311a:	9303      	str	r3, [sp, #12]
 800311c:	2305      	movs	r3, #5
 800311e:	9302      	str	r3, [sp, #8]
 8003120:	19bb      	adds	r3, r7, r6
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	19bb      	adds	r3, r7, r6
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2378      	movs	r3, #120	; 0x78
 800312e:	f000 fe05 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  x_inc = 60;
 8003132:	210e      	movs	r1, #14
 8003134:	187b      	adds	r3, r7, r1
 8003136:	223c      	movs	r2, #60	; 0x3c
 8003138:	801a      	strh	r2, [r3, #0]
  init_x = -20;
 800313a:	197b      	adds	r3, r7, r5
 800313c:	2214      	movs	r2, #20
 800313e:	4252      	negs	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
  tftDisplay.drawChar(init_x += x_inc, 2*(tftDisplay.height()/4.0), 'G', displayColor, displayColor, 10, 10);
 8003142:	197b      	adds	r3, r7, r5
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	187b      	adds	r3, r7, r1
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	b29a      	uxth	r2, r3
 800314e:	197b      	adds	r3, r7, r5
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	003b      	movs	r3, r7
 8003154:	0018      	movs	r0, r3
 8003156:	f000 ffdf 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 800315a:	0003      	movs	r3, r0
 800315c:	0018      	movs	r0, r3
 800315e:	f7fd feb3 	bl	8000ec8 <__aeabi_i2d>
 8003162:	2200      	movs	r2, #0
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <main+0x3dc>)
 8003166:	f7fd fb77 	bl	8000858 <__aeabi_ddiv>
 800316a:	0003      	movs	r3, r0
 800316c:	000c      	movs	r4, r1
 800316e:	0018      	movs	r0, r3
 8003170:	0021      	movs	r1, r4
 8003172:	0002      	movs	r2, r0
 8003174:	000b      	movs	r3, r1
 8003176:	f7fd f853 	bl	8000220 <__aeabi_dadd>
 800317a:	0003      	movs	r3, r0
 800317c:	000c      	movs	r4, r1
 800317e:	0018      	movs	r0, r3
 8003180:	0021      	movs	r1, r4
 8003182:	f7fd fe6b 	bl	8000e5c <__aeabi_d2iz>
 8003186:	0003      	movs	r3, r0
 8003188:	b21a      	sxth	r2, r3
 800318a:	197b      	adds	r3, r7, r5
 800318c:	2100      	movs	r1, #0
 800318e:	5e59      	ldrsh	r1, [r3, r1]
 8003190:	0038      	movs	r0, r7
 8003192:	230a      	movs	r3, #10
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	230a      	movs	r3, #10
 8003198:	9302      	str	r3, [sp, #8]
 800319a:	19bb      	adds	r3, r7, r6
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	19bb      	adds	r3, r7, r6
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2347      	movs	r3, #71	; 0x47
 80031a8:	f000 fdc8 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, 2*(tftDisplay.height()/4.0), 'A', displayColor, displayColor, 10, 10);
 80031ac:	197b      	adds	r3, r7, r5
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	210e      	movs	r1, #14
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	18d3      	adds	r3, r2, r3
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	197b      	adds	r3, r7, r5
 80031bc:	801a      	strh	r2, [r3, #0]
 80031be:	003b      	movs	r3, r7
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 ffa9 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 80031c6:	0003      	movs	r3, r0
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fd fe7d 	bl	8000ec8 <__aeabi_i2d>
 80031ce:	2200      	movs	r2, #0
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <main+0x3dc>)
 80031d2:	f7fd fb41 	bl	8000858 <__aeabi_ddiv>
 80031d6:	0003      	movs	r3, r0
 80031d8:	000c      	movs	r4, r1
 80031da:	0018      	movs	r0, r3
 80031dc:	0021      	movs	r1, r4
 80031de:	0002      	movs	r2, r0
 80031e0:	000b      	movs	r3, r1
 80031e2:	f7fd f81d 	bl	8000220 <__aeabi_dadd>
 80031e6:	0003      	movs	r3, r0
 80031e8:	000c      	movs	r4, r1
 80031ea:	0018      	movs	r0, r3
 80031ec:	0021      	movs	r1, r4
 80031ee:	f7fd fe35 	bl	8000e5c <__aeabi_d2iz>
 80031f2:	0003      	movs	r3, r0
 80031f4:	b21a      	sxth	r2, r3
 80031f6:	e007      	b.n	8003208 <main+0x3e0>
 80031f8:	20000020 	.word	0x20000020
 80031fc:	00008a22 	.word	0x00008a22
 8003200:	ffffafe5 	.word	0xffffafe5
 8003204:	40100000 	.word	0x40100000
 8003208:	197b      	adds	r3, r7, r5
 800320a:	2100      	movs	r1, #0
 800320c:	5e59      	ldrsh	r1, [r3, r1]
 800320e:	0038      	movs	r0, r7
 8003210:	230a      	movs	r3, #10
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	230a      	movs	r3, #10
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	19bb      	adds	r3, r7, r6
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	19bb      	adds	r3, r7, r6
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2341      	movs	r3, #65	; 0x41
 8003226:	f000 fd89 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, 2*(tftDisplay.height()/4.0), 'Y', displayColor, displayColor, 10, 10);
 800322a:	197b      	adds	r3, r7, r5
 800322c:	881a      	ldrh	r2, [r3, #0]
 800322e:	210e      	movs	r1, #14
 8003230:	187b      	adds	r3, r7, r1
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	b29a      	uxth	r2, r3
 8003238:	197b      	adds	r3, r7, r5
 800323a:	801a      	strh	r2, [r3, #0]
 800323c:	003b      	movs	r3, r7
 800323e:	0018      	movs	r0, r3
 8003240:	f000 ff6a 	bl	8004118 <_ZN7TFT_GFX6heightEv>
 8003244:	0003      	movs	r3, r0
 8003246:	0018      	movs	r0, r3
 8003248:	f7fd fe3e 	bl	8000ec8 <__aeabi_i2d>
 800324c:	2200      	movs	r2, #0
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <main+0x470>)
 8003250:	f7fd fb02 	bl	8000858 <__aeabi_ddiv>
 8003254:	0003      	movs	r3, r0
 8003256:	000c      	movs	r4, r1
 8003258:	0018      	movs	r0, r3
 800325a:	0021      	movs	r1, r4
 800325c:	0002      	movs	r2, r0
 800325e:	000b      	movs	r3, r1
 8003260:	f7fc ffde 	bl	8000220 <__aeabi_dadd>
 8003264:	0003      	movs	r3, r0
 8003266:	000c      	movs	r4, r1
 8003268:	0018      	movs	r0, r3
 800326a:	0021      	movs	r1, r4
 800326c:	f7fd fdf6 	bl	8000e5c <__aeabi_d2iz>
 8003270:	0003      	movs	r3, r0
 8003272:	b21a      	sxth	r2, r3
 8003274:	197b      	adds	r3, r7, r5
 8003276:	2100      	movs	r1, #0
 8003278:	5e59      	ldrsh	r1, [r3, r1]
 800327a:	0038      	movs	r0, r7
 800327c:	230a      	movs	r3, #10
 800327e:	9303      	str	r3, [sp, #12]
 8003280:	230a      	movs	r3, #10
 8003282:	9302      	str	r3, [sp, #8]
 8003284:	19bb      	adds	r3, r7, r6
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	19bb      	adds	r3, r7, r6
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2359      	movs	r3, #89	; 0x59
 8003292:	f000 fd53 	bl	8003d3c <_ZN7TFT_GFX8drawCharEsshtthh>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003296:	e7fe      	b.n	8003296 <main+0x46e>
 8003298:	40100000 	.word	0x40100000

0800329c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b099      	sub	sp, #100	; 0x64
 80032a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a2:	242c      	movs	r4, #44	; 0x2c
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	0018      	movs	r0, r3
 80032a8:	2334      	movs	r3, #52	; 0x34
 80032aa:	001a      	movs	r2, r3
 80032ac:	2100      	movs	r1, #0
 80032ae:	f001 f9e7 	bl	8004680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b2:	231c      	movs	r3, #28
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	0018      	movs	r0, r3
 80032b8:	2310      	movs	r3, #16
 80032ba:	001a      	movs	r2, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	f001 f9df 	bl	8004680 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c2:	003b      	movs	r3, r7
 80032c4:	0018      	movs	r0, r3
 80032c6:	231c      	movs	r3, #28
 80032c8:	001a      	movs	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f001 f9d8 	bl	8004680 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	2220      	movs	r2, #32
 80032d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	2201      	movs	r2, #1
 80032da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7fe f8f9 	bl	80014dc <HAL_RCC_OscConfig>
 80032ea:	0003      	movs	r3, r0
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	4193      	sbcs	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80032f6:	f000 f955 	bl	80035a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032fa:	211c      	movs	r1, #28
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2207      	movs	r2, #7
 8003300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2203      	movs	r2, #3
 8003306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2200      	movs	r2, #0
 8003312:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2101      	movs	r1, #1
 8003318:	0018      	movs	r0, r3
 800331a:	f7fe fc3f 	bl	8001b9c <HAL_RCC_ClockConfig>
 800331e:	0003      	movs	r3, r0
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	4193      	sbcs	r3, r2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 800332a:	f000 f93b 	bl	80035a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800332e:	003b      	movs	r3, r7
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003334:	003b      	movs	r3, r7
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800333a:	003b      	movs	r3, r7
 800333c:	0018      	movs	r0, r3
 800333e:	f7fe fdd5 	bl	8001eec <HAL_RCCEx_PeriphCLKConfig>
 8003342:	0003      	movs	r3, r0
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	4193      	sbcs	r3, r2
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800334e:	f000 f929 	bl	80035a4 <Error_Handler>
  }
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b019      	add	sp, #100	; 0x64
 8003358:	bd90      	pop	{r4, r7, pc}
	...

0800335c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <_ZL12MX_SPI2_Initv+0xac>)
 8003366:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003368:	4b26      	ldr	r3, [pc, #152]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 800336a:	2282      	movs	r2, #130	; 0x82
 800336c:	0052      	lsls	r2, r2, #1
 800336e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 8003378:	22e0      	movs	r2, #224	; 0xe0
 800337a:	00d2      	lsls	r2, r2, #3
 800337c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 8003380:	2202      	movs	r2, #2
 8003382:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 8003386:	2201      	movs	r2, #1
 8003388:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 8003394:	2210      	movs	r2, #16
 8003396:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 800339a:	2200      	movs	r2, #0
 800339c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a4:	4b17      	ldr	r3, [pc, #92]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033ac:	2207      	movs	r2, #7
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fe fe94 	bl	80020ec <HAL_SPI_Init>
 80033c4:	0003      	movs	r3, r0
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	4193      	sbcs	r3, r2
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80033d0:	f000 f8e8 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //Send 1 random byte to reset the sck
  uint8_t temp = 0;
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 80033da:	2301      	movs	r3, #1
 80033dc:	425b      	negs	r3, r3
 80033de:	1df9      	adds	r1, r7, #7
 80033e0:	4808      	ldr	r0, [pc, #32]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	f7fe ff1c 	bl	8002220 <HAL_SPI_Transmit>
  resetTftBoard();
 80033e8:	f000 fea0 	bl	800412c <resetTftBoard>
  pullCSLow();
 80033ec:	f000 feba 	bl	8004164 <pullCSLow>
  ili9341_hspi_init(hspi2.Instance);
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <_ZL12MX_SPI2_Initv+0xa8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 ff29 	bl	800424c <ili9341_hspi_init>
  /* USER CODE END SPI2_Init 2 */

}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000020 	.word	0x20000020
 8003408:	40003800 	.word	0x40003800

0800340c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <_ZL19MX_USART2_UART_Initv+0x64>)
 8003414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003418:	2296      	movs	r2, #150	; 0x96
 800341a:	0212      	lsls	r2, r2, #8
 800341c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003430:	4b0e      	ldr	r3, [pc, #56]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003432:	220c      	movs	r2, #12
 8003434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003444:	2200      	movs	r2, #0
 8003446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 800344a:	2200      	movs	r2, #0
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff f97d 	bl	8002750 <HAL_UART_Init>
 8003456:	0003      	movs	r3, r0
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	4193      	sbcs	r3, r2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8003462:	f000 f89f 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000084 	.word	0x20000084
 8003470:	40004400 	.word	0x40004400

08003474 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b08b      	sub	sp, #44	; 0x2c
 8003478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347a:	2414      	movs	r4, #20
 800347c:	193b      	adds	r3, r7, r4
 800347e:	0018      	movs	r0, r3
 8003480:	2314      	movs	r3, #20
 8003482:	001a      	movs	r2, r3
 8003484:	2100      	movs	r1, #0
 8003486:	f001 f8fb 	bl	8004680 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0309      	lsls	r1, r1, #12
 8003494:	430a      	orrs	r2, r1
 8003496:	615a      	str	r2, [r3, #20]
 8003498:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	031b      	lsls	r3, r3, #12
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034a6:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	03c9      	lsls	r1, r1, #15
 80034b0:	430a      	orrs	r2, r1
 80034b2:	615a      	str	r2, [r3, #20]
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	03db      	lsls	r3, r3, #15
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	4b35      	ldr	r3, [pc, #212]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	0289      	lsls	r1, r1, #10
 80034cc:	430a      	orrs	r2, r1
 80034ce:	615a      	str	r2, [r3, #20]
 80034d0:	4b31      	ldr	r3, [pc, #196]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	02c9      	lsls	r1, r1, #11
 80034e8:	430a      	orrs	r2, r1
 80034ea:	615a      	str	r2, [r3, #20]
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <_ZL12MX_GPIO_Initv+0x124>)
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	02db      	lsls	r3, r3, #11
 80034f4:	4013      	ands	r3, r2
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 80034fa:	4b28      	ldr	r3, [pc, #160]	; (800359c <_ZL12MX_GPIO_Initv+0x128>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	2101      	movs	r1, #1
 8003500:	0018      	movs	r0, r3
 8003502:	f7fd ffcd 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8003506:	4b25      	ldr	r3, [pc, #148]	; (800359c <_ZL12MX_GPIO_Initv+0x128>)
 8003508:	2201      	movs	r2, #1
 800350a:	2102      	movs	r1, #2
 800350c:	0018      	movs	r0, r3
 800350e:	f7fd ffc7 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003512:	2390      	movs	r3, #144	; 0x90
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	2200      	movs	r2, #0
 8003518:	2121      	movs	r1, #33	; 0x21
 800351a:	0018      	movs	r0, r3
 800351c:	f7fd ffc0 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	0192      	lsls	r2, r2, #6
 8003526:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003528:	193b      	adds	r3, r7, r4
 800352a:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <_ZL12MX_GPIO_Initv+0x12c>)
 800352c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	193b      	adds	r3, r7, r4
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003534:	193b      	adds	r3, r7, r4
 8003536:	4a19      	ldr	r2, [pc, #100]	; (800359c <_ZL12MX_GPIO_Initv+0x128>)
 8003538:	0019      	movs	r1, r3
 800353a:	0010      	movs	r0, r2
 800353c:	f7fd fe34 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_D_C_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = TFT_D_C_Pin|SPI2_NSS_Pin;
 8003540:	0021      	movs	r1, r4
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2203      	movs	r2, #3
 8003546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2201      	movs	r2, #1
 800354c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2203      	movs	r2, #3
 8003558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	000c      	movs	r4, r1
 800355c:	187b      	adds	r3, r7, r1
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <_ZL12MX_GPIO_Initv+0x128>)
 8003560:	0019      	movs	r1, r3
 8003562:	0010      	movs	r0, r2
 8003564:	f7fd fe20 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|LD2_Pin;
 8003568:	0021      	movs	r1, r4
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2221      	movs	r2, #33	; 0x21
 800356e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2201      	movs	r2, #1
 8003574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2200      	movs	r2, #0
 8003580:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	187a      	adds	r2, r7, r1
 8003584:	2390      	movs	r3, #144	; 0x90
 8003586:	05db      	lsls	r3, r3, #23
 8003588:	0011      	movs	r1, r2
 800358a:	0018      	movs	r0, r3
 800358c:	f7fd fe0c 	bl	80011a8 <HAL_GPIO_Init>

}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b00b      	add	sp, #44	; 0x2c
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	48000800 	.word	0x48000800
 80035a0:	10210000 	.word	0x10210000

080035a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_MspInit+0x44>)
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_MspInit+0x44>)
 80035bc:	2101      	movs	r1, #1
 80035be:	430a      	orrs	r2, r1
 80035c0:	619a      	str	r2, [r3, #24]
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_MspInit+0x44>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_MspInit+0x44>)
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_MspInit+0x44>)
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	0549      	lsls	r1, r1, #21
 80035d8:	430a      	orrs	r2, r1
 80035da:	61da      	str	r2, [r3, #28]
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_MspInit+0x44>)
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	055b      	lsls	r3, r3, #21
 80035e4:	4013      	ands	r3, r2
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b08b      	sub	sp, #44	; 0x2c
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	2314      	movs	r3, #20
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	0018      	movs	r0, r3
 8003606:	2314      	movs	r3, #20
 8003608:	001a      	movs	r2, r3
 800360a:	2100      	movs	r1, #0
 800360c:	f001 f838 	bl	8004680 <memset>
  if(hspi->Instance==SPI2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <HAL_SPI_MspInit+0xdc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d157      	bne.n	80036ca <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800361a:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	01c9      	lsls	r1, r1, #7
 8003624:	430a      	orrs	r2, r1
 8003626:	61da      	str	r2, [r3, #28]
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	0309      	lsls	r1, r1, #12
 8003640:	430a      	orrs	r2, r1
 8003642:	615a      	str	r2, [r3, #20]
 8003644:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	031b      	lsls	r3, r3, #12
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	02c9      	lsls	r1, r1, #11
 800365c:	430a      	orrs	r2, r1
 800365e:	615a      	str	r2, [r3, #20]
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_SPI_MspInit+0xe0>)
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	02db      	lsls	r3, r3, #11
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800366e:	2114      	movs	r1, #20
 8003670:	187b      	adds	r3, r7, r1
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	187b      	adds	r3, r7, r1
 8003678:	2202      	movs	r2, #2
 800367a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	187b      	adds	r3, r7, r1
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003682:	187b      	adds	r3, r7, r1
 8003684:	2203      	movs	r2, #3
 8003686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2201      	movs	r2, #1
 800368c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368e:	000c      	movs	r4, r1
 8003690:	187b      	adds	r3, r7, r1
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <HAL_SPI_MspInit+0xe4>)
 8003694:	0019      	movs	r1, r3
 8003696:	0010      	movs	r0, r2
 8003698:	f7fd fd86 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800369c:	0021      	movs	r1, r4
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	00d2      	lsls	r2, r2, #3
 80036a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	187b      	adds	r3, r7, r1
 80036a8:	2202      	movs	r2, #2
 80036aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036b2:	187b      	adds	r3, r7, r1
 80036b4:	2203      	movs	r2, #3
 80036b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2205      	movs	r2, #5
 80036bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_SPI_MspInit+0xe8>)
 80036c2:	0019      	movs	r1, r3
 80036c4:	0010      	movs	r0, r2
 80036c6:	f7fd fd6f 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b00b      	add	sp, #44	; 0x2c
 80036d0:	bd90      	pop	{r4, r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	40003800 	.word	0x40003800
 80036d8:	40021000 	.word	0x40021000
 80036dc:	48000800 	.word	0x48000800
 80036e0:	48000400 	.word	0x48000400

080036e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ec:	2314      	movs	r3, #20
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	0018      	movs	r0, r3
 80036f2:	2314      	movs	r3, #20
 80036f4:	001a      	movs	r2, r3
 80036f6:	2100      	movs	r1, #0
 80036f8:	f000 ffc2 	bl	8004680 <memset>
  if(huart->Instance==USART2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_UART_MspInit+0x90>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d132      	bne.n	800376c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <HAL_UART_MspInit+0x94>)
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_UART_MspInit+0x94>)
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	0289      	lsls	r1, r1, #10
 8003710:	430a      	orrs	r2, r1
 8003712:	61da      	str	r2, [r3, #28]
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_UART_MspInit+0x94>)
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_UART_MspInit+0x94>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_UART_MspInit+0x94>)
 8003728:	2180      	movs	r1, #128	; 0x80
 800372a:	0289      	lsls	r1, r1, #10
 800372c:	430a      	orrs	r2, r1
 800372e:	615a      	str	r2, [r3, #20]
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_UART_MspInit+0x94>)
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800373e:	2114      	movs	r1, #20
 8003740:	187b      	adds	r3, r7, r1
 8003742:	220c      	movs	r2, #12
 8003744:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	2202      	movs	r2, #2
 800374a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	187b      	adds	r3, r7, r1
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2201      	movs	r2, #1
 800375c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	187a      	adds	r2, r7, r1
 8003760:	2390      	movs	r3, #144	; 0x90
 8003762:	05db      	lsls	r3, r3, #23
 8003764:	0011      	movs	r1, r2
 8003766:	0018      	movs	r0, r3
 8003768:	f7fd fd1e 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b00a      	add	sp, #40	; 0x28
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40004400 	.word	0x40004400
 8003778:	40021000 	.word	0x40021000

0800377c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <HardFault_Handler+0x4>

0800378c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037a4:	f7fd fc18 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <SystemInit+0x70>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <SystemInit+0x70>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <SystemInit+0x70>)
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <SystemInit+0x70>)
 80037c6:	4917      	ldr	r1, [pc, #92]	; (8003824 <SystemInit+0x74>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <SystemInit+0x70>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <SystemInit+0x70>)
 80037d2:	4915      	ldr	r1, [pc, #84]	; (8003828 <SystemInit+0x78>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <SystemInit+0x70>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <SystemInit+0x70>)
 80037de:	4913      	ldr	r1, [pc, #76]	; (800382c <SystemInit+0x7c>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80037e4:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <SystemInit+0x70>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <SystemInit+0x70>)
 80037ea:	4911      	ldr	r1, [pc, #68]	; (8003830 <SystemInit+0x80>)
 80037ec:	400a      	ands	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <SystemInit+0x70>)
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <SystemInit+0x70>)
 80037f6:	210f      	movs	r1, #15
 80037f8:	438a      	bics	r2, r1
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <SystemInit+0x70>)
 80037fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <SystemInit+0x70>)
 8003802:	490c      	ldr	r1, [pc, #48]	; (8003834 <SystemInit+0x84>)
 8003804:	400a      	ands	r2, r1
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SystemInit+0x70>)
 800380a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <SystemInit+0x70>)
 800380e:	2101      	movs	r1, #1
 8003810:	438a      	bics	r2, r1
 8003812:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003814:	4b02      	ldr	r3, [pc, #8]	; (8003820 <SystemInit+0x70>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]

}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08ffb80c 	.word	0x08ffb80c
 8003828:	fef6ffff 	.word	0xfef6ffff
 800382c:	fffbffff 	.word	0xfffbffff
 8003830:	ffc0ffff 	.word	0xffc0ffff
 8003834:	fffcfe2c 	.word	0xfffcfe2c

08003838 <_ZN7TFT_GFXC1EP11SPI_TypeDef>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
TFT_GFX::TFT_GFX(SPI_TypeDef *SPIx):
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
spiInstance{SPIx}, _width{ILI9341_TFTWIDTH}, _height{ILI9341_TFTHEIGHT}
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	22f0      	movs	r2, #240	; 0xf0
 800384c:	809a      	strh	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	22a0      	movs	r2, #160	; 0xa0
 8003852:	0052      	lsls	r2, r2, #1
 8003854:	80da      	strh	r2, [r3, #6]
{}
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN7TFT_GFX13setAddrWindowEtttt>:

void TFT_GFX::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	000c      	movs	r4, r1
 800386a:	0010      	movs	r0, r2
 800386c:	0019      	movs	r1, r3
 800386e:	250a      	movs	r5, #10
 8003870:	197b      	adds	r3, r7, r5
 8003872:	1c22      	adds	r2, r4, #0
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	2608      	movs	r6, #8
 8003878:	19bb      	adds	r3, r7, r6
 800387a:	1c02      	adds	r2, r0, #0
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	1c0a      	adds	r2, r1, #0
 8003882:	801a      	strh	r2, [r3, #0]
    uint16_t x2 = (x1 + w - 1);
 8003884:	002c      	movs	r4, r5
 8003886:	193a      	adds	r2, r7, r4
 8003888:	1dbb      	adds	r3, r7, #6
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	b29a      	uxth	r2, r3
 8003892:	2316      	movs	r3, #22
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	3a01      	subs	r2, #1
 8003898:	801a      	strh	r2, [r3, #0]
    uint16_t y2 = (y1 + h - 1);
 800389a:	0035      	movs	r5, r6
 800389c:	197b      	adds	r3, r7, r5
 800389e:	2228      	movs	r2, #40	; 0x28
 80038a0:	2108      	movs	r1, #8
 80038a2:	1879      	adds	r1, r7, r1
 80038a4:	1889      	adds	r1, r1, r2
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	880b      	ldrh	r3, [r1, #0]
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	2614      	movs	r6, #20
 80038b0:	19bb      	adds	r3, r7, r6
 80038b2:	3a01      	subs	r2, #1
 80038b4:	801a      	strh	r2, [r3, #0]
	// Set column range.
	hspi_cmd(this->spiInstance, 0x2A);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	212a      	movs	r1, #42	; 0x2a
 80038bc:	0018      	movs	r0, r3
 80038be:	f000 fc99 	bl	80041f4 <hspi_cmd>
	hspi_w16(this->spiInstance, x1);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	193b      	adds	r3, r7, r4
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f000 fc6d 	bl	80041ac <hspi_w16>
	hspi_w16(this->spiInstance, x2);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	2316      	movs	r3, #22
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	0019      	movs	r1, r3
 80038de:	0010      	movs	r0, r2
 80038e0:	f000 fc64 	bl	80041ac <hspi_w16>
	
	// Set row range.
	hspi_cmd(this->spiInstance, 0x2B);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	212b      	movs	r1, #43	; 0x2b
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fc82 	bl	80041f4 <hspi_cmd>
	hspi_w16(this->spiInstance, y1);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	197b      	adds	r3, r7, r5
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	0019      	movs	r1, r3
 80038fa:	0010      	movs	r0, r2
 80038fc:	f000 fc56 	bl	80041ac <hspi_w16>
	hspi_w16(this->spiInstance, y2);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	19bb      	adds	r3, r7, r6
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	0019      	movs	r1, r3
 800390a:	0010      	movs	r0, r2
 800390c:	f000 fc4e 	bl	80041ac <hspi_w16>
	
	// Set 'write to RAM'
	hspi_cmd(this->spiInstance, 0x2C);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fc6c 	bl	80041f4 <hspi_cmd>
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b007      	add	sp, #28
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003924 <_ZN7TFT_GFX10writePixelEsst>:

void TFT_GFX::writePixel(int16_t x, int16_t y, uint16_t color) 
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	000c      	movs	r4, r1
 800392e:	0010      	movs	r0, r2
 8003930:	0019      	movs	r1, r3
 8003932:	250a      	movs	r5, #10
 8003934:	197b      	adds	r3, r7, r5
 8003936:	1c22      	adds	r2, r4, #0
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	2308      	movs	r3, #8
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	1c02      	adds	r2, r0, #0
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	1c0a      	adds	r2, r1, #0
 8003946:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && (y >= 0) && (y < this->_height)) 
 8003948:	197b      	adds	r3, r7, r5
 800394a:	2200      	movs	r2, #0
 800394c:	5e9b      	ldrsh	r3, [r3, r2]
 800394e:	2b00      	cmp	r3, #0
 8003950:	db29      	blt.n	80039a6 <_ZN7TFT_GFX10writePixelEsst+0x82>
 8003952:	230a      	movs	r3, #10
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2200      	movs	r2, #0
 8003958:	5e9b      	ldrsh	r3, [r3, r2]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	8892      	ldrh	r2, [r2, #4]
 800395e:	4293      	cmp	r3, r2
 8003960:	da21      	bge.n	80039a6 <_ZN7TFT_GFX10writePixelEsst+0x82>
 8003962:	2308      	movs	r3, #8
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	2200      	movs	r2, #0
 8003968:	5e9b      	ldrsh	r3, [r3, r2]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db1b      	blt.n	80039a6 <_ZN7TFT_GFX10writePixelEsst+0x82>
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	2200      	movs	r2, #0
 8003974:	5e9b      	ldrsh	r3, [r3, r2]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	88d2      	ldrh	r2, [r2, #6]
 800397a:	4293      	cmp	r3, r2
 800397c:	da13      	bge.n	80039a6 <_ZN7TFT_GFX10writePixelEsst+0x82>
    {
        setAddrWindow(x, y, 1, 1);
 800397e:	230a      	movs	r3, #10
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	8819      	ldrh	r1, [r3, #0]
 8003984:	2308      	movs	r3, #8
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	881a      	ldrh	r2, [r3, #0]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	2301      	movs	r3, #1
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2301      	movs	r3, #1
 8003992:	f7ff ff65 	bl	8003860 <_ZN7TFT_GFX13setAddrWindowEtttt>
        hspi_w16(this->spiInstance, color);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	1dbb      	adds	r3, r7, #6
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	0019      	movs	r1, r3
 80039a0:	0010      	movs	r0, r2
 80039a2:	f000 fc03 	bl	80041ac <hspi_w16>
    }
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}

080039ae <_ZN7TFT_GFX13writeFillRectEsssst>:

void TFT_GFX::writeFillRect(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 80039ae:	b5b0      	push	{r4, r5, r7, lr}
 80039b0:	b088      	sub	sp, #32
 80039b2:	af02      	add	r7, sp, #8
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	000c      	movs	r4, r1
 80039b8:	0010      	movs	r0, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	230a      	movs	r3, #10
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	1c22      	adds	r2, r4, #0
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	2308      	movs	r3, #8
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	1c02      	adds	r2, r0, #0
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	1dbb      	adds	r3, r7, #6
 80039ce:	1c0a      	adds	r2, r1, #0
 80039d0:	801a      	strh	r2, [r3, #0]
    if(w && h) {                            // Nonzero width and height?
 80039d2:	1dbb      	adds	r3, r7, #6
 80039d4:	2200      	movs	r2, #0
 80039d6:	5e9b      	ldrsh	r3, [r3, r2]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d100      	bne.n	80039de <_ZN7TFT_GFX13writeFillRectEsssst+0x30>
 80039dc:	e0c8      	b.n	8003b70 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
 80039de:	2328      	movs	r3, #40	; 0x28
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2200      	movs	r2, #0
 80039e4:	5e9b      	ldrsh	r3, [r3, r2]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d100      	bne.n	80039ec <_ZN7TFT_GFX13writeFillRectEsssst+0x3e>
 80039ea:	e0c1      	b.n	8003b70 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
        if(w < 0) {                         // If negative width...
 80039ec:	1dbb      	adds	r3, r7, #6
 80039ee:	2200      	movs	r2, #0
 80039f0:	5e9b      	ldrsh	r3, [r3, r2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da10      	bge.n	8003a18 <_ZN7TFT_GFX13writeFillRectEsssst+0x6a>
            x +=  w + 1;                    //   Move X to left edge
 80039f6:	1dbb      	adds	r3, r7, #6
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	210a      	movs	r1, #10
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	18d3      	adds	r3, r2, r3
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
            w  = -w;                        //   Use positive width
 8003a0c:	1dbb      	adds	r3, r7, #6
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	425b      	negs	r3, r3
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	1dbb      	adds	r3, r7, #6
 8003a16:	801a      	strh	r2, [r3, #0]
        }
        if(x < this->_width) {                    // Not off right
 8003a18:	230a      	movs	r3, #10
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	5e9b      	ldrsh	r3, [r3, r2]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	8892      	ldrh	r2, [r2, #4]
 8003a24:	4293      	cmp	r3, r2
 8003a26:	db00      	blt.n	8003a2a <_ZN7TFT_GFX13writeFillRectEsssst+0x7c>
 8003a28:	e0a2      	b.n	8003b70 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
            if(h < 0) {                     // If negative height...
 8003a2a:	2328      	movs	r3, #40	; 0x28
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2200      	movs	r2, #0
 8003a30:	5e9b      	ldrsh	r3, [r3, r2]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da11      	bge.n	8003a5a <_ZN7TFT_GFX13writeFillRectEsssst+0xac>
                y +=  h + 1;                //   Move Y to top edge
 8003a36:	2128      	movs	r1, #40	; 0x28
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	2008      	movs	r0, #8
 8003a3e:	183b      	adds	r3, r7, r0
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	183b      	adds	r3, r7, r0
 8003a4c:	801a      	strh	r2, [r3, #0]
                h  = -h;                    //   Use positive height
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	425b      	negs	r3, r3
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	801a      	strh	r2, [r3, #0]
            }
            if(y < this->_height) {               // Not off bottom
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2200      	movs	r2, #0
 8003a60:	5e9b      	ldrsh	r3, [r3, r2]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	88d2      	ldrh	r2, [r2, #6]
 8003a66:	4293      	cmp	r3, r2
 8003a68:	db00      	blt.n	8003a6c <_ZN7TFT_GFX13writeFillRectEsssst+0xbe>
 8003a6a:	e081      	b.n	8003b70 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                int16_t x2 = x + w - 1;
 8003a6c:	230a      	movs	r3, #10
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	1dbb      	adds	r3, r7, #6
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	18d3      	adds	r3, r2, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	2116      	movs	r1, #22
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	801a      	strh	r2, [r3, #0]
                if(x2 >= 0) {               // Not off left
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	2200      	movs	r2, #0
 8003a88:	5e9b      	ldrsh	r3, [r3, r2]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da00      	bge.n	8003a90 <_ZN7TFT_GFX13writeFillRectEsssst+0xe2>
 8003a8e:	e06f      	b.n	8003b70 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                    int16_t y2 = y + h - 1;
 8003a90:	2308      	movs	r3, #8
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	2328      	movs	r3, #40	; 0x28
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	18d3      	adds	r3, r2, r3
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	2114      	movs	r1, #20
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	801a      	strh	r2, [r3, #0]
                    if(y2 >= 0) {           // Not off top
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	2200      	movs	r2, #0
 8003aae:	5e9b      	ldrsh	r3, [r3, r2]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	db5d      	blt.n	8003b70 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                        // Rectangle partly or fully overlaps screen
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 8003ab4:	230a      	movs	r3, #10
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	5e9b      	ldrsh	r3, [r3, r2]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	da0a      	bge.n	8003ad6 <_ZN7TFT_GFX13writeFillRectEsssst+0x128>
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	2316      	movs	r3, #22
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	1dbb      	adds	r3, r7, #6
 8003ad4:	801a      	strh	r2, [r3, #0]
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	2200      	movs	r2, #0
 8003adc:	5e9b      	ldrsh	r3, [r3, r2]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da0b      	bge.n	8003afa <_ZN7TFT_GFX13writeFillRectEsssst+0x14c>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	2314      	movs	r3, #20
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	3301      	adds	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	2328      	movs	r3, #40	; 0x28
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	801a      	strh	r2, [r3, #0]
                        if(x2 >= this->_width)  { w = this->_width  - x;   } // Clip right
 8003afa:	2316      	movs	r3, #22
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	5e9b      	ldrsh	r3, [r3, r2]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	8892      	ldrh	r2, [r2, #4]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	db08      	blt.n	8003b1c <_ZN7TFT_GFX13writeFillRectEsssst+0x16e>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	889a      	ldrh	r2, [r3, #4]
 8003b0e:	230a      	movs	r3, #10
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	1dbb      	adds	r3, r7, #6
 8003b1a:	801a      	strh	r2, [r3, #0]
                        if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8003b1c:	2314      	movs	r3, #20
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	5e9b      	ldrsh	r3, [r3, r2]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	88d2      	ldrh	r2, [r2, #6]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	db09      	blt.n	8003b40 <_ZN7TFT_GFX13writeFillRectEsssst+0x192>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88da      	ldrh	r2, [r3, #6]
 8003b30:	2308      	movs	r3, #8
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	2328      	movs	r3, #40	; 0x28
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	801a      	strh	r2, [r3, #0]
                        writeFillRectPreclipped(x, y, w, h, color);
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	2400      	movs	r4, #0
 8003b44:	5f1c      	ldrsh	r4, [r3, r4]
 8003b46:	2308      	movs	r3, #8
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	5e9a      	ldrsh	r2, [r3, r2]
 8003b4e:	230a      	movs	r3, #10
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2100      	movs	r1, #0
 8003b54:	5e59      	ldrsh	r1, [r3, r1]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	232c      	movs	r3, #44	; 0x2c
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	2328      	movs	r3, #40	; 0x28
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2500      	movs	r5, #0
 8003b66:	5f5b      	ldrsh	r3, [r3, r5]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	0023      	movs	r3, r4
 8003b6c:	f000 f804 	bl	8003b78 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
                    }
                }
            }
        }
    }
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bdb0      	pop	{r4, r5, r7, pc}

08003b78 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>:

inline void TFT_GFX::writeFillRectPreclipped(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	000c      	movs	r4, r1
 8003b82:	0010      	movs	r0, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	250a      	movs	r5, #10
 8003b88:	197b      	adds	r3, r7, r5
 8003b8a:	1c22      	adds	r2, r4, #0
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	2408      	movs	r4, #8
 8003b90:	193b      	adds	r3, r7, r4
 8003b92:	1c02      	adds	r2, r0, #0
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	1c0a      	adds	r2, r1, #0
 8003b9a:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, w, h);
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	8819      	ldrh	r1, [r3, #0]
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	881c      	ldrh	r4, [r3, #0]
 8003ba8:	2520      	movs	r5, #32
 8003baa:	197b      	adds	r3, r7, r5
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	0023      	movs	r3, r4
 8003bb4:	f7ff fe54 	bl	8003860 <_ZN7TFT_GFX13setAddrWindowEtttt>
    writeColor(color, (uint32_t)w * h);
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	2200      	movs	r2, #0
 8003bbc:	5e9b      	ldrsh	r3, [r3, r2]
 8003bbe:	197a      	adds	r2, r7, r5
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5e52      	ldrsh	r2, [r2, r1]
 8003bc4:	435a      	muls	r2, r3
 8003bc6:	2324      	movs	r3, #36	; 0x24
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	8819      	ldrh	r1, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f000 f804 	bl	8003bdc <_ZN7TFT_GFX10writeColorEtm>
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bdb0      	pop	{r4, r5, r7, pc}

08003bdc <_ZN7TFT_GFX10writeColorEtm>:

void TFT_GFX::writeColor(uint16_t color, uint32_t len){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	230a      	movs	r3, #10
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	1c0a      	adds	r2, r1, #0
 8003bec:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++){
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d20c      	bcs.n	8003c14 <_ZN7TFT_GFX10writeColorEtm+0x38>
		hspi_w16(this->spiInstance, color);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	230a      	movs	r3, #10
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	0019      	movs	r1, r3
 8003c06:	0010      	movs	r0, r2
 8003c08:	f000 fad0 	bl	80041ac <hspi_w16>
	for(uint32_t i = 0; i < len; i++){
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e7ee      	b.n	8003bf2 <_ZN7TFT_GFX10writeColorEtm+0x16>
	}
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b006      	add	sp, #24
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_ZN7TFT_GFX14writeFastVLineEssst>:

void inline TFT_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8003c1c:	b5b0      	push	{r4, r5, r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	000c      	movs	r4, r1
 8003c26:	0010      	movs	r0, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	250a      	movs	r5, #10
 8003c2c:	197b      	adds	r3, r7, r5
 8003c2e:	1c22      	adds	r2, r4, #0
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	2308      	movs	r3, #8
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	1c02      	adds	r2, r0, #0
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	1dbb      	adds	r3, r7, #6
 8003c3c:	1c0a      	adds	r2, r1, #0
 8003c3e:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && h) { // X on screen, nonzero height
 8003c40:	197b      	adds	r3, r7, r5
 8003c42:	2200      	movs	r2, #0
 8003c44:	5e9b      	ldrsh	r3, [r3, r2]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da00      	bge.n	8003c4c <_ZN7TFT_GFX14writeFastVLineEssst+0x30>
 8003c4a:	e072      	b.n	8003d32 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8003c4c:	230a      	movs	r3, #10
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	2200      	movs	r2, #0
 8003c52:	5e9b      	ldrsh	r3, [r3, r2]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	8892      	ldrh	r2, [r2, #4]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	db00      	blt.n	8003c5e <_ZN7TFT_GFX14writeFastVLineEssst+0x42>
 8003c5c:	e069      	b.n	8003d32 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	2200      	movs	r2, #0
 8003c62:	5e9b      	ldrsh	r3, [r3, r2]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d064      	beq.n	8003d32 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
        if(h < 0) {                     // If negative height...
 8003c68:	1dbb      	adds	r3, r7, #6
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	5e9b      	ldrsh	r3, [r3, r2]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da10      	bge.n	8003c94 <_ZN7TFT_GFX14writeFastVLineEssst+0x78>
            y +=  h + 1;                //   Move Y to top edge
 8003c72:	1dbb      	adds	r3, r7, #6
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	2108      	movs	r1, #8
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	18d3      	adds	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	801a      	strh	r2, [r3, #0]
            h  = -h;                    //   Use positive height
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	425b      	negs	r3, r3
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	801a      	strh	r2, [r3, #0]
        }
        if(y < this->_height) {               // Not off bottom
 8003c94:	2308      	movs	r3, #8
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	88d2      	ldrh	r2, [r2, #6]
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	da46      	bge.n	8003d32 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
            int16_t y2 = y + h - 1;
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	18d3      	adds	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	2116      	movs	r1, #22
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	801a      	strh	r2, [r3, #0]
            if(y2 >= 0) {               // Not off top
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	db35      	blt.n	8003d32 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
                // Line partly or fully overlaps screen
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	2200      	movs	r2, #0
 8003ccc:	5e9b      	ldrsh	r3, [r3, r2]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da0a      	bge.n	8003ce8 <_ZN7TFT_GFX14writeFastVLineEssst+0xcc>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	2316      	movs	r3, #22
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	801a      	strh	r2, [r3, #0]
                if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8003ce8:	2316      	movs	r3, #22
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	2200      	movs	r2, #0
 8003cee:	5e9b      	ldrsh	r3, [r3, r2]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	88d2      	ldrh	r2, [r2, #6]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	db08      	blt.n	8003d0a <_ZN7TFT_GFX14writeFastVLineEssst+0xee>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88da      	ldrh	r2, [r3, #6]
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	1dbb      	adds	r3, r7, #6
 8003d08:	801a      	strh	r2, [r3, #0]
                writeFillRectPreclipped(x, y, 1, h, color);
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	2200      	movs	r2, #0
 8003d10:	5e9a      	ldrsh	r2, [r3, r2]
 8003d12:	230a      	movs	r3, #10
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2100      	movs	r1, #0
 8003d18:	5e59      	ldrsh	r1, [r3, r1]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	2328      	movs	r3, #40	; 0x28
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	2400      	movs	r4, #0
 8003d28:	5f1b      	ldrsh	r3, [r3, r4]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f7ff ff23 	bl	8003b78 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
            }
        }
    }
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b006      	add	sp, #24
 8003d38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d3c <_ZN7TFT_GFX8drawCharEsshtthh>:
        }
    }
}

void TFT_GFX::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) 
{
 8003d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	000c      	movs	r4, r1
 8003d46:	0010      	movs	r0, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	250a      	movs	r5, #10
 8003d4c:	197b      	adds	r3, r7, r5
 8003d4e:	1c22      	adds	r2, r4, #0
 8003d50:	801a      	strh	r2, [r3, #0]
 8003d52:	2308      	movs	r3, #8
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	1c02      	adds	r2, r0, #0
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	1dfb      	adds	r3, r7, #7
 8003d5c:	1c0a      	adds	r2, r1, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
    if((x >= this->_width)            || // Clip right
 8003d60:	197b      	adds	r3, r7, r5
 8003d62:	2200      	movs	r2, #0
 8003d64:	5e9b      	ldrsh	r3, [r3, r2]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	8892      	ldrh	r2, [r2, #4]
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	db00      	blt.n	8003d70 <_ZN7TFT_GFX8drawCharEsshtthh+0x34>
 8003d6e:	e1c2      	b.n	80040f6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        (y >= this->_height)           || // Clip bottom
 8003d70:	2308      	movs	r3, #8
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2200      	movs	r2, #0
 8003d76:	5e9b      	ldrsh	r3, [r3, r2]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	88d2      	ldrh	r2, [r2, #6]
    if((x >= this->_width)            || // Clip right
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	db00      	blt.n	8003d82 <_ZN7TFT_GFX8drawCharEsshtthh+0x46>
 8003d80:	e1b9      	b.n	80040f6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8003d82:	230a      	movs	r3, #10
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	2100      	movs	r1, #0
 8003d88:	5e59      	ldrsh	r1, [r3, r1]
 8003d8a:	2330      	movs	r3, #48	; 0x30
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4694      	mov	ip, r2
 8003d90:	44bc      	add	ip, r7
 8003d92:	4463      	add	r3, ip
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	0013      	movs	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	18cb      	adds	r3, r1, r3
 8003da0:	3b01      	subs	r3, #1
        (y >= this->_height)           || // Clip bottom
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da00      	bge.n	8003da8 <_ZN7TFT_GFX8drawCharEsshtthh+0x6c>
 8003da6:	e1a6      	b.n	80040f6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8003da8:	2308      	movs	r3, #8
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	5e9a      	ldrsh	r2, [r3, r2]
 8003db0:	2334      	movs	r3, #52	; 0x34
 8003db2:	2108      	movs	r1, #8
 8003db4:	468c      	mov	ip, r1
 8003db6:	44bc      	add	ip, r7
 8003db8:	4463      	add	r3, ip
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	18d3      	adds	r3, r2, r3
 8003dc0:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da00      	bge.n	8003dc8 <_ZN7TFT_GFX8drawCharEsshtthh+0x8c>
 8003dc6:	e196      	b.n	80040f6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        return;

    if(c >= 176) c++; // Handle 'classic' charset behavior
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2baf      	cmp	r3, #175	; 0xaf
 8003dce:	d904      	bls.n	8003dda <_ZN7TFT_GFX8drawCharEsshtthh+0x9e>
 8003dd0:	1dfb      	adds	r3, r7, #7
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	1dfb      	adds	r3, r7, #7
 8003dd6:	3201      	adds	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]

    //startWrite();
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8003dda:	2317      	movs	r3, #23
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	2317      	movs	r3, #23
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	dd00      	ble.n	8003df0 <_ZN7TFT_GFX8drawCharEsshtthh+0xb4>
 8003dee:	e11f      	b.n	8004030 <_ZN7TFT_GFX8drawCharEsshtthh+0x2f4>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8003df0:	1dfb      	adds	r3, r7, #7
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	0013      	movs	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	189a      	adds	r2, r3, r2
 8003dfa:	2317      	movs	r3, #23
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	18d2      	adds	r2, r2, r3
 8003e04:	2316      	movs	r3, #22
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	49bd      	ldr	r1, [pc, #756]	; (8004100 <_ZN7TFT_GFX8drawCharEsshtthh+0x3c4>)
 8003e0a:	5c8a      	ldrb	r2, [r1, r2]
 8003e0c:	701a      	strb	r2, [r3, #0]
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8003e0e:	2315      	movs	r3, #21
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	2315      	movs	r3, #21
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	2b07      	cmp	r3, #7
 8003e20:	dd00      	ble.n	8003e24 <_ZN7TFT_GFX8drawCharEsshtthh+0xe8>
 8003e22:	e0fb      	b.n	800401c <_ZN7TFT_GFX8drawCharEsshtthh+0x2e0>
            if(line & 1) {
 8003e24:	2316      	movs	r3, #22
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d06c      	beq.n	8003f0a <_ZN7TFT_GFX8drawCharEsshtthh+0x1ce>
                if(size_x == 1 && size_y == 1)
 8003e30:	2330      	movs	r3, #48	; 0x30
 8003e32:	2208      	movs	r2, #8
 8003e34:	4694      	mov	ip, r2
 8003e36:	44bc      	add	ip, r7
 8003e38:	4463      	add	r3, ip
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d127      	bne.n	8003e90 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
 8003e40:	2334      	movs	r3, #52	; 0x34
 8003e42:	2208      	movs	r2, #8
 8003e44:	4694      	mov	ip, r2
 8003e46:	44bc      	add	ip, r7
 8003e48:	4463      	add	r3, ip
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d11f      	bne.n	8003e90 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
                    writePixel(x+i, y+j, color);
 8003e50:	2317      	movs	r3, #23
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b25b      	sxtb	r3, r3
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	18d3      	adds	r3, r2, r3
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	b219      	sxth	r1, r3
 8003e66:	2315      	movs	r3, #21
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	2308      	movs	r3, #8
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	b21a      	sxth	r2, r3
 8003e7c:	2328      	movs	r3, #40	; 0x28
 8003e7e:	2008      	movs	r0, #8
 8003e80:	4684      	mov	ip, r0
 8003e82:	44bc      	add	ip, r7
 8003e84:	4463      	add	r3, ip
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff fd4b 	bl	8003924 <_ZN7TFT_GFX10writePixelEsst>
 8003e8e:	e0b5      	b.n	8003ffc <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 8003e90:	2317      	movs	r3, #23
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2030      	movs	r0, #48	; 0x30
 8003e9c:	2408      	movs	r4, #8
 8003e9e:	193a      	adds	r2, r7, r4
 8003ea0:	1812      	adds	r2, r2, r0
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	4353      	muls	r3, r2
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	230a      	movs	r3, #10
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	18d3      	adds	r3, r2, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	b219      	sxth	r1, r3
 8003eb6:	2315      	movs	r3, #21
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b25b      	sxtb	r3, r3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2634      	movs	r6, #52	; 0x34
 8003ec2:	193a      	adds	r2, r7, r4
 8003ec4:	1992      	adds	r2, r2, r6
 8003ec6:	7812      	ldrb	r2, [r2, #0]
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	4353      	muls	r3, r2
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	0023      	movs	r3, r4
 8003ed0:	001d      	movs	r5, r3
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	18d3      	adds	r3, r2, r3
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b21c      	sxth	r4, r3
 8003edc:	002a      	movs	r2, r5
 8003ede:	18bb      	adds	r3, r7, r2
 8003ee0:	181b      	adds	r3, r3, r0
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b21d      	sxth	r5, r3
 8003ee6:	18bb      	adds	r3, r7, r2
 8003ee8:	199b      	adds	r3, r3, r6
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	2228      	movs	r2, #40	; 0x28
 8003ef2:	2608      	movs	r6, #8
 8003ef4:	46b4      	mov	ip, r6
 8003ef6:	44bc      	add	ip, r7
 8003ef8:	4462      	add	r2, ip
 8003efa:	8812      	ldrh	r2, [r2, #0]
 8003efc:	9201      	str	r2, [sp, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	002b      	movs	r3, r5
 8003f02:	0022      	movs	r2, r4
 8003f04:	f7ff fd53 	bl	80039ae <_ZN7TFT_GFX13writeFillRectEsssst>
 8003f08:	e078      	b.n	8003ffc <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
            } else if(bg != color) {
 8003f0a:	232c      	movs	r3, #44	; 0x2c
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	4694      	mov	ip, r2
 8003f10:	44bc      	add	ip, r7
 8003f12:	4463      	add	r3, ip
 8003f14:	2228      	movs	r2, #40	; 0x28
 8003f16:	2108      	movs	r1, #8
 8003f18:	1879      	adds	r1, r7, r1
 8003f1a:	1889      	adds	r1, r1, r2
 8003f1c:	881a      	ldrh	r2, [r3, #0]
 8003f1e:	880b      	ldrh	r3, [r1, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d06b      	beq.n	8003ffc <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                if(size_x == 1 && size_y == 1)
 8003f24:	2330      	movs	r3, #48	; 0x30
 8003f26:	2208      	movs	r2, #8
 8003f28:	4694      	mov	ip, r2
 8003f2a:	44bc      	add	ip, r7
 8003f2c:	4463      	add	r3, ip
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d127      	bne.n	8003f84 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
 8003f34:	2334      	movs	r3, #52	; 0x34
 8003f36:	2208      	movs	r2, #8
 8003f38:	4694      	mov	ip, r2
 8003f3a:	44bc      	add	ip, r7
 8003f3c:	4463      	add	r3, ip
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d11f      	bne.n	8003f84 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
                    writePixel(x+i, y+j, bg);
 8003f44:	2317      	movs	r3, #23
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	230a      	movs	r3, #10
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	b219      	sxth	r1, r3
 8003f5a:	2315      	movs	r3, #21
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	2308      	movs	r3, #8
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	18d3      	adds	r3, r2, r3
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	232c      	movs	r3, #44	; 0x2c
 8003f72:	2008      	movs	r0, #8
 8003f74:	4684      	mov	ip, r0
 8003f76:	44bc      	add	ip, r7
 8003f78:	4463      	add	r3, ip
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fcd1 	bl	8003924 <_ZN7TFT_GFX10writePixelEsst>
 8003f82:	e03b      	b.n	8003ffc <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 8003f84:	2317      	movs	r3, #23
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	b25b      	sxtb	r3, r3
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2030      	movs	r0, #48	; 0x30
 8003f90:	2408      	movs	r4, #8
 8003f92:	193a      	adds	r2, r7, r4
 8003f94:	1812      	adds	r2, r2, r0
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	4353      	muls	r3, r2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	18d3      	adds	r3, r2, r3
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	b219      	sxth	r1, r3
 8003faa:	2315      	movs	r3, #21
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2634      	movs	r6, #52	; 0x34
 8003fb6:	193a      	adds	r2, r7, r4
 8003fb8:	1992      	adds	r2, r2, r6
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	b292      	uxth	r2, r2
 8003fbe:	4353      	muls	r3, r2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	0023      	movs	r3, r4
 8003fc4:	001d      	movs	r5, r3
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	18d3      	adds	r3, r2, r3
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b21c      	sxth	r4, r3
 8003fd0:	002a      	movs	r2, r5
 8003fd2:	18bb      	adds	r3, r7, r2
 8003fd4:	181b      	adds	r3, r3, r0
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b21d      	sxth	r5, r3
 8003fda:	18bb      	adds	r3, r7, r2
 8003fdc:	199b      	adds	r3, r3, r6
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	222c      	movs	r2, #44	; 0x2c
 8003fe6:	2608      	movs	r6, #8
 8003fe8:	46b4      	mov	ip, r6
 8003fea:	44bc      	add	ip, r7
 8003fec:	4462      	add	r2, ip
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	9201      	str	r2, [sp, #4]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	002b      	movs	r3, r5
 8003ff6:	0022      	movs	r2, r4
 8003ff8:	f7ff fcd9 	bl	80039ae <_ZN7TFT_GFX13writeFillRectEsssst>
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8003ffc:	2115      	movs	r1, #21
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	b25b      	sxtb	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	3301      	adds	r3, #1
 8004008:	b2da      	uxtb	r2, r3
 800400a:	187b      	adds	r3, r7, r1
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	2116      	movs	r1, #22
 8004010:	187b      	adds	r3, r7, r1
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	105a      	asrs	r2, r3, #1
 8004016:	187b      	adds	r3, r7, r1
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e6fc      	b.n	8003e16 <_ZN7TFT_GFX8drawCharEsshtthh+0xda>
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 800401c:	2117      	movs	r1, #23
 800401e:	187b      	adds	r3, r7, r1
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b25b      	sxtb	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3301      	adds	r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e6d8      	b.n	8003de2 <_ZN7TFT_GFX8drawCharEsshtthh+0xa6>
            }
        }
    }
    if(bg != color) { // If opaque, draw vertical line for last column
 8004030:	232c      	movs	r3, #44	; 0x2c
 8004032:	2208      	movs	r2, #8
 8004034:	4694      	mov	ip, r2
 8004036:	44bc      	add	ip, r7
 8004038:	4463      	add	r3, ip
 800403a:	2228      	movs	r2, #40	; 0x28
 800403c:	2108      	movs	r1, #8
 800403e:	1879      	adds	r1, r7, r1
 8004040:	1889      	adds	r1, r1, r2
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	880b      	ldrh	r3, [r1, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d056      	beq.n	80040f8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 800404a:	2330      	movs	r3, #48	; 0x30
 800404c:	2208      	movs	r2, #8
 800404e:	4694      	mov	ip, r2
 8004050:	44bc      	add	ip, r7
 8004052:	4463      	add	r3, ip
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d11d      	bne.n	8004096 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 800405a:	2334      	movs	r3, #52	; 0x34
 800405c:	2208      	movs	r2, #8
 800405e:	4694      	mov	ip, r2
 8004060:	44bc      	add	ip, r7
 8004062:	4463      	add	r3, ip
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d115      	bne.n	8004096 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 800406a:	230a      	movs	r3, #10
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	3305      	adds	r3, #5
 8004072:	b29b      	uxth	r3, r3
 8004074:	b219      	sxth	r1, r3
 8004076:	2308      	movs	r3, #8
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2200      	movs	r2, #0
 800407c:	5e9a      	ldrsh	r2, [r3, r2]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	232c      	movs	r3, #44	; 0x2c
 8004082:	2408      	movs	r4, #8
 8004084:	46a4      	mov	ip, r4
 8004086:	44bc      	add	ip, r7
 8004088:	4463      	add	r3, ip
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2308      	movs	r3, #8
 8004090:	f7ff fdc4 	bl	8003c1c <_ZN7TFT_GFX14writeFastVLineEssst>
 8004094:	e030      	b.n	80040f8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 8004096:	2030      	movs	r0, #48	; 0x30
 8004098:	2408      	movs	r4, #8
 800409a:	193b      	adds	r3, r7, r4
 800409c:	181b      	adds	r3, r3, r0
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1c1a      	adds	r2, r3, #0
 80040a4:	0092      	lsls	r2, r2, #2
 80040a6:	18d3      	adds	r3, r2, r3
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	230a      	movs	r3, #10
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	18d3      	adds	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b219      	sxth	r1, r3
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	181b      	adds	r3, r3, r0
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b21d      	sxth	r5, r3
 80040be:	2334      	movs	r3, #52	; 0x34
 80040c0:	2208      	movs	r2, #8
 80040c2:	4694      	mov	ip, r2
 80040c4:	44bc      	add	ip, r7
 80040c6:	4463      	add	r3, ip
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	b21b      	sxth	r3, r3
 80040d2:	0022      	movs	r2, r4
 80040d4:	18ba      	adds	r2, r7, r2
 80040d6:	2400      	movs	r4, #0
 80040d8:	5f14      	ldrsh	r4, [r2, r4]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	222c      	movs	r2, #44	; 0x2c
 80040de:	2608      	movs	r6, #8
 80040e0:	46b4      	mov	ip, r6
 80040e2:	44bc      	add	ip, r7
 80040e4:	4462      	add	r2, ip
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	9201      	str	r2, [sp, #4]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	002b      	movs	r3, r5
 80040ee:	0022      	movs	r2, r4
 80040f0:	f7ff fc5d 	bl	80039ae <_ZN7TFT_GFX13writeFillRectEsssst>
 80040f4:	e000      	b.n	80040f8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        return;
 80040f6:	46c0      	nop			; (mov r8, r8)
    }
    //endWrite();
}
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b007      	add	sp, #28
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	08004720 	.word	0x08004720

08004104 <_ZN7TFT_GFX5widthEv>:

uint16_t TFT_GFX::width(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	return this->_width;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	889b      	ldrh	r3, [r3, #4]
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <_ZN7TFT_GFX6heightEv>:

uint16_t TFT_GFX::height(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	return this->_height;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	88db      	ldrh	r3, [r3, #6]
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 8004130:	2390      	movs	r3, #144	; 0x90
 8004132:	05db      	lsls	r3, r3, #23
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	2390      	movs	r3, #144	; 0x90
 8004138:	05db      	lsls	r3, r3, #23
 800413a:	2101      	movs	r1, #1
 800413c:	438a      	bics	r2, r1
 800413e:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8004140:	2096      	movs	r0, #150	; 0x96
 8004142:	f7fc ff5f 	bl	8001004 <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 8004146:	2390      	movs	r3, #144	; 0x90
 8004148:	05db      	lsls	r3, r3, #23
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	2390      	movs	r3, #144	; 0x90
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	2101      	movs	r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8004156:	2096      	movs	r0, #150	; 0x96
 8004158:	f7fc ff54 	bl	8001004 <HAL_Delay>
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <pullCSLow>:

void pullCSLow(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <pullCSLow+0x18>)
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <pullCSLow+0x18>)
 800416e:	2102      	movs	r1, #2
 8004170:	438a      	bics	r2, r1
 8004172:	615a      	str	r2, [r3, #20]
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	48000800 	.word	0x48000800

08004180 <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	000a      	movs	r2, r1
 800418a:	1cfb      	adds	r3, r7, #3
 800418c:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2202      	movs	r2, #2
 8004196:	4013      	ands	r3, r2
 8004198:	d0fa      	beq.n	8004190 <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	330c      	adds	r3, #12
 800419e:	1cfa      	adds	r2, r7, #3
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <hspi_w16>:

void hspi_w16(SPI_TypeDef *SPIx, uint16_t dat) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	000a      	movs	r2, r1
 80041b6:	1cbb      	adds	r3, r7, #2
 80041b8:	801a      	strh	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	d0fa      	beq.n	80041bc <hspi_w16+0x10>
  // Send the data.
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
 80041c6:	1cbb      	adds	r3, r7, #2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	b21a      	sxth	r2, r3
 80041ce:	1cbb      	adds	r3, r7, #2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b21b      	sxth	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b21a      	sxth	r2, r3
 80041dc:	1cbb      	adds	r3, r7, #2
 80041de:	801a      	strh	r2, [r3, #0]
  *(uint16_t*)&(SPIx->DR) = dat;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	330c      	adds	r3, #12
 80041e4:	1cba      	adds	r2, r7, #2
 80041e6:	8812      	ldrh	r2, [r2, #0]
 80041e8:	801a      	strh	r2, [r3, #0]
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b002      	add	sp, #8
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <hspi_cmd>:

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	000a      	movs	r2, r1
 80041fe:	1cfb      	adds	r3, r7, #3
 8004200:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2280      	movs	r2, #128	; 0x80
 800420a:	4013      	ands	r3, r2
 800420c:	d1fa      	bne.n	8004204 <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <hspi_cmd+0x54>)
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <hspi_cmd+0x54>)
 8004214:	2101      	movs	r1, #1
 8004216:	438a      	bics	r2, r1
 8004218:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 800421a:	1cfb      	adds	r3, r7, #3
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f7ff ffac 	bl	8004180 <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	4013      	ands	r3, r2
 8004232:	d1fa      	bne.n	800422a <hspi_cmd+0x36>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <hspi_cmd+0x54>)
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <hspi_cmd+0x54>)
 800423a:	2101      	movs	r1, #1
 800423c:	430a      	orrs	r2, r1
 800423e:	615a      	str	r2, [r3, #20]
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	48000800 	.word	0x48000800

0800424c <ili9341_hspi_init>:

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	21ef      	movs	r1, #239	; 0xef
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff ffcb 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2103      	movs	r1, #3
 8004262:	0018      	movs	r0, r3
 8004264:	f7ff ff8c 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x80);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	0018      	movs	r0, r3
 800426e:	f7ff ff87 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2102      	movs	r1, #2
 8004276:	0018      	movs	r0, r3
 8004278:	f7ff ff82 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	21cf      	movs	r1, #207	; 0xcf
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff ffb7 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2100      	movs	r1, #0
 800428a:	0018      	movs	r0, r3
 800428c:	f7ff ff78 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	21c1      	movs	r1, #193	; 0xc1
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff ff73 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x30);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2130      	movs	r1, #48	; 0x30
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff ff6e 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	21ed      	movs	r1, #237	; 0xed
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff ffa3 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2164      	movs	r1, #100	; 0x64
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ff64 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2103      	movs	r1, #3
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff ff5f 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x12);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2112      	movs	r1, #18
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff ff5a 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x81);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2181      	movs	r1, #129	; 0x81
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7ff ff55 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	21e8      	movs	r1, #232	; 0xe8
 80042da:	0018      	movs	r0, r3
 80042dc:	f7ff ff8a 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2185      	movs	r1, #133	; 0x85
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff ff4b 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2100      	movs	r1, #0
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff ff46 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x78);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2178      	movs	r1, #120	; 0x78
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ff41 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	21cb      	movs	r1, #203	; 0xcb
 8004302:	0018      	movs	r0, r3
 8004304:	f7ff ff76 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2139      	movs	r1, #57	; 0x39
 800430c:	0018      	movs	r0, r3
 800430e:	f7ff ff37 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	212c      	movs	r1, #44	; 0x2c
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff ff32 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2100      	movs	r1, #0
 8004320:	0018      	movs	r0, r3
 8004322:	f7ff ff2d 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2134      	movs	r1, #52	; 0x34
 800432a:	0018      	movs	r0, r3
 800432c:	f7ff ff28 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2102      	movs	r1, #2
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff ff23 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	21f7      	movs	r1, #247	; 0xf7
 800433e:	0018      	movs	r0, r3
 8004340:	f7ff ff58 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2120      	movs	r1, #32
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff ff19 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	21ea      	movs	r1, #234	; 0xea
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff ff4e 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2100      	movs	r1, #0
 800435c:	0018      	movs	r0, r3
 800435e:	f7ff ff0f 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2100      	movs	r1, #0
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff ff0a 	bl	8004180 <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	21c0      	movs	r1, #192	; 0xc0
 8004370:	0018      	movs	r0, r3
 8004372:	f7ff ff3f 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2123      	movs	r1, #35	; 0x23
 800437a:	0018      	movs	r0, r3
 800437c:	f7ff ff00 	bl	8004180 <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	21c1      	movs	r1, #193	; 0xc1
 8004384:	0018      	movs	r0, r3
 8004386:	f7ff ff35 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2110      	movs	r1, #16
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff fef6 	bl	8004180 <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	21c5      	movs	r1, #197	; 0xc5
 8004398:	0018      	movs	r0, r3
 800439a:	f7ff ff2b 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	213e      	movs	r1, #62	; 0x3e
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff feec 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x28);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2128      	movs	r1, #40	; 0x28
 80043ac:	0018      	movs	r0, r3
 80043ae:	f7ff fee7 	bl	8004180 <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	21c7      	movs	r1, #199	; 0xc7
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff ff1c 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2186      	movs	r1, #134	; 0x86
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7ff fedd 	bl	8004180 <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2136      	movs	r1, #54	; 0x36
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff ff12 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2148      	movs	r1, #72	; 0x48
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7ff fed3 	bl	8004180 <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2137      	movs	r1, #55	; 0x37
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff ff08 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2100      	movs	r1, #0
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7ff fec9 	bl	8004180 <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	213a      	movs	r1, #58	; 0x3a
 80043f2:	0018      	movs	r0, r3
 80043f4:	f7ff fefe 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2155      	movs	r1, #85	; 0x55
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff febf 	bl	8004180 <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	21b1      	movs	r1, #177	; 0xb1
 8004406:	0018      	movs	r0, r3
 8004408:	f7ff fef4 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2100      	movs	r1, #0
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff feb5 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x18);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2118      	movs	r1, #24
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff feb0 	bl	8004180 <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	21b6      	movs	r1, #182	; 0xb6
 8004424:	0018      	movs	r0, r3
 8004426:	f7ff fee5 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2108      	movs	r1, #8
 800442e:	0018      	movs	r0, r3
 8004430:	f7ff fea6 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x82);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2182      	movs	r1, #130	; 0x82
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fea1 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x27);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2127      	movs	r1, #39	; 0x27
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff fe9c 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	21f2      	movs	r1, #242	; 0xf2
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fed1 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2100      	movs	r1, #0
 8004456:	0018      	movs	r0, r3
 8004458:	f7ff fe92 	bl	8004180 <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2126      	movs	r1, #38	; 0x26
 8004460:	0018      	movs	r0, r3
 8004462:	f7ff fec7 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2101      	movs	r1, #1
 800446a:	0018      	movs	r0, r3
 800446c:	f7ff fe88 	bl	8004180 <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	21e0      	movs	r1, #224	; 0xe0
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff febd 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	210f      	movs	r1, #15
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff fe7e 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2131      	movs	r1, #49	; 0x31
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff fe79 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	212b      	movs	r1, #43	; 0x2b
 8004492:	0018      	movs	r0, r3
 8004494:	f7ff fe74 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	210c      	movs	r1, #12
 800449c:	0018      	movs	r0, r3
 800449e:	f7ff fe6f 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	210e      	movs	r1, #14
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7ff fe6a 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2108      	movs	r1, #8
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7ff fe65 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	214e      	movs	r1, #78	; 0x4e
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7ff fe60 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	21f1      	movs	r1, #241	; 0xf1
 80044c4:	0018      	movs	r0, r3
 80044c6:	f7ff fe5b 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x37);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2137      	movs	r1, #55	; 0x37
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff fe56 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2107      	movs	r1, #7
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fe51 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x10);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2110      	movs	r1, #16
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7ff fe4c 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2103      	movs	r1, #3
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7ff fe47 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	210e      	movs	r1, #14
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7ff fe42 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x09);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2109      	movs	r1, #9
 8004500:	0018      	movs	r0, r3
 8004502:	f7ff fe3d 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2100      	movs	r1, #0
 800450a:	0018      	movs	r0, r3
 800450c:	f7ff fe38 	bl	8004180 <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	21e1      	movs	r1, #225	; 0xe1
 8004514:	0018      	movs	r0, r3
 8004516:	f7ff fe6d 	bl	80041f4 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2100      	movs	r1, #0
 800451e:	0018      	movs	r0, r3
 8004520:	f7ff fe2e 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	210e      	movs	r1, #14
 8004528:	0018      	movs	r0, r3
 800452a:	f7ff fe29 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x14);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2114      	movs	r1, #20
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff fe24 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2103      	movs	r1, #3
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fe1f 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x11);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2111      	movs	r1, #17
 8004546:	0018      	movs	r0, r3
 8004548:	f7ff fe1a 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2107      	movs	r1, #7
 8004550:	0018      	movs	r0, r3
 8004552:	f7ff fe15 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2131      	movs	r1, #49	; 0x31
 800455a:	0018      	movs	r0, r3
 800455c:	f7ff fe10 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	21c1      	movs	r1, #193	; 0xc1
 8004564:	0018      	movs	r0, r3
 8004566:	f7ff fe0b 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x48);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2148      	movs	r1, #72	; 0x48
 800456e:	0018      	movs	r0, r3
 8004570:	f7ff fe06 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2108      	movs	r1, #8
 8004578:	0018      	movs	r0, r3
 800457a:	f7ff fe01 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	210f      	movs	r1, #15
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff fdfc 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	210c      	movs	r1, #12
 800458c:	0018      	movs	r0, r3
 800458e:	f7ff fdf7 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2131      	movs	r1, #49	; 0x31
 8004596:	0018      	movs	r0, r3
 8004598:	f7ff fdf2 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x36);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2136      	movs	r1, #54	; 0x36
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7ff fded 	bl	8004180 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	210f      	movs	r1, #15
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7ff fde8 	bl	8004180 <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2111      	movs	r1, #17
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7ff fe1d 	bl	80041f4 <hspi_cmd>
  HAL_Delay(150);
 80045ba:	2096      	movs	r0, #150	; 0x96
 80045bc:	f7fc fd22 	bl	8001004 <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2129      	movs	r1, #41	; 0x29
 80045c4:	0018      	movs	r0, r3
 80045c6:	f7ff fe15 	bl	80041f4 <hspi_cmd>
	HAL_Delay(150);
 80045ca:	2096      	movs	r0, #150	; 0x96
 80045cc:	f7fc fd1a 	bl	8001004 <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2113      	movs	r1, #19
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff fe0d 	bl	80041f4 <hspi_cmd>
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b002      	add	sp, #8
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045e4:	480d      	ldr	r0, [pc, #52]	; (800461c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045e8:	480d      	ldr	r0, [pc, #52]	; (8004620 <LoopForever+0x6>)
  ldr r1, =_edata
 80045ea:	490e      	ldr	r1, [pc, #56]	; (8004624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045ec:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <LoopForever+0xe>)
  movs r3, #0
 80045ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045f0:	e002      	b.n	80045f8 <LoopCopyDataInit>

080045f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045f6:	3304      	adds	r3, #4

080045f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045fc:	d3f9      	bcc.n	80045f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045fe:	4a0b      	ldr	r2, [pc, #44]	; (800462c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004600:	4c0b      	ldr	r4, [pc, #44]	; (8004630 <LoopForever+0x16>)
  movs r3, #0
 8004602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004604:	e001      	b.n	800460a <LoopFillZerobss>

08004606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004608:	3204      	adds	r2, #4

0800460a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800460a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800460c:	d3fb      	bcc.n	8004606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800460e:	f7ff f8cf 	bl	80037b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004612:	f000 f811 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004616:	f7fe fc07 	bl	8002e28 <main>

0800461a <LoopForever>:

LoopForever:
    b LoopForever
 800461a:	e7fe      	b.n	800461a <LoopForever>
  ldr   r0, =_estack
 800461c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004624:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8004628:	08004c28 	.word	0x08004c28
  ldr r2, =_sbss
 800462c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8004630:	200000f8 	.word	0x200000f8

08004634 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004634:	e7fe      	b.n	8004634 <ADC1_COMP_IRQHandler>
	...

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4d0c      	ldr	r5, [pc, #48]	; (8004670 <__libc_init_array+0x38>)
 800463e:	4c0d      	ldr	r4, [pc, #52]	; (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	2600      	movs	r6, #0
 800464a:	f000 f821 	bl	8004690 <_init>
 800464e:	4d0a      	ldr	r5, [pc, #40]	; (8004678 <__libc_init_array+0x40>)
 8004650:	4c0a      	ldr	r4, [pc, #40]	; (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	00b3      	lsls	r3, r6, #2
 800465e:	58eb      	ldr	r3, [r5, r3]
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	00b3      	lsls	r3, r6, #2
 8004668:	58eb      	ldr	r3, [r5, r3]
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08004c20 	.word	0x08004c20
 8004674:	08004c20 	.word	0x08004c20
 8004678:	08004c20 	.word	0x08004c20
 800467c:	08004c24 	.word	0x08004c24

08004680 <memset>:
 8004680:	0003      	movs	r3, r0
 8004682:	1812      	adds	r2, r2, r0
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <memset+0xa>
 8004688:	4770      	bx	lr
 800468a:	7019      	strb	r1, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	e7f9      	b.n	8004684 <memset+0x4>

08004690 <_init>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr

0800469c <_fini>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr
