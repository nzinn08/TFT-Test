
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003620  08003620  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003620  08003620  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003620  08003620  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800362c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000004  08003630  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003630  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001176e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c8d  00000000  00000000  0003179a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d0  00000000  00000000  00034428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c8  00000000  00000000  00034cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000194fb  00000000  00000000  000354c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b680  00000000  00000000  0004e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b2dc  00000000  00000000  0005a03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d60  00000000  00000000  000d5394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003378 	.word	0x08003378

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003378 	.word	0x08003378

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fb43 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ffca 	bl	80011e8 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e7 	bl	8000436 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000019c 	.word	0x2000019c

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	2000019c 	.word	0x2000019c

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	230f      	movs	r3, #15
 8000308:	400b      	ands	r3, r1
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0011      	movs	r1, r2
 800031e:	2203      	movs	r2, #3
 8000320:	400a      	ands	r2, r1
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	4091      	lsls	r1, r2
 8000328:	000a      	movs	r2, r1
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
 800032e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	019b      	lsls	r3, r3, #6
 8000334:	22ff      	movs	r2, #255	; 0xff
 8000336:	401a      	ands	r2, r3
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0018      	movs	r0, r3
 800033e:	2303      	movs	r3, #3
 8000340:	4003      	ands	r3, r0
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001c      	movs	r4, r3
 800034e:	230f      	movs	r3, #15
 8000350:	4023      	ands	r3, r4
 8000352:	3b08      	subs	r3, #8
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	430a      	orrs	r2, r1
 8000358:	3306      	adds	r3, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18c3      	adds	r3, r0, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	33c0      	adds	r3, #192	; 0xc0
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	589b      	ldr	r3, [r3, r2]
 8000374:	1dfa      	adds	r2, r7, #7
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	0011      	movs	r1, r2
 800037a:	2203      	movs	r2, #3
 800037c:	400a      	ands	r2, r1
 800037e:	00d2      	lsls	r2, r2, #3
 8000380:	21ff      	movs	r1, #255	; 0xff
 8000382:	4091      	lsls	r1, r2
 8000384:	000a      	movs	r2, r1
 8000386:	43d2      	mvns	r2, r2
 8000388:	401a      	ands	r2, r3
 800038a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	019b      	lsls	r3, r3, #6
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	401a      	ands	r2, r3
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0018      	movs	r0, r3
 800039a:	2303      	movs	r3, #3
 800039c:	4003      	ands	r3, r0
 800039e:	00db      	lsls	r3, r3, #3
 80003a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <NVIC_SetPriority+0xd8>)
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	501a      	str	r2, [r3, r0]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b003      	add	sp, #12
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	210f      	movs	r1, #15
 8000418:	187b      	adds	r3, r7, r1
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b25b      	sxtb	r3, r3
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff5d 	bl	80002e8 <NVIC_SetPriority>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b004      	add	sp, #16
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ffbf 	bl	80003c4 <SysTick_Config>
 8000446:	0003      	movs	r3, r0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000466:	e155      	b.n	8000714 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	4091      	lsls	r1, r2
 8000472:	000a      	movs	r2, r1
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d100      	bne.n	8000480 <HAL_GPIO_Init+0x30>
 800047e:	e146      	b.n	800070e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d003      	beq.n	8000490 <HAL_GPIO_Init+0x40>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b12      	cmp	r3, #18
 800048e:	d123      	bne.n	80004d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	08da      	lsrs	r2, r3, #3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	58d3      	ldr	r3, [r2, r3]
 800049c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2207      	movs	r2, #7
 80004a2:	4013      	ands	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	220f      	movs	r2, #15
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	43da      	mvns	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	691a      	ldr	r2, [r3, #16]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2107      	movs	r1, #7
 80004bc:	400b      	ands	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	409a      	lsls	r2, r3
 80004c2:	0013      	movs	r3, r2
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	08da      	lsrs	r2, r3, #3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3208      	adds	r2, #8
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	6939      	ldr	r1, [r7, #16]
 80004d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2203      	movs	r2, #3
 80004e4:	409a      	lsls	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	43da      	mvns	r2, r3
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2203      	movs	r2, #3
 80004f6:	401a      	ands	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00b      	beq.n	800052c <HAL_GPIO_Init+0xdc>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d007      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	2b11      	cmp	r3, #17
 8000522:	d003      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b12      	cmp	r3, #18
 800052a:	d130      	bne.n	800058e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	409a      	lsls	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	43da      	mvns	r2, r3
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000562:	2201      	movs	r2, #1
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	409a      	lsls	r2, r3
 8000568:	0013      	movs	r3, r2
 800056a:	43da      	mvns	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4013      	ands	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	091b      	lsrs	r3, r3, #4
 8000578:	2201      	movs	r2, #1
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
 8000580:	0013      	movs	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4313      	orrs	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2203      	movs	r2, #3
 800059a:	409a      	lsls	r2, r3
 800059c:	0013      	movs	r3, r2
 800059e:	43da      	mvns	r2, r3
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	4013      	ands	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	055b      	lsls	r3, r3, #21
 80005c6:	4013      	ands	r3, r2
 80005c8:	d100      	bne.n	80005cc <HAL_GPIO_Init+0x17c>
 80005ca:	e0a0      	b.n	800070e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005cc:	4b57      	ldr	r3, [pc, #348]	; (800072c <HAL_GPIO_Init+0x2dc>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	4b56      	ldr	r3, [pc, #344]	; (800072c <HAL_GPIO_Init+0x2dc>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	4b54      	ldr	r3, [pc, #336]	; (800072c <HAL_GPIO_Init+0x2dc>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2201      	movs	r2, #1
 80005de:	4013      	ands	r3, r2
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	3302      	adds	r3, #2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	589b      	ldr	r3, [r3, r2]
 80005f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	2203      	movs	r2, #3
 80005f6:	4013      	ands	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	220f      	movs	r2, #15
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0013      	movs	r3, r2
 8000600:	43da      	mvns	r2, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	429a      	cmp	r2, r3
 8000610:	d019      	beq.n	8000646 <HAL_GPIO_Init+0x1f6>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a47      	ldr	r2, [pc, #284]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d013      	beq.n	8000642 <HAL_GPIO_Init+0x1f2>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a46      	ldr	r2, [pc, #280]	; (8000738 <HAL_GPIO_Init+0x2e8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00d      	beq.n	800063e <HAL_GPIO_Init+0x1ee>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a45      	ldr	r2, [pc, #276]	; (800073c <HAL_GPIO_Init+0x2ec>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d007      	beq.n	800063a <HAL_GPIO_Init+0x1ea>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a44      	ldr	r2, [pc, #272]	; (8000740 <HAL_GPIO_Init+0x2f0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_GPIO_Init+0x1e6>
 8000632:	2304      	movs	r3, #4
 8000634:	e008      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 8000636:	2305      	movs	r3, #5
 8000638:	e006      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 800063a:	2303      	movs	r3, #3
 800063c:	e004      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 800063e:	2302      	movs	r3, #2
 8000640:	e002      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 8000646:	2300      	movs	r3, #0
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	2103      	movs	r1, #3
 800064c:	400a      	ands	r2, r1
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	4093      	lsls	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000658:	4935      	ldr	r1, [pc, #212]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3302      	adds	r3, #2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	43da      	mvns	r2, r3
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	4013      	ands	r3, r2
 8000674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	025b      	lsls	r3, r3, #9
 800067e:	4013      	ands	r3, r2
 8000680:	d003      	beq.n	800068a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4313      	orrs	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	43da      	mvns	r2, r3
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	d003      	beq.n	80006b4 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	43da      	mvns	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	4013      	ands	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	035b      	lsls	r3, r3, #13
 80006d2:	4013      	ands	r3, r2
 80006d4:	d003      	beq.n	80006de <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4313      	orrs	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	43da      	mvns	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	039b      	lsls	r3, r3, #14
 80006fc:	4013      	ands	r3, r2
 80006fe:	d003      	beq.n	8000708 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4313      	orrs	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	40da      	lsrs	r2, r3
 800071c:	1e13      	subs	r3, r2, #0
 800071e:	d000      	beq.n	8000722 <HAL_GPIO_Init+0x2d2>
 8000720:	e6a2      	b.n	8000468 <HAL_GPIO_Init+0x18>
  } 
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b006      	add	sp, #24
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000
 8000734:	48000400 	.word	0x48000400
 8000738:	48000800 	.word	0x48000800
 800073c:	48000c00 	.word	0x48000c00
 8000740:	48001000 	.word	0x48001000
 8000744:	40010400 	.word	0x40010400

08000748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	000a      	movs	r2, r1
 8000752:	1cbb      	adds	r3, r7, #2
 8000754:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	1cba      	adds	r2, r7, #2
 800075c:	8812      	ldrh	r2, [r2, #0]
 800075e:	4013      	ands	r3, r2
 8000760:	d004      	beq.n	800076c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000762:	230f      	movs	r3, #15
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e003      	b.n	8000774 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	781b      	ldrb	r3, [r3, #0]
  }
 800077a:	0018      	movs	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	0008      	movs	r0, r1
 800078c:	0011      	movs	r1, r2
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	1c02      	adds	r2, r0, #0
 8000792:	801a      	strh	r2, [r3, #0]
 8000794:	1c7b      	adds	r3, r7, #1
 8000796:	1c0a      	adds	r2, r1, #0
 8000798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800079a:	1c7b      	adds	r3, r7, #1
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a2:	1cbb      	adds	r3, r7, #2
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007aa:	e003      	b.n	80007b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ac:	1cbb      	adds	r3, r7, #2
 80007ae:	881a      	ldrh	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	000a      	movs	r2, r1
 80007c6:	1cbb      	adds	r3, r7, #2
 80007c8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	1cbb      	adds	r3, r7, #2
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	405a      	eors	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	615a      	str	r2, [r3, #20]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	0002      	movs	r2, r0
 80007e8:	1dbb      	adds	r3, r7, #6
 80007ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	1dba      	adds	r2, r7, #6
 80007f2:	8812      	ldrh	r2, [r2, #0]
 80007f4:	4013      	ands	r3, r2
 80007f6:	d008      	beq.n	800080a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80007fa:	1dba      	adds	r2, r7, #6
 80007fc:	8812      	ldrh	r2, [r2, #0]
 80007fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	f002 f979 	bl	8002afc <HAL_GPIO_EXTI_Callback>
  }
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40010400 	.word	0x40010400

08000818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2201      	movs	r2, #1
 800082a:	4013      	ands	r3, r2
 800082c:	d100      	bne.n	8000830 <HAL_RCC_OscConfig+0x18>
 800082e:	e08d      	b.n	800094c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000830:	4bc5      	ldr	r3, [pc, #788]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	220c      	movs	r2, #12
 8000836:	4013      	ands	r3, r2
 8000838:	2b04      	cmp	r3, #4
 800083a:	d00e      	beq.n	800085a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800083c:	4bc2      	ldr	r3, [pc, #776]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	220c      	movs	r2, #12
 8000842:	4013      	ands	r3, r2
 8000844:	2b08      	cmp	r3, #8
 8000846:	d116      	bne.n	8000876 <HAL_RCC_OscConfig+0x5e>
 8000848:	4bbf      	ldr	r3, [pc, #764]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	025b      	lsls	r3, r3, #9
 8000850:	401a      	ands	r2, r3
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	429a      	cmp	r2, r3
 8000858:	d10d      	bne.n	8000876 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085a:	4bbb      	ldr	r3, [pc, #748]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	029b      	lsls	r3, r3, #10
 8000862:	4013      	ands	r3, r2
 8000864:	d100      	bne.n	8000868 <HAL_RCC_OscConfig+0x50>
 8000866:	e070      	b.n	800094a <HAL_RCC_OscConfig+0x132>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d000      	beq.n	8000872 <HAL_RCC_OscConfig+0x5a>
 8000870:	e06b      	b.n	800094a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e329      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d107      	bne.n	800088e <HAL_RCC_OscConfig+0x76>
 800087e:	4bb2      	ldr	r3, [pc, #712]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4bb1      	ldr	r3, [pc, #708]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0249      	lsls	r1, r1, #9
 8000888:	430a      	orrs	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	e02f      	b.n	80008ee <HAL_RCC_OscConfig+0xd6>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10c      	bne.n	80008b0 <HAL_RCC_OscConfig+0x98>
 8000896:	4bac      	ldr	r3, [pc, #688]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4bab      	ldr	r3, [pc, #684]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 800089c:	49ab      	ldr	r1, [pc, #684]	; (8000b4c <HAL_RCC_OscConfig+0x334>)
 800089e:	400a      	ands	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	4ba9      	ldr	r3, [pc, #676]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4ba8      	ldr	r3, [pc, #672]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008a8:	49a9      	ldr	r1, [pc, #676]	; (8000b50 <HAL_RCC_OscConfig+0x338>)
 80008aa:	400a      	ands	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e01e      	b.n	80008ee <HAL_RCC_OscConfig+0xd6>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	d10e      	bne.n	80008d6 <HAL_RCC_OscConfig+0xbe>
 80008b8:	4ba3      	ldr	r3, [pc, #652]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4ba2      	ldr	r3, [pc, #648]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	02c9      	lsls	r1, r1, #11
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	4ba0      	ldr	r3, [pc, #640]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b9f      	ldr	r3, [pc, #636]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0249      	lsls	r1, r1, #9
 80008d0:	430a      	orrs	r2, r1
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e00b      	b.n	80008ee <HAL_RCC_OscConfig+0xd6>
 80008d6:	4b9c      	ldr	r3, [pc, #624]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b9b      	ldr	r3, [pc, #620]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008dc:	499b      	ldr	r1, [pc, #620]	; (8000b4c <HAL_RCC_OscConfig+0x334>)
 80008de:	400a      	ands	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	4b99      	ldr	r3, [pc, #612]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b98      	ldr	r3, [pc, #608]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80008e8:	4999      	ldr	r1, [pc, #612]	; (8000b50 <HAL_RCC_OscConfig+0x338>)
 80008ea:	400a      	ands	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d014      	beq.n	8000920 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f6:	f7ff fccf 	bl	8000298 <HAL_GetTick>
 80008fa:	0003      	movs	r3, r0
 80008fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	e008      	b.n	8000912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000900:	f7ff fcca 	bl	8000298 <HAL_GetTick>
 8000904:	0002      	movs	r2, r0
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b64      	cmp	r3, #100	; 0x64
 800090c:	d901      	bls.n	8000912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800090e:	2303      	movs	r3, #3
 8000910:	e2db      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000912:	4b8d      	ldr	r3, [pc, #564]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	029b      	lsls	r3, r3, #10
 800091a:	4013      	ands	r3, r2
 800091c:	d0f0      	beq.n	8000900 <HAL_RCC_OscConfig+0xe8>
 800091e:	e015      	b.n	800094c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000920:	f7ff fcba 	bl	8000298 <HAL_GetTick>
 8000924:	0003      	movs	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000928:	e008      	b.n	800093c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092a:	f7ff fcb5 	bl	8000298 <HAL_GetTick>
 800092e:	0002      	movs	r2, r0
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b64      	cmp	r3, #100	; 0x64
 8000936:	d901      	bls.n	800093c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000938:	2303      	movs	r3, #3
 800093a:	e2c6      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800093c:	4b82      	ldr	r3, [pc, #520]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	d1f0      	bne.n	800092a <HAL_RCC_OscConfig+0x112>
 8000948:	e000      	b.n	800094c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800094a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2202      	movs	r2, #2
 8000952:	4013      	ands	r3, r2
 8000954:	d100      	bne.n	8000958 <HAL_RCC_OscConfig+0x140>
 8000956:	e06c      	b.n	8000a32 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000958:	4b7b      	ldr	r3, [pc, #492]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	220c      	movs	r2, #12
 800095e:	4013      	ands	r3, r2
 8000960:	d00e      	beq.n	8000980 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000962:	4b79      	ldr	r3, [pc, #484]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	220c      	movs	r2, #12
 8000968:	4013      	ands	r3, r2
 800096a:	2b08      	cmp	r3, #8
 800096c:	d11f      	bne.n	80009ae <HAL_RCC_OscConfig+0x196>
 800096e:	4b76      	ldr	r3, [pc, #472]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	23c0      	movs	r3, #192	; 0xc0
 8000974:	025b      	lsls	r3, r3, #9
 8000976:	401a      	ands	r2, r3
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	429a      	cmp	r2, r3
 800097e:	d116      	bne.n	80009ae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000980:	4b71      	ldr	r3, [pc, #452]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2202      	movs	r2, #2
 8000986:	4013      	ands	r3, r2
 8000988:	d005      	beq.n	8000996 <HAL_RCC_OscConfig+0x17e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d001      	beq.n	8000996 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e299      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	4b6c      	ldr	r3, [pc, #432]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	22f8      	movs	r2, #248	; 0xf8
 800099c:	4393      	bics	r3, r2
 800099e:	0019      	movs	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	00da      	lsls	r2, r3, #3
 80009a6:	4b68      	ldr	r3, [pc, #416]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80009a8:	430a      	orrs	r2, r1
 80009aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ac:	e041      	b.n	8000a32 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d024      	beq.n	8000a00 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009b6:	4b64      	ldr	r3, [pc, #400]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b63      	ldr	r3, [pc, #396]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c2:	f7ff fc69 	bl	8000298 <HAL_GetTick>
 80009c6:	0003      	movs	r3, r0
 80009c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ca:	e008      	b.n	80009de <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009cc:	f7ff fc64 	bl	8000298 <HAL_GetTick>
 80009d0:	0002      	movs	r2, r0
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d901      	bls.n	80009de <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80009da:	2303      	movs	r3, #3
 80009dc:	e275      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2202      	movs	r2, #2
 80009e4:	4013      	ands	r3, r2
 80009e6:	d0f1      	beq.n	80009cc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e8:	4b57      	ldr	r3, [pc, #348]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	22f8      	movs	r2, #248	; 0xf8
 80009ee:	4393      	bics	r3, r2
 80009f0:	0019      	movs	r1, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e018      	b.n	8000a32 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a00:	4b51      	ldr	r3, [pc, #324]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b50      	ldr	r3, [pc, #320]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	438a      	bics	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0c:	f7ff fc44 	bl	8000298 <HAL_GetTick>
 8000a10:	0003      	movs	r3, r0
 8000a12:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a14:	e008      	b.n	8000a28 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a16:	f7ff fc3f 	bl	8000298 <HAL_GetTick>
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e250      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d1f1      	bne.n	8000a16 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2208      	movs	r2, #8
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d036      	beq.n	8000aaa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d019      	beq.n	8000a78 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a44:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a48:	4b3f      	ldr	r3, [pc, #252]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a50:	f7ff fc22 	bl	8000298 <HAL_GetTick>
 8000a54:	0003      	movs	r3, r0
 8000a56:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a58:	e008      	b.n	8000a6c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a5a:	f7ff fc1d 	bl	8000298 <HAL_GetTick>
 8000a5e:	0002      	movs	r2, r0
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d901      	bls.n	8000a6c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	e22e      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6c:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	2202      	movs	r2, #2
 8000a72:	4013      	ands	r3, r2
 8000a74:	d0f1      	beq.n	8000a5a <HAL_RCC_OscConfig+0x242>
 8000a76:	e018      	b.n	8000aaa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a78:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7c:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	438a      	bics	r2, r1
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a84:	f7ff fc08 	bl	8000298 <HAL_GetTick>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a8c:	e008      	b.n	8000aa0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a8e:	f7ff fc03 	bl	8000298 <HAL_GetTick>
 8000a92:	0002      	movs	r2, r0
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d901      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e214      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d1f1      	bne.n	8000a8e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x29e>
 8000ab4:	e0b6      	b.n	8000c24 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ab6:	2317      	movs	r3, #23
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000ac0:	69da      	ldr	r2, [r3, #28]
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	055b      	lsls	r3, r3, #21
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	d111      	bne.n	8000aee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000acc:	69da      	ldr	r2, [r3, #28]
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0549      	lsls	r1, r1, #21
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	61da      	str	r2, [r3, #28]
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000ada:	69da      	ldr	r2, [r3, #28]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	055b      	lsls	r3, r3, #21
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ae6:	2317      	movs	r3, #23
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_RCC_OscConfig+0x33c>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4013      	ands	r3, r2
 8000af8:	d11a      	bne.n	8000b30 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_RCC_OscConfig+0x33c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_RCC_OscConfig+0x33c>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0049      	lsls	r1, r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b08:	f7ff fbc6 	bl	8000298 <HAL_GetTick>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b10:	e008      	b.n	8000b24 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b12:	f7ff fbc1 	bl	8000298 <HAL_GetTick>
 8000b16:	0002      	movs	r2, r0
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	2b64      	cmp	r3, #100	; 0x64
 8000b1e:	d901      	bls.n	8000b24 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e1d2      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_RCC_OscConfig+0x33c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	d0f0      	beq.n	8000b12 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10f      	bne.n	8000b58 <HAL_RCC_OscConfig+0x340>
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000b3a:	6a1a      	ldr	r2, [r3, #32]
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_RCC_OscConfig+0x330>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	430a      	orrs	r2, r1
 8000b42:	621a      	str	r2, [r3, #32]
 8000b44:	e036      	b.n	8000bb4 <HAL_RCC_OscConfig+0x39c>
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	fffeffff 	.word	0xfffeffff
 8000b50:	fffbffff 	.word	0xfffbffff
 8000b54:	40007000 	.word	0x40007000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10c      	bne.n	8000b7a <HAL_RCC_OscConfig+0x362>
 8000b60:	4bca      	ldr	r3, [pc, #808]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b62:	6a1a      	ldr	r2, [r3, #32]
 8000b64:	4bc9      	ldr	r3, [pc, #804]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	438a      	bics	r2, r1
 8000b6a:	621a      	str	r2, [r3, #32]
 8000b6c:	4bc7      	ldr	r3, [pc, #796]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b6e:	6a1a      	ldr	r2, [r3, #32]
 8000b70:	4bc6      	ldr	r3, [pc, #792]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b72:	2104      	movs	r1, #4
 8000b74:	438a      	bics	r2, r1
 8000b76:	621a      	str	r2, [r3, #32]
 8000b78:	e01c      	b.n	8000bb4 <HAL_RCC_OscConfig+0x39c>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x384>
 8000b82:	4bc2      	ldr	r3, [pc, #776]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b84:	6a1a      	ldr	r2, [r3, #32]
 8000b86:	4bc1      	ldr	r3, [pc, #772]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b88:	2104      	movs	r1, #4
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	621a      	str	r2, [r3, #32]
 8000b8e:	4bbf      	ldr	r3, [pc, #764]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b90:	6a1a      	ldr	r2, [r3, #32]
 8000b92:	4bbe      	ldr	r3, [pc, #760]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	621a      	str	r2, [r3, #32]
 8000b9a:	e00b      	b.n	8000bb4 <HAL_RCC_OscConfig+0x39c>
 8000b9c:	4bbb      	ldr	r3, [pc, #748]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000b9e:	6a1a      	ldr	r2, [r3, #32]
 8000ba0:	4bba      	ldr	r3, [pc, #744]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	621a      	str	r2, [r3, #32]
 8000ba8:	4bb8      	ldr	r3, [pc, #736]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000baa:	6a1a      	ldr	r2, [r3, #32]
 8000bac:	4bb7      	ldr	r3, [pc, #732]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000bae:	2104      	movs	r1, #4
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d014      	beq.n	8000be6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fb6c 	bl	8000298 <HAL_GetTick>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc4:	e009      	b.n	8000bda <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fb67 	bl	8000298 <HAL_GetTick>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	4aaf      	ldr	r2, [pc, #700]	; (8000e90 <HAL_RCC_OscConfig+0x678>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e177      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bda:	4bac      	ldr	r3, [pc, #688]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	d0f0      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x3ae>
 8000be4:	e013      	b.n	8000c0e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be6:	f7ff fb57 	bl	8000298 <HAL_GetTick>
 8000bea:	0003      	movs	r3, r0
 8000bec:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bee:	e009      	b.n	8000c04 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fb52 	bl	8000298 <HAL_GetTick>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4aa5      	ldr	r2, [pc, #660]	; (8000e90 <HAL_RCC_OscConfig+0x678>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e162      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c04:	4ba1      	ldr	r3, [pc, #644]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c0e:	2317      	movs	r3, #23
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d105      	bne.n	8000c24 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c18:	4b9c      	ldr	r3, [pc, #624]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c1a:	69da      	ldr	r2, [r3, #28]
 8000c1c:	4b9b      	ldr	r3, [pc, #620]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c1e:	499d      	ldr	r1, [pc, #628]	; (8000e94 <HAL_RCC_OscConfig+0x67c>)
 8000c20:	400a      	ands	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2210      	movs	r2, #16
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d063      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d12a      	bne.n	8000c8c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c36:	4b95      	ldr	r3, [pc, #596]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3a:	4b94      	ldr	r3, [pc, #592]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c42:	4b92      	ldr	r3, [pc, #584]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c46:	4b91      	ldr	r3, [pc, #580]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fb23 	bl	8000298 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c58:	f7ff fb1e 	bl	8000298 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e12f      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c6a:	4b88      	ldr	r3, [pc, #544]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d0f1      	beq.n	8000c58 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c74:	4b85      	ldr	r3, [pc, #532]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	22f8      	movs	r2, #248	; 0xf8
 8000c7a:	4393      	bics	r3, r2
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	00da      	lsls	r2, r3, #3
 8000c84:	4b81      	ldr	r3, [pc, #516]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c86:	430a      	orrs	r2, r1
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8a:	e034      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	3305      	adds	r3, #5
 8000c92:	d111      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c94:	4b7d      	ldr	r3, [pc, #500]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c98:	4b7c      	ldr	r3, [pc, #496]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ca0:	4b7a      	ldr	r3, [pc, #488]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	22f8      	movs	r2, #248	; 0xf8
 8000ca6:	4393      	bics	r3, r2
 8000ca8:	0019      	movs	r1, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	00da      	lsls	r2, r3, #3
 8000cb0:	4b76      	ldr	r3, [pc, #472]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb6:	e01e      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cb8:	4b74      	ldr	r3, [pc, #464]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cbc:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000cc4:	4b71      	ldr	r3, [pc, #452]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc8:	4b70      	ldr	r3, [pc, #448]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000cca:	2101      	movs	r1, #1
 8000ccc:	438a      	bics	r2, r1
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fae2 	bl	8000298 <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cda:	f7ff fadd 	bl	8000298 <HAL_GetTick>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e0ee      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cec:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d1f1      	bne.n	8000cda <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d05c      	beq.n	8000dba <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000d00:	4b62      	ldr	r3, [pc, #392]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	220c      	movs	r2, #12
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b0c      	cmp	r3, #12
 8000d0a:	d00e      	beq.n	8000d2a <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000d0c:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	220c      	movs	r2, #12
 8000d12:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d114      	bne.n	8000d42 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000d18:	4b5c      	ldr	r3, [pc, #368]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	23c0      	movs	r3, #192	; 0xc0
 8000d1e:	025b      	lsls	r3, r3, #9
 8000d20:	401a      	ands	r2, r3
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	025b      	lsls	r3, r3, #9
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d10b      	bne.n	8000d42 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000d2a:	4b58      	ldr	r3, [pc, #352]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	4013      	ands	r3, r2
 8000d34:	d040      	beq.n	8000db8 <HAL_RCC_OscConfig+0x5a0>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d03c      	beq.n	8000db8 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e0c3      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d01b      	beq.n	8000d82 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000d4a:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4e:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0249      	lsls	r1, r1, #9
 8000d54:	430a      	orrs	r2, r1
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fa9e 	bl	8000298 <HAL_GetTick>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d62:	f7ff fa99 	bl	8000298 <HAL_GetTick>
 8000d66:	0002      	movs	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e0aa      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d74:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x54a>
 8000d80:	e01b      	b.n	8000dba <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000d88:	4943      	ldr	r1, [pc, #268]	; (8000e98 <HAL_RCC_OscConfig+0x680>)
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fa83 	bl	8000298 <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d98:	f7ff fa7e 	bl	8000298 <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e08f      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	4013      	ands	r3, r2
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x580>
 8000db6:	e000      	b.n	8000dba <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000db8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x5ac>
 8000dc2:	e081      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	220c      	movs	r2, #12
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d100      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5ba>
 8000dd0:	e078      	b.n	8000ec4 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d14c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000de0:	492e      	ldr	r1, [pc, #184]	; (8000e9c <HAL_RCC_OscConfig+0x684>)
 8000de2:	400a      	ands	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de6:	f7ff fa57 	bl	8000298 <HAL_GetTick>
 8000dea:	0003      	movs	r3, r0
 8000dec:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000df0:	f7ff fa52 	bl	8000298 <HAL_GetTick>
 8000df4:	0002      	movs	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e063      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e02:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	049b      	lsls	r3, r3, #18
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	220f      	movs	r2, #15
 8000e14:	4393      	bics	r3, r2
 8000e16:	0019      	movs	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <HAL_RCC_OscConfig+0x688>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0449      	lsls	r1, r1, #17
 8000e46:	430a      	orrs	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fa25 	bl	8000298 <HAL_GetTick>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fa20 	bl	8000298 <HAL_GetTick>
 8000e58:	0002      	movs	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e031      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	049b      	lsls	r3, r3, #18
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x63c>
 8000e72:	e029      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_RCC_OscConfig+0x674>)
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <HAL_RCC_OscConfig+0x684>)
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fa0a 	bl	8000298 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x69e>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	00001388 	.word	0x00001388
 8000e94:	efffffff 	.word	0xefffffff
 8000e98:	fffeffff 	.word	0xfffeffff
 8000e9c:	feffffff 	.word	0xfeffffff
 8000ea0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea4:	f7ff f9f8 	bl	8000298 <HAL_GetTick>
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e009      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_RCC_OscConfig+0x6bc>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	049b      	lsls	r3, r3, #18
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x68c>
 8000ec2:	e001      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b006      	add	sp, #24
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ee6:	4b7b      	ldr	r3, [pc, #492]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d911      	bls.n	8000f18 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef4:	4b77      	ldr	r3, [pc, #476]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4393      	bics	r3, r2
 8000efc:	0019      	movs	r1, r3
 8000efe:	4b75      	ldr	r3, [pc, #468]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f06:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d001      	beq.n	8000f18 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0d8      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d009      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f22:	4b6d      	ldr	r3, [pc, #436]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	22f0      	movs	r2, #240	; 0xf0
 8000f28:	4393      	bics	r3, r2
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	4b69      	ldr	r3, [pc, #420]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f32:	430a      	orrs	r2, r1
 8000f34:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <HAL_RCC_ClockConfig+0x6a>
 8000f40:	e089      	b.n	8001056 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b63      	ldr	r3, [pc, #396]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	029b      	lsls	r3, r3, #10
 8000f52:	4013      	ands	r3, r2
 8000f54:	d120      	bne.n	8000f98 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e0b7      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d107      	bne.n	8000f72 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f62:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	049b      	lsls	r3, r3, #18
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d114      	bne.n	8000f98 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e0ab      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d107      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f7a:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	4013      	ands	r3, r2
 8000f84:	d108      	bne.n	8000f98 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e09f      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	d101      	bne.n	8000f98 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e098      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f98:	4b4f      	ldr	r3, [pc, #316]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4393      	bics	r3, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fac:	f7ff f974 	bl	8000298 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d111      	bne.n	8000fe0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fbc:	e009      	b.n	8000fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbe:	f7ff f96b 	bl	8000298 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a44      	ldr	r2, [pc, #272]	; (80010dc <HAL_RCC_ClockConfig+0x204>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e07b      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d1ef      	bne.n	8000fbe <HAL_RCC_ClockConfig+0xe6>
 8000fde:	e03a      	b.n	8001056 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d111      	bne.n	800100c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe8:	e009      	b.n	8000ffe <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fea:	f7ff f955 	bl	8000298 <HAL_GetTick>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	4a39      	ldr	r2, [pc, #228]	; (80010dc <HAL_RCC_ClockConfig+0x204>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e065      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	220c      	movs	r2, #12
 8001004:	4013      	ands	r3, r2
 8001006:	2b08      	cmp	r3, #8
 8001008:	d1ef      	bne.n	8000fea <HAL_RCC_ClockConfig+0x112>
 800100a:	e024      	b.n	8001056 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d11b      	bne.n	800104c <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001014:	e009      	b.n	800102a <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001016:	f7ff f93f 	bl	8000298 <HAL_GetTick>
 800101a:	0002      	movs	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <HAL_RCC_ClockConfig+0x204>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d901      	bls.n	800102a <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e04f      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	220c      	movs	r2, #12
 8001030:	4013      	ands	r3, r2
 8001032:	2b0c      	cmp	r3, #12
 8001034:	d1ef      	bne.n	8001016 <HAL_RCC_ClockConfig+0x13e>
 8001036:	e00e      	b.n	8001056 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001038:	f7ff f92e 	bl	8000298 <HAL_GetTick>
 800103c:	0002      	movs	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_RCC_ClockConfig+0x204>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d901      	bls.n	800104c <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e03e      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	220c      	movs	r2, #12
 8001052:	4013      	ands	r3, r2
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d211      	bcs.n	8001088 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2201      	movs	r2, #1
 800106a:	4393      	bics	r3, r2
 800106c:	0019      	movs	r1, r3
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2201      	movs	r2, #1
 800107c:	4013      	ands	r3, r2
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e020      	b.n	80010ca <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2204      	movs	r2, #4
 800108e:	4013      	ands	r3, r2
 8001090:	d009      	beq.n	80010a6 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_RCC_ClockConfig+0x208>)
 8001098:	4013      	ands	r3, r2
 800109a:	0019      	movs	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 80010a2:	430a      	orrs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010a6:	f000 f821 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 80010aa:	0001      	movs	r1, r0
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_RCC_ClockConfig+0x200>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	220f      	movs	r2, #15
 80010b4:	4013      	ands	r3, r2
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_RCC_ClockConfig+0x20c>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	000a      	movs	r2, r1
 80010bc:	40da      	lsrs	r2, r3
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_ClockConfig+0x210>)
 80010c0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff f8c0 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40022000 	.word	0x40022000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	00001388 	.word	0x00001388
 80010e0:	fffff8ff 	.word	0xfffff8ff
 80010e4:	080035ec 	.word	0x080035ec
 80010e8:	20000000 	.word	0x20000000

080010ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b08f      	sub	sp, #60	; 0x3c
 80010f0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80010f2:	2314      	movs	r3, #20
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	4a37      	ldr	r2, [pc, #220]	; (80011d4 <HAL_RCC_GetSysClockFreq+0xe8>)
 80010f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80010fa:	c313      	stmia	r3!, {r0, r1, r4}
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4a35      	ldr	r2, [pc, #212]	; (80011d8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001104:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001106:	c313      	stmia	r3!, {r0, r1, r4}
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001120:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	220c      	movs	r2, #12
 800112a:	4013      	ands	r3, r2
 800112c:	2b08      	cmp	r3, #8
 800112e:	d006      	beq.n	800113e <HAL_RCC_GetSysClockFreq+0x52>
 8001130:	2b0c      	cmp	r3, #12
 8001132:	d043      	beq.n	80011bc <HAL_RCC_GetSysClockFreq+0xd0>
 8001134:	2b04      	cmp	r3, #4
 8001136:	d144      	bne.n	80011c2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800113c:	e044      	b.n	80011c8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	220f      	movs	r2, #15
 8001144:	4013      	ands	r3, r2
 8001146:	2214      	movs	r2, #20
 8001148:	18ba      	adds	r2, r7, r2
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	220f      	movs	r2, #15
 8001154:	4013      	ands	r3, r2
 8001156:	1d3a      	adds	r2, r7, #4
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800115c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	401a      	ands	r2, r3
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	429a      	cmp	r2, r3
 800116a:	d109      	bne.n	8001180 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800116c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001170:	f7fe ffca 	bl	8000108 <__udivsi3>
 8001174:	0003      	movs	r3, r0
 8001176:	001a      	movs	r2, r3
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	4353      	muls	r3, r2
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
 800117e:	e01a      	b.n	80011b6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001182:	23c0      	movs	r3, #192	; 0xc0
 8001184:	025b      	lsls	r3, r3, #9
 8001186:	401a      	ands	r2, r3
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	025b      	lsls	r3, r3, #9
 800118c:	429a      	cmp	r2, r3
 800118e:	d109      	bne.n	80011a4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001194:	f7fe ffb8 	bl	8000108 <__udivsi3>
 8001198:	0003      	movs	r3, r0
 800119a:	001a      	movs	r2, r3
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	4353      	muls	r3, r2
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80011a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80011a8:	f7fe ffae 	bl	8000108 <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	001a      	movs	r2, r3
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	4353      	muls	r3, r2
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80011b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011ba:	e005      	b.n	80011c8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011c0:	e002      	b.n	80011c8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80011c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b00f      	add	sp, #60	; 0x3c
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	08003390 	.word	0x08003390
 80011d8:	080033a0 	.word	0x080033a0
 80011dc:	40021000 	.word	0x40021000
 80011e0:	007a1200 	.word	0x007a1200
 80011e4:	02dc6c00 	.word	0x02dc6c00

080011e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	20000000 	.word	0x20000000

080011fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001200:	f7ff fff2 	bl	80011e8 <HAL_RCC_GetHCLKFreq>
 8001204:	0001      	movs	r1, r0
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	2207      	movs	r2, #7
 800120e:	4013      	ands	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	40d9      	lsrs	r1, r3
 8001216:	000b      	movs	r3, r1
}    
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	40021000 	.word	0x40021000
 8001224:	080035fc 	.word	0x080035fc

08001228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	4013      	ands	r3, r2
 8001242:	d100      	bne.n	8001246 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001244:	e08f      	b.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001246:	2317      	movs	r3, #23
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b6f      	ldr	r3, [pc, #444]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001250:	69da      	ldr	r2, [r3, #28]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	055b      	lsls	r3, r3, #21
 8001256:	4013      	ands	r3, r2
 8001258:	d111      	bne.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b6c      	ldr	r3, [pc, #432]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800125c:	69da      	ldr	r2, [r3, #28]
 800125e:	4b6b      	ldr	r3, [pc, #428]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0549      	lsls	r1, r1, #21
 8001264:	430a      	orrs	r2, r1
 8001266:	61da      	str	r2, [r3, #28]
 8001268:	4b68      	ldr	r3, [pc, #416]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800126a:	69da      	ldr	r2, [r3, #28]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	055b      	lsls	r3, r3, #21
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2317      	movs	r3, #23
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4013      	ands	r3, r2
 8001288:	d11a      	bne.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0049      	lsls	r1, r1, #1
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001298:	f7fe fffe 	bl	8000298 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e008      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a2:	f7fe fff9 	bl	8000298 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e0a6      	b.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012c2:	6a1a      	ldr	r2, [r3, #32]
 80012c4:	23c0      	movs	r3, #192	; 0xc0
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d034      	beq.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d02c      	beq.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a4b      	ldr	r2, [pc, #300]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	0249      	lsls	r1, r1, #9
 80012f6:	430a      	orrs	r2, r1
 80012f8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001300:	4945      	ldr	r1, [pc, #276]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001302:	400a      	ands	r2, r1
 8001304:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001306:	4b41      	ldr	r3, [pc, #260]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2201      	movs	r2, #1
 8001310:	4013      	ands	r3, r2
 8001312:	d013      	beq.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7fe ffc0 	bl	8000298 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131c:	e009      	b.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7fe ffbb 	bl	8000298 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	4a3c      	ldr	r2, [pc, #240]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e067      	b.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a34      	ldr	r2, [pc, #208]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001342:	4013      	ands	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800134c:	430a      	orrs	r2, r1
 800134e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001350:	2317      	movs	r3, #23
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800135c:	69da      	ldr	r2, [r3, #28]
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001360:	492f      	ldr	r1, [pc, #188]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001362:	400a      	ands	r2, r1
 8001364:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	4013      	ands	r3, r2
 800136e:	d009      	beq.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	2203      	movs	r2, #3
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001380:	430a      	orrs	r2, r1
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d009      	beq.n	80013a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001394:	4013      	ands	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800139e:	430a      	orrs	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2220      	movs	r2, #32
 80013a8:	4013      	ands	r3, r2
 80013aa:	d009      	beq.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	2210      	movs	r2, #16
 80013b2:	4393      	bics	r3, r2
 80013b4:	0019      	movs	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d009      	beq.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	d009      	beq.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	2240      	movs	r2, #64	; 0x40
 80013f2:	4393      	bics	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b006      	add	sp, #24
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	40021000 	.word	0x40021000
 8001410:	40007000 	.word	0x40007000
 8001414:	fffffcff 	.word	0xfffffcff
 8001418:	fffeffff 	.word	0xfffeffff
 800141c:	00001388 	.word	0x00001388
 8001420:	efffffff 	.word	0xefffffff
 8001424:	fffcffff 	.word	0xfffcffff

08001428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e08a      	b.n	8001550 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	225d      	movs	r2, #93	; 0x5d
 8001444:	5c9b      	ldrb	r3, [r3, r2]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	225c      	movs	r2, #92	; 0x5c
 8001450:	2100      	movs	r1, #0
 8001452:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0018      	movs	r0, r3
 8001458:	f001 fa56 	bl	8002908 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	225d      	movs	r2, #93	; 0x5d
 8001460:	2102      	movs	r1, #2
 8001462:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	438a      	bics	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	23e0      	movs	r3, #224	; 0xe0
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	429a      	cmp	r2, r3
 800147e:	d902      	bls.n	8001486 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e002      	b.n	800148c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	23f0      	movs	r3, #240	; 0xf0
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	429a      	cmp	r2, r3
 8001496:	d008      	beq.n	80014aa <HAL_SPI_Init+0x82>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	23e0      	movs	r3, #224	; 0xe0
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d002      	beq.n	80014aa <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	23e0      	movs	r3, #224	; 0xe0
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d903      	bls.n	80014c6 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2202      	movs	r2, #2
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
 80014c4:	e002      	b.n	80014cc <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6999      	ldr	r1, [r3, #24]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	400b      	ands	r3, r1
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	0011      	movs	r1, r2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	2204      	movs	r2, #4
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	431a      	orrs	r2, r3
 8001524:	0011      	movs	r1, r2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4907      	ldr	r1, [pc, #28]	; (8001558 <HAL_SPI_Init+0x130>)
 800153c:	400a      	ands	r2, r1
 800153e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	225d      	movs	r2, #93	; 0x5d
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b004      	add	sp, #16
 8001556:	bd80      	pop	{r7, pc}
 8001558:	fffff7ff 	.word	0xfffff7ff

0800155c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001570:	231f      	movs	r3, #31
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	225c      	movs	r2, #92	; 0x5c
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_SPI_Transmit+0x2a>
 8001582:	2302      	movs	r3, #2
 8001584:	e14f      	b.n	8001826 <HAL_SPI_Transmit+0x2ca>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	225c      	movs	r2, #92	; 0x5c
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800158e:	f7fe fe83 	bl	8000298 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	225d      	movs	r2, #93	; 0x5d
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d004      	beq.n	80015ac <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80015a2:	231f      	movs	r3, #31
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	2202      	movs	r2, #2
 80015a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80015aa:	e131      	b.n	8001810 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_SPI_Transmit+0x5e>
 80015b2:	1dbb      	adds	r3, r7, #6
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 80015ba:	231f      	movs	r3, #31
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80015c2:	e125      	b.n	8001810 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	225d      	movs	r2, #93	; 0x5d
 80015c8:	2103      	movs	r1, #3
 80015ca:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1dba      	adds	r2, r7, #6
 80015dc:	8812      	ldrh	r2, [r2, #0]
 80015de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1dba      	adds	r2, r7, #6
 80015e4:	8812      	ldrh	r2, [r2, #0]
 80015e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2244      	movs	r2, #68	; 0x44
 80015f2:	2100      	movs	r1, #0
 80015f4:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2246      	movs	r2, #70	; 0x46
 80015fa:	2100      	movs	r1, #0
 80015fc:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	429a      	cmp	r2, r3
 8001614:	d108      	bne.n	8001628 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	01c9      	lsls	r1, r1, #7
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	4013      	ands	r3, r2
 8001632:	2b40      	cmp	r3, #64	; 0x40
 8001634:	d007      	beq.n	8001646 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	23e0      	movs	r3, #224	; 0xe0
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	429a      	cmp	r2, r3
 8001650:	d948      	bls.n	80016e4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <HAL_SPI_Transmit+0x108>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800165e:	b29b      	uxth	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d139      	bne.n	80016d8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3302      	adds	r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001678:	b29b      	uxth	r3, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001682:	e029      	b.n	80016d8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	2b02      	cmp	r3, #2
 8001690:	d10f      	bne.n	80016b2 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3302      	adds	r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80016b0:	e012      	b.n	80016d8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00a      	beq.n	80016ce <HAL_SPI_Transmit+0x172>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	d00c      	beq.n	80016d8 <HAL_SPI_Transmit+0x17c>
 80016be:	f7fe fdeb 	bl	8000298 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d804      	bhi.n	80016d8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80016ce:	231f      	movs	r3, #31
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	2203      	movs	r2, #3
 80016d4:	701a      	strb	r2, [r3, #0]
          goto error;
 80016d6:	e09b      	b.n	8001810 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1d0      	bne.n	8001684 <HAL_SPI_Transmit+0x128>
 80016e2:	e071      	b.n	80017c8 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_SPI_Transmit+0x19a>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d163      	bne.n	80017be <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d90f      	bls.n	8001720 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	3302      	adds	r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b02      	subs	r3, #2
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800171e:	e04e      	b.n	80017be <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	320c      	adds	r2, #12
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800173e:	e03e      	b.n	80017be <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d124      	bne.n	8001798 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d90f      	bls.n	8001778 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3302      	adds	r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b02      	subs	r3, #2
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001776:	e022      	b.n	80017be <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	320c      	adds	r2, #12
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800178c:	b29b      	uxth	r3, r3
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001796:	e012      	b.n	80017be <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_SPI_Transmit+0x258>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	d00c      	beq.n	80017be <HAL_SPI_Transmit+0x262>
 80017a4:	f7fe fd78 	bl	8000298 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d804      	bhi.n	80017be <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80017b4:	231f      	movs	r3, #31
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2203      	movs	r2, #3
 80017ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80017bc:	e028      	b.n	8001810 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1bb      	bne.n	8001740 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	6839      	ldr	r1, [r7, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 f916 	bl	8001a00 <SPI_EndRxTxTransaction>
 80017d4:	1e03      	subs	r3, r0, #0
 80017d6:	d002      	beq.n	80017de <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2220      	movs	r2, #32
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8001804:	231f      	movs	r3, #31
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e000      	b.n	8001810 <HAL_SPI_Transmit+0x2b4>
  }

error:
 800180e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	225d      	movs	r2, #93	; 0x5d
 8001814:	2101      	movs	r1, #1
 8001816:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	225c      	movs	r2, #92	; 0x5c
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001820:	231f      	movs	r3, #31
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b008      	add	sp, #32
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800183e:	e050      	b.n	80018e2 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	d04d      	beq.n	80018e2 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <SPI_WaitFlagStateUntilTimeout+0x2c>
 800184c:	f7fe fd24 	bl	8000298 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d842      	bhi.n	80018e2 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	21e0      	movs	r1, #224	; 0xe0
 8001868:	438a      	bics	r2, r1
 800186a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2382      	movs	r3, #130	; 0x82
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	429a      	cmp	r2, r3
 8001876:	d113      	bne.n	80018a0 <SPI_WaitFlagStateUntilTimeout+0x70>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	429a      	cmp	r2, r3
 8001882:	d005      	beq.n	8001890 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	438a      	bics	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	019b      	lsls	r3, r3, #6
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d110      	bne.n	80018ce <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4914      	ldr	r1, [pc, #80]	; (8001908 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80018b8:	400a      	ands	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	0189      	lsls	r1, r1, #6
 80018ca:	430a      	orrs	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	225d      	movs	r2, #93	; 0x5d
 80018d2:	2101      	movs	r1, #1
 80018d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	225c      	movs	r2, #92	; 0x5c
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e00e      	b.n	8001900 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	4013      	ands	r3, r2
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d101      	bne.n	80018f6 <SPI_WaitFlagStateUntilTimeout+0xc6>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <SPI_WaitFlagStateUntilTimeout+0xc8>
 80018f6:	2300      	movs	r3, #0
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d1a0      	bne.n	8001840 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}
 8001908:	ffffdfff 	.word	0xffffdfff

0800190c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800191a:	e062      	b.n	80019e2 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	429a      	cmp	r2, r3
 8001924:	d10c      	bne.n	8001940 <SPI_WaitFifoStateUntilTimeout+0x34>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	330c      	adds	r3, #12
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	2117      	movs	r1, #23
 8001938:	187b      	adds	r3, r7, r1
 800193a:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800193c:	187b      	adds	r3, r7, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	d04d      	beq.n	80019e2 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <SPI_WaitFifoStateUntilTimeout+0x50>
 800194c:	f7fe fca4 	bl	8000298 <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d842      	bhi.n	80019e2 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	21e0      	movs	r1, #224	; 0xe0
 8001968:	438a      	bics	r2, r1
 800196a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2382      	movs	r3, #130	; 0x82
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	429a      	cmp	r2, r3
 8001976:	d113      	bne.n	80019a0 <SPI_WaitFifoStateUntilTimeout+0x94>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	429a      	cmp	r2, r3
 8001982:	d005      	beq.n	8001990 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	429a      	cmp	r2, r3
 800198e:	d107      	bne.n	80019a0 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2140      	movs	r1, #64	; 0x40
 800199c:	438a      	bics	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d110      	bne.n	80019ce <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4911      	ldr	r1, [pc, #68]	; (80019fc <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0189      	lsls	r1, r1, #6
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	225d      	movs	r2, #93	; 0x5d
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	225c      	movs	r2, #92	; 0x5c
 80019da:	2100      	movs	r1, #0
 80019dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e008      	b.n	80019f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	4013      	ands	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d194      	bne.n	800191c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b006      	add	sp, #24
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	ffffdfff 	.word	0xffffdfff

08001a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	0159      	lsls	r1, r3, #5
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	0013      	movs	r3, r2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f7ff ff76 	bl	800190c <SPI_WaitFifoStateUntilTimeout>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d007      	beq.n	8001a34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	2220      	movs	r2, #32
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e027      	b.n	8001a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	f7ff fef5 	bl	8001830 <SPI_WaitFlagStateUntilTimeout>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d007      	beq.n	8001a5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	2220      	movs	r2, #32
 8001a50:	431a      	orrs	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e014      	b.n	8001a84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	00d9      	lsls	r1, r3, #3
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	0013      	movs	r3, r2
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f7ff ff4f 	bl	800190c <SPI_WaitFifoStateUntilTimeout>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d007      	beq.n	8001a82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	2220      	movs	r2, #32
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e000      	b.n	8001a84 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b004      	add	sp, #16
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e047      	b.n	8001b2e <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2269      	movs	r2, #105	; 0x69
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d107      	bne.n	8001aba <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2268      	movs	r2, #104	; 0x68
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 ff9d 	bl	80029f4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2269      	movs	r2, #105	; 0x69
 8001abe:	2124      	movs	r1, #36	; 0x24
 8001ac0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	438a      	bics	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 f9b7 	bl	8001e48 <UART_SetConfig>
 8001ada:	0003      	movs	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e024      	b.n	8001b2e <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fb66 	bl	80021c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_UART_Init+0xac>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	212a      	movs	r1, #42	; 0x2a
 8001b10:	438a      	bics	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 fbfe 	bl	8002328 <UART_CheckIdleState>
 8001b2c:	0003      	movs	r3, r0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	ffffb7ff 	.word	0xffffb7ff

08001b3c <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	1dbb      	adds	r3, r7, #6
 8001b4a:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2269      	movs	r2, #105	; 0x69
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d000      	beq.n	8001b5e <HAL_UART_Transmit+0x22>
 8001b5c:	e08c      	b.n	8001c78 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_UART_Transmit+0x30>
 8001b64:	1dbb      	adds	r3, r7, #6
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e084      	b.n	8001c7a <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	015b      	lsls	r3, r3, #5
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d109      	bne.n	8001b90 <HAL_UART_Transmit+0x54>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e074      	b.n	8001c7a <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2268      	movs	r2, #104	; 0x68
 8001b94:	5c9b      	ldrb	r3, [r3, r2]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_UART_Transmit+0x62>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e06d      	b.n	8001c7a <HAL_UART_Transmit+0x13e>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2268      	movs	r2, #104	; 0x68
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2269      	movs	r2, #105	; 0x69
 8001bb0:	2121      	movs	r1, #33	; 0x21
 8001bb2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fb70 	bl	8000298 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1dba      	adds	r2, r7, #6
 8001bc0:	2150      	movs	r1, #80	; 0x50
 8001bc2:	8812      	ldrh	r2, [r2, #0]
 8001bc4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1dba      	adds	r2, r7, #6
 8001bca:	2152      	movs	r1, #82	; 0x52
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001bd0:	e035      	b.n	8001c3e <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2252      	movs	r2, #82	; 0x52
 8001bd6:	5a9b      	ldrh	r3, [r3, r2]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b299      	uxth	r1, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2252      	movs	r2, #82	; 0x52
 8001be2:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	0013      	movs	r3, r2
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	f000 fbf1 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e03d      	b.n	8001c7a <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d111      	bne.n	8001c2e <HAL_UART_Transmit+0xf2>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10d      	bne.n	8001c2e <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	05d2      	lsls	r2, r2, #23
 8001c20:	0dd2      	lsrs	r2, r2, #23
 8001c22:	b292      	uxth	r2, r2
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	e007      	b.n	8001c3e <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	60ba      	str	r2, [r7, #8]
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2252      	movs	r2, #82	; 0x52
 8001c42:	5a9b      	ldrh	r3, [r3, r2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1c3      	bne.n	8001bd2 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	0013      	movs	r3, r2
 8001c54:	2200      	movs	r2, #0
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	f000 fbbe 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e00a      	b.n	8001c7a <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2269      	movs	r2, #105	; 0x69
 8001c68:	2120      	movs	r1, #32
 8001c6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2268      	movs	r2, #104	; 0x68
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	1dbb      	adds	r3, r7, #6
 8001c92:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	226a      	movs	r2, #106	; 0x6a
 8001c9c:	5c9b      	ldrb	r3, [r3, r2]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b20      	cmp	r3, #32
 8001ca2:	d000      	beq.n	8001ca6 <HAL_UART_Receive+0x22>
 8001ca4:	e0c8      	b.n	8001e38 <HAL_UART_Receive+0x1b4>
  {
    if((pData == NULL ) || (Size == 0U))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_UART_Receive+0x30>
 8001cac:	1dbb      	adds	r3, r7, #6
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0c0      	b.n	8001e3a <HAL_UART_Receive+0x1b6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	015b      	lsls	r3, r3, #5
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d109      	bne.n	8001cd8 <HAL_UART_Receive+0x54>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b0      	b.n	8001e3a <HAL_UART_Receive+0x1b6>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2268      	movs	r2, #104	; 0x68
 8001cdc:	5c9b      	ldrb	r3, [r3, r2]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Receive+0x62>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e0a9      	b.n	8001e3a <HAL_UART_Receive+0x1b6>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2268      	movs	r2, #104	; 0x68
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	226a      	movs	r2, #106	; 0x6a
 8001cf8:	2122      	movs	r1, #34	; 0x22
 8001cfa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001cfc:	f7fe facc 	bl	8000298 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1dba      	adds	r2, r7, #6
 8001d08:	2158      	movs	r1, #88	; 0x58
 8001d0a:	8812      	ldrh	r2, [r2, #0]
 8001d0c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1dba      	adds	r2, r7, #6
 8001d12:	215a      	movs	r1, #90	; 0x5a
 8001d14:	8812      	ldrh	r2, [r2, #0]
 8001d16:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10d      	bne.n	8001d40 <HAL_UART_Receive+0xbc>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <HAL_UART_Receive+0xb2>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	225c      	movs	r2, #92	; 0x5c
 8001d30:	4944      	ldr	r1, [pc, #272]	; (8001e44 <HAL_UART_Receive+0x1c0>)
 8001d32:	5299      	strh	r1, [r3, r2]
 8001d34:	e029      	b.n	8001d8a <HAL_UART_Receive+0x106>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	225c      	movs	r2, #92	; 0x5c
 8001d3a:	21ff      	movs	r1, #255	; 0xff
 8001d3c:	5299      	strh	r1, [r3, r2]
 8001d3e:	e024      	b.n	8001d8a <HAL_UART_Receive+0x106>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_UART_Receive+0xe0>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <HAL_UART_Receive+0xd6>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	225c      	movs	r2, #92	; 0x5c
 8001d54:	21ff      	movs	r1, #255	; 0xff
 8001d56:	5299      	strh	r1, [r3, r2]
 8001d58:	e017      	b.n	8001d8a <HAL_UART_Receive+0x106>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	225c      	movs	r2, #92	; 0x5c
 8001d5e:	217f      	movs	r1, #127	; 0x7f
 8001d60:	5299      	strh	r1, [r3, r2]
 8001d62:	e012      	b.n	8001d8a <HAL_UART_Receive+0x106>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	055b      	lsls	r3, r3, #21
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d10c      	bne.n	8001d8a <HAL_UART_Receive+0x106>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d104      	bne.n	8001d82 <HAL_UART_Receive+0xfe>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	225c      	movs	r2, #92	; 0x5c
 8001d7c:	217f      	movs	r1, #127	; 0x7f
 8001d7e:	5299      	strh	r1, [r3, r2]
 8001d80:	e003      	b.n	8001d8a <HAL_UART_Receive+0x106>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	225c      	movs	r2, #92	; 0x5c
 8001d86:	213f      	movs	r1, #63	; 0x3f
 8001d88:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001d8a:	231a      	movs	r3, #26
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	215c      	movs	r1, #92	; 0x5c
 8001d92:	5a52      	ldrh	r2, [r2, r1]
 8001d94:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001d96:	e03f      	b.n	8001e18 <HAL_UART_Receive+0x194>
    {
      huart->RxXferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	225a      	movs	r2, #90	; 0x5a
 8001d9c:	5a9b      	ldrh	r3, [r3, r2]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b299      	uxth	r1, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	225a      	movs	r2, #90	; 0x5a
 8001da8:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	0013      	movs	r3, r2
 8001db4:	2200      	movs	r2, #0
 8001db6:	2120      	movs	r1, #32
 8001db8:	f000 fb0e 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e03a      	b.n	8001e3a <HAL_UART_Receive+0x1b6>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	015b      	lsls	r3, r3, #5
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d114      	bne.n	8001dfa <HAL_UART_Receive+0x176>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d110      	bne.n	8001dfa <HAL_UART_Receive+0x176>
      {
        tmp = (uint16_t*) pData ;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	221a      	movs	r2, #26
 8001de6:	18ba      	adds	r2, r7, r2
 8001de8:	8812      	ldrh	r2, [r2, #0]
 8001dea:	4013      	ands	r3, r2
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3302      	adds	r3, #2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	e00e      	b.n	8001e18 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	231a      	movs	r3, #26
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b2d9      	uxtb	r1, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c58      	adds	r0, r3, #1
 8001e10:	60b8      	str	r0, [r7, #8]
 8001e12:	400a      	ands	r2, r1
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	225a      	movs	r2, #90	; 0x5a
 8001e1c:	5a9b      	ldrh	r3, [r3, r2]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1b9      	bne.n	8001d98 <HAL_UART_Receive+0x114>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	226a      	movs	r2, #106	; 0x6a
 8001e28:	2120      	movs	r1, #32
 8001e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2268      	movs	r2, #104	; 0x68
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e000      	b.n	8001e3a <HAL_UART_Receive+0x1b6>
  }
  else
  {
    return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
  }
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b008      	add	sp, #32
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	000001ff 	.word	0x000001ff

08001e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001e54:	2317      	movs	r3, #23
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2210      	movs	r2, #16
 8001e5a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001e64:	2314      	movs	r3, #20
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2200      	movs	r2, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e6c:	2313      	movs	r3, #19
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4ac1      	ldr	r2, [pc, #772]	; (8002198 <UART_SetConfig+0x350>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4abc      	ldr	r2, [pc, #752]	; (800219c <UART_SetConfig+0x354>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4ab4      	ldr	r2, [pc, #720]	; (80021a0 <UART_SetConfig+0x358>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4ab0      	ldr	r2, [pc, #704]	; (80021a4 <UART_SetConfig+0x35c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d125      	bne.n	8001f32 <UART_SetConfig+0xea>
 8001ee6:	4bb0      	ldr	r3, [pc, #704]	; (80021a8 <UART_SetConfig+0x360>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	2203      	movs	r2, #3
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d00f      	beq.n	8001f12 <UART_SetConfig+0xca>
 8001ef2:	d304      	bcc.n	8001efe <UART_SetConfig+0xb6>
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d011      	beq.n	8001f1c <UART_SetConfig+0xd4>
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d005      	beq.n	8001f08 <UART_SetConfig+0xc0>
 8001efc:	e013      	b.n	8001f26 <UART_SetConfig+0xde>
 8001efe:	2317      	movs	r3, #23
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e064      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f08:	2317      	movs	r3, #23
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e05f      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f12:	2317      	movs	r3, #23
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2204      	movs	r2, #4
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e05a      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f1c:	2317      	movs	r3, #23
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2208      	movs	r2, #8
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e055      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f26:	2317      	movs	r3, #23
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	e04f      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a9d      	ldr	r2, [pc, #628]	; (80021ac <UART_SetConfig+0x364>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d132      	bne.n	8001fa2 <UART_SetConfig+0x15a>
 8001f3c:	4b9a      	ldr	r3, [pc, #616]	; (80021a8 <UART_SetConfig+0x360>)
 8001f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f40:	23c0      	movs	r3, #192	; 0xc0
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0252      	lsls	r2, r2, #9
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <UART_SetConfig+0x13a>
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	0252      	lsls	r2, r2, #9
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d802      	bhi.n	8001f5c <UART_SetConfig+0x114>
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <UART_SetConfig+0x126>
 8001f5a:	e01c      	b.n	8001f96 <UART_SetConfig+0x14e>
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0292      	lsls	r2, r2, #10
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <UART_SetConfig+0x144>
 8001f64:	22c0      	movs	r2, #192	; 0xc0
 8001f66:	0292      	lsls	r2, r2, #10
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d005      	beq.n	8001f78 <UART_SetConfig+0x130>
 8001f6c:	e013      	b.n	8001f96 <UART_SetConfig+0x14e>
 8001f6e:	2317      	movs	r3, #23
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
 8001f76:	e02c      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f78:	2317      	movs	r3, #23
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	e027      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f82:	2317      	movs	r3, #23
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2204      	movs	r2, #4
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e022      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f8c:	2317      	movs	r3, #23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2208      	movs	r2, #8
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e01d      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001f96:	2317      	movs	r3, #23
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	e017      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a82      	ldr	r2, [pc, #520]	; (80021b0 <UART_SetConfig+0x368>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d104      	bne.n	8001fb6 <UART_SetConfig+0x16e>
 8001fac:	2317      	movs	r3, #23
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e00d      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <UART_SetConfig+0x36c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d104      	bne.n	8001fca <UART_SetConfig+0x182>
 8001fc0:	2317      	movs	r3, #23
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e003      	b.n	8001fd2 <UART_SetConfig+0x18a>
 8001fca:	2317      	movs	r3, #23
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2210      	movs	r2, #16
 8001fd0:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d000      	beq.n	8001fe0 <UART_SetConfig+0x198>
 8001fde:	e077      	b.n	80020d0 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8001fe0:	2317      	movs	r3, #23
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d01c      	beq.n	8002024 <UART_SetConfig+0x1dc>
 8001fea:	dc02      	bgt.n	8001ff2 <UART_SetConfig+0x1aa>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <UART_SetConfig+0x1b4>
 8001ff0:	e04f      	b.n	8002092 <UART_SetConfig+0x24a>
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d027      	beq.n	8002046 <UART_SetConfig+0x1fe>
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d039      	beq.n	800206e <UART_SetConfig+0x226>
 8001ffa:	e04a      	b.n	8002092 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ffc:	f7ff f8fe 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
 8002000:	0003      	movs	r3, r0
 8002002:	005a      	lsls	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	18d2      	adds	r2, r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	0019      	movs	r1, r3
 8002012:	0010      	movs	r0, r2
 8002014:	f7fe f878 	bl	8000108 <__udivsi3>
 8002018:	0003      	movs	r3, r0
 800201a:	001a      	movs	r2, r3
 800201c:	2314      	movs	r3, #20
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	801a      	strh	r2, [r3, #0]
        break;
 8002022:	e03b      	b.n	800209c <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <UART_SetConfig+0x370>)
 800202c:	189a      	adds	r2, r3, r2
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0019      	movs	r1, r3
 8002034:	0010      	movs	r0, r2
 8002036:	f7fe f867 	bl	8000108 <__udivsi3>
 800203a:	0003      	movs	r3, r0
 800203c:	001a      	movs	r2, r3
 800203e:	2314      	movs	r3, #20
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	801a      	strh	r2, [r3, #0]
        break;
 8002044:	e02a      	b.n	800209c <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002046:	f7ff f851 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 800204a:	0003      	movs	r3, r0
 800204c:	005a      	lsls	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	18d2      	adds	r2, r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	0019      	movs	r1, r3
 800205c:	0010      	movs	r0, r2
 800205e:	f7fe f853 	bl	8000108 <__udivsi3>
 8002062:	0003      	movs	r3, r0
 8002064:	001a      	movs	r2, r3
 8002066:	2314      	movs	r3, #20
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	801a      	strh	r2, [r3, #0]
        break;
 800206c:	e016      	b.n	800209c <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	0252      	lsls	r2, r2, #9
 8002078:	189a      	adds	r2, r3, r2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	0019      	movs	r1, r3
 8002080:	0010      	movs	r0, r2
 8002082:	f7fe f841 	bl	8000108 <__udivsi3>
 8002086:	0003      	movs	r3, r0
 8002088:	001a      	movs	r2, r3
 800208a:	2314      	movs	r3, #20
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	801a      	strh	r2, [r3, #0]
        break;
 8002090:	e004      	b.n	800209c <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002092:	2313      	movs	r3, #19
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
        break;
 800209a:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 800209c:	200a      	movs	r0, #10
 800209e:	183b      	adds	r3, r7, r0
 80020a0:	2414      	movs	r4, #20
 80020a2:	193a      	adds	r2, r7, r4
 80020a4:	8812      	ldrh	r2, [r2, #0]
 80020a6:	210f      	movs	r1, #15
 80020a8:	438a      	bics	r2, r1
 80020aa:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	105b      	asrs	r3, r3, #1
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2207      	movs	r2, #7
 80020b6:	4013      	ands	r3, r2
 80020b8:	b299      	uxth	r1, r3
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	183a      	adds	r2, r7, r0
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	183a      	adds	r2, r7, r0
 80020ca:	8812      	ldrh	r2, [r2, #0]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	e05b      	b.n	8002188 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 80020d0:	2317      	movs	r3, #23
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d01b      	beq.n	8002112 <UART_SetConfig+0x2ca>
 80020da:	dc02      	bgt.n	80020e2 <UART_SetConfig+0x29a>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <UART_SetConfig+0x2a4>
 80020e0:	e04d      	b.n	800217e <UART_SetConfig+0x336>
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d026      	beq.n	8002134 <UART_SetConfig+0x2ec>
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d037      	beq.n	800215a <UART_SetConfig+0x312>
 80020ea:	e048      	b.n	800217e <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80020ec:	f7ff f886 	bl	80011fc <HAL_RCC_GetPCLK1Freq>
 80020f0:	0002      	movs	r2, r0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	18d2      	adds	r2, r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0019      	movs	r1, r3
 8002100:	0010      	movs	r0, r2
 8002102:	f7fe f801 	bl	8000108 <__udivsi3>
 8002106:	0003      	movs	r3, r0
 8002108:	b29a      	uxth	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60da      	str	r2, [r3, #12]
        break;
 8002110:	e03a      	b.n	8002188 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <UART_SetConfig+0x374>)
 800211a:	189a      	adds	r2, r3, r2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0019      	movs	r1, r3
 8002122:	0010      	movs	r0, r2
 8002124:	f7fd fff0 	bl	8000108 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60da      	str	r2, [r3, #12]
        break;
 8002132:	e029      	b.n	8002188 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002134:	f7fe ffda 	bl	80010ec <HAL_RCC_GetSysClockFreq>
 8002138:	0002      	movs	r2, r0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	18d2      	adds	r2, r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	0019      	movs	r1, r3
 8002148:	0010      	movs	r0, r2
 800214a:	f7fd ffdd 	bl	8000108 <__udivsi3>
 800214e:	0003      	movs	r3, r0
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60da      	str	r2, [r3, #12]
        break;
 8002158:	e016      	b.n	8002188 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	0212      	lsls	r2, r2, #8
 8002164:	189a      	adds	r2, r3, r2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0019      	movs	r1, r3
 800216c:	0010      	movs	r0, r2
 800216e:	f7fd ffcb 	bl	8000108 <__udivsi3>
 8002172:	0003      	movs	r3, r0
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60da      	str	r2, [r3, #12]
        break;
 800217c:	e004      	b.n	8002188 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800217e:	2313      	movs	r3, #19
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
        break;
 8002186:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002188:	2313      	movs	r3, #19
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	781b      	ldrb	r3, [r3, #0]

}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b007      	add	sp, #28
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	efff69f3 	.word	0xefff69f3
 800219c:	ffffcfff 	.word	0xffffcfff
 80021a0:	fffff4ff 	.word	0xfffff4ff
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40004400 	.word	0x40004400
 80021b0:	40004800 	.word	0x40004800
 80021b4:	40004c00 	.word	0x40004c00
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200

080021c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00b      	beq.n	80021ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <UART_AdvFeatureConfig+0x144>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2202      	movs	r2, #2
 80021f0:	4013      	ands	r3, r2
 80021f2:	d00b      	beq.n	800220c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a43      	ldr	r2, [pc, #268]	; (8002308 <UART_AdvFeatureConfig+0x148>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	2204      	movs	r2, #4
 8002212:	4013      	ands	r3, r2
 8002214:	d00b      	beq.n	800222e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a3b      	ldr	r2, [pc, #236]	; (800230c <UART_AdvFeatureConfig+0x14c>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	2208      	movs	r2, #8
 8002234:	4013      	ands	r3, r2
 8002236:	d00b      	beq.n	8002250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a34      	ldr	r2, [pc, #208]	; (8002310 <UART_AdvFeatureConfig+0x150>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	2210      	movs	r2, #16
 8002256:	4013      	ands	r3, r2
 8002258:	d00b      	beq.n	8002272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <UART_AdvFeatureConfig+0x154>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	2220      	movs	r2, #32
 8002278:	4013      	ands	r3, r2
 800227a:	d00b      	beq.n	8002294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4a25      	ldr	r2, [pc, #148]	; (8002318 <UART_AdvFeatureConfig+0x158>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	4013      	ands	r3, r2
 800229c:	d01d      	beq.n	80022da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <UART_AdvFeatureConfig+0x15c>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	035b      	lsls	r3, r3, #13
 80022be:	429a      	cmp	r2, r3
 80022c0:	d10b      	bne.n	80022da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a15      	ldr	r2, [pc, #84]	; (8002320 <UART_AdvFeatureConfig+0x160>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	4013      	ands	r3, r2
 80022e2:	d00b      	beq.n	80022fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <UART_AdvFeatureConfig+0x164>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	0019      	movs	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
  }
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fffdffff 	.word	0xfffdffff
 8002308:	fffeffff 	.word	0xfffeffff
 800230c:	fffbffff 	.word	0xfffbffff
 8002310:	ffff7fff 	.word	0xffff7fff
 8002314:	ffffefff 	.word	0xffffefff
 8002318:	ffffdfff 	.word	0xffffdfff
 800231c:	ffefffff 	.word	0xffefffff
 8002320:	ff9fffff 	.word	0xff9fffff
 8002324:	fff7ffff 	.word	0xfff7ffff

08002328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800233a:	f7fd ffad 	bl	8000298 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <UART_CheckIdleState+0xa4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d004      	beq.n	8002356 <UART_CheckIdleState+0x2e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <UART_CheckIdleState+0xa8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d129      	bne.n	80023aa <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	2b08      	cmp	r3, #8
 8002362:	d10d      	bne.n	8002380 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	0399      	lsls	r1, r3, #14
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <UART_CheckIdleState+0xac>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	0013      	movs	r3, r2
 8002372:	2200      	movs	r2, #0
 8002374:	f000 f830 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d001      	beq.n	8002380 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e021      	b.n	80023c4 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2204      	movs	r2, #4
 8002388:	4013      	ands	r3, r2
 800238a:	2b04      	cmp	r3, #4
 800238c:	d10d      	bne.n	80023aa <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	03d9      	lsls	r1, r3, #15
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <UART_CheckIdleState+0xac>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	0013      	movs	r3, r2
 800239c:	2200      	movs	r2, #0
 800239e:	f000 f81b 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d001      	beq.n	80023aa <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e00c      	b.n	80023c4 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2269      	movs	r2, #105	; 0x69
 80023ae:	2120      	movs	r1, #32
 80023b0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	226a      	movs	r2, #106	; 0x6a
 80023b6:	2120      	movs	r1, #32
 80023b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2268      	movs	r2, #104	; 0x68
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40004400 	.word	0x40004400
 80023d4:	01ffffff 	.word	0x01ffffff

080023d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e8:	e02b      	b.n	8002442 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	3301      	adds	r3, #1
 80023ee:	d028      	beq.n	8002442 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <UART_WaitOnFlagUntilTimeout+0x2e>
 80023f6:	f7fd ff4f 	bl	8000298 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	429a      	cmp	r2, r3
 8002404:	d21d      	bcs.n	8002442 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <UART_WaitOnFlagUntilTimeout+0x94>)
 8002412:	400a      	ands	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	438a      	bics	r2, r1
 8002424:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2269      	movs	r2, #105	; 0x69
 800242a:	2120      	movs	r1, #32
 800242c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	226a      	movs	r2, #106	; 0x6a
 8002432:	2120      	movs	r1, #32
 8002434:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2268      	movs	r2, #104	; 0x68
 800243a:	2100      	movs	r1, #0
 800243c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e00f      	b.n	8002462 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4013      	ands	r3, r2
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	425a      	negs	r2, r3
 8002452:	4153      	adcs	r3, r2
 8002454:	b2db      	uxtb	r3, r3
 8002456:	001a      	movs	r2, r3
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d0c4      	beq.n	80023ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	fffffe5f 	.word	0xfffffe5f

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0bc      	sub	sp, #240	; 0xf0
 8002474:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002476:	f7fd fed3 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f833 	bl	80024e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 f91d 	bl	80026bc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002482:	f000 f8e7 	bl	8002654 <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8002486:	f000 f88d 	bl	80025a4 <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
  while(1)
  {
	  const char* data = "+++";
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <main+0x68>)
 800248c:	22ec      	movs	r2, #236	; 0xec
 800248e:	18b9      	adds	r1, r7, r2
 8002490:	600b      	str	r3, [r1, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, 3, HAL_MAX_DELAY);
 8002492:	2301      	movs	r3, #1
 8002494:	425b      	negs	r3, r3
 8002496:	18ba      	adds	r2, r7, r2
 8002498:	6811      	ldr	r1, [r2, #0]
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <main+0x6c>)
 800249c:	2203      	movs	r2, #3
 800249e:	f7ff fb4d 	bl	8001b3c <HAL_UART_Transmit>
	  uint8_t rxData[40];
	  HAL_UART_Receive(&huart2, rxData, 4, HAL_MAX_DELAY);
 80024a2:	2301      	movs	r3, #1
 80024a4:	425b      	negs	r3, r3
 80024a6:	1d39      	adds	r1, r7, #4
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <main+0x6c>)
 80024aa:	2204      	movs	r2, #4
 80024ac:	f7ff fbea 	bl	8001c84 <HAL_UART_Receive>
	  const char* data2 = "ATI\r\n";
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <main+0x70>)
 80024b2:	22e8      	movs	r2, #232	; 0xe8
 80024b4:	18b9      	adds	r1, r7, r2
 80024b6:	600b      	str	r3, [r1, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data2, 5, HAL_MAX_DELAY);
 80024b8:	2301      	movs	r3, #1
 80024ba:	425b      	negs	r3, r3
 80024bc:	18ba      	adds	r2, r7, r2
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	4806      	ldr	r0, [pc, #24]	; (80024dc <main+0x6c>)
 80024c2:	2205      	movs	r2, #5
 80024c4:	f7ff fb3a 	bl	8001b3c <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart2, rxData, 22, HAL_MAX_DELAY);
 80024c8:	2301      	movs	r3, #1
 80024ca:	425b      	negs	r3, r3
 80024cc:	1d39      	adds	r1, r7, #4
 80024ce:	4803      	ldr	r0, [pc, #12]	; (80024dc <main+0x6c>)
 80024d0:	2216      	movs	r2, #22
 80024d2:	f7ff fbd7 	bl	8001c84 <HAL_UART_Receive>
	  while(1);
 80024d6:	e7fe      	b.n	80024d6 <main+0x66>
 80024d8:	080035e0 	.word	0x080035e0
 80024dc:	20000084 	.word	0x20000084
 80024e0:	080035e4 	.word	0x080035e4

080024e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b099      	sub	sp, #100	; 0x64
 80024e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ea:	242c      	movs	r4, #44	; 0x2c
 80024ec:	193b      	adds	r3, r7, r4
 80024ee:	0018      	movs	r0, r3
 80024f0:	2334      	movs	r3, #52	; 0x34
 80024f2:	001a      	movs	r2, r3
 80024f4:	2100      	movs	r1, #0
 80024f6:	f000 ff37 	bl	8003368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024fa:	231c      	movs	r3, #28
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	0018      	movs	r0, r3
 8002500:	2310      	movs	r3, #16
 8002502:	001a      	movs	r2, r3
 8002504:	2100      	movs	r1, #0
 8002506:	f000 ff2f 	bl	8003368 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800250a:	003b      	movs	r3, r7
 800250c:	0018      	movs	r0, r3
 800250e:	231c      	movs	r3, #28
 8002510:	001a      	movs	r2, r3
 8002512:	2100      	movs	r1, #0
 8002514:	f000 ff28 	bl	8003368 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8002518:	193b      	adds	r3, r7, r4
 800251a:	2220      	movs	r2, #32
 800251c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800251e:	193b      	adds	r3, r7, r4
 8002520:	2201      	movs	r2, #1
 8002522:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002524:	193b      	adds	r3, r7, r4
 8002526:	2200      	movs	r2, #0
 8002528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252a:	193b      	adds	r3, r7, r4
 800252c:	0018      	movs	r0, r3
 800252e:	f7fe f973 	bl	8000818 <HAL_RCC_OscConfig>
 8002532:	0003      	movs	r3, r0
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	4193      	sbcs	r3, r2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 800253e:	f000 f98d 	bl	800285c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002542:	211c      	movs	r1, #28
 8002544:	187b      	adds	r3, r7, r1
 8002546:	2207      	movs	r2, #7
 8002548:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800254a:	187b      	adds	r3, r7, r1
 800254c:	2203      	movs	r2, #3
 800254e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002550:	187b      	adds	r3, r7, r1
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002556:	187b      	adds	r3, r7, r1
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2101      	movs	r1, #1
 8002560:	0018      	movs	r0, r3
 8002562:	f7fe fcb9 	bl	8000ed8 <HAL_RCC_ClockConfig>
 8002566:	0003      	movs	r3, r0
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	4193      	sbcs	r3, r2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8002572:	f000 f973 	bl	800285c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002576:	003b      	movs	r3, r7
 8002578:	2202      	movs	r2, #2
 800257a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800257c:	003b      	movs	r3, r7
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002582:	003b      	movs	r3, r7
 8002584:	0018      	movs	r0, r3
 8002586:	f7fe fe4f 	bl	8001228 <HAL_RCCEx_PeriphCLKConfig>
 800258a:	0003      	movs	r3, r0
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	4193      	sbcs	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8002596:	f000 f961 	bl	800285c <Error_Handler>
  }
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b019      	add	sp, #100	; 0x64
 80025a0:	bd90      	pop	{r4, r7, pc}
	...

080025a4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025ac:	4a28      	ldr	r2, [pc, #160]	; (8002650 <_ZL12MX_SPI2_Initv+0xac>)
 80025ae:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025b2:	2282      	movs	r2, #130	; 0x82
 80025b4:	0052      	lsls	r2, r2, #1
 80025b6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025c0:	22e0      	movs	r2, #224	; 0xe0
 80025c2:	00d2      	lsls	r2, r2, #3
 80025c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025c6:	4b21      	ldr	r3, [pc, #132]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025c8:	2202      	movs	r2, #2
 80025ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025dc:	2210      	movs	r2, #16
 80025de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 8002600:	2200      	movs	r2, #0
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 8002606:	0018      	movs	r0, r3
 8002608:	f7fe ff0e 	bl	8001428 <HAL_SPI_Init>
 800260c:	0003      	movs	r3, r0
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	4193      	sbcs	r3, r2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8002618:	f000 f920 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //Send 1 random byte to reset the sck
  uint8_t temp = 0;
 800261c:	1dfb      	adds	r3, r7, #7
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 8002622:	2301      	movs	r3, #1
 8002624:	425b      	negs	r3, r3
 8002626:	1df9      	adds	r1, r7, #7
 8002628:	4808      	ldr	r0, [pc, #32]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 800262a:	2201      	movs	r2, #1
 800262c:	f7fe ff96 	bl	800155c <HAL_SPI_Transmit>
  resetTftBoard();
 8002630:	f000 fbda 	bl	8002de8 <resetTftBoard>
  pullCSLow();
 8002634:	f000 fbf4 	bl	8002e20 <pullCSLow>
  ili9341_hspi_init(hspi2.Instance);
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <_ZL12MX_SPI2_Initv+0xa8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 fc3f 	bl	8002ec0 <ili9341_hspi_init>
  /* USER CODE END SPI2_Init 2 */

}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20000020 	.word	0x20000020
 8002650:	40003800 	.word	0x40003800

08002654 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800265c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002660:	22e1      	movs	r2, #225	; 0xe1
 8002662:	0212      	lsls	r2, r2, #8
 8002664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff f9f7 	bl	8001a8c <HAL_UART_Init>
 800269e:	0003      	movs	r3, r0
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	4193      	sbcs	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 80026aa:	f000 f8d7 	bl	800285c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000084 	.word	0x20000084
 80026b8:	40004400 	.word	0x40004400

080026bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b08b      	sub	sp, #44	; 0x2c
 80026c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c2:	2414      	movs	r4, #20
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	0018      	movs	r0, r3
 80026c8:	2314      	movs	r3, #20
 80026ca:	001a      	movs	r2, r3
 80026cc:	2100      	movs	r1, #0
 80026ce:	f000 fe4b 	bl	8003368 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	4b5e      	ldr	r3, [pc, #376]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	4b5d      	ldr	r3, [pc, #372]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0309      	lsls	r1, r1, #12
 80026dc:	430a      	orrs	r2, r1
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	4b5a      	ldr	r3, [pc, #360]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	031b      	lsls	r3, r3, #12
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ee:	4b57      	ldr	r3, [pc, #348]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	4b56      	ldr	r3, [pc, #344]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	03c9      	lsls	r1, r1, #15
 80026f8:	430a      	orrs	r2, r1
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	03db      	lsls	r3, r3, #15
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	4b50      	ldr	r3, [pc, #320]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	4b4f      	ldr	r3, [pc, #316]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 8002710:	2180      	movs	r1, #128	; 0x80
 8002712:	0289      	lsls	r1, r1, #10
 8002714:	430a      	orrs	r2, r1
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	4b49      	ldr	r3, [pc, #292]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	4b48      	ldr	r3, [pc, #288]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	02c9      	lsls	r1, r1, #11
 8002730:	430a      	orrs	r2, r1
 8002732:	615a      	str	r2, [r3, #20]
 8002734:	4b45      	ldr	r3, [pc, #276]	; (800284c <_ZL12MX_GPIO_Initv+0x190>)
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	02db      	lsls	r3, r3, #11
 800273c:	4013      	ands	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <_ZL12MX_GPIO_Initv+0x194>)
 8002744:	2200      	movs	r2, #0
 8002746:	2101      	movs	r1, #1
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe f81a 	bl	8000782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <_ZL12MX_GPIO_Initv+0x194>)
 8002750:	2201      	movs	r2, #1
 8002752:	2102      	movs	r1, #2
 8002754:	0018      	movs	r0, r3
 8002756:	f7fe f814 	bl	8000782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 800275a:	2390      	movs	r3, #144	; 0x90
 800275c:	05db      	lsls	r3, r3, #23
 800275e:	2200      	movs	r2, #0
 8002760:	2121      	movs	r1, #33	; 0x21
 8002762:	0018      	movs	r0, r3
 8002764:	f7fe f80d 	bl	8000782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002768:	193b      	adds	r3, r7, r4
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	0192      	lsls	r2, r2, #6
 800276e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002770:	193b      	adds	r3, r7, r4
 8002772:	4a38      	ldr	r2, [pc, #224]	; (8002854 <_ZL12MX_GPIO_Initv+0x198>)
 8002774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800277c:	193b      	adds	r3, r7, r4
 800277e:	4a34      	ldr	r2, [pc, #208]	; (8002850 <_ZL12MX_GPIO_Initv+0x194>)
 8002780:	0019      	movs	r1, r3
 8002782:	0010      	movs	r0, r2
 8002784:	f7fd fe64 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_D_C_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = TFT_D_C_Pin|SPI2_NSS_Pin;
 8002788:	193b      	adds	r3, r7, r4
 800278a:	2203      	movs	r2, #3
 800278c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	2201      	movs	r2, #1
 8002792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	193b      	adds	r3, r7, r4
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279a:	193b      	adds	r3, r7, r4
 800279c:	2203      	movs	r2, #3
 800279e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a0:	193b      	adds	r3, r7, r4
 80027a2:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <_ZL12MX_GPIO_Initv+0x194>)
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f7fd fe52 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|LD2_Pin;
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	2221      	movs	r2, #33	; 0x21
 80027b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	2201      	movs	r2, #1
 80027b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	2200      	movs	r2, #0
 80027c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	193a      	adds	r2, r7, r4
 80027c6:	2390      	movs	r3, #144	; 0x90
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7fd fe3f 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	2280      	movs	r2, #128	; 0x80
 80027d6:	0212      	lsls	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <_ZL12MX_GPIO_Initv+0x19c>)
 80027de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2201      	movs	r2, #1
 80027e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80027e6:	193a      	adds	r2, r7, r4
 80027e8:	2390      	movs	r3, #144	; 0x90
 80027ea:	05db      	lsls	r3, r3, #23
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7fd fe2e 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin;
 80027f4:	0021      	movs	r1, r4
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	00d2      	lsls	r2, r2, #3
 80027fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <_ZL12MX_GPIO_Initv+0x19c>)
 8002802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2201      	movs	r2, #1
 8002808:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800280a:	000c      	movs	r4, r1
 800280c:	187b      	adds	r3, r7, r1
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <_ZL12MX_GPIO_Initv+0x194>)
 8002810:	0019      	movs	r1, r3
 8002812:	0010      	movs	r0, r2
 8002814:	f7fd fe1c 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_OK_Pin */
  GPIO_InitStruct.Pin = ENC_OK_Pin;
 8002818:	0021      	movs	r1, r4
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2201      	movs	r2, #1
 800282c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_OK_GPIO_Port, &GPIO_InitStruct);
 800282e:	187b      	adds	r3, r7, r1
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <_ZL12MX_GPIO_Initv+0x194>)
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f7fd fe0b 	bl	8000450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2102      	movs	r1, #2
 800283e:	2007      	movs	r0, #7
 8002840:	f7fd fde4 	bl	800040c <HAL_NVIC_SetPriority>
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b00b      	add	sp, #44	; 0x2c
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	48000800 	.word	0x48000800
 8002854:	10210000 	.word	0x10210000
 8002858:	10310000 	.word	0x10310000

0800285c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <_Z41__static_initialization_and_destruction_0ii>:
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10e      	bne.n	8002896 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d10a      	bne.n	8002896 <_Z41__static_initialization_and_destruction_0ii+0x2e>
CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES];
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002882:	2404      	movs	r4, #4
 8002884:	001d      	movs	r5, r3
 8002886:	2c00      	cmp	r4, #0
 8002888:	db05      	blt.n	8002896 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800288a:	0028      	movs	r0, r5
 800288c:	f000 fce3 	bl	8003256 <_ZN21CHOSEN_STATE_TEXT_BOXC1Ev>
 8002890:	3520      	adds	r5, #32
 8002892:	3c01      	subs	r4, #1
 8002894:	e7f7      	b.n	8002886 <_Z41__static_initialization_and_destruction_0ii+0x1e>
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b002      	add	sp, #8
 800289c:	bdb0      	pop	{r4, r5, r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	0000ffff 	.word	0x0000ffff
 80028a4:	200000fc 	.word	0x200000fc

080028a8 <_GLOBAL__sub_I_hspi2>:
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <_GLOBAL__sub_I_hspi2+0x14>)
 80028ae:	0019      	movs	r1, r3
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7ff ffd9 	bl	8002868 <_Z41__static_initialization_and_destruction_0ii>
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	0000ffff 	.word	0x0000ffff

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_MspInit+0x44>)
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_MspInit+0x44>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_MspInit+0x44>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_MspInit+0x44>)
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_MspInit+0x44>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	0549      	lsls	r1, r1, #21
 80028e8:	430a      	orrs	r2, r1
 80028ea:	61da      	str	r2, [r3, #28]
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_MspInit+0x44>)
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	055b      	lsls	r3, r3, #21
 80028f4:	4013      	ands	r3, r2
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b08b      	sub	sp, #44	; 0x2c
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	2314      	movs	r3, #20
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	0018      	movs	r0, r3
 8002916:	2314      	movs	r3, #20
 8002918:	001a      	movs	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f000 fd24 	bl	8003368 <memset>
  if(hspi->Instance==SPI2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2f      	ldr	r2, [pc, #188]	; (80029e4 <HAL_SPI_MspInit+0xdc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d157      	bne.n	80029da <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	01c9      	lsls	r1, r1, #7
 8002934:	430a      	orrs	r2, r1
 8002936:	61da      	str	r2, [r3, #28]
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	01db      	lsls	r3, r3, #7
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0309      	lsls	r1, r1, #12
 8002950:	430a      	orrs	r2, r1
 8002952:	615a      	str	r2, [r3, #20]
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	02c9      	lsls	r1, r1, #11
 800296c:	430a      	orrs	r2, r1
 800296e:	615a      	str	r2, [r3, #20]
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_SPI_MspInit+0xe0>)
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	02db      	lsls	r3, r3, #11
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800297e:	2114      	movs	r1, #20
 8002980:	187b      	adds	r3, r7, r1
 8002982:	220c      	movs	r2, #12
 8002984:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2202      	movs	r2, #2
 800298a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2203      	movs	r2, #3
 8002996:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2201      	movs	r2, #1
 800299c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299e:	000c      	movs	r4, r1
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_SPI_MspInit+0xe4>)
 80029a4:	0019      	movs	r1, r3
 80029a6:	0010      	movs	r0, r2
 80029a8:	f7fd fd52 	bl	8000450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ac:	0021      	movs	r1, r4
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2280      	movs	r2, #128	; 0x80
 80029b2:	00d2      	lsls	r2, r2, #3
 80029b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	187b      	adds	r3, r7, r1
 80029b8:	2202      	movs	r2, #2
 80029ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2203      	movs	r2, #3
 80029c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2205      	movs	r2, #5
 80029cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_SPI_MspInit+0xe8>)
 80029d2:	0019      	movs	r1, r3
 80029d4:	0010      	movs	r0, r2
 80029d6:	f7fd fd3b 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b00b      	add	sp, #44	; 0x2c
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	40003800 	.word	0x40003800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	48000800 	.word	0x48000800
 80029f0:	48000400 	.word	0x48000400

080029f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	2314      	movs	r3, #20
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	0018      	movs	r0, r3
 8002a02:	2314      	movs	r3, #20
 8002a04:	001a      	movs	r2, r3
 8002a06:	2100      	movs	r1, #0
 8002a08:	f000 fcae 	bl	8003368 <memset>
  if(huart->Instance==USART2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_UART_MspInit+0x90>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d132      	bne.n	8002a7c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <HAL_UART_MspInit+0x94>)
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_UART_MspInit+0x94>)
 8002a1c:	2180      	movs	r1, #128	; 0x80
 8002a1e:	0289      	lsls	r1, r1, #10
 8002a20:	430a      	orrs	r2, r1
 8002a22:	61da      	str	r2, [r3, #28]
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_UART_MspInit+0x94>)
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	029b      	lsls	r3, r3, #10
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <HAL_UART_MspInit+0x94>)
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_UART_MspInit+0x94>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	0289      	lsls	r1, r1, #10
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	615a      	str	r2, [r3, #20]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_UART_MspInit+0x94>)
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a4e:	2114      	movs	r1, #20
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	220c      	movs	r2, #12
 8002a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2202      	movs	r2, #2
 8002a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	187a      	adds	r2, r7, r1
 8002a70:	2390      	movs	r3, #144	; 0x90
 8002a72:	05db      	lsls	r3, r3, #23
 8002a74:	0011      	movs	r1, r2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fd fcea 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b00a      	add	sp, #40	; 0x28
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40004400 	.word	0x40004400
 8002a88:	40021000 	.word	0x40021000

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler+0x4>

08002a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab4:	f7fd fbe4 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(okButtonPtr)
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Handler+0x20>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <SysTick_Handler+0x1a>
  {
	  okButtonPtr->process();
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <SysTick_Handler+0x20>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f925 	bl	8002d14 <_ZN11SW_DEBOUNCE7processEv>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200000f8 	.word	0x200000f8

08002ad4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  //This is for the encoder A input
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fd fe7f 	bl	80007e0 <HAL_GPIO_EXTI_IRQHandler>
  //This is for the encoder B input
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fd fe7a 	bl	80007e0 <HAL_GPIO_EXTI_IRQHandler>
  //This is for button and should be removed
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	019b      	lsls	r3, r3, #6
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7fd fe75 	bl	80007e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	0002      	movs	r2, r0
 8002b04:	1dbb      	adds	r3, r7, #6
 8002b06:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin)
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d005      	beq.n	8002b20 <HAL_GPIO_EXTI_Callback+0x24>
 8002b14:	1dbb      	adds	r3, r7, #6
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d118      	bne.n	8002b52 <HAL_GPIO_EXTI_Callback+0x56>
	{
		encoderPtr->process((ENC_A_GPIO_Port->IDR & ENC_A_Pin) != 0, (ENC_B_GPIO_Port->IDR & ENC_B_Pin) != 0);
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0018      	movs	r0, r3
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4013      	ands	r3, r2
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	4193      	sbcs	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	0019      	movs	r1, r3
 8002b38:	2390      	movs	r3, #144	; 0x90
 8002b3a:	05db      	lsls	r3, r3, #23
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	4013      	ands	r3, r2
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	4193      	sbcs	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	f000 f86a 	bl	8002c24 <_ZN14ROTARY_ENCODER7processEhh>
	{
		HAL_Delay(10);
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}
 8002b50:	e01b      	b.n	8002b8a <HAL_GPIO_EXTI_Callback+0x8e>
	}else if(GPIO_Pin == B1_Pin)
 8002b52:	1dbb      	adds	r3, r7, #6
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d115      	bne.n	8002b8a <HAL_GPIO_EXTI_Callback+0x8e>
		HAL_Delay(10);
 8002b5e:	200a      	movs	r0, #10
 8002b60:	f7fd fba4 	bl	80002ac <HAL_Delay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	019b      	lsls	r3, r3, #6
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	0010      	movs	r0, r2
 8002b6e:	f7fd fdeb 	bl	8000748 <HAL_GPIO_ReadPin>
 8002b72:	0003      	movs	r3, r0
 8002b74:	425a      	negs	r2, r3
 8002b76:	4153      	adcs	r3, r2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_GPIO_EXTI_Callback+0x8e>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b7e:	2390      	movs	r3, #144	; 0x90
 8002b80:	05db      	lsls	r3, r3, #23
 8002b82:	2120      	movs	r1, #32
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fd fe19 	bl	80007bc <HAL_GPIO_TogglePin>
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b002      	add	sp, #8
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	200000f4 	.word	0x200000f4
 8002b98:	48000800 	.word	0x48000800

08002b9c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <SystemInit+0x70>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <SystemInit+0x70>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <SystemInit+0x70>)
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <SystemInit+0x70>)
 8002bb2:	4917      	ldr	r1, [pc, #92]	; (8002c10 <SystemInit+0x74>)
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <SystemInit+0x70>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <SystemInit+0x70>)
 8002bbe:	4915      	ldr	r1, [pc, #84]	; (8002c14 <SystemInit+0x78>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <SystemInit+0x70>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <SystemInit+0x70>)
 8002bca:	4913      	ldr	r1, [pc, #76]	; (8002c18 <SystemInit+0x7c>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <SystemInit+0x70>)
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <SystemInit+0x70>)
 8002bd6:	4911      	ldr	r1, [pc, #68]	; (8002c1c <SystemInit+0x80>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <SystemInit+0x70>)
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <SystemInit+0x70>)
 8002be2:	210f      	movs	r1, #15
 8002be4:	438a      	bics	r2, r1
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <SystemInit+0x70>)
 8002bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <SystemInit+0x70>)
 8002bee:	490c      	ldr	r1, [pc, #48]	; (8002c20 <SystemInit+0x84>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SystemInit+0x70>)
 8002bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SystemInit+0x70>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <SystemInit+0x70>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]

}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08ffb80c 	.word	0x08ffb80c
 8002c14:	fef6ffff 	.word	0xfef6ffff
 8002c18:	fffbffff 	.word	0xfffbffff
 8002c1c:	ffc0ffff 	.word	0xffc0ffff
 8002c20:	fffcfe2c 	.word	0xfffcfe2c

08002c24 <_ZN14ROTARY_ENCODER7processEhh>:
ROTARY_ENCODER::ROTARY_ENCODER(uint8_t ticks_per_step):
ticksPerStep{ticks_per_step}, tickCounter{0}, state{R_START}
{}

void ROTARY_ENCODER::process(uint8_t a_state, uint8_t b_state)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	0008      	movs	r0, r1
 8002c2e:	0011      	movs	r1, r2
 8002c30:	1cfb      	adds	r3, r7, #3
 8002c32:	1c02      	adds	r2, r0, #0
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	1cbb      	adds	r3, r7, #2
 8002c38:	1c0a      	adds	r2, r1, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
	state = ttable[state & 0xF][((a_state & 0x1) << 1) | (b_state & 0x1)];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7a1b      	ldrb	r3, [r3, #8]
 8002c40:	001a      	movs	r2, r3
 8002c42:	230f      	movs	r3, #15
 8002c44:	401a      	ands	r2, r3
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	4019      	ands	r1, r3
 8002c50:	1cbb      	adds	r3, r7, #2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2001      	movs	r0, #1
 8002c56:	4003      	ands	r3, r0
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <_ZN14ROTARY_ENCODER7processEhh+0xec>)
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	188a      	adds	r2, r1, r2
 8002c60:	5cd2      	ldrb	r2, [r2, r3]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	721a      	strb	r2, [r3, #8]
	if(state & (DIR_CCW | DIR_CW))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7a1b      	ldrb	r3, [r3, #8]
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	2330      	movs	r3, #48	; 0x30
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d049      	beq.n	8002d06 <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	{
	    if(state & DIR_CW)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7a1b      	ldrb	r3, [r3, #8]
 8002c76:	001a      	movs	r2, r3
 8002c78:	2310      	movs	r3, #16
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d011      	beq.n	8002ca2 <_ZN14ROTARY_ENCODER7processEhh+0x7e>
	    {
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter < 0)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2206      	movs	r2, #6
 8002c82:	5e9b      	ldrsh	r3, [r3, r2]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da02      	bge.n	8002c8e <_ZN14ROTARY_ENCODER7processEhh+0x6a>
	    	{
	    		this->tickCounter = 0;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter++;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2206      	movs	r2, #6
 8002c92:	5e9b      	ldrsh	r3, [r3, r2]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	80da      	strh	r2, [r3, #6]
 8002ca0:	e010      	b.n	8002cc4 <_ZN14ROTARY_ENCODER7processEhh+0xa0>
	    }else{
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter > 0)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2206      	movs	r2, #6
 8002ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	dd02      	ble.n	8002cb2 <_ZN14ROTARY_ENCODER7processEhh+0x8e>
	    	{
	    		this->tickCounter = 0;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter--;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2206      	movs	r2, #6
 8002cb6:	5e9b      	ldrsh	r3, [r3, r2]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	80da      	strh	r2, [r3, #6]
	    }

	    uint16_t tempCounter = (this->tickCounter < 0) ? this->tickCounter * -1 : this->tickCounter;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2206      	movs	r2, #6
 8002cc8:	5e9b      	ldrsh	r3, [r3, r2]
 8002cca:	17d9      	asrs	r1, r3, #31
 8002ccc:	185a      	adds	r2, r3, r1
 8002cce:	404a      	eors	r2, r1
 8002cd0:	210e      	movs	r1, #14
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	801a      	strh	r2, [r3, #0]
	    if(tempCounter >= this->ticksPerStep)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	187a      	adds	r2, r7, r1
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d310      	bcc.n	8002d06 <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	    {
	    	this->doStep(state & DIR_CW);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	7a12      	ldrb	r2, [r2, #8]
 8002cee:	0011      	movs	r1, r2
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	1e51      	subs	r1, r2, #1
 8002cf6:	418a      	sbcs	r2, r1
 8002cf8:	b2d1      	uxtb	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	0010      	movs	r0, r2
 8002cfe:	4798      	blx	r3
	    	this->tickCounter = 0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	80da      	strh	r2, [r3, #6]
	    }
	}
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b004      	add	sp, #16
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	08003604 	.word	0x08003604

08002d14 <_ZN11SW_DEBOUNCE7processEv>:
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{1 << static_cast<uint8_t>(SW_DEBOUNCE::MS_FOR_VALID_PRESS/timer_period_ms)},
msHeldCounter{0}, timerPeriodMs{timer_period_ms}
{}

void SW_DEBOUNCE::process(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	this->switchBitSequence = (this->switchBitSequence << 1) | ((this->gpioPort->IDR & this->gpioPin) != 0);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7b1b      	ldrb	r3, [r3, #12]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	b25a      	sxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	8889      	ldrh	r1, [r1, #4]
 8002d2e:	400b      	ands	r3, r1
 8002d30:	1e59      	subs	r1, r3, #1
 8002d32:	418b      	sbcs	r3, r1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	731a      	strb	r2, [r3, #12]
	if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_OPEN)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <_ZN11SW_DEBOUNCE7processEv+0x56>
	{
		if(this->switchBitSequence == this->validPressBitSequence)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7b1a      	ldrb	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7d1b      	ldrb	r3, [r3, #20]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d13f      	bne.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
		{
			this->stateMachineState = SW_STATE_MACHINE::VALID_PRESS_DETECTED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	611a      	str	r2, [r3, #16]
			this->msHeldCounter = SW_DEBOUNCE::MS_FOR_VALID_PRESS;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2207      	movs	r2, #7
 8002d60:	619a      	str	r2, [r3, #24]
			//Reset the bit sequence to only count held time now
			this->switchBitSequence = 0;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	731a      	strb	r2, [r3, #12]
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
		{
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
		}
	}
}
 8002d68:	e035      	b.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
	}else if(this->stateMachineState == SW_STATE_MACHINE::VALID_PRESS_DETECTED)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d126      	bne.n	8002dc0 <_ZN11SW_DEBOUNCE7processEv+0xac>
		if(!this->switchBitSequence)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <_ZN11SW_DEBOUNCE7processEv+0x86>
			this->msHeldCounter+= this->timerPeriodMs;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	18d2      	adds	r2, r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
			if(this->msHeldCounter == static_cast<uint32_t>(SWITCH_STATE::THREE_SECOND_PRESS))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_ZN11SW_DEBOUNCE7processEv+0xcc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d121      	bne.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
				this->debouncedState = SWITCH_STATE::THREE_SECOND_PRESS;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <_ZN11SW_DEBOUNCE7processEv+0xcc>)
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	e01d      	b.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_RELEASED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	611a      	str	r2, [r3, #16]
			if(this->msHeldCounter < static_cast<uint32_t>(SWITCH_STATE::THREE_SECOND_PRESS))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <_ZN11SW_DEBOUNCE7processEv+0xd0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d806      	bhi.n	8002db8 <_ZN11SW_DEBOUNCE7processEv+0xa4>
				if(this->debouncedState < SWITCH_STATE::SHORT_PRESS)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	dc02      	bgt.n	8002db8 <_ZN11SW_DEBOUNCE7processEv+0xa4>
					this->debouncedState = SWITCH_STATE::SHORT_PRESS;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	609a      	str	r2, [r3, #8]
			this->msHeldCounter = 0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	e00a      	b.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
	}else if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_RELEASED)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d106      	bne.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7b1b      	ldrb	r3, [r3, #12]
 8002dcc:	2bff      	cmp	r3, #255	; 0xff
 8002dce:	d102      	bne.n	8002dd6 <_ZN11SW_DEBOUNCE7processEv+0xc2>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	00000bb8 	.word	0x00000bb8
 8002de4:	00000bb7 	.word	0x00000bb7

08002de8 <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 8002dec:	2390      	movs	r3, #144	; 0x90
 8002dee:	05db      	lsls	r3, r3, #23
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	2390      	movs	r3, #144	; 0x90
 8002df4:	05db      	lsls	r3, r3, #23
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8002dfc:	2096      	movs	r0, #150	; 0x96
 8002dfe:	f7fd fa55 	bl	80002ac <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 8002e02:	2390      	movs	r3, #144	; 0x90
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	2390      	movs	r3, #144	; 0x90
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8002e12:	2096      	movs	r0, #150	; 0x96
 8002e14:	f7fd fa4a 	bl	80002ac <HAL_Delay>
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <pullCSLow>:

void pullCSLow(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <pullCSLow+0x18>)
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <pullCSLow+0x18>)
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	615a      	str	r2, [r3, #20]
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	48000800 	.word	0x48000800

08002e3c <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	000a      	movs	r2, r1
 8002e46:	1cfb      	adds	r3, r7, #3
 8002e48:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d0fa      	beq.n	8002e4c <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	1cfa      	adds	r2, r7, #3
 8002e5c:	7812      	ldrb	r2, [r2, #0]
 8002e5e:	701a      	strb	r2, [r3, #0]
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <hspi_cmd>:
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
  *(uint16_t*)&(SPIx->DR) = dat;
}

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	000a      	movs	r2, r1
 8002e72:	1cfb      	adds	r3, r7, #3
 8002e74:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d1fa      	bne.n	8002e78 <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <hspi_cmd+0x54>)
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <hspi_cmd+0x54>)
 8002e88:	2101      	movs	r1, #1
 8002e8a:	438a      	bics	r2, r1
 8002e8c:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 8002e8e:	1cfb      	adds	r3, r7, #3
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7ff ffd0 	bl	8002e3c <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d1fa      	bne.n	8002e9e <hspi_cmd+0x36>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <hspi_cmd+0x54>)
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <hspi_cmd+0x54>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	615a      	str	r2, [r3, #20]
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	48000800 	.word	0x48000800

08002ec0 <ili9341_hspi_init>:
	{
		hspi_w8(SPIx, *(data++));
	}
}

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	21ef      	movs	r1, #239	; 0xef
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7ff ffcb 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff ffb0 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x80);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff ffab 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2102      	movs	r1, #2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff ffa6 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	21cf      	movs	r1, #207	; 0xcf
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff ffb7 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2100      	movs	r1, #0
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff ff9c 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	21c1      	movs	r1, #193	; 0xc1
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff ff97 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x30);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2130      	movs	r1, #48	; 0x30
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7ff ff92 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	21ed      	movs	r1, #237	; 0xed
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff ffa3 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2164      	movs	r1, #100	; 0x64
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7ff ff88 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2103      	movs	r1, #3
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7ff ff83 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x12);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2112      	movs	r1, #18
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f7ff ff7e 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x81);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2181      	movs	r1, #129	; 0x81
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ff79 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	21e8      	movs	r1, #232	; 0xe8
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff8a 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2185      	movs	r1, #133	; 0x85
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ff6f 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2100      	movs	r1, #0
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff ff6a 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x78);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2178      	movs	r1, #120	; 0x78
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff ff65 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	21cb      	movs	r1, #203	; 0xcb
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff ff76 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2139      	movs	r1, #57	; 0x39
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff ff5b 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff ff56 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2100      	movs	r1, #0
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ff51 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2134      	movs	r1, #52	; 0x34
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff ff4c 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff ff47 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	21f7      	movs	r1, #247	; 0xf7
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f7ff ff58 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2120      	movs	r1, #32
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ff3d 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	21ea      	movs	r1, #234	; 0xea
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ff4e 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff ff33 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f7ff ff2e 	bl	8002e3c <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	21c0      	movs	r1, #192	; 0xc0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff ff3f 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2123      	movs	r1, #35	; 0x23
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff ff24 	bl	8002e3c <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	21c1      	movs	r1, #193	; 0xc1
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff ff35 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2110      	movs	r1, #16
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ff1a 	bl	8002e3c <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	21c5      	movs	r1, #197	; 0xc5
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ff2b 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	213e      	movs	r1, #62	; 0x3e
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff ff10 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x28);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2128      	movs	r1, #40	; 0x28
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ff0b 	bl	8002e3c <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	21c7      	movs	r1, #199	; 0xc7
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff ff1c 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2186      	movs	r1, #134	; 0x86
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ff01 	bl	8002e3c <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2136      	movs	r1, #54	; 0x36
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff ff12 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2148      	movs	r1, #72	; 0x48
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff fef7 	bl	8002e3c <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2137      	movs	r1, #55	; 0x37
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff ff08 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2100      	movs	r1, #0
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff feed 	bl	8002e3c <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	213a      	movs	r1, #58	; 0x3a
 8003066:	0018      	movs	r0, r3
 8003068:	f7ff fefe 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2155      	movs	r1, #85	; 0x55
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fee3 	bl	8002e3c <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	21b1      	movs	r1, #177	; 0xb1
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff fef4 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2100      	movs	r1, #0
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff fed9 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x18);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2118      	movs	r1, #24
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff fed4 	bl	8002e3c <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	21b6      	movs	r1, #182	; 0xb6
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff fee5 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2108      	movs	r1, #8
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff feca 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x82);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2182      	movs	r1, #130	; 0x82
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff fec5 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x27);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2127      	movs	r1, #39	; 0x27
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fec0 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	21f2      	movs	r1, #242	; 0xf2
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff fed1 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2100      	movs	r1, #0
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff feb6 	bl	8002e3c <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2126      	movs	r1, #38	; 0x26
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff fec7 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2101      	movs	r1, #1
 80030de:	0018      	movs	r0, r3
 80030e0:	f7ff feac 	bl	8002e3c <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	21e0      	movs	r1, #224	; 0xe0
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff febd 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	210f      	movs	r1, #15
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7ff fea2 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2131      	movs	r1, #49	; 0x31
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff fe9d 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	212b      	movs	r1, #43	; 0x2b
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff fe98 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	210c      	movs	r1, #12
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff fe93 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	210e      	movs	r1, #14
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fe8e 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2108      	movs	r1, #8
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff fe89 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	214e      	movs	r1, #78	; 0x4e
 800312e:	0018      	movs	r0, r3
 8003130:	f7ff fe84 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	21f1      	movs	r1, #241	; 0xf1
 8003138:	0018      	movs	r0, r3
 800313a:	f7ff fe7f 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x37);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2137      	movs	r1, #55	; 0x37
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff fe7a 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2107      	movs	r1, #7
 800314c:	0018      	movs	r0, r3
 800314e:	f7ff fe75 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x10);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2110      	movs	r1, #16
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff fe70 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2103      	movs	r1, #3
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fe6b 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	210e      	movs	r1, #14
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff fe66 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x09);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2109      	movs	r1, #9
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff fe61 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x00);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2100      	movs	r1, #0
 800317e:	0018      	movs	r0, r3
 8003180:	f7ff fe5c 	bl	8002e3c <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	21e1      	movs	r1, #225	; 0xe1
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff fe6d 	bl	8002e68 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2100      	movs	r1, #0
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff fe52 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	210e      	movs	r1, #14
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff fe4d 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x14);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2114      	movs	r1, #20
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff fe48 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x03);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2103      	movs	r1, #3
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff fe43 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x11);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2111      	movs	r1, #17
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7ff fe3e 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x07);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2107      	movs	r1, #7
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff fe39 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2131      	movs	r1, #49	; 0x31
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7ff fe34 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	21c1      	movs	r1, #193	; 0xc1
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff fe2f 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x48);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2148      	movs	r1, #72	; 0x48
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7ff fe2a 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x08);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2108      	movs	r1, #8
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7ff fe25 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	210f      	movs	r1, #15
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff fe20 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	210c      	movs	r1, #12
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff fe1b 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2131      	movs	r1, #49	; 0x31
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff fe16 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x36);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2136      	movs	r1, #54	; 0x36
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff fe11 	bl	8002e3c <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	210f      	movs	r1, #15
 800321e:	0018      	movs	r0, r3
 8003220:	f7ff fe0c 	bl	8002e3c <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2111      	movs	r1, #17
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff fe1d 	bl	8002e68 <hspi_cmd>
  HAL_Delay(150);
 800322e:	2096      	movs	r0, #150	; 0x96
 8003230:	f7fd f83c 	bl	80002ac <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2129      	movs	r1, #41	; 0x29
 8003238:	0018      	movs	r0, r3
 800323a:	f7ff fe15 	bl	8002e68 <hspi_cmd>
	HAL_Delay(150);
 800323e:	2096      	movs	r0, #150	; 0x96
 8003240:	f7fd f834 	bl	80002ac <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2113      	movs	r1, #19
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff fe0d 	bl	8002e68 <hspi_cmd>
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZN21CHOSEN_STATE_TEXT_BOXC1Ev>:
CHOSEN_STATE_TEXT_BOX::CHOSEN_STATE_TEXT_BOX(uint8_t text_box_number, uint16_t font_color,
		uint8_t font_size, const TFT_TEXT_BOX& general_text_box):
TFT_TEXT_BOX(general_text_box),currentText{nullptr}, textBoxNumber{text_box_number}, fontColor{font_color}, fontSize{font_size}
{}

CHOSEN_STATE_TEXT_BOX::CHOSEN_STATE_TEXT_BOX(void):
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
TFT_TEXT_BOX(),currentText{nullptr}, textBoxNumber{0}, fontColor{0}, fontSize{0}
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f811 	bl	8003288 <_ZN12TFT_TEXT_BOXC1Ev>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	615a      	str	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	761a      	strb	r2, [r3, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	835a      	strh	r2, [r3, #26]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]
{}
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <_ZN12TFT_TEXT_BOXC1Ev>:
	}else{
		this->wrapXEdge = x_edge;
	}
}

TFT_TEXT_BOX::TFT_TEXT_BOX(void):
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
main_display{nullptr}, xPos{0}, yPos{0}, prevMaxX{0}, prevMaxY{0}, bgColor{0}, isCentered{0}, wrapXEdge{0}
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	809a      	strh	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	80da      	strh	r2, [r3, #6]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	811a      	strh	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	815a      	strh	r2, [r3, #10]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	819a      	strh	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	81da      	strh	r2, [r3, #14]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	741a      	strb	r2, [r3, #16]
{}
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b002      	add	sp, #8
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032cc:	480d      	ldr	r0, [pc, #52]	; (8003304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <LoopForever+0x6>)
  ldr r1, =_edata
 80032d2:	490e      	ldr	r1, [pc, #56]	; (800330c <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <LoopForever+0xe>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d8:	e002      	b.n	80032e0 <LoopCopyDataInit>

080032da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032de:	3304      	adds	r3, #4

080032e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e4:	d3f9      	bcc.n	80032da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e6:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e8:	4c0b      	ldr	r4, [pc, #44]	; (8003318 <LoopForever+0x16>)
  movs r3, #0
 80032ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032ec:	e001      	b.n	80032f2 <LoopFillZerobss>

080032ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f0:	3204      	adds	r2, #4

080032f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f4:	d3fb      	bcc.n	80032ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032f6:	f7ff fc51 	bl	8002b9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032fa:	f000 f811 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032fe:	f7ff f8b7 	bl	8002470 <main>

08003302 <LoopForever>:

LoopForever:
    b LoopForever
 8003302:	e7fe      	b.n	8003302 <LoopForever>
  ldr   r0, =_estack
 8003304:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003310:	0800362c 	.word	0x0800362c
  ldr r2, =_sbss
 8003314:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8003318:	200001a0 	.word	0x200001a0

0800331c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC1_COMP_IRQHandler>
	...

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	2600      	movs	r6, #0
 8003324:	4d0c      	ldr	r5, [pc, #48]	; (8003358 <__libc_init_array+0x38>)
 8003326:	4c0d      	ldr	r4, [pc, #52]	; (800335c <__libc_init_array+0x3c>)
 8003328:	1b64      	subs	r4, r4, r5
 800332a:	10a4      	asrs	r4, r4, #2
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	2600      	movs	r6, #0
 8003332:	f000 f821 	bl	8003378 <_init>
 8003336:	4d0a      	ldr	r5, [pc, #40]	; (8003360 <__libc_init_array+0x40>)
 8003338:	4c0a      	ldr	r4, [pc, #40]	; (8003364 <__libc_init_array+0x44>)
 800333a:	1b64      	subs	r4, r4, r5
 800333c:	10a4      	asrs	r4, r4, #2
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	00b3      	lsls	r3, r6, #2
 8003346:	58eb      	ldr	r3, [r5, r3]
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	00b3      	lsls	r3, r6, #2
 8003350:	58eb      	ldr	r3, [r5, r3]
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	08003620 	.word	0x08003620
 800335c:	08003620 	.word	0x08003620
 8003360:	08003620 	.word	0x08003620
 8003364:	08003628 	.word	0x08003628

08003368 <memset>:
 8003368:	0003      	movs	r3, r0
 800336a:	1812      	adds	r2, r2, r0
 800336c:	4293      	cmp	r3, r2
 800336e:	d100      	bne.n	8003372 <memset+0xa>
 8003370:	4770      	bx	lr
 8003372:	7019      	strb	r1, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	e7f9      	b.n	800336c <memset+0x4>

08003378 <_init>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr

08003384 <_fini>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr
