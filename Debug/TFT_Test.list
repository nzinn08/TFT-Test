
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007b28  08007b28  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b28  08007b28  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000006c  08007b9c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08007b9c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b679  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ff3  00000000  00000000  0003b70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  0003f700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  000406c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bc60  00000000  00000000  00041528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e16  00000000  00000000  0005d188  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008402e  00000000  00000000  0006df9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  000f2048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d64 	.word	0x08006d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08006d64 	.word	0x08006d64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 fe4e 	bl	800109c <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fdaf 	bl	8000f68 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 fbe5 	bl	8000be0 <__aeabi_fsub>
 8000416:	f000 fda7 	bl	8000f68 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fadd>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	4647      	mov	r7, r8
 8000428:	46ce      	mov	lr, r9
 800042a:	0243      	lsls	r3, r0, #9
 800042c:	0a5b      	lsrs	r3, r3, #9
 800042e:	0044      	lsls	r4, r0, #1
 8000430:	0fc2      	lsrs	r2, r0, #31
 8000432:	469c      	mov	ip, r3
 8000434:	0048      	lsls	r0, r1, #1
 8000436:	00dd      	lsls	r5, r3, #3
 8000438:	024b      	lsls	r3, r1, #9
 800043a:	0e24      	lsrs	r4, r4, #24
 800043c:	0a5b      	lsrs	r3, r3, #9
 800043e:	0e00      	lsrs	r0, r0, #24
 8000440:	b580      	push	{r7, lr}
 8000442:	4698      	mov	r8, r3
 8000444:	0026      	movs	r6, r4
 8000446:	4691      	mov	r9, r2
 8000448:	0fc9      	lsrs	r1, r1, #31
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	1a27      	subs	r7, r4, r0
 800044e:	428a      	cmp	r2, r1
 8000450:	d029      	beq.n	80004a6 <__aeabi_fadd+0x82>
 8000452:	2f00      	cmp	r7, #0
 8000454:	dd15      	ble.n	8000482 <__aeabi_fadd+0x5e>
 8000456:	2800      	cmp	r0, #0
 8000458:	d14a      	bne.n	80004f0 <__aeabi_fadd+0xcc>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d000      	beq.n	8000460 <__aeabi_fadd+0x3c>
 800045e:	e095      	b.n	800058c <__aeabi_fadd+0x168>
 8000460:	08ed      	lsrs	r5, r5, #3
 8000462:	2cff      	cmp	r4, #255	; 0xff
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x44>
 8000466:	e088      	b.n	800057a <__aeabi_fadd+0x156>
 8000468:	026b      	lsls	r3, r5, #9
 800046a:	0a5b      	lsrs	r3, r3, #9
 800046c:	b2e6      	uxtb	r6, r4
 800046e:	025b      	lsls	r3, r3, #9
 8000470:	05f6      	lsls	r6, r6, #23
 8000472:	0a58      	lsrs	r0, r3, #9
 8000474:	4330      	orrs	r0, r6
 8000476:	07d2      	lsls	r2, r2, #31
 8000478:	4310      	orrs	r0, r2
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4690      	mov	r8, r2
 800047e:	4699      	mov	r9, r3
 8000480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000482:	2f00      	cmp	r7, #0
 8000484:	d000      	beq.n	8000488 <__aeabi_fadd+0x64>
 8000486:	e087      	b.n	8000598 <__aeabi_fadd+0x174>
 8000488:	1c60      	adds	r0, r4, #1
 800048a:	b2c0      	uxtb	r0, r0
 800048c:	2801      	cmp	r0, #1
 800048e:	dc00      	bgt.n	8000492 <__aeabi_fadd+0x6e>
 8000490:	e0b6      	b.n	8000600 <__aeabi_fadd+0x1dc>
 8000492:	1aee      	subs	r6, r5, r3
 8000494:	0172      	lsls	r2, r6, #5
 8000496:	d500      	bpl.n	800049a <__aeabi_fadd+0x76>
 8000498:	e0c5      	b.n	8000626 <__aeabi_fadd+0x202>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d13d      	bne.n	800051a <__aeabi_fadd+0xf6>
 800049e:	2200      	movs	r2, #0
 80004a0:	2600      	movs	r6, #0
 80004a2:	2300      	movs	r3, #0
 80004a4:	e7e3      	b.n	800046e <__aeabi_fadd+0x4a>
 80004a6:	2f00      	cmp	r7, #0
 80004a8:	dc00      	bgt.n	80004ac <__aeabi_fadd+0x88>
 80004aa:	e096      	b.n	80005da <__aeabi_fadd+0x1b6>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d05d      	beq.n	800056c <__aeabi_fadd+0x148>
 80004b0:	2cff      	cmp	r4, #255	; 0xff
 80004b2:	d060      	beq.n	8000576 <__aeabi_fadd+0x152>
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	4313      	orrs	r3, r2
 80004ba:	2f1b      	cmp	r7, #27
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fadd+0x9c>
 80004be:	e0ec      	b.n	800069a <__aeabi_fadd+0x276>
 80004c0:	2220      	movs	r2, #32
 80004c2:	1bd2      	subs	r2, r2, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	4093      	lsls	r3, r2
 80004c8:	40f8      	lsrs	r0, r7
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
 80004ce:	4303      	orrs	r3, r0
 80004d0:	18ed      	adds	r5, r5, r3
 80004d2:	016b      	lsls	r3, r5, #5
 80004d4:	d57b      	bpl.n	80005ce <__aeabi_fadd+0x1aa>
 80004d6:	3401      	adds	r4, #1
 80004d8:	2cff      	cmp	r4, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0xba>
 80004dc:	e0b7      	b.n	800064e <__aeabi_fadd+0x22a>
 80004de:	2201      	movs	r2, #1
 80004e0:	2607      	movs	r6, #7
 80004e2:	402a      	ands	r2, r5
 80004e4:	086b      	lsrs	r3, r5, #1
 80004e6:	4d9a      	ldr	r5, [pc, #616]	; (8000750 <__aeabi_fadd+0x32c>)
 80004e8:	401d      	ands	r5, r3
 80004ea:	4315      	orrs	r5, r2
 80004ec:	402e      	ands	r6, r5
 80004ee:	e029      	b.n	8000544 <__aeabi_fadd+0x120>
 80004f0:	2cff      	cmp	r4, #255	; 0xff
 80004f2:	d0b5      	beq.n	8000460 <__aeabi_fadd+0x3c>
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	4313      	orrs	r3, r2
 80004fa:	2f1b      	cmp	r7, #27
 80004fc:	dd00      	ble.n	8000500 <__aeabi_fadd+0xdc>
 80004fe:	e0b2      	b.n	8000666 <__aeabi_fadd+0x242>
 8000500:	2220      	movs	r2, #32
 8000502:	1bd2      	subs	r2, r2, r7
 8000504:	0019      	movs	r1, r3
 8000506:	4093      	lsls	r3, r2
 8000508:	40f9      	lsrs	r1, r7
 800050a:	1e5a      	subs	r2, r3, #1
 800050c:	4193      	sbcs	r3, r2
 800050e:	430b      	orrs	r3, r1
 8000510:	1aed      	subs	r5, r5, r3
 8000512:	016b      	lsls	r3, r5, #5
 8000514:	d55b      	bpl.n	80005ce <__aeabi_fadd+0x1aa>
 8000516:	01ad      	lsls	r5, r5, #6
 8000518:	09ae      	lsrs	r6, r5, #6
 800051a:	0030      	movs	r0, r6
 800051c:	f000 fdc8 	bl	80010b0 <__clzsi2>
 8000520:	3805      	subs	r0, #5
 8000522:	4086      	lsls	r6, r0
 8000524:	4284      	cmp	r4, r0
 8000526:	dc65      	bgt.n	80005f4 <__aeabi_fadd+0x1d0>
 8000528:	1b04      	subs	r4, r0, r4
 800052a:	0033      	movs	r3, r6
 800052c:	2020      	movs	r0, #32
 800052e:	3401      	adds	r4, #1
 8000530:	40e3      	lsrs	r3, r4
 8000532:	1b04      	subs	r4, r0, r4
 8000534:	40a6      	lsls	r6, r4
 8000536:	1e75      	subs	r5, r6, #1
 8000538:	41ae      	sbcs	r6, r5
 800053a:	4333      	orrs	r3, r6
 800053c:	2607      	movs	r6, #7
 800053e:	001d      	movs	r5, r3
 8000540:	2400      	movs	r4, #0
 8000542:	401e      	ands	r6, r3
 8000544:	2201      	movs	r2, #1
 8000546:	464b      	mov	r3, r9
 8000548:	401a      	ands	r2, r3
 800054a:	2e00      	cmp	r6, #0
 800054c:	d004      	beq.n	8000558 <__aeabi_fadd+0x134>
 800054e:	230f      	movs	r3, #15
 8000550:	402b      	ands	r3, r5
 8000552:	2b04      	cmp	r3, #4
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x134>
 8000556:	3504      	adds	r5, #4
 8000558:	016b      	lsls	r3, r5, #5
 800055a:	d400      	bmi.n	800055e <__aeabi_fadd+0x13a>
 800055c:	e780      	b.n	8000460 <__aeabi_fadd+0x3c>
 800055e:	3401      	adds	r4, #1
 8000560:	b2e6      	uxtb	r6, r4
 8000562:	2cff      	cmp	r4, #255	; 0xff
 8000564:	d12f      	bne.n	80005c6 <__aeabi_fadd+0x1a2>
 8000566:	26ff      	movs	r6, #255	; 0xff
 8000568:	2300      	movs	r3, #0
 800056a:	e780      	b.n	800046e <__aeabi_fadd+0x4a>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d152      	bne.n	8000616 <__aeabi_fadd+0x1f2>
 8000570:	2cff      	cmp	r4, #255	; 0xff
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0x152>
 8000574:	e774      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000576:	000a      	movs	r2, r1
 8000578:	08ed      	lsrs	r5, r5, #3
 800057a:	2d00      	cmp	r5, #0
 800057c:	d0f3      	beq.n	8000566 <__aeabi_fadd+0x142>
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	03db      	lsls	r3, r3, #15
 8000582:	432b      	orrs	r3, r5
 8000584:	025b      	lsls	r3, r3, #9
 8000586:	0a5b      	lsrs	r3, r3, #9
 8000588:	26ff      	movs	r6, #255	; 0xff
 800058a:	e770      	b.n	800046e <__aeabi_fadd+0x4a>
 800058c:	3f01      	subs	r7, #1
 800058e:	2f00      	cmp	r7, #0
 8000590:	d0be      	beq.n	8000510 <__aeabi_fadd+0xec>
 8000592:	2cff      	cmp	r4, #255	; 0xff
 8000594:	d1b1      	bne.n	80004fa <__aeabi_fadd+0xd6>
 8000596:	e763      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000598:	2c00      	cmp	r4, #0
 800059a:	d047      	beq.n	800062c <__aeabi_fadd+0x208>
 800059c:	28ff      	cmp	r0, #255	; 0xff
 800059e:	d069      	beq.n	8000674 <__aeabi_fadd+0x250>
 80005a0:	2480      	movs	r4, #128	; 0x80
 80005a2:	04e4      	lsls	r4, r4, #19
 80005a4:	427a      	negs	r2, r7
 80005a6:	4325      	orrs	r5, r4
 80005a8:	2a1b      	cmp	r2, #27
 80005aa:	dd00      	ble.n	80005ae <__aeabi_fadd+0x18a>
 80005ac:	e0c5      	b.n	800073a <__aeabi_fadd+0x316>
 80005ae:	002c      	movs	r4, r5
 80005b0:	2620      	movs	r6, #32
 80005b2:	40d4      	lsrs	r4, r2
 80005b4:	1ab2      	subs	r2, r6, r2
 80005b6:	4095      	lsls	r5, r2
 80005b8:	1e6a      	subs	r2, r5, #1
 80005ba:	4195      	sbcs	r5, r2
 80005bc:	4325      	orrs	r5, r4
 80005be:	1b5d      	subs	r5, r3, r5
 80005c0:	0004      	movs	r4, r0
 80005c2:	4689      	mov	r9, r1
 80005c4:	e7a5      	b.n	8000512 <__aeabi_fadd+0xee>
 80005c6:	01ab      	lsls	r3, r5, #6
 80005c8:	0a5b      	lsrs	r3, r3, #9
 80005ca:	e750      	b.n	800046e <__aeabi_fadd+0x4a>
 80005cc:	2400      	movs	r4, #0
 80005ce:	2201      	movs	r2, #1
 80005d0:	464b      	mov	r3, r9
 80005d2:	401a      	ands	r2, r3
 80005d4:	076b      	lsls	r3, r5, #29
 80005d6:	d1ba      	bne.n	800054e <__aeabi_fadd+0x12a>
 80005d8:	e742      	b.n	8000460 <__aeabi_fadd+0x3c>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d13b      	bne.n	8000656 <__aeabi_fadd+0x232>
 80005de:	3401      	adds	r4, #1
 80005e0:	b2e0      	uxtb	r0, r4
 80005e2:	2801      	cmp	r0, #1
 80005e4:	dd4a      	ble.n	800067c <__aeabi_fadd+0x258>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d0bd      	beq.n	8000566 <__aeabi_fadd+0x142>
 80005ea:	2607      	movs	r6, #7
 80005ec:	18ed      	adds	r5, r5, r3
 80005ee:	086d      	lsrs	r5, r5, #1
 80005f0:	402e      	ands	r6, r5
 80005f2:	e7a7      	b.n	8000544 <__aeabi_fadd+0x120>
 80005f4:	2307      	movs	r3, #7
 80005f6:	4d57      	ldr	r5, [pc, #348]	; (8000754 <__aeabi_fadd+0x330>)
 80005f8:	1a24      	subs	r4, r4, r0
 80005fa:	4035      	ands	r5, r6
 80005fc:	401e      	ands	r6, r3
 80005fe:	e7a1      	b.n	8000544 <__aeabi_fadd+0x120>
 8000600:	2c00      	cmp	r4, #0
 8000602:	d11b      	bne.n	800063c <__aeabi_fadd+0x218>
 8000604:	2d00      	cmp	r5, #0
 8000606:	d16e      	bne.n	80006e6 <__aeabi_fadd+0x2c2>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x1ea>
 800060c:	e09a      	b.n	8000744 <__aeabi_fadd+0x320>
 800060e:	000a      	movs	r2, r1
 8000610:	001d      	movs	r5, r3
 8000612:	003c      	movs	r4, r7
 8000614:	e724      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000616:	3f01      	subs	r7, #1
 8000618:	2f00      	cmp	r7, #0
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x1fa>
 800061c:	e758      	b.n	80004d0 <__aeabi_fadd+0xac>
 800061e:	2cff      	cmp	r4, #255	; 0xff
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x200>
 8000622:	e74a      	b.n	80004ba <__aeabi_fadd+0x96>
 8000624:	e7a7      	b.n	8000576 <__aeabi_fadd+0x152>
 8000626:	1b5e      	subs	r6, r3, r5
 8000628:	4689      	mov	r9, r1
 800062a:	e776      	b.n	800051a <__aeabi_fadd+0xf6>
 800062c:	2d00      	cmp	r5, #0
 800062e:	d11c      	bne.n	800066a <__aeabi_fadd+0x246>
 8000630:	000a      	movs	r2, r1
 8000632:	28ff      	cmp	r0, #255	; 0xff
 8000634:	d01f      	beq.n	8000676 <__aeabi_fadd+0x252>
 8000636:	0004      	movs	r4, r0
 8000638:	001d      	movs	r5, r3
 800063a:	e711      	b.n	8000460 <__aeabi_fadd+0x3c>
 800063c:	2d00      	cmp	r5, #0
 800063e:	d15d      	bne.n	80006fc <__aeabi_fadd+0x2d8>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d117      	bne.n	8000674 <__aeabi_fadd+0x250>
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	2200      	movs	r2, #0
 8000648:	03db      	lsls	r3, r3, #15
 800064a:	26ff      	movs	r6, #255	; 0xff
 800064c:	e70f      	b.n	800046e <__aeabi_fadd+0x4a>
 800064e:	000a      	movs	r2, r1
 8000650:	26ff      	movs	r6, #255	; 0xff
 8000652:	2300      	movs	r3, #0
 8000654:	e70b      	b.n	800046e <__aeabi_fadd+0x4a>
 8000656:	2c00      	cmp	r4, #0
 8000658:	d121      	bne.n	800069e <__aeabi_fadd+0x27a>
 800065a:	2d00      	cmp	r5, #0
 800065c:	d166      	bne.n	800072c <__aeabi_fadd+0x308>
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d1e9      	bne.n	8000636 <__aeabi_fadd+0x212>
 8000662:	001d      	movs	r5, r3
 8000664:	e787      	b.n	8000576 <__aeabi_fadd+0x152>
 8000666:	2301      	movs	r3, #1
 8000668:	e752      	b.n	8000510 <__aeabi_fadd+0xec>
 800066a:	1c7a      	adds	r2, r7, #1
 800066c:	d0a7      	beq.n	80005be <__aeabi_fadd+0x19a>
 800066e:	43fa      	mvns	r2, r7
 8000670:	28ff      	cmp	r0, #255	; 0xff
 8000672:	d199      	bne.n	80005a8 <__aeabi_fadd+0x184>
 8000674:	000a      	movs	r2, r1
 8000676:	001d      	movs	r5, r3
 8000678:	24ff      	movs	r4, #255	; 0xff
 800067a:	e6f1      	b.n	8000460 <__aeabi_fadd+0x3c>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d121      	bne.n	80006c4 <__aeabi_fadd+0x2a0>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d04f      	beq.n	8000724 <__aeabi_fadd+0x300>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d04c      	beq.n	8000722 <__aeabi_fadd+0x2fe>
 8000688:	18ed      	adds	r5, r5, r3
 800068a:	016b      	lsls	r3, r5, #5
 800068c:	d59e      	bpl.n	80005cc <__aeabi_fadd+0x1a8>
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <__aeabi_fadd+0x330>)
 8000690:	3607      	adds	r6, #7
 8000692:	402e      	ands	r6, r5
 8000694:	2401      	movs	r4, #1
 8000696:	401d      	ands	r5, r3
 8000698:	e754      	b.n	8000544 <__aeabi_fadd+0x120>
 800069a:	2301      	movs	r3, #1
 800069c:	e718      	b.n	80004d0 <__aeabi_fadd+0xac>
 800069e:	28ff      	cmp	r0, #255	; 0xff
 80006a0:	d0df      	beq.n	8000662 <__aeabi_fadd+0x23e>
 80006a2:	2480      	movs	r4, #128	; 0x80
 80006a4:	04e4      	lsls	r4, r4, #19
 80006a6:	427f      	negs	r7, r7
 80006a8:	4325      	orrs	r5, r4
 80006aa:	2f1b      	cmp	r7, #27
 80006ac:	dc4d      	bgt.n	800074a <__aeabi_fadd+0x326>
 80006ae:	2620      	movs	r6, #32
 80006b0:	1bf6      	subs	r6, r6, r7
 80006b2:	002c      	movs	r4, r5
 80006b4:	40b5      	lsls	r5, r6
 80006b6:	40fc      	lsrs	r4, r7
 80006b8:	1e6a      	subs	r2, r5, #1
 80006ba:	4195      	sbcs	r5, r2
 80006bc:	4325      	orrs	r5, r4
 80006be:	18ed      	adds	r5, r5, r3
 80006c0:	0004      	movs	r4, r0
 80006c2:	e706      	b.n	80004d2 <__aeabi_fadd+0xae>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d0cc      	beq.n	8000662 <__aeabi_fadd+0x23e>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x2aa>
 80006cc:	e753      	b.n	8000576 <__aeabi_fadd+0x152>
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4660      	mov	r0, ip
 80006d2:	03c9      	lsls	r1, r1, #15
 80006d4:	4208      	tst	r0, r1
 80006d6:	d003      	beq.n	80006e0 <__aeabi_fadd+0x2bc>
 80006d8:	4640      	mov	r0, r8
 80006da:	4208      	tst	r0, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x2bc>
 80006de:	001d      	movs	r5, r3
 80006e0:	2101      	movs	r1, #1
 80006e2:	4011      	ands	r1, r2
 80006e4:	e747      	b.n	8000576 <__aeabi_fadd+0x152>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x2c8>
 80006ea:	e6b9      	b.n	8000460 <__aeabi_fadd+0x3c>
 80006ec:	1aea      	subs	r2, r5, r3
 80006ee:	0150      	lsls	r0, r2, #5
 80006f0:	d525      	bpl.n	800073e <__aeabi_fadd+0x31a>
 80006f2:	2607      	movs	r6, #7
 80006f4:	1b5d      	subs	r5, r3, r5
 80006f6:	402e      	ands	r6, r5
 80006f8:	4689      	mov	r9, r1
 80006fa:	e723      	b.n	8000544 <__aeabi_fadd+0x120>
 80006fc:	24ff      	movs	r4, #255	; 0xff
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x2e0>
 8000702:	e6ad      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	4660      	mov	r0, ip
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4210      	tst	r0, r2
 800070c:	d004      	beq.n	8000718 <__aeabi_fadd+0x2f4>
 800070e:	4640      	mov	r0, r8
 8000710:	4210      	tst	r0, r2
 8000712:	d101      	bne.n	8000718 <__aeabi_fadd+0x2f4>
 8000714:	001d      	movs	r5, r3
 8000716:	4689      	mov	r9, r1
 8000718:	2201      	movs	r2, #1
 800071a:	464b      	mov	r3, r9
 800071c:	24ff      	movs	r4, #255	; 0xff
 800071e:	401a      	ands	r2, r3
 8000720:	e69e      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000722:	002b      	movs	r3, r5
 8000724:	08dd      	lsrs	r5, r3, #3
 8000726:	000a      	movs	r2, r1
 8000728:	2400      	movs	r4, #0
 800072a:	e69d      	b.n	8000468 <__aeabi_fadd+0x44>
 800072c:	1c7a      	adds	r2, r7, #1
 800072e:	d0c6      	beq.n	80006be <__aeabi_fadd+0x29a>
 8000730:	43ff      	mvns	r7, r7
 8000732:	28ff      	cmp	r0, #255	; 0xff
 8000734:	d1b9      	bne.n	80006aa <__aeabi_fadd+0x286>
 8000736:	001d      	movs	r5, r3
 8000738:	e71d      	b.n	8000576 <__aeabi_fadd+0x152>
 800073a:	2501      	movs	r5, #1
 800073c:	e73f      	b.n	80005be <__aeabi_fadd+0x19a>
 800073e:	1e15      	subs	r5, r2, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x320>
 8000742:	e744      	b.n	80005ce <__aeabi_fadd+0x1aa>
 8000744:	2200      	movs	r2, #0
 8000746:	2300      	movs	r3, #0
 8000748:	e691      	b.n	800046e <__aeabi_fadd+0x4a>
 800074a:	2501      	movs	r5, #1
 800074c:	e7b7      	b.n	80006be <__aeabi_fadd+0x29a>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	7dffffff 	.word	0x7dffffff
 8000754:	fbffffff 	.word	0xfbffffff

08000758 <__aeabi_fdiv>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	4657      	mov	r7, sl
 800075c:	464e      	mov	r6, r9
 800075e:	4645      	mov	r5, r8
 8000760:	46de      	mov	lr, fp
 8000762:	0244      	lsls	r4, r0, #9
 8000764:	b5e0      	push	{r5, r6, r7, lr}
 8000766:	0046      	lsls	r6, r0, #1
 8000768:	4688      	mov	r8, r1
 800076a:	0a64      	lsrs	r4, r4, #9
 800076c:	0e36      	lsrs	r6, r6, #24
 800076e:	0fc7      	lsrs	r7, r0, #31
 8000770:	2e00      	cmp	r6, #0
 8000772:	d063      	beq.n	800083c <__aeabi_fdiv+0xe4>
 8000774:	2eff      	cmp	r6, #255	; 0xff
 8000776:	d024      	beq.n	80007c2 <__aeabi_fdiv+0x6a>
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	00e4      	lsls	r4, r4, #3
 800077c:	04db      	lsls	r3, r3, #19
 800077e:	431c      	orrs	r4, r3
 8000780:	2300      	movs	r3, #0
 8000782:	4699      	mov	r9, r3
 8000784:	469b      	mov	fp, r3
 8000786:	3e7f      	subs	r6, #127	; 0x7f
 8000788:	4643      	mov	r3, r8
 800078a:	4642      	mov	r2, r8
 800078c:	025d      	lsls	r5, r3, #9
 800078e:	0fd2      	lsrs	r2, r2, #31
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	0e1b      	lsrs	r3, r3, #24
 8000796:	4690      	mov	r8, r2
 8000798:	4692      	mov	sl, r2
 800079a:	d065      	beq.n	8000868 <__aeabi_fdiv+0x110>
 800079c:	2bff      	cmp	r3, #255	; 0xff
 800079e:	d055      	beq.n	800084c <__aeabi_fdiv+0xf4>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	2100      	movs	r1, #0
 80007a4:	00ed      	lsls	r5, r5, #3
 80007a6:	04d2      	lsls	r2, r2, #19
 80007a8:	3b7f      	subs	r3, #127	; 0x7f
 80007aa:	4315      	orrs	r5, r2
 80007ac:	1af6      	subs	r6, r6, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	464a      	mov	r2, r9
 80007b2:	407b      	eors	r3, r7
 80007b4:	2a0f      	cmp	r2, #15
 80007b6:	d900      	bls.n	80007ba <__aeabi_fdiv+0x62>
 80007b8:	e08d      	b.n	80008d6 <__aeabi_fdiv+0x17e>
 80007ba:	486d      	ldr	r0, [pc, #436]	; (8000970 <__aeabi_fdiv+0x218>)
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	5882      	ldr	r2, [r0, r2]
 80007c0:	4697      	mov	pc, r2
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d154      	bne.n	8000870 <__aeabi_fdiv+0x118>
 80007c6:	2308      	movs	r3, #8
 80007c8:	4699      	mov	r9, r3
 80007ca:	3b06      	subs	r3, #6
 80007cc:	26ff      	movs	r6, #255	; 0xff
 80007ce:	469b      	mov	fp, r3
 80007d0:	e7da      	b.n	8000788 <__aeabi_fdiv+0x30>
 80007d2:	2500      	movs	r5, #0
 80007d4:	4653      	mov	r3, sl
 80007d6:	2902      	cmp	r1, #2
 80007d8:	d01b      	beq.n	8000812 <__aeabi_fdiv+0xba>
 80007da:	2903      	cmp	r1, #3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fdiv+0x88>
 80007de:	e0bf      	b.n	8000960 <__aeabi_fdiv+0x208>
 80007e0:	2901      	cmp	r1, #1
 80007e2:	d028      	beq.n	8000836 <__aeabi_fdiv+0xde>
 80007e4:	0030      	movs	r0, r6
 80007e6:	307f      	adds	r0, #127	; 0x7f
 80007e8:	2800      	cmp	r0, #0
 80007ea:	dd20      	ble.n	800082e <__aeabi_fdiv+0xd6>
 80007ec:	076a      	lsls	r2, r5, #29
 80007ee:	d004      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f0:	220f      	movs	r2, #15
 80007f2:	402a      	ands	r2, r5
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d000      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f8:	3504      	adds	r5, #4
 80007fa:	012a      	lsls	r2, r5, #4
 80007fc:	d503      	bpl.n	8000806 <__aeabi_fdiv+0xae>
 80007fe:	0030      	movs	r0, r6
 8000800:	4a5c      	ldr	r2, [pc, #368]	; (8000974 <__aeabi_fdiv+0x21c>)
 8000802:	3080      	adds	r0, #128	; 0x80
 8000804:	4015      	ands	r5, r2
 8000806:	28fe      	cmp	r0, #254	; 0xfe
 8000808:	dc03      	bgt.n	8000812 <__aeabi_fdiv+0xba>
 800080a:	01ac      	lsls	r4, r5, #6
 800080c:	0a64      	lsrs	r4, r4, #9
 800080e:	b2c2      	uxtb	r2, r0
 8000810:	e001      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	2400      	movs	r4, #0
 8000816:	0264      	lsls	r4, r4, #9
 8000818:	05d2      	lsls	r2, r2, #23
 800081a:	0a60      	lsrs	r0, r4, #9
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	4310      	orrs	r0, r2
 8000820:	4318      	orrs	r0, r3
 8000822:	bc3c      	pop	{r2, r3, r4, r5}
 8000824:	4690      	mov	r8, r2
 8000826:	4699      	mov	r9, r3
 8000828:	46a2      	mov	sl, r4
 800082a:	46ab      	mov	fp, r5
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	2201      	movs	r2, #1
 8000830:	1a10      	subs	r0, r2, r0
 8000832:	281b      	cmp	r0, #27
 8000834:	dd7c      	ble.n	8000930 <__aeabi_fdiv+0x1d8>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	e7ec      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d11d      	bne.n	800087c <__aeabi_fdiv+0x124>
 8000840:	2304      	movs	r3, #4
 8000842:	4699      	mov	r9, r3
 8000844:	3b03      	subs	r3, #3
 8000846:	2600      	movs	r6, #0
 8000848:	469b      	mov	fp, r3
 800084a:	e79d      	b.n	8000788 <__aeabi_fdiv+0x30>
 800084c:	3eff      	subs	r6, #255	; 0xff
 800084e:	2d00      	cmp	r5, #0
 8000850:	d120      	bne.n	8000894 <__aeabi_fdiv+0x13c>
 8000852:	2102      	movs	r1, #2
 8000854:	4643      	mov	r3, r8
 8000856:	464a      	mov	r2, r9
 8000858:	407b      	eors	r3, r7
 800085a:	430a      	orrs	r2, r1
 800085c:	2a0f      	cmp	r2, #15
 800085e:	d8d8      	bhi.n	8000812 <__aeabi_fdiv+0xba>
 8000860:	4845      	ldr	r0, [pc, #276]	; (8000978 <__aeabi_fdiv+0x220>)
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	5882      	ldr	r2, [r0, r2]
 8000866:	4697      	mov	pc, r2
 8000868:	2d00      	cmp	r5, #0
 800086a:	d119      	bne.n	80008a0 <__aeabi_fdiv+0x148>
 800086c:	2101      	movs	r1, #1
 800086e:	e7f1      	b.n	8000854 <__aeabi_fdiv+0xfc>
 8000870:	230c      	movs	r3, #12
 8000872:	4699      	mov	r9, r3
 8000874:	3b09      	subs	r3, #9
 8000876:	26ff      	movs	r6, #255	; 0xff
 8000878:	469b      	mov	fp, r3
 800087a:	e785      	b.n	8000788 <__aeabi_fdiv+0x30>
 800087c:	0020      	movs	r0, r4
 800087e:	f000 fc17 	bl	80010b0 <__clzsi2>
 8000882:	2676      	movs	r6, #118	; 0x76
 8000884:	1f43      	subs	r3, r0, #5
 8000886:	409c      	lsls	r4, r3
 8000888:	2300      	movs	r3, #0
 800088a:	4276      	negs	r6, r6
 800088c:	1a36      	subs	r6, r6, r0
 800088e:	4699      	mov	r9, r3
 8000890:	469b      	mov	fp, r3
 8000892:	e779      	b.n	8000788 <__aeabi_fdiv+0x30>
 8000894:	464a      	mov	r2, r9
 8000896:	2303      	movs	r3, #3
 8000898:	431a      	orrs	r2, r3
 800089a:	4691      	mov	r9, r2
 800089c:	2103      	movs	r1, #3
 800089e:	e786      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008a0:	0028      	movs	r0, r5
 80008a2:	f000 fc05 	bl	80010b0 <__clzsi2>
 80008a6:	1f43      	subs	r3, r0, #5
 80008a8:	1836      	adds	r6, r6, r0
 80008aa:	409d      	lsls	r5, r3
 80008ac:	3676      	adds	r6, #118	; 0x76
 80008ae:	2100      	movs	r1, #0
 80008b0:	e77d      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b2:	2480      	movs	r4, #128	; 0x80
 80008b4:	2300      	movs	r3, #0
 80008b6:	03e4      	lsls	r4, r4, #15
 80008b8:	22ff      	movs	r2, #255	; 0xff
 80008ba:	e7ac      	b.n	8000816 <__aeabi_fdiv+0xbe>
 80008bc:	2500      	movs	r5, #0
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	03db      	lsls	r3, r3, #15
 80008c2:	421c      	tst	r4, r3
 80008c4:	d028      	beq.n	8000918 <__aeabi_fdiv+0x1c0>
 80008c6:	421d      	tst	r5, r3
 80008c8:	d126      	bne.n	8000918 <__aeabi_fdiv+0x1c0>
 80008ca:	432b      	orrs	r3, r5
 80008cc:	025c      	lsls	r4, r3, #9
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	4643      	mov	r3, r8
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	e79f      	b.n	8000816 <__aeabi_fdiv+0xbe>
 80008d6:	0162      	lsls	r2, r4, #5
 80008d8:	016c      	lsls	r4, r5, #5
 80008da:	42a2      	cmp	r2, r4
 80008dc:	d224      	bcs.n	8000928 <__aeabi_fdiv+0x1d0>
 80008de:	211b      	movs	r1, #27
 80008e0:	2500      	movs	r5, #0
 80008e2:	3e01      	subs	r6, #1
 80008e4:	2701      	movs	r7, #1
 80008e6:	0010      	movs	r0, r2
 80008e8:	006d      	lsls	r5, r5, #1
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	2800      	cmp	r0, #0
 80008ee:	db01      	blt.n	80008f4 <__aeabi_fdiv+0x19c>
 80008f0:	4294      	cmp	r4, r2
 80008f2:	d801      	bhi.n	80008f8 <__aeabi_fdiv+0x1a0>
 80008f4:	1b12      	subs	r2, r2, r4
 80008f6:	433d      	orrs	r5, r7
 80008f8:	3901      	subs	r1, #1
 80008fa:	2900      	cmp	r1, #0
 80008fc:	d1f3      	bne.n	80008e6 <__aeabi_fdiv+0x18e>
 80008fe:	0014      	movs	r4, r2
 8000900:	1e62      	subs	r2, r4, #1
 8000902:	4194      	sbcs	r4, r2
 8000904:	4325      	orrs	r5, r4
 8000906:	e76d      	b.n	80007e4 <__aeabi_fdiv+0x8c>
 8000908:	46ba      	mov	sl, r7
 800090a:	4659      	mov	r1, fp
 800090c:	0025      	movs	r5, r4
 800090e:	4653      	mov	r3, sl
 8000910:	2902      	cmp	r1, #2
 8000912:	d000      	beq.n	8000916 <__aeabi_fdiv+0x1be>
 8000914:	e761      	b.n	80007da <__aeabi_fdiv+0x82>
 8000916:	e77c      	b.n	8000812 <__aeabi_fdiv+0xba>
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	03db      	lsls	r3, r3, #15
 800091c:	431c      	orrs	r4, r3
 800091e:	0264      	lsls	r4, r4, #9
 8000920:	0a64      	lsrs	r4, r4, #9
 8000922:	003b      	movs	r3, r7
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	e776      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000928:	1b12      	subs	r2, r2, r4
 800092a:	211a      	movs	r1, #26
 800092c:	2501      	movs	r5, #1
 800092e:	e7d9      	b.n	80008e4 <__aeabi_fdiv+0x18c>
 8000930:	369e      	adds	r6, #158	; 0x9e
 8000932:	002a      	movs	r2, r5
 8000934:	40b5      	lsls	r5, r6
 8000936:	002c      	movs	r4, r5
 8000938:	40c2      	lsrs	r2, r0
 800093a:	1e65      	subs	r5, r4, #1
 800093c:	41ac      	sbcs	r4, r5
 800093e:	4314      	orrs	r4, r2
 8000940:	0762      	lsls	r2, r4, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x1f6>
 8000944:	220f      	movs	r2, #15
 8000946:	4022      	ands	r2, r4
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x1f6>
 800094c:	3404      	adds	r4, #4
 800094e:	0162      	lsls	r2, r4, #5
 8000950:	d403      	bmi.n	800095a <__aeabi_fdiv+0x202>
 8000952:	01a4      	lsls	r4, r4, #6
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	2200      	movs	r2, #0
 8000958:	e75d      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800095a:	2201      	movs	r2, #1
 800095c:	2400      	movs	r4, #0
 800095e:	e75a      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000960:	2480      	movs	r4, #128	; 0x80
 8000962:	03e4      	lsls	r4, r4, #15
 8000964:	432c      	orrs	r4, r5
 8000966:	0264      	lsls	r4, r4, #9
 8000968:	0a64      	lsrs	r4, r4, #9
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	e753      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	08007358 	.word	0x08007358
 8000974:	f7ffffff 	.word	0xf7ffffff
 8000978:	08007398 	.word	0x08007398

0800097c <__aeabi_fmul>:
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	464e      	mov	r6, r9
 8000980:	4657      	mov	r7, sl
 8000982:	4645      	mov	r5, r8
 8000984:	46de      	mov	lr, fp
 8000986:	b5e0      	push	{r5, r6, r7, lr}
 8000988:	0243      	lsls	r3, r0, #9
 800098a:	0a5b      	lsrs	r3, r3, #9
 800098c:	0045      	lsls	r5, r0, #1
 800098e:	b083      	sub	sp, #12
 8000990:	1c0f      	adds	r7, r1, #0
 8000992:	4699      	mov	r9, r3
 8000994:	0e2d      	lsrs	r5, r5, #24
 8000996:	0fc6      	lsrs	r6, r0, #31
 8000998:	2d00      	cmp	r5, #0
 800099a:	d057      	beq.n	8000a4c <__aeabi_fmul+0xd0>
 800099c:	2dff      	cmp	r5, #255	; 0xff
 800099e:	d024      	beq.n	80009ea <__aeabi_fmul+0x6e>
 80009a0:	2080      	movs	r0, #128	; 0x80
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	04c0      	lsls	r0, r0, #19
 80009a6:	4318      	orrs	r0, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	4681      	mov	r9, r0
 80009ac:	469a      	mov	sl, r3
 80009ae:	469b      	mov	fp, r3
 80009b0:	3d7f      	subs	r5, #127	; 0x7f
 80009b2:	027c      	lsls	r4, r7, #9
 80009b4:	007a      	lsls	r2, r7, #1
 80009b6:	0ffb      	lsrs	r3, r7, #31
 80009b8:	0a64      	lsrs	r4, r4, #9
 80009ba:	0e12      	lsrs	r2, r2, #24
 80009bc:	4698      	mov	r8, r3
 80009be:	d023      	beq.n	8000a08 <__aeabi_fmul+0x8c>
 80009c0:	2aff      	cmp	r2, #255	; 0xff
 80009c2:	d04b      	beq.n	8000a5c <__aeabi_fmul+0xe0>
 80009c4:	00e3      	lsls	r3, r4, #3
 80009c6:	2480      	movs	r4, #128	; 0x80
 80009c8:	2000      	movs	r0, #0
 80009ca:	04e4      	lsls	r4, r4, #19
 80009cc:	3a7f      	subs	r2, #127	; 0x7f
 80009ce:	431c      	orrs	r4, r3
 80009d0:	18ad      	adds	r5, r5, r2
 80009d2:	1c6b      	adds	r3, r5, #1
 80009d4:	4647      	mov	r7, r8
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	4653      	mov	r3, sl
 80009da:	4077      	eors	r7, r6
 80009dc:	003a      	movs	r2, r7
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d848      	bhi.n	8000a74 <__aeabi_fmul+0xf8>
 80009e2:	497d      	ldr	r1, [pc, #500]	; (8000bd8 <__aeabi_fmul+0x25c>)
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	58cb      	ldr	r3, [r1, r3]
 80009e8:	469f      	mov	pc, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fmul+0x74>
 80009ee:	e085      	b.n	8000afc <__aeabi_fmul+0x180>
 80009f0:	3308      	adds	r3, #8
 80009f2:	469a      	mov	sl, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	469b      	mov	fp, r3
 80009f8:	027c      	lsls	r4, r7, #9
 80009fa:	007a      	lsls	r2, r7, #1
 80009fc:	0ffb      	lsrs	r3, r7, #31
 80009fe:	25ff      	movs	r5, #255	; 0xff
 8000a00:	0a64      	lsrs	r4, r4, #9
 8000a02:	0e12      	lsrs	r2, r2, #24
 8000a04:	4698      	mov	r8, r3
 8000a06:	d1db      	bne.n	80009c0 <__aeabi_fmul+0x44>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fmul+0x92>
 8000a0c:	e090      	b.n	8000b30 <__aeabi_fmul+0x1b4>
 8000a0e:	4652      	mov	r2, sl
 8000a10:	2301      	movs	r3, #1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	4692      	mov	sl, r2
 8000a16:	2001      	movs	r0, #1
 8000a18:	e7db      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000a1a:	464c      	mov	r4, r9
 8000a1c:	4658      	mov	r0, fp
 8000a1e:	0017      	movs	r7, r2
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d024      	beq.n	8000a6e <__aeabi_fmul+0xf2>
 8000a24:	2803      	cmp	r0, #3
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fmul+0xae>
 8000a28:	e0cf      	b.n	8000bca <__aeabi_fmul+0x24e>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2801      	cmp	r0, #1
 8000a30:	d14d      	bne.n	8000ace <__aeabi_fmul+0x152>
 8000a32:	0258      	lsls	r0, r3, #9
 8000a34:	05d2      	lsls	r2, r2, #23
 8000a36:	0a40      	lsrs	r0, r0, #9
 8000a38:	07ff      	lsls	r7, r7, #31
 8000a3a:	4310      	orrs	r0, r2
 8000a3c:	4338      	orrs	r0, r7
 8000a3e:	b003      	add	sp, #12
 8000a40:	bc3c      	pop	{r2, r3, r4, r5}
 8000a42:	4690      	mov	r8, r2
 8000a44:	4699      	mov	r9, r3
 8000a46:	46a2      	mov	sl, r4
 8000a48:	46ab      	mov	fp, r5
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d15b      	bne.n	8000b08 <__aeabi_fmul+0x18c>
 8000a50:	2304      	movs	r3, #4
 8000a52:	469a      	mov	sl, r3
 8000a54:	3b03      	subs	r3, #3
 8000a56:	2500      	movs	r5, #0
 8000a58:	469b      	mov	fp, r3
 8000a5a:	e7aa      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000a5c:	35ff      	adds	r5, #255	; 0xff
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d160      	bne.n	8000b24 <__aeabi_fmul+0x1a8>
 8000a62:	4652      	mov	r2, sl
 8000a64:	2302      	movs	r3, #2
 8000a66:	431a      	orrs	r2, r3
 8000a68:	4692      	mov	sl, r2
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	e7b1      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	2300      	movs	r3, #0
 8000a72:	e7de      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000a74:	464b      	mov	r3, r9
 8000a76:	0c1b      	lsrs	r3, r3, #16
 8000a78:	469c      	mov	ip, r3
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	0426      	lsls	r6, r4, #16
 8000a7e:	0c36      	lsrs	r6, r6, #16
 8000a80:	0418      	lsls	r0, r3, #16
 8000a82:	4661      	mov	r1, ip
 8000a84:	0033      	movs	r3, r6
 8000a86:	0c22      	lsrs	r2, r4, #16
 8000a88:	4664      	mov	r4, ip
 8000a8a:	0c00      	lsrs	r0, r0, #16
 8000a8c:	4343      	muls	r3, r0
 8000a8e:	434e      	muls	r6, r1
 8000a90:	4350      	muls	r0, r2
 8000a92:	4354      	muls	r4, r2
 8000a94:	1980      	adds	r0, r0, r6
 8000a96:	0c1a      	lsrs	r2, r3, #16
 8000a98:	1812      	adds	r2, r2, r0
 8000a9a:	4296      	cmp	r6, r2
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_fmul+0x12a>
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0249      	lsls	r1, r1, #9
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4464      	add	r4, ip
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	0410      	lsls	r0, r2, #16
 8000aac:	18c0      	adds	r0, r0, r3
 8000aae:	0183      	lsls	r3, r0, #6
 8000ab0:	1e5e      	subs	r6, r3, #1
 8000ab2:	41b3      	sbcs	r3, r6
 8000ab4:	0e80      	lsrs	r0, r0, #26
 8000ab6:	4318      	orrs	r0, r3
 8000ab8:	0c13      	lsrs	r3, r2, #16
 8000aba:	191b      	adds	r3, r3, r4
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	0123      	lsls	r3, r4, #4
 8000ac4:	d579      	bpl.n	8000bba <__aeabi_fmul+0x23e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	0862      	lsrs	r2, r4, #1
 8000aca:	401c      	ands	r4, r3
 8000acc:	4314      	orrs	r4, r2
 8000ace:	9a01      	ldr	r2, [sp, #4]
 8000ad0:	327f      	adds	r2, #127	; 0x7f
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	dd4d      	ble.n	8000b72 <__aeabi_fmul+0x1f6>
 8000ad6:	0763      	lsls	r3, r4, #29
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_fmul+0x168>
 8000ada:	230f      	movs	r3, #15
 8000adc:	4023      	ands	r3, r4
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fmul+0x168>
 8000ae2:	3404      	adds	r4, #4
 8000ae4:	0123      	lsls	r3, r4, #4
 8000ae6:	d503      	bpl.n	8000af0 <__aeabi_fmul+0x174>
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <__aeabi_fmul+0x260>)
 8000aea:	9a01      	ldr	r2, [sp, #4]
 8000aec:	401c      	ands	r4, r3
 8000aee:	3280      	adds	r2, #128	; 0x80
 8000af0:	2afe      	cmp	r2, #254	; 0xfe
 8000af2:	dcbc      	bgt.n	8000a6e <__aeabi_fmul+0xf2>
 8000af4:	01a3      	lsls	r3, r4, #6
 8000af6:	0a5b      	lsrs	r3, r3, #9
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	e79a      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000afc:	230c      	movs	r3, #12
 8000afe:	469a      	mov	sl, r3
 8000b00:	3b09      	subs	r3, #9
 8000b02:	25ff      	movs	r5, #255	; 0xff
 8000b04:	469b      	mov	fp, r3
 8000b06:	e754      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fad1 	bl	80010b0 <__clzsi2>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	1f43      	subs	r3, r0, #5
 8000b12:	2576      	movs	r5, #118	; 0x76
 8000b14:	409a      	lsls	r2, r3
 8000b16:	2300      	movs	r3, #0
 8000b18:	426d      	negs	r5, r5
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	1a2d      	subs	r5, r5, r0
 8000b1e:	469a      	mov	sl, r3
 8000b20:	469b      	mov	fp, r3
 8000b22:	e746      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000b24:	4652      	mov	r2, sl
 8000b26:	2303      	movs	r3, #3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4692      	mov	sl, r2
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e750      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000b30:	0020      	movs	r0, r4
 8000b32:	f000 fabd 	bl	80010b0 <__clzsi2>
 8000b36:	1f43      	subs	r3, r0, #5
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	409c      	lsls	r4, r3
 8000b3c:	3d76      	subs	r5, #118	; 0x76
 8000b3e:	2000      	movs	r0, #0
 8000b40:	e747      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	2700      	movs	r7, #0
 8000b46:	03db      	lsls	r3, r3, #15
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	e772      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000b4c:	4642      	mov	r2, r8
 8000b4e:	e766      	b.n	8000a1e <__aeabi_fmul+0xa2>
 8000b50:	464c      	mov	r4, r9
 8000b52:	0032      	movs	r2, r6
 8000b54:	4658      	mov	r0, fp
 8000b56:	e762      	b.n	8000a1e <__aeabi_fmul+0xa2>
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	03db      	lsls	r3, r3, #15
 8000b5e:	421a      	tst	r2, r3
 8000b60:	d022      	beq.n	8000ba8 <__aeabi_fmul+0x22c>
 8000b62:	421c      	tst	r4, r3
 8000b64:	d120      	bne.n	8000ba8 <__aeabi_fmul+0x22c>
 8000b66:	4323      	orrs	r3, r4
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	4647      	mov	r7, r8
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	e75f      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000b72:	2301      	movs	r3, #1
 8000b74:	1a9a      	subs	r2, r3, r2
 8000b76:	2a1b      	cmp	r2, #27
 8000b78:	dc21      	bgt.n	8000bbe <__aeabi_fmul+0x242>
 8000b7a:	0023      	movs	r3, r4
 8000b7c:	9901      	ldr	r1, [sp, #4]
 8000b7e:	40d3      	lsrs	r3, r2
 8000b80:	319e      	adds	r1, #158	; 0x9e
 8000b82:	408c      	lsls	r4, r1
 8000b84:	001a      	movs	r2, r3
 8000b86:	0023      	movs	r3, r4
 8000b88:	1e5c      	subs	r4, r3, #1
 8000b8a:	41a3      	sbcs	r3, r4
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	075a      	lsls	r2, r3, #29
 8000b90:	d004      	beq.n	8000b9c <__aeabi_fmul+0x220>
 8000b92:	220f      	movs	r2, #15
 8000b94:	401a      	ands	r2, r3
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fmul+0x220>
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	015a      	lsls	r2, r3, #5
 8000b9e:	d411      	bmi.n	8000bc4 <__aeabi_fmul+0x248>
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	0a5b      	lsrs	r3, r3, #9
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e744      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	464a      	mov	r2, r9
 8000bac:	03db      	lsls	r3, r3, #15
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	0a5b      	lsrs	r3, r3, #9
 8000bb4:	0037      	movs	r7, r6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	e73b      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bba:	9501      	str	r5, [sp, #4]
 8000bbc:	e787      	b.n	8000ace <__aeabi_fmul+0x152>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e736      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e733      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	e72c      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bd8:	080073d8 	.word	0x080073d8
 8000bdc:	f7ffffff 	.word	0xf7ffffff

08000be0 <__aeabi_fsub>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	4647      	mov	r7, r8
 8000be4:	46ce      	mov	lr, r9
 8000be6:	0044      	lsls	r4, r0, #1
 8000be8:	0fc2      	lsrs	r2, r0, #31
 8000bea:	b580      	push	{r7, lr}
 8000bec:	0247      	lsls	r7, r0, #9
 8000bee:	0248      	lsls	r0, r1, #9
 8000bf0:	0a40      	lsrs	r0, r0, #9
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	4666      	mov	r6, ip
 8000bf6:	0048      	lsls	r0, r1, #1
 8000bf8:	0a7f      	lsrs	r7, r7, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	00f6      	lsls	r6, r6, #3
 8000bfe:	0025      	movs	r5, r4
 8000c00:	4690      	mov	r8, r2
 8000c02:	00fb      	lsls	r3, r7, #3
 8000c04:	0e00      	lsrs	r0, r0, #24
 8000c06:	0fc9      	lsrs	r1, r1, #31
 8000c08:	46b1      	mov	r9, r6
 8000c0a:	28ff      	cmp	r0, #255	; 0xff
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x30>
 8000c0e:	e085      	b.n	8000d1c <__aeabi_fsub+0x13c>
 8000c10:	2601      	movs	r6, #1
 8000c12:	4071      	eors	r1, r6
 8000c14:	1a26      	subs	r6, r4, r0
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d057      	beq.n	8000cca <__aeabi_fsub+0xea>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	dd43      	ble.n	8000ca6 <__aeabi_fsub+0xc6>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fsub+0x44>
 8000c22:	e07f      	b.n	8000d24 <__aeabi_fsub+0x144>
 8000c24:	4649      	mov	r1, r9
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x4c>
 8000c2a:	e0aa      	b.n	8000d82 <__aeabi_fsub+0x1a2>
 8000c2c:	3e01      	subs	r6, #1
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d000      	beq.n	8000c34 <__aeabi_fsub+0x54>
 8000c32:	e0f7      	b.n	8000e24 <__aeabi_fsub+0x244>
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	015a      	lsls	r2, r3, #5
 8000c38:	d400      	bmi.n	8000c3c <__aeabi_fsub+0x5c>
 8000c3a:	e08b      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	099c      	lsrs	r4, r3, #6
 8000c40:	0020      	movs	r0, r4
 8000c42:	f000 fa35 	bl	80010b0 <__clzsi2>
 8000c46:	3805      	subs	r0, #5
 8000c48:	4084      	lsls	r4, r0
 8000c4a:	4285      	cmp	r5, r0
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_fsub+0x70>
 8000c4e:	e0d3      	b.n	8000df8 <__aeabi_fsub+0x218>
 8000c50:	1b45      	subs	r5, r0, r5
 8000c52:	0023      	movs	r3, r4
 8000c54:	2020      	movs	r0, #32
 8000c56:	3501      	adds	r5, #1
 8000c58:	40eb      	lsrs	r3, r5
 8000c5a:	1b45      	subs	r5, r0, r5
 8000c5c:	40ac      	lsls	r4, r5
 8000c5e:	1e62      	subs	r2, r4, #1
 8000c60:	4194      	sbcs	r4, r2
 8000c62:	4323      	orrs	r3, r4
 8000c64:	2407      	movs	r4, #7
 8000c66:	2500      	movs	r5, #0
 8000c68:	401c      	ands	r4, r3
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	400a      	ands	r2, r1
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fsub+0x9e>
 8000c74:	210f      	movs	r1, #15
 8000c76:	4019      	ands	r1, r3
 8000c78:	2904      	cmp	r1, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fsub+0x9e>
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	0159      	lsls	r1, r3, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0xa4>
 8000c82:	e080      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000c84:	3501      	adds	r5, #1
 8000c86:	b2ec      	uxtb	r4, r5
 8000c88:	2dff      	cmp	r5, #255	; 0xff
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0xae>
 8000c8c:	e0a3      	b.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000c8e:	24ff      	movs	r4, #255	; 0xff
 8000c90:	2300      	movs	r3, #0
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	05e4      	lsls	r4, r4, #23
 8000c96:	0a58      	lsrs	r0, r3, #9
 8000c98:	07d2      	lsls	r2, r2, #31
 8000c9a:	4320      	orrs	r0, r4
 8000c9c:	4310      	orrs	r0, r2
 8000c9e:	bc0c      	pop	{r2, r3}
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d174      	bne.n	8000d94 <__aeabi_fsub+0x1b4>
 8000caa:	1c60      	adds	r0, r4, #1
 8000cac:	b2c0      	uxtb	r0, r0
 8000cae:	2801      	cmp	r0, #1
 8000cb0:	dc00      	bgt.n	8000cb4 <__aeabi_fsub+0xd4>
 8000cb2:	e0a7      	b.n	8000e04 <__aeabi_fsub+0x224>
 8000cb4:	464a      	mov	r2, r9
 8000cb6:	1a9c      	subs	r4, r3, r2
 8000cb8:	0162      	lsls	r2, r4, #5
 8000cba:	d500      	bpl.n	8000cbe <__aeabi_fsub+0xde>
 8000cbc:	e0b6      	b.n	8000e2c <__aeabi_fsub+0x24c>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1be      	bne.n	8000c40 <__aeabi_fsub+0x60>
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e7e3      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_fsub+0xf0>
 8000cce:	e085      	b.n	8000ddc <__aeabi_fsub+0x1fc>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d046      	beq.n	8000d62 <__aeabi_fsub+0x182>
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d049      	beq.n	8000d6c <__aeabi_fsub+0x18c>
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	4648      	mov	r0, r9
 8000cdc:	04d2      	lsls	r2, r2, #19
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	4681      	mov	r9, r0
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2e1b      	cmp	r6, #27
 8000ce6:	dc09      	bgt.n	8000cfc <__aeabi_fsub+0x11c>
 8000ce8:	2020      	movs	r0, #32
 8000cea:	464c      	mov	r4, r9
 8000cec:	1b80      	subs	r0, r0, r6
 8000cee:	4084      	lsls	r4, r0
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	40f2      	lsrs	r2, r6
 8000cf6:	1e44      	subs	r4, r0, #1
 8000cf8:	41a0      	sbcs	r0, r4
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	189b      	adds	r3, r3, r2
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	d528      	bpl.n	8000d54 <__aeabi_fsub+0x174>
 8000d02:	3501      	adds	r5, #1
 8000d04:	2dff      	cmp	r5, #255	; 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fsub+0x12a>
 8000d08:	e0a8      	b.n	8000e5c <__aeabi_fsub+0x27c>
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2407      	movs	r4, #7
 8000d0e:	4994      	ldr	r1, [pc, #592]	; (8000f60 <__aeabi_fsub+0x380>)
 8000d10:	401a      	ands	r2, r3
 8000d12:	085b      	lsrs	r3, r3, #1
 8000d14:	400b      	ands	r3, r1
 8000d16:	4313      	orrs	r3, r2
 8000d18:	401c      	ands	r4, r3
 8000d1a:	e7a6      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_fsub+0x142>
 8000d20:	e778      	b.n	8000c14 <__aeabi_fsub+0x34>
 8000d22:	e775      	b.n	8000c10 <__aeabi_fsub+0x30>
 8000d24:	2cff      	cmp	r4, #255	; 0xff
 8000d26:	d054      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	04d2      	lsls	r2, r2, #19
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	4689      	mov	r9, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	2e1b      	cmp	r6, #27
 8000d36:	dc09      	bgt.n	8000d4c <__aeabi_fsub+0x16c>
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	1b89      	subs	r1, r1, r6
 8000d3e:	4088      	lsls	r0, r1
 8000d40:	464a      	mov	r2, r9
 8000d42:	0001      	movs	r1, r0
 8000d44:	40f2      	lsrs	r2, r6
 8000d46:	1e48      	subs	r0, r1, #1
 8000d48:	4181      	sbcs	r1, r0
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	015a      	lsls	r2, r3, #5
 8000d50:	d500      	bpl.n	8000d54 <__aeabi_fsub+0x174>
 8000d52:	e773      	b.n	8000c3c <__aeabi_fsub+0x5c>
 8000d54:	2201      	movs	r2, #1
 8000d56:	4641      	mov	r1, r8
 8000d58:	400a      	ands	r2, r1
 8000d5a:	0759      	lsls	r1, r3, #29
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x180>
 8000d5e:	e789      	b.n	8000c74 <__aeabi_fsub+0x94>
 8000d60:	e011      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000d62:	4648      	mov	r0, r9
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d158      	bne.n	8000e1a <__aeabi_fsub+0x23a>
 8000d68:	2cff      	cmp	r4, #255	; 0xff
 8000d6a:	d10c      	bne.n	8000d86 <__aeabi_fsub+0x1a6>
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x194>
 8000d72:	e78c      	b.n	8000c8e <__aeabi_fsub+0xae>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	03c0      	lsls	r0, r0, #15
 8000d78:	4303      	orrs	r3, r0
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	0a5b      	lsrs	r3, r3, #9
 8000d7e:	24ff      	movs	r4, #255	; 0xff
 8000d80:	e787      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d025      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	2dff      	cmp	r5, #255	; 0xff
 8000d8a:	d0f0      	beq.n	8000d6e <__aeabi_fsub+0x18e>
 8000d8c:	025b      	lsls	r3, r3, #9
 8000d8e:	0a5b      	lsrs	r3, r3, #9
 8000d90:	b2ec      	uxtb	r4, r5
 8000d92:	e77e      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d04d      	beq.n	8000e34 <__aeabi_fsub+0x254>
 8000d98:	28ff      	cmp	r0, #255	; 0xff
 8000d9a:	d018      	beq.n	8000dce <__aeabi_fsub+0x1ee>
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	04e4      	lsls	r4, r4, #19
 8000da0:	4272      	negs	r2, r6
 8000da2:	4323      	orrs	r3, r4
 8000da4:	2a1b      	cmp	r2, #27
 8000da6:	dd00      	ble.n	8000daa <__aeabi_fsub+0x1ca>
 8000da8:	e0c4      	b.n	8000f34 <__aeabi_fsub+0x354>
 8000daa:	001c      	movs	r4, r3
 8000dac:	2520      	movs	r5, #32
 8000dae:	40d4      	lsrs	r4, r2
 8000db0:	1aaa      	subs	r2, r5, r2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	1e5a      	subs	r2, r3, #1
 8000db6:	4193      	sbcs	r3, r2
 8000db8:	4323      	orrs	r3, r4
 8000dba:	464a      	mov	r2, r9
 8000dbc:	0005      	movs	r5, r0
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	e738      	b.n	8000c36 <__aeabi_fsub+0x56>
 8000dc4:	1c72      	adds	r2, r6, #1
 8000dc6:	d0f8      	beq.n	8000dba <__aeabi_fsub+0x1da>
 8000dc8:	43f2      	mvns	r2, r6
 8000dca:	28ff      	cmp	r0, #255	; 0xff
 8000dcc:	d1ea      	bne.n	8000da4 <__aeabi_fsub+0x1c4>
 8000dce:	000a      	movs	r2, r1
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	25ff      	movs	r5, #255	; 0xff
 8000dd4:	e7d7      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	0a5b      	lsrs	r3, r3, #9
 8000dda:	e75a      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d141      	bne.n	8000e64 <__aeabi_fsub+0x284>
 8000de0:	1c65      	adds	r5, r4, #1
 8000de2:	b2e9      	uxtb	r1, r5
 8000de4:	2901      	cmp	r1, #1
 8000de6:	dd45      	ble.n	8000e74 <__aeabi_fsub+0x294>
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x20e>
 8000dec:	e74f      	b.n	8000c8e <__aeabi_fsub+0xae>
 8000dee:	2407      	movs	r4, #7
 8000df0:	444b      	add	r3, r9
 8000df2:	085b      	lsrs	r3, r3, #1
 8000df4:	401c      	ands	r4, r3
 8000df6:	e738      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000df8:	2207      	movs	r2, #7
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <__aeabi_fsub+0x384>)
 8000dfc:	1a2d      	subs	r5, r5, r0
 8000dfe:	4023      	ands	r3, r4
 8000e00:	4014      	ands	r4, r2
 8000e02:	e732      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d11d      	bne.n	8000e44 <__aeabi_fsub+0x264>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d17a      	bne.n	8000f02 <__aeabi_fsub+0x322>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fsub+0x234>
 8000e12:	e091      	b.n	8000f38 <__aeabi_fsub+0x358>
 8000e14:	000a      	movs	r2, r1
 8000e16:	2500      	movs	r5, #0
 8000e18:	e7b5      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e1a:	3e01      	subs	r6, #1
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d119      	bne.n	8000e54 <__aeabi_fsub+0x274>
 8000e20:	444b      	add	r3, r9
 8000e22:	e76c      	b.n	8000cfe <__aeabi_fsub+0x11e>
 8000e24:	2cff      	cmp	r4, #255	; 0xff
 8000e26:	d184      	bne.n	8000d32 <__aeabi_fsub+0x152>
 8000e28:	25ff      	movs	r5, #255	; 0xff
 8000e2a:	e7ac      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e2c:	464a      	mov	r2, r9
 8000e2e:	4688      	mov	r8, r1
 8000e30:	1ad4      	subs	r4, r2, r3
 8000e32:	e705      	b.n	8000c40 <__aeabi_fsub+0x60>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1c5      	bne.n	8000dc4 <__aeabi_fsub+0x1e4>
 8000e38:	000a      	movs	r2, r1
 8000e3a:	28ff      	cmp	r0, #255	; 0xff
 8000e3c:	d0c8      	beq.n	8000dd0 <__aeabi_fsub+0x1f0>
 8000e3e:	0005      	movs	r5, r0
 8000e40:	464b      	mov	r3, r9
 8000e42:	e7a0      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d149      	bne.n	8000edc <__aeabi_fsub+0x2fc>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d077      	beq.n	8000f3e <__aeabi_fsub+0x35e>
 8000e4e:	000a      	movs	r2, r1
 8000e50:	25ff      	movs	r5, #255	; 0xff
 8000e52:	e798      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e54:	2cff      	cmp	r4, #255	; 0xff
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x27a>
 8000e58:	e743      	b.n	8000ce2 <__aeabi_fsub+0x102>
 8000e5a:	e787      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	24ff      	movs	r4, #255	; 0xff
 8000e60:	2300      	movs	r3, #0
 8000e62:	e716      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d115      	bne.n	8000e94 <__aeabi_fsub+0x2b4>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d157      	bne.n	8000f1c <__aeabi_fsub+0x33c>
 8000e6c:	28ff      	cmp	r0, #255	; 0xff
 8000e6e:	d1e6      	bne.n	8000e3e <__aeabi_fsub+0x25e>
 8000e70:	464b      	mov	r3, r9
 8000e72:	e77b      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000e74:	2c00      	cmp	r4, #0
 8000e76:	d120      	bne.n	8000eba <__aeabi_fsub+0x2da>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d057      	beq.n	8000f2c <__aeabi_fsub+0x34c>
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d053      	beq.n	8000f2a <__aeabi_fsub+0x34a>
 8000e82:	444b      	add	r3, r9
 8000e84:	015a      	lsls	r2, r3, #5
 8000e86:	d568      	bpl.n	8000f5a <__aeabi_fsub+0x37a>
 8000e88:	2407      	movs	r4, #7
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <__aeabi_fsub+0x384>)
 8000e8c:	401c      	ands	r4, r3
 8000e8e:	2501      	movs	r5, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	e6ea      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000e94:	28ff      	cmp	r0, #255	; 0xff
 8000e96:	d0eb      	beq.n	8000e70 <__aeabi_fsub+0x290>
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	04d2      	lsls	r2, r2, #19
 8000e9c:	4276      	negs	r6, r6
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	2e1b      	cmp	r6, #27
 8000ea2:	dc53      	bgt.n	8000f4c <__aeabi_fsub+0x36c>
 8000ea4:	2520      	movs	r5, #32
 8000ea6:	1bad      	subs	r5, r5, r6
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	40ab      	lsls	r3, r5
 8000eac:	40f2      	lsrs	r2, r6
 8000eae:	1e5c      	subs	r4, r3, #1
 8000eb0:	41a3      	sbcs	r3, r4
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	444b      	add	r3, r9
 8000eb6:	0005      	movs	r5, r0
 8000eb8:	e721      	b.n	8000cfe <__aeabi_fsub+0x11e>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0d8      	beq.n	8000e70 <__aeabi_fsub+0x290>
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x2e6>
 8000ec4:	e752      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	03c9      	lsls	r1, r1, #15
 8000eca:	420f      	tst	r7, r1
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x2f0>
 8000ece:	e74d      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	4208      	tst	r0, r1
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fsub+0x2f8>
 8000ed6:	e749      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ed8:	464b      	mov	r3, r9
 8000eda:	e747      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000edc:	4648      	mov	r0, r9
 8000ede:	25ff      	movs	r5, #255	; 0xff
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x306>
 8000ee4:	e74f      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	03d2      	lsls	r2, r2, #15
 8000eea:	4217      	tst	r7, r2
 8000eec:	d004      	beq.n	8000ef8 <__aeabi_fsub+0x318>
 8000eee:	4660      	mov	r0, ip
 8000ef0:	4210      	tst	r0, r2
 8000ef2:	d101      	bne.n	8000ef8 <__aeabi_fsub+0x318>
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4641      	mov	r1, r8
 8000efc:	25ff      	movs	r5, #255	; 0xff
 8000efe:	400a      	ands	r2, r1
 8000f00:	e741      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000f02:	4648      	mov	r0, r9
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d01f      	beq.n	8000f48 <__aeabi_fsub+0x368>
 8000f08:	1a1a      	subs	r2, r3, r0
 8000f0a:	0150      	lsls	r0, r2, #5
 8000f0c:	d520      	bpl.n	8000f50 <__aeabi_fsub+0x370>
 8000f0e:	464a      	mov	r2, r9
 8000f10:	2407      	movs	r4, #7
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	401c      	ands	r4, r3
 8000f16:	4688      	mov	r8, r1
 8000f18:	2500      	movs	r5, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000f1c:	1c74      	adds	r4, r6, #1
 8000f1e:	d0c9      	beq.n	8000eb4 <__aeabi_fsub+0x2d4>
 8000f20:	43f6      	mvns	r6, r6
 8000f22:	28ff      	cmp	r0, #255	; 0xff
 8000f24:	d1bc      	bne.n	8000ea0 <__aeabi_fsub+0x2c0>
 8000f26:	464b      	mov	r3, r9
 8000f28:	e720      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	464b      	mov	r3, r9
 8000f2e:	2500      	movs	r5, #0
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	e72b      	b.n	8000d8c <__aeabi_fsub+0x1ac>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e740      	b.n	8000dba <__aeabi_fsub+0x1da>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e6a9      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	2200      	movs	r2, #0
 8000f42:	03db      	lsls	r3, r3, #15
 8000f44:	24ff      	movs	r4, #255	; 0xff
 8000f46:	e6a4      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e71c      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e7b1      	b.n	8000eb4 <__aeabi_fsub+0x2d4>
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d0f1      	beq.n	8000f38 <__aeabi_fsub+0x358>
 8000f54:	0013      	movs	r3, r2
 8000f56:	2500      	movs	r5, #0
 8000f58:	e6fc      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	e6fa      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	7dffffff 	.word	0x7dffffff
 8000f64:	fbffffff 	.word	0xfbffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	0e12      	lsrs	r2, r2, #24
 8000f72:	2000      	movs	r0, #0
 8000f74:	2a7e      	cmp	r2, #126	; 0x7e
 8000f76:	d90d      	bls.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f78:	2a9d      	cmp	r2, #157	; 0x9d
 8000f7a:	d80c      	bhi.n	8000f96 <__aeabi_f2iz+0x2e>
 8000f7c:	2080      	movs	r0, #128	; 0x80
 8000f7e:	0400      	lsls	r0, r0, #16
 8000f80:	4301      	orrs	r1, r0
 8000f82:	2a95      	cmp	r2, #149	; 0x95
 8000f84:	dc0a      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f86:	2096      	movs	r0, #150	; 0x96
 8000f88:	1a82      	subs	r2, r0, r2
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	4248      	negs	r0, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f92:	0008      	movs	r0, r1
 8000f94:	4770      	bx	lr
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f98:	1898      	adds	r0, r3, r2
 8000f9a:	e7fb      	b.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f9c:	3a96      	subs	r2, #150	; 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f4      	b.n	8000f8c <__aeabi_f2iz+0x24>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d03d      	beq.n	800102a <__aeabi_i2f+0x82>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f87a 	bl	80010b0 <__clzsi2>
 8000fbc:	229e      	movs	r2, #158	; 0x9e
 8000fbe:	1a12      	subs	r2, r2, r0
 8000fc0:	2a96      	cmp	r2, #150	; 0x96
 8000fc2:	dc07      	bgt.n	8000fd4 <__aeabi_i2f+0x2c>
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	dd33      	ble.n	8001032 <__aeabi_i2f+0x8a>
 8000fca:	3808      	subs	r0, #8
 8000fcc:	4085      	lsls	r5, r0
 8000fce:	0268      	lsls	r0, r5, #9
 8000fd0:	0a40      	lsrs	r0, r0, #9
 8000fd2:	e023      	b.n	800101c <__aeabi_i2f+0x74>
 8000fd4:	2a99      	cmp	r2, #153	; 0x99
 8000fd6:	dd0b      	ble.n	8000ff0 <__aeabi_i2f+0x48>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	0029      	movs	r1, r5
 8000fdc:	1a1b      	subs	r3, r3, r0
 8000fde:	40d9      	lsrs	r1, r3
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	331b      	adds	r3, #27
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	002b      	movs	r3, r5
 8000fe8:	1e5d      	subs	r5, r3, #1
 8000fea:	41ab      	sbcs	r3, r5
 8000fec:	4319      	orrs	r1, r3
 8000fee:	000d      	movs	r5, r1
 8000ff0:	2805      	cmp	r0, #5
 8000ff2:	dd01      	ble.n	8000ff8 <__aeabi_i2f+0x50>
 8000ff4:	1f43      	subs	r3, r0, #5
 8000ff6:	409d      	lsls	r5, r3
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <__aeabi_i2f+0x90>)
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	076e      	lsls	r6, r5, #29
 8001000:	d009      	beq.n	8001016 <__aeabi_i2f+0x6e>
 8001002:	260f      	movs	r6, #15
 8001004:	4035      	ands	r5, r6
 8001006:	2d04      	cmp	r5, #4
 8001008:	d005      	beq.n	8001016 <__aeabi_i2f+0x6e>
 800100a:	3304      	adds	r3, #4
 800100c:	015d      	lsls	r5, r3, #5
 800100e:	d502      	bpl.n	8001016 <__aeabi_i2f+0x6e>
 8001010:	229f      	movs	r2, #159	; 0x9f
 8001012:	400b      	ands	r3, r1
 8001014:	1a12      	subs	r2, r2, r0
 8001016:	019b      	lsls	r3, r3, #6
 8001018:	0a58      	lsrs	r0, r3, #9
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	0240      	lsls	r0, r0, #9
 800101e:	05d2      	lsls	r2, r2, #23
 8001020:	0a40      	lsrs	r0, r0, #9
 8001022:	07e4      	lsls	r4, r4, #31
 8001024:	4310      	orrs	r0, r2
 8001026:	4320      	orrs	r0, r4
 8001028:	bd70      	pop	{r4, r5, r6, pc}
 800102a:	2400      	movs	r4, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2000      	movs	r0, #0
 8001030:	e7f4      	b.n	800101c <__aeabi_i2f+0x74>
 8001032:	0268      	lsls	r0, r5, #9
 8001034:	0a40      	lsrs	r0, r0, #9
 8001036:	e7f1      	b.n	800101c <__aeabi_i2f+0x74>
 8001038:	fbffffff 	.word	0xfbffffff

0800103c <__aeabi_cfrcmple>:
 800103c:	4684      	mov	ip, r0
 800103e:	1c08      	adds	r0, r1, #0
 8001040:	4661      	mov	r1, ip
 8001042:	e7ff      	b.n	8001044 <__aeabi_cfcmpeq>

08001044 <__aeabi_cfcmpeq>:
 8001044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001046:	f000 f8c7 	bl	80011d8 <__lesf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	d401      	bmi.n	8001052 <__aeabi_cfcmpeq+0xe>
 800104e:	2100      	movs	r1, #0
 8001050:	42c8      	cmn	r0, r1
 8001052:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001054 <__aeabi_fcmpeq>:
 8001054:	b510      	push	{r4, lr}
 8001056:	f000 f849 	bl	80010ec <__eqsf2>
 800105a:	4240      	negs	r0, r0
 800105c:	3001      	adds	r0, #1
 800105e:	bd10      	pop	{r4, pc}

08001060 <__aeabi_fcmplt>:
 8001060:	b510      	push	{r4, lr}
 8001062:	f000 f8b9 	bl	80011d8 <__lesf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	db01      	blt.n	800106e <__aeabi_fcmplt+0xe>
 800106a:	2000      	movs	r0, #0
 800106c:	bd10      	pop	{r4, pc}
 800106e:	2001      	movs	r0, #1
 8001070:	bd10      	pop	{r4, pc}
 8001072:	46c0      	nop			; (mov r8, r8)

08001074 <__aeabi_fcmple>:
 8001074:	b510      	push	{r4, lr}
 8001076:	f000 f8af 	bl	80011d8 <__lesf2>
 800107a:	2800      	cmp	r0, #0
 800107c:	dd01      	ble.n	8001082 <__aeabi_fcmple+0xe>
 800107e:	2000      	movs	r0, #0
 8001080:	bd10      	pop	{r4, pc}
 8001082:	2001      	movs	r0, #1
 8001084:	bd10      	pop	{r4, pc}
 8001086:	46c0      	nop			; (mov r8, r8)

08001088 <__aeabi_fcmpgt>:
 8001088:	b510      	push	{r4, lr}
 800108a:	f000 f857 	bl	800113c <__gesf2>
 800108e:	2800      	cmp	r0, #0
 8001090:	dc01      	bgt.n	8001096 <__aeabi_fcmpgt+0xe>
 8001092:	2000      	movs	r0, #0
 8001094:	bd10      	pop	{r4, pc}
 8001096:	2001      	movs	r0, #1
 8001098:	bd10      	pop	{r4, pc}
 800109a:	46c0      	nop			; (mov r8, r8)

0800109c <__aeabi_fcmpge>:
 800109c:	b510      	push	{r4, lr}
 800109e:	f000 f84d 	bl	800113c <__gesf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	da01      	bge.n	80010aa <__aeabi_fcmpge+0xe>
 80010a6:	2000      	movs	r0, #0
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	2001      	movs	r0, #1
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)

080010b0 <__clzsi2>:
 80010b0:	211c      	movs	r1, #28
 80010b2:	2301      	movs	r3, #1
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d301      	bcc.n	80010be <__clzsi2+0xe>
 80010ba:	0c00      	lsrs	r0, r0, #16
 80010bc:	3910      	subs	r1, #16
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	4298      	cmp	r0, r3
 80010c2:	d301      	bcc.n	80010c8 <__clzsi2+0x18>
 80010c4:	0a00      	lsrs	r0, r0, #8
 80010c6:	3908      	subs	r1, #8
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	4298      	cmp	r0, r3
 80010cc:	d301      	bcc.n	80010d2 <__clzsi2+0x22>
 80010ce:	0900      	lsrs	r0, r0, #4
 80010d0:	3904      	subs	r1, #4
 80010d2:	a202      	add	r2, pc, #8	; (adr r2, 80010dc <__clzsi2+0x2c>)
 80010d4:	5c10      	ldrb	r0, [r2, r0]
 80010d6:	1840      	adds	r0, r0, r1
 80010d8:	4770      	bx	lr
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	02020304 	.word	0x02020304
 80010e0:	01010101 	.word	0x01010101
	...

080010ec <__eqsf2>:
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	0042      	lsls	r2, r0, #1
 80010f0:	024e      	lsls	r6, r1, #9
 80010f2:	004c      	lsls	r4, r1, #1
 80010f4:	0245      	lsls	r5, r0, #9
 80010f6:	0a6d      	lsrs	r5, r5, #9
 80010f8:	0e12      	lsrs	r2, r2, #24
 80010fa:	0fc3      	lsrs	r3, r0, #31
 80010fc:	0a76      	lsrs	r6, r6, #9
 80010fe:	0e24      	lsrs	r4, r4, #24
 8001100:	0fc9      	lsrs	r1, r1, #31
 8001102:	2aff      	cmp	r2, #255	; 0xff
 8001104:	d00f      	beq.n	8001126 <__eqsf2+0x3a>
 8001106:	2cff      	cmp	r4, #255	; 0xff
 8001108:	d011      	beq.n	800112e <__eqsf2+0x42>
 800110a:	2001      	movs	r0, #1
 800110c:	42a2      	cmp	r2, r4
 800110e:	d000      	beq.n	8001112 <__eqsf2+0x26>
 8001110:	bd70      	pop	{r4, r5, r6, pc}
 8001112:	42b5      	cmp	r5, r6
 8001114:	d1fc      	bne.n	8001110 <__eqsf2+0x24>
 8001116:	428b      	cmp	r3, r1
 8001118:	d00d      	beq.n	8001136 <__eqsf2+0x4a>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d1f8      	bne.n	8001110 <__eqsf2+0x24>
 800111e:	0028      	movs	r0, r5
 8001120:	1e45      	subs	r5, r0, #1
 8001122:	41a8      	sbcs	r0, r5
 8001124:	e7f4      	b.n	8001110 <__eqsf2+0x24>
 8001126:	2001      	movs	r0, #1
 8001128:	2d00      	cmp	r5, #0
 800112a:	d1f1      	bne.n	8001110 <__eqsf2+0x24>
 800112c:	e7eb      	b.n	8001106 <__eqsf2+0x1a>
 800112e:	2001      	movs	r0, #1
 8001130:	2e00      	cmp	r6, #0
 8001132:	d1ed      	bne.n	8001110 <__eqsf2+0x24>
 8001134:	e7e9      	b.n	800110a <__eqsf2+0x1e>
 8001136:	2000      	movs	r0, #0
 8001138:	e7ea      	b.n	8001110 <__eqsf2+0x24>
 800113a:	46c0      	nop			; (mov r8, r8)

0800113c <__gesf2>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	004a      	lsls	r2, r1, #1
 8001140:	024e      	lsls	r6, r1, #9
 8001142:	0245      	lsls	r5, r0, #9
 8001144:	0044      	lsls	r4, r0, #1
 8001146:	0a6d      	lsrs	r5, r5, #9
 8001148:	0e24      	lsrs	r4, r4, #24
 800114a:	0fc3      	lsrs	r3, r0, #31
 800114c:	0a76      	lsrs	r6, r6, #9
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	0fc9      	lsrs	r1, r1, #31
 8001152:	2cff      	cmp	r4, #255	; 0xff
 8001154:	d015      	beq.n	8001182 <__gesf2+0x46>
 8001156:	2aff      	cmp	r2, #255	; 0xff
 8001158:	d00e      	beq.n	8001178 <__gesf2+0x3c>
 800115a:	2c00      	cmp	r4, #0
 800115c:	d115      	bne.n	800118a <__gesf2+0x4e>
 800115e:	2a00      	cmp	r2, #0
 8001160:	d101      	bne.n	8001166 <__gesf2+0x2a>
 8001162:	2e00      	cmp	r6, #0
 8001164:	d01c      	beq.n	80011a0 <__gesf2+0x64>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d014      	beq.n	8001194 <__gesf2+0x58>
 800116a:	428b      	cmp	r3, r1
 800116c:	d027      	beq.n	80011be <__gesf2+0x82>
 800116e:	2002      	movs	r0, #2
 8001170:	3b01      	subs	r3, #1
 8001172:	4018      	ands	r0, r3
 8001174:	3801      	subs	r0, #1
 8001176:	bd70      	pop	{r4, r5, r6, pc}
 8001178:	2e00      	cmp	r6, #0
 800117a:	d0ee      	beq.n	800115a <__gesf2+0x1e>
 800117c:	2002      	movs	r0, #2
 800117e:	4240      	negs	r0, r0
 8001180:	e7f9      	b.n	8001176 <__gesf2+0x3a>
 8001182:	2d00      	cmp	r5, #0
 8001184:	d1fa      	bne.n	800117c <__gesf2+0x40>
 8001186:	2aff      	cmp	r2, #255	; 0xff
 8001188:	d00e      	beq.n	80011a8 <__gesf2+0x6c>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d10e      	bne.n	80011ac <__gesf2+0x70>
 800118e:	2e00      	cmp	r6, #0
 8001190:	d0ed      	beq.n	800116e <__gesf2+0x32>
 8001192:	e00b      	b.n	80011ac <__gesf2+0x70>
 8001194:	2301      	movs	r3, #1
 8001196:	3901      	subs	r1, #1
 8001198:	4399      	bics	r1, r3
 800119a:	0008      	movs	r0, r1
 800119c:	3001      	adds	r0, #1
 800119e:	e7ea      	b.n	8001176 <__gesf2+0x3a>
 80011a0:	2000      	movs	r0, #0
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	d0e7      	beq.n	8001176 <__gesf2+0x3a>
 80011a6:	e7e2      	b.n	800116e <__gesf2+0x32>
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d1e7      	bne.n	800117c <__gesf2+0x40>
 80011ac:	428b      	cmp	r3, r1
 80011ae:	d1de      	bne.n	800116e <__gesf2+0x32>
 80011b0:	4294      	cmp	r4, r2
 80011b2:	dd05      	ble.n	80011c0 <__gesf2+0x84>
 80011b4:	2102      	movs	r1, #2
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	4008      	ands	r0, r1
 80011ba:	3801      	subs	r0, #1
 80011bc:	e7db      	b.n	8001176 <__gesf2+0x3a>
 80011be:	2400      	movs	r4, #0
 80011c0:	42a2      	cmp	r2, r4
 80011c2:	dc04      	bgt.n	80011ce <__gesf2+0x92>
 80011c4:	42b5      	cmp	r5, r6
 80011c6:	d8d2      	bhi.n	800116e <__gesf2+0x32>
 80011c8:	2000      	movs	r0, #0
 80011ca:	42b5      	cmp	r5, r6
 80011cc:	d2d3      	bcs.n	8001176 <__gesf2+0x3a>
 80011ce:	1e58      	subs	r0, r3, #1
 80011d0:	2301      	movs	r3, #1
 80011d2:	4398      	bics	r0, r3
 80011d4:	3001      	adds	r0, #1
 80011d6:	e7ce      	b.n	8001176 <__gesf2+0x3a>

080011d8 <__lesf2>:
 80011d8:	b530      	push	{r4, r5, lr}
 80011da:	0042      	lsls	r2, r0, #1
 80011dc:	0244      	lsls	r4, r0, #9
 80011de:	024d      	lsls	r5, r1, #9
 80011e0:	0fc3      	lsrs	r3, r0, #31
 80011e2:	0048      	lsls	r0, r1, #1
 80011e4:	0a64      	lsrs	r4, r4, #9
 80011e6:	0e12      	lsrs	r2, r2, #24
 80011e8:	0a6d      	lsrs	r5, r5, #9
 80011ea:	0e00      	lsrs	r0, r0, #24
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	2aff      	cmp	r2, #255	; 0xff
 80011f0:	d012      	beq.n	8001218 <__lesf2+0x40>
 80011f2:	28ff      	cmp	r0, #255	; 0xff
 80011f4:	d00c      	beq.n	8001210 <__lesf2+0x38>
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d112      	bne.n	8001220 <__lesf2+0x48>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d119      	bne.n	8001232 <__lesf2+0x5a>
 80011fe:	2d00      	cmp	r5, #0
 8001200:	d117      	bne.n	8001232 <__lesf2+0x5a>
 8001202:	2c00      	cmp	r4, #0
 8001204:	d02b      	beq.n	800125e <__lesf2+0x86>
 8001206:	2002      	movs	r0, #2
 8001208:	3b01      	subs	r3, #1
 800120a:	4018      	ands	r0, r3
 800120c:	3801      	subs	r0, #1
 800120e:	e026      	b.n	800125e <__lesf2+0x86>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d0f0      	beq.n	80011f6 <__lesf2+0x1e>
 8001214:	2002      	movs	r0, #2
 8001216:	e022      	b.n	800125e <__lesf2+0x86>
 8001218:	2c00      	cmp	r4, #0
 800121a:	d1fb      	bne.n	8001214 <__lesf2+0x3c>
 800121c:	28ff      	cmp	r0, #255	; 0xff
 800121e:	d01f      	beq.n	8001260 <__lesf2+0x88>
 8001220:	2800      	cmp	r0, #0
 8001222:	d11f      	bne.n	8001264 <__lesf2+0x8c>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d11d      	bne.n	8001264 <__lesf2+0x8c>
 8001228:	2002      	movs	r0, #2
 800122a:	3b01      	subs	r3, #1
 800122c:	4018      	ands	r0, r3
 800122e:	3801      	subs	r0, #1
 8001230:	e015      	b.n	800125e <__lesf2+0x86>
 8001232:	2c00      	cmp	r4, #0
 8001234:	d00e      	beq.n	8001254 <__lesf2+0x7c>
 8001236:	428b      	cmp	r3, r1
 8001238:	d1e5      	bne.n	8001206 <__lesf2+0x2e>
 800123a:	2200      	movs	r2, #0
 800123c:	4290      	cmp	r0, r2
 800123e:	dc04      	bgt.n	800124a <__lesf2+0x72>
 8001240:	42ac      	cmp	r4, r5
 8001242:	d8e0      	bhi.n	8001206 <__lesf2+0x2e>
 8001244:	2000      	movs	r0, #0
 8001246:	42ac      	cmp	r4, r5
 8001248:	d209      	bcs.n	800125e <__lesf2+0x86>
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	2301      	movs	r3, #1
 800124e:	4398      	bics	r0, r3
 8001250:	3001      	adds	r0, #1
 8001252:	e004      	b.n	800125e <__lesf2+0x86>
 8001254:	2301      	movs	r3, #1
 8001256:	3901      	subs	r1, #1
 8001258:	4399      	bics	r1, r3
 800125a:	0008      	movs	r0, r1
 800125c:	3001      	adds	r0, #1
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	2d00      	cmp	r5, #0
 8001262:	d1d7      	bne.n	8001214 <__lesf2+0x3c>
 8001264:	428b      	cmp	r3, r1
 8001266:	d1ce      	bne.n	8001206 <__lesf2+0x2e>
 8001268:	4282      	cmp	r2, r0
 800126a:	dde7      	ble.n	800123c <__lesf2+0x64>
 800126c:	2102      	movs	r1, #2
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	4008      	ands	r0, r1
 8001272:	3801      	subs	r0, #1
 8001274:	e7f3      	b.n	800125e <__lesf2+0x86>
 8001276:	46c0      	nop			; (mov r8, r8)

08001278 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_Init+0x24>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_Init+0x24>)
 8001282:	2110      	movs	r1, #16
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f809 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f002 fd7f 	bl	8003d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80012a8:	f000 fff0 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80012ac:	0002      	movs	r2, r0
 80012ae:	23fa      	movs	r3, #250	; 0xfa
 80012b0:	0099      	lsls	r1, r3, #2
 80012b2:	0010      	movs	r0, r2
 80012b4:	f7fe ff28 	bl	8000108 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f90d 	bl	80014da <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	2301      	movs	r3, #1
 80012c4:	425b      	negs	r3, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f8e1 	bl	8001490 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  uwTick++;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_IncTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_IncTick+0x14>)
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001b4 	.word	0x200001b4

080012f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	200001b4 	.word	0x200001b4

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fff0 	bl	80012f0 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	d002      	beq.n	8001324 <HAL_Delay+0x20>
  {
     wait++;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3301      	adds	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	f7ff ffe3 	bl	80012f0 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	d8f7      	bhi.n	8001326 <HAL_Delay+0x22>
  {
  }
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	0002      	movs	r2, r0
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	231f      	movs	r3, #31
 8001354:	401a      	ands	r2, r3
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <NVIC_EnableIRQ+0x28>)
 8001358:	2101      	movs	r1, #1
 800135a:	4091      	lsls	r1, r2
 800135c:	000a      	movs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	e000e100 	.word	0xe000e100

0800136c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b7f      	cmp	r3, #127	; 0x7f
 8001380:	d932      	bls.n	80013e8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <NVIC_SetPriority+0xd4>)
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	0019      	movs	r1, r3
 800138a:	230f      	movs	r3, #15
 800138c:	400b      	ands	r3, r1
 800138e:	3b08      	subs	r3, #8
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3306      	adds	r3, #6
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	18d3      	adds	r3, r2, r3
 8001398:	3304      	adds	r3, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1dfa      	adds	r2, r7, #7
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	0011      	movs	r1, r2
 80013a2:	2203      	movs	r2, #3
 80013a4:	400a      	ands	r2, r1
 80013a6:	00d2      	lsls	r2, r2, #3
 80013a8:	21ff      	movs	r1, #255	; 0xff
 80013aa:	4091      	lsls	r1, r2
 80013ac:	000a      	movs	r2, r1
 80013ae:	43d2      	mvns	r2, r2
 80013b0:	401a      	ands	r2, r3
 80013b2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	401a      	ands	r2, r3
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	0018      	movs	r0, r3
 80013c2:	2303      	movs	r3, #3
 80013c4:	4003      	ands	r3, r0
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ca:	481d      	ldr	r0, [pc, #116]	; (8001440 <NVIC_SetPriority+0xd4>)
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	001c      	movs	r4, r3
 80013d2:	230f      	movs	r3, #15
 80013d4:	4023      	ands	r3, r4
 80013d6:	3b08      	subs	r3, #8
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	430a      	orrs	r2, r1
 80013dc:	3306      	adds	r3, #6
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	18c3      	adds	r3, r0, r3
 80013e2:	3304      	adds	r3, #4
 80013e4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013e6:	e027      	b.n	8001438 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	33c0      	adds	r3, #192	; 0xc0
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	589b      	ldr	r3, [r3, r2]
 80013f8:	1dfa      	adds	r2, r7, #7
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	0011      	movs	r1, r2
 80013fe:	2203      	movs	r2, #3
 8001400:	400a      	ands	r2, r1
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	21ff      	movs	r1, #255	; 0xff
 8001406:	4091      	lsls	r1, r2
 8001408:	000a      	movs	r2, r1
 800140a:	43d2      	mvns	r2, r2
 800140c:	401a      	ands	r2, r3
 800140e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	019b      	lsls	r3, r3, #6
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	401a      	ands	r2, r3
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	2303      	movs	r3, #3
 8001420:	4003      	ands	r3, r0
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <NVIC_SetPriority+0xd8>)
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	430a      	orrs	r2, r1
 8001432:	33c0      	adds	r3, #192	; 0xc0
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	501a      	str	r2, [r3, r0]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b003      	add	sp, #12
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	e000e100 	.word	0xe000e100

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <SysTick_Config+0x40>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e010      	b.n	8001480 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <SysTick_Config+0x44>)
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	3a01      	subs	r2, #1
 8001464:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	2301      	movs	r3, #1
 8001468:	425b      	negs	r3, r3
 800146a:	2103      	movs	r1, #3
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ff7d 	bl	800136c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <SysTick_Config+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x44>)
 800147a:	2207      	movs	r2, #7
 800147c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	00ffffff 	.word	0x00ffffff
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	210f      	movs	r1, #15
 800149c:	187b      	adds	r3, r7, r1
 800149e:	1c02      	adds	r2, r0, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <NVIC_SetPriority>
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	0002      	movs	r2, r0
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff37 	bl	8001340 <NVIC_EnableIRQ>
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ffaf 	bl	8001448 <SysTick_Config>
 80014ea:	0003      	movs	r3, r0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800150a:	e155      	b.n	80017b8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4091      	lsls	r1, r2
 8001516:	000a      	movs	r2, r1
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d100      	bne.n	8001524 <HAL_GPIO_Init+0x30>
 8001522:	e146      	b.n	80017b2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x40>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	58d3      	ldr	r3, [r2, r3]
 8001540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2207      	movs	r2, #7
 8001546:	4013      	ands	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2107      	movs	r1, #7
 8001560:	400b      	ands	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d00b      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c4:	2b11      	cmp	r3, #17
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	2201      	movs	r2, #1
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	055b      	lsls	r3, r3, #21
 800166a:	4013      	ands	r3, r2
 800166c:	d100      	bne.n	8001670 <HAL_GPIO_Init+0x17c>
 800166e:	e0a0      	b.n	80017b2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001676:	2101      	movs	r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	589b      	ldr	r3, [r3, r2]
 8001694:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	2390      	movs	r3, #144	; 0x90
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x1f6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <HAL_GPIO_Init+0x2e4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x1f2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_GPIO_Init+0x2e8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x2ec>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x1ea>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2f0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x1e6>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016da:	2305      	movs	r3, #5
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	2103      	movs	r1, #3
 80016f0:	400a      	ands	r2, r1
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	035b      	lsls	r3, r3, #13
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	039b      	lsls	r3, r3, #14
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	40da      	lsrs	r2, r3
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	d000      	beq.n	80017c6 <HAL_GPIO_Init+0x2d2>
 80017c4:	e6a2      	b.n	800150c <HAL_GPIO_Init+0x18>
  } 
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b006      	add	sp, #24
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	000a      	movs	r2, r1
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	1cba      	adds	r2, r7, #2
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	4013      	ands	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001806:	230f      	movs	r3, #15
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e003      	b.n	8001818 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
  }
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	0008      	movs	r0, r1
 8001830:	0011      	movs	r1, r2
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	1c02      	adds	r2, r0, #0
 8001836:	801a      	strh	r2, [r3, #0]
 8001838:	1c7b      	adds	r3, r7, #1
 800183a:	1c0a      	adds	r2, r1, #0
 800183c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183e:	1c7b      	adds	r3, r7, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001846:	1cbb      	adds	r3, r7, #2
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800184e:	e003      	b.n	8001858 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001850:	1cbb      	adds	r3, r7, #2
 8001852:	881a      	ldrh	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	000a      	movs	r2, r1
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	1cbb      	adds	r3, r7, #2
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	405a      	eors	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	615a      	str	r2, [r3, #20]
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	0002      	movs	r2, r0
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	1dba      	adds	r2, r7, #6
 8001896:	8812      	ldrh	r2, [r2, #0]
 8001898:	4013      	ands	r3, r2
 800189a:	d008      	beq.n	80018ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800189e:	1dba      	adds	r2, r7, #6
 80018a0:	8812      	ldrh	r2, [r2, #0]
 80018a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a4:	1dbb      	adds	r3, r7, #6
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f002 fbc1 	bl	8004030 <HAL_GPIO_EXTI_Callback>
  }
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d100      	bne.n	80018d4 <HAL_RCC_OscConfig+0x18>
 80018d2:	e08d      	b.n	80019f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018d4:	4bc5      	ldr	r3, [pc, #788]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	220c      	movs	r2, #12
 80018da:	4013      	ands	r3, r2
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00e      	beq.n	80018fe <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4bc2      	ldr	r3, [pc, #776]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	220c      	movs	r2, #12
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d116      	bne.n	800191a <HAL_RCC_OscConfig+0x5e>
 80018ec:	4bbf      	ldr	r3, [pc, #764]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	23c0      	movs	r3, #192	; 0xc0
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	401a      	ands	r2, r3
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	025b      	lsls	r3, r3, #9
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d10d      	bne.n	800191a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4bbb      	ldr	r3, [pc, #748]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	4013      	ands	r3, r2
 8001908:	d100      	bne.n	800190c <HAL_RCC_OscConfig+0x50>
 800190a:	e070      	b.n	80019ee <HAL_RCC_OscConfig+0x132>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d000      	beq.n	8001916 <HAL_RCC_OscConfig+0x5a>
 8001914:	e06b      	b.n	80019ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e329      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d107      	bne.n	8001932 <HAL_RCC_OscConfig+0x76>
 8001922:	4bb2      	ldr	r3, [pc, #712]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4bb1      	ldr	r3, [pc, #708]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0249      	lsls	r1, r1, #9
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e02f      	b.n	8001992 <HAL_RCC_OscConfig+0xd6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x98>
 800193a:	4bac      	ldr	r3, [pc, #688]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4bab      	ldr	r3, [pc, #684]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001940:	49ab      	ldr	r1, [pc, #684]	; (8001bf0 <HAL_RCC_OscConfig+0x334>)
 8001942:	400a      	ands	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4ba9      	ldr	r3, [pc, #676]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4ba8      	ldr	r3, [pc, #672]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 800194c:	49a9      	ldr	r1, [pc, #676]	; (8001bf4 <HAL_RCC_OscConfig+0x338>)
 800194e:	400a      	ands	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e01e      	b.n	8001992 <HAL_RCC_OscConfig+0xd6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d10e      	bne.n	800197a <HAL_RCC_OscConfig+0xbe>
 800195c:	4ba3      	ldr	r3, [pc, #652]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4ba2      	ldr	r3, [pc, #648]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	02c9      	lsls	r1, r1, #11
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4ba0      	ldr	r3, [pc, #640]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b9f      	ldr	r3, [pc, #636]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0xd6>
 800197a:	4b9c      	ldr	r3, [pc, #624]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b9b      	ldr	r3, [pc, #620]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001980:	499b      	ldr	r1, [pc, #620]	; (8001bf0 <HAL_RCC_OscConfig+0x334>)
 8001982:	400a      	ands	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4b99      	ldr	r3, [pc, #612]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b98      	ldr	r3, [pc, #608]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 800198c:	4999      	ldr	r1, [pc, #612]	; (8001bf4 <HAL_RCC_OscConfig+0x338>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d014      	beq.n	80019c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fca9 	bl	80012f0 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fca4 	bl	80012f0 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e2db      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b8d      	ldr	r3, [pc, #564]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	029b      	lsls	r3, r3, #10
 80019be:	4013      	ands	r3, r2
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe8>
 80019c2:	e015      	b.n	80019f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fc94 	bl	80012f0 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ce:	f7ff fc8f 	bl	80012f0 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e2c6      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e0:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	029b      	lsls	r3, r3, #10
 80019e8:	4013      	ands	r3, r2
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x112>
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2202      	movs	r2, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d100      	bne.n	80019fc <HAL_RCC_OscConfig+0x140>
 80019fa:	e06c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	220c      	movs	r2, #12
 8001a02:	4013      	ands	r3, r2
 8001a04:	d00e      	beq.n	8001a24 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a06:	4b79      	ldr	r3, [pc, #484]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d11f      	bne.n	8001a52 <HAL_RCC_OscConfig+0x196>
 8001a12:	4b76      	ldr	r3, [pc, #472]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	23c0      	movs	r3, #192	; 0xc0
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d116      	bne.n	8001a52 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a24:	4b71      	ldr	r3, [pc, #452]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e299      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	22f8      	movs	r2, #248	; 0xf8
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	00da      	lsls	r2, r3, #3
 8001a4a:	4b68      	ldr	r3, [pc, #416]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a50:	e041      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d024      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fc43 	bl	80012f0 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc3e 	bl	80012f0 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e275      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2202      	movs	r2, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d0f1      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	22f8      	movs	r2, #248	; 0xf8
 8001a92:	4393      	bics	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00da      	lsls	r2, r3, #3
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e018      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa4:	4b51      	ldr	r3, [pc, #324]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	438a      	bics	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fc1e 	bl	80012f0 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aba:	f7ff fc19 	bl	80012f0 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e250      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d1f1      	bne.n	8001aba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2208      	movs	r2, #8
 8001adc:	4013      	ands	r3, r2
 8001ade:	d036      	beq.n	8001b4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d019      	beq.n	8001b1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fbfc 	bl	80012f0 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff fbf7 	bl	80012f0 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e22e      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f1      	beq.n	8001afe <HAL_RCC_OscConfig+0x242>
 8001b1a:	e018      	b.n	8001b4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	438a      	bics	r2, r1
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fbe2 	bl	80012f0 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff fbdd 	bl	80012f0 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e214      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d1f1      	bne.n	8001b32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	4013      	ands	r3, r2
 8001b56:	d100      	bne.n	8001b5a <HAL_RCC_OscConfig+0x29e>
 8001b58:	e0b6      	b.n	8001cc8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5a:	2317      	movs	r3, #23
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	055b      	lsls	r3, r3, #21
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d111      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	0549      	lsls	r1, r1, #21
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	61da      	str	r2, [r3, #28]
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	055b      	lsls	r3, r3, #21
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b8a:	2317      	movs	r3, #23
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_OscConfig+0x33c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d11a      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x33c>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x33c>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0049      	lsls	r1, r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fba0 	bl	80012f0 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7ff fb9b 	bl	80012f0 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	; 0x64
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1d2      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x33c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10f      	bne.n	8001bfc <HAL_RCC_OscConfig+0x340>
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001bde:	6a1a      	ldr	r2, [r3, #32]
 8001be0:	4b02      	ldr	r3, [pc, #8]	; (8001bec <HAL_RCC_OscConfig+0x330>)
 8001be2:	2101      	movs	r1, #1
 8001be4:	430a      	orrs	r2, r1
 8001be6:	621a      	str	r2, [r3, #32]
 8001be8:	e036      	b.n	8001c58 <HAL_RCC_OscConfig+0x39c>
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	fffeffff 	.word	0xfffeffff
 8001bf4:	fffbffff 	.word	0xfffbffff
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x362>
 8001c04:	4bca      	ldr	r3, [pc, #808]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c06:	6a1a      	ldr	r2, [r3, #32]
 8001c08:	4bc9      	ldr	r3, [pc, #804]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	621a      	str	r2, [r3, #32]
 8001c10:	4bc7      	ldr	r3, [pc, #796]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c12:	6a1a      	ldr	r2, [r3, #32]
 8001c14:	4bc6      	ldr	r3, [pc, #792]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c16:	2104      	movs	r1, #4
 8001c18:	438a      	bics	r2, r1
 8001c1a:	621a      	str	r2, [r3, #32]
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x39c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x384>
 8001c26:	4bc2      	ldr	r3, [pc, #776]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	4bc1      	ldr	r3, [pc, #772]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	621a      	str	r2, [r3, #32]
 8001c32:	4bbf      	ldr	r3, [pc, #764]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	4bbe      	ldr	r3, [pc, #760]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	621a      	str	r2, [r3, #32]
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0x39c>
 8001c40:	4bbb      	ldr	r3, [pc, #748]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c42:	6a1a      	ldr	r2, [r3, #32]
 8001c44:	4bba      	ldr	r3, [pc, #744]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	438a      	bics	r2, r1
 8001c4a:	621a      	str	r2, [r3, #32]
 8001c4c:	4bb8      	ldr	r3, [pc, #736]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	4bb7      	ldr	r3, [pc, #732]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c52:	2104      	movs	r1, #4
 8001c54:	438a      	bics	r2, r1
 8001c56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d014      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fb46 	bl	80012f0 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e009      	b.n	8001c7e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff fb41 	bl	80012f0 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4aaf      	ldr	r2, [pc, #700]	; (8001f34 <HAL_RCC_OscConfig+0x678>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e177      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	4bac      	ldr	r3, [pc, #688]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	2202      	movs	r2, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x3ae>
 8001c88:	e013      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fb31 	bl	80012f0 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff fb2c 	bl	80012f0 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	4aa5      	ldr	r2, [pc, #660]	; (8001f34 <HAL_RCC_OscConfig+0x678>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e162      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb2:	2317      	movs	r3, #23
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b9c      	ldr	r3, [pc, #624]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	4b9b      	ldr	r3, [pc, #620]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001cc2:	499d      	ldr	r1, [pc, #628]	; (8001f38 <HAL_RCC_OscConfig+0x67c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d063      	beq.n	8001d9a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d12a      	bne.n	8001d30 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cda:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cde:	4b94      	ldr	r3, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ce6:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001cec:	2101      	movs	r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fafd 	bl	80012f0 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cfc:	f7ff faf8 	bl	80012f0 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e12f      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0f1      	beq.n	8001cfc <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d18:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	22f8      	movs	r2, #248	; 0xf8
 8001d1e:	4393      	bics	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	00da      	lsls	r2, r3, #3
 8001d28:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2e:	e034      	b.n	8001d9a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	3305      	adds	r3, #5
 8001d36:	d111      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d38:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3c:	4b7c      	ldr	r3, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d3e:	2104      	movs	r1, #4
 8001d40:	438a      	bics	r2, r1
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d44:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d48:	22f8      	movs	r2, #248	; 0xf8
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	00da      	lsls	r2, r3, #3
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5a:	e01e      	b.n	8001d9a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d5c:	4b74      	ldr	r3, [pc, #464]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d62:	2104      	movs	r1, #4
 8001d64:	430a      	orrs	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d68:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	438a      	bics	r2, r1
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fabc 	bl	80012f0 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d7e:	f7ff fab7 	bl	80012f0 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0ee      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d90:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d1f1      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	4013      	ands	r3, r2
 8001da2:	d05c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	220c      	movs	r2, #12
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d00e      	beq.n	8001dce <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001db0:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	220c      	movs	r2, #12
 8001db6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d114      	bne.n	8001de6 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	025b      	lsls	r3, r3, #9
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001dce:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d040      	beq.n	8001e5c <HAL_RCC_OscConfig+0x5a0>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d03c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0c3      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001dee:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0249      	lsls	r1, r1, #9
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa78 	bl	80012f0 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e06:	f7ff fa73 	bl	80012f0 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0aa      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x54a>
 8001e24:	e01b      	b.n	8001e5e <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e2c:	4943      	ldr	r1, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x680>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fa5d 	bl	80012f0 <HAL_GetTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3c:	f7ff fa58 	bl	80012f0 <HAL_GetTick>
 8001e40:	0002      	movs	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e08f      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	025b      	lsls	r3, r3, #9
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x580>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e5c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5ac>
 8001e66:	e081      	b.n	8001f6c <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5ba>
 8001e74:	e078      	b.n	8001f68 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d14c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001e84:	492e      	ldr	r1, [pc, #184]	; (8001f40 <HAL_RCC_OscConfig+0x684>)
 8001e86:	400a      	ands	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa31 	bl	80012f0 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff fa2c 	bl	80012f0 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e063      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	4393      	bics	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_RCC_OscConfig+0x688>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	0449      	lsls	r1, r1, #17
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff f9ff 	bl	80012f0 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f9fa 	bl	80012f0 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e031      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	049b      	lsls	r3, r3, #18
 8001f12:	4013      	ands	r3, r2
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x63c>
 8001f16:	e029      	b.n	8001f6c <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_RCC_OscConfig+0x674>)
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <HAL_RCC_OscConfig+0x684>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff f9e4 	bl	80012f0 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x69e>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	00001388 	.word	0x00001388
 8001f38:	efffffff 	.word	0xefffffff
 8001f3c:	fffeffff 	.word	0xfffeffff
 8001f40:	feffffff 	.word	0xfeffffff
 8001f44:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f9d2 	bl	80012f0 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e009      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_RCC_OscConfig+0x6bc>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	049b      	lsls	r3, r3, #18
 8001f62:	4013      	ands	r3, r2
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x68c>
 8001f66:	e001      	b.n	8001f6c <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b006      	add	sp, #24
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f8a:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d911      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b77      	ldr	r3, [pc, #476]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001faa:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0d8      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	22f0      	movs	r2, #240	; 0xf0
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x6a>
 8001fe4:	e089      	b.n	80020fa <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	029b      	lsls	r3, r3, #10
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d120      	bne.n	800203c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0b7      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	049b      	lsls	r3, r3, #18
 800200e:	4013      	ands	r3, r2
 8002010:	d114      	bne.n	800203c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0ab      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800201e:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	4013      	ands	r3, r2
 8002028:	d108      	bne.n	800203c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e09f      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e098      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203c:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	4393      	bics	r3, r2
 8002044:	0019      	movs	r1, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7ff f94e 	bl	80012f0 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d111      	bne.n	8002084 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	e009      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7ff f945 	bl	80012f0 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a44      	ldr	r2, [pc, #272]	; (8002180 <HAL_RCC_ClockConfig+0x204>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e07b      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	220c      	movs	r2, #12
 800207c:	4013      	ands	r3, r2
 800207e:	2b04      	cmp	r3, #4
 8002080:	d1ef      	bne.n	8002062 <HAL_RCC_ClockConfig+0xe6>
 8002082:	e03a      	b.n	80020fa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d111      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208c:	e009      	b.n	80020a2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7ff f92f 	bl	80012f0 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_RCC_ClockConfig+0x204>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e065      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	220c      	movs	r2, #12
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d1ef      	bne.n	800208e <HAL_RCC_ClockConfig+0x112>
 80020ae:	e024      	b.n	80020fa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d11b      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7ff f919 	bl	80012f0 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_RCC_ClockConfig+0x204>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e04f      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	220c      	movs	r2, #12
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d1ef      	bne.n	80020ba <HAL_RCC_ClockConfig+0x13e>
 80020da:	e00e      	b.n	80020fa <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff f908 	bl	80012f0 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_RCC_ClockConfig+0x204>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e03e      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	220c      	movs	r2, #12
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	4013      	ands	r3, r2
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d211      	bcs.n	800212c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	4393      	bics	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	4013      	ands	r3, r2
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e020      	b.n	800216e <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x208>)
 800213c:	4013      	ands	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800214a:	f000 f821 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800214e:	0001      	movs	r1, r0
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x200>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	220f      	movs	r2, #15
 8002158:	4013      	ands	r3, r2
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x20c>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	000a      	movs	r2, r1
 8002160:	40da      	lsrs	r2, r3
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x210>)
 8002164:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff f89a 	bl	80012a0 <HAL_InitTick>
  
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	00001388 	.word	0x00001388
 8002184:	fffff8ff 	.word	0xfffff8ff
 8002188:	080074e0 	.word	0x080074e0
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b08f      	sub	sp, #60	; 0x3c
 8002194:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002196:	2314      	movs	r3, #20
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_RCC_GetSysClockFreq+0xe8>)
 800219c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800219e:	c313      	stmia	r3!, {r0, r1, r4}
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4a35      	ldr	r2, [pc, #212]	; (800227c <HAL_RCC_GetSysClockFreq+0xec>)
 80021a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021aa:	c313      	stmia	r3!, {r0, r1, r4}
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b8:	2300      	movs	r3, #0
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <HAL_RCC_GetSysClockFreq+0xf0>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	220c      	movs	r2, #12
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d006      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x52>
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d043      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0xd0>
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d144      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021e0:	e044      	b.n	800226c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	0c9b      	lsrs	r3, r3, #18
 80021e6:	220f      	movs	r2, #15
 80021e8:	4013      	ands	r3, r2
 80021ea:	2214      	movs	r2, #20
 80021ec:	18ba      	adds	r2, r7, r2
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021f2:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_RCC_GetSysClockFreq+0xf0>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	220f      	movs	r2, #15
 80021f8:	4013      	ands	r3, r2
 80021fa:	1d3a      	adds	r2, r7, #4
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002202:	23c0      	movs	r3, #192	; 0xc0
 8002204:	025b      	lsls	r3, r3, #9
 8002206:	401a      	ands	r2, r3
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	025b      	lsls	r3, r3, #9
 800220c:	429a      	cmp	r2, r3
 800220e:	d109      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002212:	481c      	ldr	r0, [pc, #112]	; (8002284 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002214:	f7fd ff78 	bl	8000108 <__udivsi3>
 8002218:	0003      	movs	r3, r0
 800221a:	001a      	movs	r2, r3
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	4353      	muls	r3, r2
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 8002222:	e01a      	b.n	800225a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	025b      	lsls	r3, r3, #9
 800222a:	401a      	ands	r2, r3
 800222c:	23c0      	movs	r3, #192	; 0xc0
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	429a      	cmp	r2, r3
 8002232:	d109      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8002234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002236:	4814      	ldr	r0, [pc, #80]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002238:	f7fd ff66 	bl	8000108 <__udivsi3>
 800223c:	0003      	movs	r3, r0
 800223e:	001a      	movs	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	4353      	muls	r3, r2
 8002244:	637b      	str	r3, [r7, #52]	; 0x34
 8002246:	e008      	b.n	800225a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <HAL_RCC_GetSysClockFreq+0xf4>)
 800224c:	f7fd ff5c 	bl	8000108 <__udivsi3>
 8002250:	0003      	movs	r3, r0
 8002252:	001a      	movs	r2, r3
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	4353      	muls	r3, r2
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800225e:	e005      	b.n	800226c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002264:	e002      	b.n	800226c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800226a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b00f      	add	sp, #60	; 0x3c
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	08006d7c 	.word	0x08006d7c
 800227c:	08006d8c 	.word	0x08006d8c
 8002280:	40021000 	.word	0x40021000
 8002284:	007a1200 	.word	0x007a1200
 8002288:	02dc6c00 	.word	0x02dc6c00

0800228c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <HAL_RCC_GetHCLKFreq+0x10>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000000 	.word	0x20000000

080022a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022a4:	f7ff fff2 	bl	800228c <HAL_RCC_GetHCLKFreq>
 80022a8:	0001      	movs	r1, r0
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	2207      	movs	r2, #7
 80022b2:	4013      	ands	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	40d9      	lsrs	r1, r3
 80022ba:	000b      	movs	r3, r1
}    
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40021000 	.word	0x40021000
 80022c8:	080074f0 	.word	0x080074f0

080022cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	025b      	lsls	r3, r3, #9
 80022e4:	4013      	ands	r3, r2
 80022e6:	d100      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80022e8:	e08f      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2317      	movs	r3, #23
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	055b      	lsls	r3, r3, #21
 80022fa:	4013      	ands	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0549      	lsls	r1, r1, #21
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	055b      	lsls	r3, r3, #21
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2317      	movs	r3, #23
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4013      	ands	r3, r2
 800232c:	d11a      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0049      	lsls	r1, r1, #1
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233c:	f7fe ffd8 	bl	80012f0 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	e008      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7fe ffd3 	bl	80012f0 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b64      	cmp	r3, #100	; 0x64
 8002352:	d901      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0a6      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d0f0      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	23c0      	movs	r3, #192	; 0xc0
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d034      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4013      	ands	r3, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	429a      	cmp	r2, r3
 8002384:	d02c      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	430a      	orrs	r2, r1
 800239c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023a4:	4945      	ldr	r1, [pc, #276]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff9a 	bl	80012f0 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e009      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe ff95 	bl	80012f0 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e067      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023f4:	2317      	movs	r3, #23
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002404:	492f      	ldr	r1, [pc, #188]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002406:	400a      	ands	r2, r1
 8002408:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	2203      	movs	r2, #3
 800241a:	4393      	bics	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002424:	430a      	orrs	r2, r1
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2202      	movs	r2, #2
 800242e:	4013      	ands	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002442:	430a      	orrs	r2, r1
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2220      	movs	r2, #32
 800244c:	4013      	ands	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2210      	movs	r2, #16
 8002456:	4393      	bics	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002460:	430a      	orrs	r2, r1
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	4013      	ands	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002480:	430a      	orrs	r2, r1
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b006      	add	sp, #24
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
 80024b8:	fffffcff 	.word	0xfffffcff
 80024bc:	fffeffff 	.word	0xfffeffff
 80024c0:	00001388 	.word	0x00001388
 80024c4:	efffffff 	.word	0xefffffff
 80024c8:	fffcffff 	.word	0xfffcffff

080024cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e08a      	b.n	80025f4 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	225d      	movs	r2, #93	; 0x5d
 80024e8:	5c9b      	ldrb	r3, [r3, r2]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	225c      	movs	r2, #92	; 0x5c
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f001 fc6c 	bl	8003dd8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	225d      	movs	r2, #93	; 0x5d
 8002504:	2102      	movs	r1, #2
 8002506:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	438a      	bics	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	23e0      	movs	r3, #224	; 0xe0
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	429a      	cmp	r2, r3
 8002522:	d902      	bls.n	800252a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e002      	b.n	8002530 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	23f0      	movs	r3, #240	; 0xf0
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	429a      	cmp	r2, r3
 800253a:	d008      	beq.n	800254e <HAL_SPI_Init+0x82>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	23e0      	movs	r3, #224	; 0xe0
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	429a      	cmp	r2, r3
 8002546:	d002      	beq.n	800254e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	23e0      	movs	r3, #224	; 0xe0
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	429a      	cmp	r2, r3
 8002560:	d903      	bls.n	800256a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
 8002568:	e002      	b.n	8002570 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6999      	ldr	r1, [r3, #24]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	400b      	ands	r3, r1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	431a      	orrs	r2, r3
 800259e:	0011      	movs	r1, r2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	2204      	movs	r2, #4
 80025b4:	401a      	ands	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	0011      	movs	r1, r2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4907      	ldr	r1, [pc, #28]	; (80025fc <HAL_SPI_Init+0x130>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	225d      	movs	r2, #93	; 0x5d
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fffff7ff 	.word	0xfffff7ff

08002600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	1dbb      	adds	r3, r7, #6
 800260e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002614:	231f      	movs	r3, #31
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	225c      	movs	r2, #92	; 0x5c
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_SPI_Transmit+0x2a>
 8002626:	2302      	movs	r3, #2
 8002628:	e14f      	b.n	80028ca <HAL_SPI_Transmit+0x2ca>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	225c      	movs	r2, #92	; 0x5c
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002632:	f7fe fe5d 	bl	80012f0 <HAL_GetTick>
 8002636:	0003      	movs	r3, r0
 8002638:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	225d      	movs	r2, #93	; 0x5d
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d004      	beq.n	8002650 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
    goto error;
 800264e:	e131      	b.n	80028b4 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_SPI_Transmit+0x5e>
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 800265e:	231f      	movs	r3, #31
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
    goto error;
 8002666:	e125      	b.n	80028b4 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	225d      	movs	r2, #93	; 0x5d
 800266c:	2103      	movs	r1, #3
 800266e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1dba      	adds	r2, r7, #6
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1dba      	adds	r2, r7, #6
 8002688:	8812      	ldrh	r2, [r2, #0]
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2244      	movs	r2, #68	; 0x44
 8002696:	2100      	movs	r1, #0
 8002698:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2246      	movs	r2, #70	; 0x46
 800269e:	2100      	movs	r1, #0
 80026a0:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d108      	bne.n	80026cc <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	01c9      	lsls	r1, r1, #7
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b40      	cmp	r3, #64	; 0x40
 80026d8:	d007      	beq.n	80026ea <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	23e0      	movs	r3, #224	; 0xe0
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d948      	bls.n	8002788 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <HAL_SPI_Transmit+0x108>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d139      	bne.n	800277c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	881a      	ldrh	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3302      	adds	r3, #2
 8002716:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002726:	e029      	b.n	800277c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2202      	movs	r2, #2
 8002730:	4013      	ands	r3, r2
 8002732:	2b02      	cmp	r3, #2
 8002734:	d10f      	bne.n	8002756 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3302      	adds	r3, #2
 8002744:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002754:	e012      	b.n	800277c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_SPI_Transmit+0x172>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	d00c      	beq.n	800277c <HAL_SPI_Transmit+0x17c>
 8002762:	f7fe fdc5 	bl	80012f0 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d804      	bhi.n	800277c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002772:	231f      	movs	r3, #31
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2203      	movs	r2, #3
 8002778:	701a      	strb	r2, [r3, #0]
          goto error;
 800277a:	e09b      	b.n	80028b4 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1d0      	bne.n	8002728 <HAL_SPI_Transmit+0x128>
 8002786:	e071      	b.n	800286c <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_SPI_Transmit+0x19a>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d163      	bne.n	8002862 <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d90f      	bls.n	80027c4 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	881a      	ldrh	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3302      	adds	r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b02      	subs	r3, #2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c2:	e04e      	b.n	8002862 <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	60ba      	str	r2, [r7, #8]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	320c      	adds	r2, #12
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80027e2:	e03e      	b.n	8002862 <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d124      	bne.n	800283c <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d90f      	bls.n	800281c <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	881a      	ldrh	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3302      	adds	r3, #2
 800280a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b02      	subs	r3, #2
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800281a:	e022      	b.n	8002862 <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	60ba      	str	r2, [r7, #8]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	320c      	adds	r2, #12
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	87da      	strh	r2, [r3, #62]	; 0x3e
 800283a:	e012      	b.n	8002862 <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_SPI_Transmit+0x258>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	d00c      	beq.n	8002862 <HAL_SPI_Transmit+0x262>
 8002848:	f7fe fd52 	bl	80012f0 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d804      	bhi.n	8002862 <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8002858:	231f      	movs	r3, #31
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2203      	movs	r2, #3
 800285e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002860:	e028      	b.n	80028b4 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1bb      	bne.n	80027e4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	6839      	ldr	r1, [r7, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f916 	bl	8002aa4 <SPI_EndRxTxTransaction>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 80028a8:	231f      	movs	r3, #31
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e000      	b.n	80028b4 <HAL_SPI_Transmit+0x2b4>
  }

error:
 80028b2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	225d      	movs	r2, #93	; 0x5d
 80028b8:	2101      	movs	r1, #1
 80028ba:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	225c      	movs	r2, #92	; 0x5c
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	781b      	ldrb	r3, [r3, #0]
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b008      	add	sp, #32
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e2:	e050      	b.n	8002986 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	d04d      	beq.n	8002986 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <SPI_WaitFlagStateUntilTimeout+0x2c>
 80028f0:	f7fe fcfe 	bl	80012f0 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d842      	bhi.n	8002986 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	21e0      	movs	r1, #224	; 0xe0
 800290c:	438a      	bics	r2, r1
 800290e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	2382      	movs	r3, #130	; 0x82
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	429a      	cmp	r2, r3
 800291a:	d113      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x70>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	429a      	cmp	r2, r3
 8002926:	d005      	beq.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	438a      	bics	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	019b      	lsls	r3, r3, #6
 800294c:	429a      	cmp	r2, r3
 800294e:	d110      	bne.n	8002972 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4914      	ldr	r1, [pc, #80]	; (80029ac <SPI_WaitFlagStateUntilTimeout+0xd8>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	0189      	lsls	r1, r1, #6
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	225d      	movs	r2, #93	; 0x5d
 8002976:	2101      	movs	r1, #1
 8002978:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	225c      	movs	r2, #92	; 0x5c
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00e      	b.n	80029a4 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	429a      	cmp	r2, r3
 8002994:	d101      	bne.n	800299a <SPI_WaitFlagStateUntilTimeout+0xc6>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <SPI_WaitFlagStateUntilTimeout+0xc8>
 800299a:	2300      	movs	r3, #0
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4293      	cmp	r3, r2
 80029a0:	d1a0      	bne.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	ffffdfff 	.word	0xffffdfff

080029b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80029be:	e062      	b.n	8002a86 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	23c0      	movs	r3, #192	; 0xc0
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10c      	bne.n	80029e4 <SPI_WaitFifoStateUntilTimeout+0x34>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	2117      	movs	r1, #23
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	d04d      	beq.n	8002a86 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <SPI_WaitFifoStateUntilTimeout+0x50>
 80029f0:	f7fe fc7e 	bl	80012f0 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d842      	bhi.n	8002a86 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	21e0      	movs	r1, #224	; 0xe0
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	2382      	movs	r3, #130	; 0x82
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d113      	bne.n	8002a44 <SPI_WaitFifoStateUntilTimeout+0x94>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d005      	beq.n	8002a34 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	438a      	bics	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	019b      	lsls	r3, r3, #6
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d110      	bne.n	8002a72 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4911      	ldr	r1, [pc, #68]	; (8002aa0 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0189      	lsls	r1, r1, #6
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	225d      	movs	r2, #93	; 0x5d
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	225c      	movs	r2, #92	; 0x5c
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e008      	b.n	8002a98 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d194      	bne.n	80029c0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b006      	add	sp, #24
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	ffffdfff 	.word	0xffffdfff

08002aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	23c0      	movs	r3, #192	; 0xc0
 8002ab4:	0159      	lsls	r1, r3, #5
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	0013      	movs	r3, r2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f7ff ff76 	bl	80029b0 <SPI_WaitFifoStateUntilTimeout>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d007      	beq.n	8002ad8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002acc:	2220      	movs	r2, #32
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e027      	b.n	8002b28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	f7ff fef5 	bl	80028d4 <SPI_WaitFlagStateUntilTimeout>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d007      	beq.n	8002afe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af2:	2220      	movs	r2, #32
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e014      	b.n	8002b28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	23c0      	movs	r3, #192	; 0xc0
 8002b02:	00d9      	lsls	r1, r3, #3
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f7ff ff4f 	bl	80029b0 <SPI_WaitFifoStateUntilTimeout>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d007      	beq.n	8002b26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e000      	b.n	8002b28 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b004      	add	sp, #16
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01e      	b.n	8002b80 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223d      	movs	r2, #61	; 0x3d
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223c      	movs	r2, #60	; 0x3c
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f001 f9b3 	bl	8003ec4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	223d      	movs	r2, #61	; 0x3d
 8002b62:	2102      	movs	r1, #2
 8002b64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f000 f809 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223d      	movs	r2, #61	; 0x3d
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a34      	ldr	r2, [pc, #208]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d008      	beq.n	8002bb6 <TIM_Base_SetConfig+0x2e>
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	05db      	lsls	r3, r3, #23
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0x2e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a30      	ldr	r2, [pc, #192]	; (8002c74 <TIM_Base_SetConfig+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2270      	movs	r2, #112	; 0x70
 8002bba:	4393      	bics	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <TIM_Base_SetConfig+0x7a>
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d013      	beq.n	8002c02 <TIM_Base_SetConfig+0x7a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <TIM_Base_SetConfig+0xec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00f      	beq.n	8002c02 <TIM_Base_SetConfig+0x7a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <TIM_Base_SetConfig+0xf0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x7a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <TIM_Base_SetConfig+0xf4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x7a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <TIM_Base_SetConfig+0xf8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x7a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <TIM_Base_SetConfig+0xfc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <TIM_Base_SetConfig+0x100>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	4393      	bics	r3, r2
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <TIM_Base_SetConfig+0xe8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <TIM_Base_SetConfig+0xd2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <TIM_Base_SetConfig+0xf4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <TIM_Base_SetConfig+0xd2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <TIM_Base_SetConfig+0xf8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_Base_SetConfig+0xd2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <TIM_Base_SetConfig+0xfc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d103      	bne.n	8002c62 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	615a      	str	r2, [r3, #20]
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b004      	add	sp, #16
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40002000 	.word	0x40002000
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800
 8002c88:	fffffcff 	.word	0xfffffcff

08002c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	223c      	movs	r2, #60	; 0x3c
 8002c9a:	5c9b      	ldrb	r3, [r3, r2]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e032      	b.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223c      	movs	r2, #60	; 0x3c
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	223d      	movs	r2, #61	; 0x3d
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2170      	movs	r1, #112	; 0x70
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	223d      	movs	r2, #61	; 0x3d
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	223c      	movs	r2, #60	; 0x3c
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e047      	b.n	8002db6 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2269      	movs	r2, #105	; 0x69
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2268      	movs	r2, #104	; 0x68
 8002d36:	2100      	movs	r1, #0
 8002d38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f001 f8df 	bl	8003f00 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2269      	movs	r2, #105	; 0x69
 8002d46:	2124      	movs	r1, #36	; 0x24
 8002d48:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f831 	bl	8002dc4 <UART_SetConfig>
 8002d62:	0003      	movs	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e024      	b.n	8002db6 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f9e0 	bl	800313c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_UART_Init+0xac>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	212a      	movs	r1, #42	; 0x2a
 8002d98:	438a      	bics	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fa78 	bl	80032a4 <UART_CheckIdleState>
 8002db4:	0003      	movs	r3, r0
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b002      	add	sp, #8
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	ffffb7ff 	.word	0xffffb7ff

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002dd0:	2317      	movs	r3, #23
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002dd8:	230a      	movs	r3, #10
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002de0:	2314      	movs	r3, #20
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de8:	2313      	movs	r3, #19
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4ac1      	ldr	r2, [pc, #772]	; (8003114 <UART_SetConfig+0x350>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4abc      	ldr	r2, [pc, #752]	; (8003118 <UART_SetConfig+0x354>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4ab4      	ldr	r2, [pc, #720]	; (800311c <UART_SetConfig+0x358>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4ab0      	ldr	r2, [pc, #704]	; (8003120 <UART_SetConfig+0x35c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d125      	bne.n	8002eae <UART_SetConfig+0xea>
 8002e62:	4bb0      	ldr	r3, [pc, #704]	; (8003124 <UART_SetConfig+0x360>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	2203      	movs	r2, #3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d00f      	beq.n	8002e8e <UART_SetConfig+0xca>
 8002e6e:	d304      	bcc.n	8002e7a <UART_SetConfig+0xb6>
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d011      	beq.n	8002e98 <UART_SetConfig+0xd4>
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d005      	beq.n	8002e84 <UART_SetConfig+0xc0>
 8002e78:	e013      	b.n	8002ea2 <UART_SetConfig+0xde>
 8002e7a:	2317      	movs	r3, #23
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e064      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002e84:	2317      	movs	r3, #23
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e05f      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002e8e:	2317      	movs	r3, #23
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2204      	movs	r2, #4
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e05a      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002e98:	2317      	movs	r3, #23
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e055      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	e04f      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a9d      	ldr	r2, [pc, #628]	; (8003128 <UART_SetConfig+0x364>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d132      	bne.n	8002f1e <UART_SetConfig+0x15a>
 8002eb8:	4b9a      	ldr	r3, [pc, #616]	; (8003124 <UART_SetConfig+0x360>)
 8002eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebc:	23c0      	movs	r3, #192	; 0xc0
 8002ebe:	029b      	lsls	r3, r3, #10
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	0252      	lsls	r2, r2, #9
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d019      	beq.n	8002efe <UART_SetConfig+0x13a>
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	0252      	lsls	r2, r2, #9
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d802      	bhi.n	8002ed8 <UART_SetConfig+0x114>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <UART_SetConfig+0x126>
 8002ed6:	e01c      	b.n	8002f12 <UART_SetConfig+0x14e>
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	0292      	lsls	r2, r2, #10
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <UART_SetConfig+0x144>
 8002ee0:	22c0      	movs	r2, #192	; 0xc0
 8002ee2:	0292      	lsls	r2, r2, #10
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d005      	beq.n	8002ef4 <UART_SetConfig+0x130>
 8002ee8:	e013      	b.n	8002f12 <UART_SetConfig+0x14e>
 8002eea:	2317      	movs	r3, #23
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e02c      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002ef4:	2317      	movs	r3, #23
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e027      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002efe:	2317      	movs	r3, #23
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2204      	movs	r2, #4
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e022      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002f08:	2317      	movs	r3, #23
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e01d      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002f12:	2317      	movs	r3, #23
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2210      	movs	r2, #16
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	e017      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a82      	ldr	r2, [pc, #520]	; (800312c <UART_SetConfig+0x368>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d104      	bne.n	8002f32 <UART_SetConfig+0x16e>
 8002f28:	2317      	movs	r3, #23
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e00d      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7e      	ldr	r2, [pc, #504]	; (8003130 <UART_SetConfig+0x36c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d104      	bne.n	8002f46 <UART_SetConfig+0x182>
 8002f3c:	2317      	movs	r3, #23
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e003      	b.n	8002f4e <UART_SetConfig+0x18a>
 8002f46:	2317      	movs	r3, #23
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d000      	beq.n	8002f5c <UART_SetConfig+0x198>
 8002f5a:	e077      	b.n	800304c <UART_SetConfig+0x288>
  {
    switch (clocksource)
 8002f5c:	2317      	movs	r3, #23
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d01c      	beq.n	8002fa0 <UART_SetConfig+0x1dc>
 8002f66:	dc02      	bgt.n	8002f6e <UART_SetConfig+0x1aa>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <UART_SetConfig+0x1b4>
 8002f6c:	e04f      	b.n	800300e <UART_SetConfig+0x24a>
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d027      	beq.n	8002fc2 <UART_SetConfig+0x1fe>
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d039      	beq.n	8002fea <UART_SetConfig+0x226>
 8002f76:	e04a      	b.n	800300e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f78:	f7ff f992 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	005a      	lsls	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	18d2      	adds	r2, r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	0010      	movs	r0, r2
 8002f90:	f7fd f8ba 	bl	8000108 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	001a      	movs	r2, r3
 8002f98:	2314      	movs	r3, #20
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	801a      	strh	r2, [r3, #0]
        break;
 8002f9e:	e03b      	b.n	8003018 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	4a63      	ldr	r2, [pc, #396]	; (8003134 <UART_SetConfig+0x370>)
 8002fa8:	189a      	adds	r2, r3, r2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	0019      	movs	r1, r3
 8002fb0:	0010      	movs	r0, r2
 8002fb2:	f7fd f8a9 	bl	8000108 <__udivsi3>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2314      	movs	r3, #20
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	801a      	strh	r2, [r3, #0]
        break;
 8002fc0:	e02a      	b.n	8003018 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fc2:	f7ff f8e5 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	005a      	lsls	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	18d2      	adds	r2, r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	0010      	movs	r0, r2
 8002fda:	f7fd f895 	bl	8000108 <__udivsi3>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	2314      	movs	r3, #20
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	801a      	strh	r2, [r3, #0]
        break;
 8002fe8:	e016      	b.n	8003018 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	0252      	lsls	r2, r2, #9
 8002ff4:	189a      	adds	r2, r3, r2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f7fd f883 	bl	8000108 <__udivsi3>
 8003002:	0003      	movs	r3, r0
 8003004:	001a      	movs	r2, r3
 8003006:	2314      	movs	r3, #20
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	801a      	strh	r2, [r3, #0]
        break;
 800300c:	e004      	b.n	8003018 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800300e:	2313      	movs	r3, #19
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
        break;
 8003016:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003018:	200a      	movs	r0, #10
 800301a:	183b      	adds	r3, r7, r0
 800301c:	2414      	movs	r4, #20
 800301e:	193a      	adds	r2, r7, r4
 8003020:	8812      	ldrh	r2, [r2, #0]
 8003022:	210f      	movs	r1, #15
 8003024:	438a      	bics	r2, r1
 8003026:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003028:	193b      	adds	r3, r7, r4
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	105b      	asrs	r3, r3, #1
 800302e:	b29b      	uxth	r3, r3
 8003030:	2207      	movs	r2, #7
 8003032:	4013      	ands	r3, r2
 8003034:	b299      	uxth	r1, r3
 8003036:	183b      	adds	r3, r7, r0
 8003038:	183a      	adds	r2, r7, r0
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	183a      	adds	r2, r7, r0
 8003046:	8812      	ldrh	r2, [r2, #0]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e05b      	b.n	8003104 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 800304c:	2317      	movs	r3, #23
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d01b      	beq.n	800308e <UART_SetConfig+0x2ca>
 8003056:	dc02      	bgt.n	800305e <UART_SetConfig+0x29a>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <UART_SetConfig+0x2a4>
 800305c:	e04d      	b.n	80030fa <UART_SetConfig+0x336>
 800305e:	2b04      	cmp	r3, #4
 8003060:	d026      	beq.n	80030b0 <UART_SetConfig+0x2ec>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d037      	beq.n	80030d6 <UART_SetConfig+0x312>
 8003066:	e048      	b.n	80030fa <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003068:	f7ff f91a 	bl	80022a0 <HAL_RCC_GetPCLK1Freq>
 800306c:	0002      	movs	r2, r0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	18d2      	adds	r2, r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	0019      	movs	r1, r3
 800307c:	0010      	movs	r0, r2
 800307e:	f7fd f843 	bl	8000108 <__udivsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60da      	str	r2, [r3, #12]
        break;
 800308c:	e03a      	b.n	8003104 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	4a28      	ldr	r2, [pc, #160]	; (8003138 <UART_SetConfig+0x374>)
 8003096:	189a      	adds	r2, r3, r2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0019      	movs	r1, r3
 800309e:	0010      	movs	r0, r2
 80030a0:	f7fd f832 	bl	8000108 <__udivsi3>
 80030a4:	0003      	movs	r3, r0
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60da      	str	r2, [r3, #12]
        break;
 80030ae:	e029      	b.n	8003104 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030b0:	f7ff f86e 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80030b4:	0002      	movs	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	18d2      	adds	r2, r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f7fd f81f 	bl	8000108 <__udivsi3>
 80030ca:	0003      	movs	r3, r0
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
        break;
 80030d4:	e016      	b.n	8003104 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	0212      	lsls	r2, r2, #8
 80030e0:	189a      	adds	r2, r3, r2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0019      	movs	r1, r3
 80030e8:	0010      	movs	r0, r2
 80030ea:	f7fd f80d 	bl	8000108 <__udivsi3>
 80030ee:	0003      	movs	r3, r0
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60da      	str	r2, [r3, #12]
        break;
 80030f8:	e004      	b.n	8003104 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80030fa:	2313      	movs	r3, #19
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
        break;
 8003102:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003104:	2313      	movs	r3, #19
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]

}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b007      	add	sp, #28
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	efff69f3 	.word	0xefff69f3
 8003118:	ffffcfff 	.word	0xffffcfff
 800311c:	fffff4ff 	.word	0xfffff4ff
 8003120:	40013800 	.word	0x40013800
 8003124:	40021000 	.word	0x40021000
 8003128:	40004400 	.word	0x40004400
 800312c:	40004800 	.word	0x40004800
 8003130:	40004c00 	.word	0x40004c00
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2201      	movs	r2, #1
 800314a:	4013      	ands	r3, r2
 800314c:	d00b      	beq.n	8003166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <UART_AdvFeatureConfig+0x144>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2202      	movs	r2, #2
 800316c:	4013      	ands	r3, r2
 800316e:	d00b      	beq.n	8003188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a43      	ldr	r2, [pc, #268]	; (8003284 <UART_AdvFeatureConfig+0x148>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2204      	movs	r2, #4
 800318e:	4013      	ands	r3, r2
 8003190:	d00b      	beq.n	80031aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a3b      	ldr	r2, [pc, #236]	; (8003288 <UART_AdvFeatureConfig+0x14c>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2208      	movs	r2, #8
 80031b0:	4013      	ands	r3, r2
 80031b2:	d00b      	beq.n	80031cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4a34      	ldr	r2, [pc, #208]	; (800328c <UART_AdvFeatureConfig+0x150>)
 80031bc:	4013      	ands	r3, r2
 80031be:	0019      	movs	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2210      	movs	r2, #16
 80031d2:	4013      	ands	r3, r2
 80031d4:	d00b      	beq.n	80031ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <UART_AdvFeatureConfig+0x154>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2220      	movs	r2, #32
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00b      	beq.n	8003210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <UART_AdvFeatureConfig+0x158>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2240      	movs	r2, #64	; 0x40
 8003216:	4013      	ands	r3, r2
 8003218:	d01d      	beq.n	8003256 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <UART_AdvFeatureConfig+0x15c>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	035b      	lsls	r3, r3, #13
 800323a:	429a      	cmp	r2, r3
 800323c:	d10b      	bne.n	8003256 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a15      	ldr	r2, [pc, #84]	; (800329c <UART_AdvFeatureConfig+0x160>)
 8003246:	4013      	ands	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	4013      	ands	r3, r2
 800325e:	d00b      	beq.n	8003278 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <UART_AdvFeatureConfig+0x164>)
 8003268:	4013      	ands	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}
 8003280:	fffdffff 	.word	0xfffdffff
 8003284:	fffeffff 	.word	0xfffeffff
 8003288:	fffbffff 	.word	0xfffbffff
 800328c:	ffff7fff 	.word	0xffff7fff
 8003290:	ffffefff 	.word	0xffffefff
 8003294:	ffffdfff 	.word	0xffffdfff
 8003298:	ffefffff 	.word	0xffefffff
 800329c:	ff9fffff 	.word	0xff9fffff
 80032a0:	fff7ffff 	.word	0xfff7ffff

080032a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032b6:	f7fe f81b 	bl	80012f0 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a21      	ldr	r2, [pc, #132]	; (8003348 <UART_CheckIdleState+0xa4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <UART_CheckIdleState+0x2e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	; (800334c <UART_CheckIdleState+0xa8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d129      	bne.n	8003326 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2208      	movs	r2, #8
 80032da:	4013      	ands	r3, r2
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d10d      	bne.n	80032fc <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	0399      	lsls	r1, r3, #14
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <UART_CheckIdleState+0xac>)
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	0013      	movs	r3, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	f000 f830 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e021      	b.n	8003340 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	2b04      	cmp	r3, #4
 8003308:	d10d      	bne.n	8003326 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	03d9      	lsls	r1, r3, #15
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <UART_CheckIdleState+0xac>)
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	0013      	movs	r3, r2
 8003318:	2200      	movs	r2, #0
 800331a:	f000 f81b 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e00c      	b.n	8003340 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2269      	movs	r2, #105	; 0x69
 800332a:	2120      	movs	r1, #32
 800332c:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	226a      	movs	r2, #106	; 0x6a
 8003332:	2120      	movs	r1, #32
 8003334:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2268      	movs	r2, #104	; 0x68
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b004      	add	sp, #16
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40013800 	.word	0x40013800
 800334c:	40004400 	.word	0x40004400
 8003350:	01ffffff 	.word	0x01ffffff

08003354 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003364:	e02b      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3301      	adds	r3, #1
 800336a:	d028      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003372:	f7fd ffbd 	bl	80012f0 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	429a      	cmp	r2, r3
 8003380:	d21d      	bcs.n	80033be <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4916      	ldr	r1, [pc, #88]	; (80033e8 <UART_WaitOnFlagUntilTimeout+0x94>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	438a      	bics	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2269      	movs	r2, #105	; 0x69
 80033a6:	2120      	movs	r1, #32
 80033a8:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	226a      	movs	r2, #106	; 0x6a
 80033ae:	2120      	movs	r1, #32
 80033b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2268      	movs	r2, #104	; 0x68
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e00f      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	425a      	negs	r2, r3
 80033ce:	4153      	adcs	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	001a      	movs	r2, r3
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d0c4      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	0018      	movs	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b004      	add	sp, #16
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	fffffe5f 	.word	0xfffffe5f

080033ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	b0f7      	sub	sp, #476	; 0x1dc
 80033f0:	af08      	add	r7, sp, #32
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033f2:	f7fd ff41 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033f6:	f000 faa7 	bl	8003948 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033fa:	f000 fbe1 	bl	8003bc0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80033fe:	f000 fbab 	bl	8003b58 <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8003402:	f000 fb01 	bl	8003a08 <_ZL12MX_SPI2_Initv>
  MX_TIM6_Init();
 8003406:	f000 fb57 	bl	8003ab8 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  TFT_GFX tftDisplay{hspi2.Instance};
 800340a:	4bd7      	ldr	r3, [pc, #860]	; (8003768 <main+0x37c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	24aa      	movs	r4, #170	; 0xaa
 8003410:	0064      	lsls	r4, r4, #1
 8003412:	193b      	adds	r3, r7, r4
 8003414:	0011      	movs	r1, r2
 8003416:	0018      	movs	r0, r3
 8003418:	f001 fa2f 	bl	800487a <_ZN7TFT_GFXC1EP11SPI_TypeDef>
  const uint16_t backgroundColor = ILI9341_BLACK;
 800341c:	23d9      	movs	r3, #217	; 0xd9
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]
  const uint16_t fontColor = ILI9341_DARK_ORANGE;
 8003426:	23d8      	movs	r3, #216	; 0xd8
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	4acf      	ldr	r2, [pc, #828]	; (800376c <main+0x380>)
 800342e:	801a      	strh	r2, [r3, #0]
  const uint16_t lineColor = ILI9341_DARK_ORANGE;
 8003430:	23d7      	movs	r3, #215	; 0xd7
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	4acd      	ldr	r2, [pc, #820]	; (800376c <main+0x380>)
 8003438:	801a      	strh	r2, [r3, #0]
  const uint16_t lineThickness = 5;
 800343a:	23d6      	movs	r3, #214	; 0xd6
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2205      	movs	r2, #5
 8003442:	801a      	strh	r2, [r3, #0]
  const uint8_t chosenStatesFontSize = 2;
 8003444:	23ac      	movs	r3, #172	; 0xac
 8003446:	33ff      	adds	r3, #255	; 0xff
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
  const uint8_t stateSelectorFontSize = 3;
 800344e:	23d5      	movs	r3, #213	; 0xd5
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2203      	movs	r2, #3
 8003456:	701a      	strb	r2, [r3, #0]
  tftDisplay.setRotation(0);
 8003458:	193b      	adds	r3, r7, r4
 800345a:	2100      	movs	r1, #0
 800345c:	0018      	movs	r0, r3
 800345e:	f002 f842 	bl	80054e6 <_ZN7TFT_GFX11setRotationEh>
  //Set background to correct color and add outline
  GUI_API::drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
 8003462:	49c3      	ldr	r1, [pc, #780]	; (8003770 <main+0x384>)
 8003464:	4ac2      	ldr	r2, [pc, #776]	; (8003770 <main+0x384>)
 8003466:	1938      	adds	r0, r7, r4
 8003468:	2305      	movs	r3, #5
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	000b      	movs	r3, r1
 800346e:	2100      	movs	r1, #0
 8003470:	f002 fba8 	bl	8005bc4 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>
  //Create and set all the text boxes
  TFT_TEXT_BOX instructionBox{&tftDisplay,backgroundColor,lineThickness + 8, lineThickness + 8, (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8003474:	193b      	adds	r3, r7, r4
 8003476:	0018      	movs	r0, r3
 8003478:	f002 f887 	bl	800558a <_ZN7TFT_GFX5widthEv>
 800347c:	0003      	movs	r3, r0
 800347e:	3b0d      	subs	r3, #13
 8003480:	b29b      	uxth	r3, r3
 8003482:	b21b      	sxth	r3, r3
 8003484:	0025      	movs	r5, r4
 8003486:	1939      	adds	r1, r7, r4
 8003488:	26a0      	movs	r6, #160	; 0xa0
 800348a:	0076      	lsls	r6, r6, #1
 800348c:	19b8      	adds	r0, r7, r6
 800348e:	2200      	movs	r2, #0
 8003490:	9202      	str	r2, [sp, #8]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	230d      	movs	r3, #13
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	230d      	movs	r3, #13
 800349a:	2200      	movs	r2, #0
 800349c:	f002 fec3 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
  uint16_t bottomInstructionBox = instructionBox.write("*Hold OK button for 3 seconds to confirm selection.", fontColor, 1);
 80034a0:	23d4      	movs	r3, #212	; 0xd4
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	18fc      	adds	r4, r7, r3
 80034a6:	4ab2      	ldr	r2, [pc, #712]	; (8003770 <main+0x384>)
 80034a8:	49b2      	ldr	r1, [pc, #712]	; (8003774 <main+0x388>)
 80034aa:	19b8      	adds	r0, r7, r6
 80034ac:	2301      	movs	r3, #1
 80034ae:	f002 ff2e 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80034b2:	0003      	movs	r3, r0
 80034b4:	8023      	strh	r3, [r4, #0]
  TFT_TEXT_BOX mainTitle{&tftDisplay,backgroundColor,lineThickness + 8, (uint16_t)(bottomInstructionBox + 10),(int16_t)(tftDisplay.width() - lineThickness - 8), false};
 80034b6:	23d4      	movs	r3, #212	; 0xd4
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	330a      	adds	r3, #10
 80034c0:	b29c      	uxth	r4, r3
 80034c2:	197b      	adds	r3, r7, r5
 80034c4:	0018      	movs	r0, r3
 80034c6:	f002 f860 	bl	800558a <_ZN7TFT_GFX5widthEv>
 80034ca:	0003      	movs	r3, r0
 80034cc:	3b0d      	subs	r3, #13
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	1979      	adds	r1, r7, r5
 80034d4:	2696      	movs	r6, #150	; 0x96
 80034d6:	0076      	lsls	r6, r6, #1
 80034d8:	19b8      	adds	r0, r7, r6
 80034da:	2200      	movs	r2, #0
 80034dc:	9202      	str	r2, [sp, #8]
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	9400      	str	r4, [sp, #0]
 80034e2:	230d      	movs	r3, #13
 80034e4:	2200      	movs	r2, #0
 80034e6:	f002 fe9e 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
  uint16_t bottomMainTitle = mainTitle.write("State Selection: ", fontColor, 2);
 80034ea:	23d3      	movs	r3, #211	; 0xd3
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	18fc      	adds	r4, r7, r3
 80034f0:	4a9f      	ldr	r2, [pc, #636]	; (8003770 <main+0x384>)
 80034f2:	49a1      	ldr	r1, [pc, #644]	; (8003778 <main+0x38c>)
 80034f4:	19b8      	adds	r0, r7, r6
 80034f6:	2302      	movs	r3, #2
 80034f8:	f002 ff09 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
 80034fc:	0003      	movs	r3, r0
 80034fe:	8023      	strh	r3, [r4, #0]
  TFT_TEXT_BOX stateSelector{&tftDisplay, backgroundColor, lineThickness, (uint16_t)(bottomMainTitle + 25),(int16_t)(tftDisplay.width() - lineThickness), true};
 8003500:	23d3      	movs	r3, #211	; 0xd3
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	3319      	adds	r3, #25
 800350a:	b29c      	uxth	r4, r3
 800350c:	197b      	adds	r3, r7, r5
 800350e:	0018      	movs	r0, r3
 8003510:	f002 f83b 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8003514:	0003      	movs	r3, r0
 8003516:	3b05      	subs	r3, #5
 8003518:	b29b      	uxth	r3, r3
 800351a:	b21b      	sxth	r3, r3
 800351c:	1979      	adds	r1, r7, r5
 800351e:	228c      	movs	r2, #140	; 0x8c
 8003520:	0052      	lsls	r2, r2, #1
 8003522:	18b8      	adds	r0, r7, r2
 8003524:	2201      	movs	r2, #1
 8003526:	9202      	str	r2, [sp, #8]
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	9400      	str	r4, [sp, #0]
 800352c:	2305      	movs	r3, #5
 800352e:	2200      	movs	r2, #0
 8003530:	f002 fe79 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
  //Generate the chosenStates text boxes
  CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES];
 8003534:	2378      	movs	r3, #120	; 0x78
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	2404      	movs	r4, #4
 800353a:	001d      	movs	r5, r3
 800353c:	2c00      	cmp	r4, #0
 800353e:	db05      	blt.n	800354c <main+0x160>
 8003540:	0028      	movs	r0, r5
 8003542:	f002 fe21 	bl	8006188 <_ZN21CHOSEN_STATE_TEXT_BOXC1Ev>
 8003546:	3520      	adds	r5, #32
 8003548:	3c01      	subs	r4, #1
 800354a:	e7f7      	b.n	800353c <main+0x150>
  uint8_t statesSelected = 0;
 800354c:	4b8b      	ldr	r3, [pc, #556]	; (800377c <main+0x390>)
 800354e:	22dc      	movs	r2, #220	; 0xdc
 8003550:	0052      	lsls	r2, r2, #1
 8003552:	4694      	mov	ip, r2
 8003554:	44bc      	add	ip, r7
 8003556:	4463      	add	r3, ip
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < NUM_BOXES; i++)
 800355c:	23b8      	movs	r3, #184	; 0xb8
 800355e:	33ff      	adds	r3, #255	; 0xff
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	23b8      	movs	r3, #184	; 0xb8
 8003568:	33ff      	adds	r3, #255	; 0xff
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d900      	bls.n	8003574 <main+0x188>
 8003572:	e080      	b.n	8003676 <main+0x28a>
  {
	  uint16_t yPos = tftDisplay.height()/2.0f + (float)(2*i+1)*tftDisplay.height()/(2.0f* NUM_BOXES * 2.0f) - (chosenStatesFontSize * 8.0f)/2;
 8003574:	25aa      	movs	r5, #170	; 0xaa
 8003576:	006d      	lsls	r5, r5, #1
 8003578:	197b      	adds	r3, r7, r5
 800357a:	0018      	movs	r0, r3
 800357c:	f002 f80f 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8003580:	0003      	movs	r3, r0
 8003582:	0018      	movs	r0, r3
 8003584:	f7fd fd10 	bl	8000fa8 <__aeabi_i2f>
 8003588:	1c03      	adds	r3, r0, #0
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	05c9      	lsls	r1, r1, #23
 800358e:	1c18      	adds	r0, r3, #0
 8003590:	f7fd f8e2 	bl	8000758 <__aeabi_fdiv>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c1c      	adds	r4, r3, #0
 8003598:	26b8      	movs	r6, #184	; 0xb8
 800359a:	36ff      	adds	r6, #255	; 0xff
 800359c:	19bb      	adds	r3, r7, r6
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	3301      	adds	r3, #1
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fcff 	bl	8000fa8 <__aeabi_i2f>
 80035aa:	1c05      	adds	r5, r0, #0
 80035ac:	23aa      	movs	r3, #170	; 0xaa
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	0018      	movs	r0, r3
 80035b4:	f001 fff3 	bl	800559e <_ZN7TFT_GFX6heightEv>
 80035b8:	0003      	movs	r3, r0
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd fcf4 	bl	8000fa8 <__aeabi_i2f>
 80035c0:	1c03      	adds	r3, r0, #0
 80035c2:	1c19      	adds	r1, r3, #0
 80035c4:	1c28      	adds	r0, r5, #0
 80035c6:	f7fd f9d9 	bl	800097c <__aeabi_fmul>
 80035ca:	1c03      	adds	r3, r0, #0
 80035cc:	496c      	ldr	r1, [pc, #432]	; (8003780 <main+0x394>)
 80035ce:	1c18      	adds	r0, r3, #0
 80035d0:	f7fd f8c2 	bl	8000758 <__aeabi_fdiv>
 80035d4:	1c03      	adds	r3, r0, #0
 80035d6:	1c19      	adds	r1, r3, #0
 80035d8:	1c20      	adds	r0, r4, #0
 80035da:	f7fc ff23 	bl	8000424 <__aeabi_fadd>
 80035de:	1c03      	adds	r3, r0, #0
 80035e0:	2182      	movs	r1, #130	; 0x82
 80035e2:	05c9      	lsls	r1, r1, #23
 80035e4:	1c18      	adds	r0, r3, #0
 80035e6:	f7fd fafb 	bl	8000be0 <__aeabi_fsub>
 80035ea:	1c03      	adds	r3, r0, #0
 80035ec:	22d2      	movs	r2, #210	; 0xd2
 80035ee:	0052      	lsls	r2, r2, #1
 80035f0:	18bc      	adds	r4, r7, r2
 80035f2:	1c18      	adds	r0, r3, #0
 80035f4:	f7fc fefe 	bl	80003f4 <__aeabi_f2uiz>
 80035f8:	0003      	movs	r3, r0
 80035fa:	8023      	strh	r3, [r4, #0]
	  chosenStates[i] = CHOSEN_STATE_TEXT_BOX{(uint8_t)(i+1), fontColor, chosenStatesFontSize, TFT_TEXT_BOX{&tftDisplay, backgroundColor, lineThickness + 8, yPos,(int16_t)(tftDisplay.width() - lineThickness - 8), false}};
 80035fc:	19bb      	adds	r3, r7, r6
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	b2dc      	uxtb	r4, r3
 8003604:	25aa      	movs	r5, #170	; 0xaa
 8003606:	006d      	lsls	r5, r5, #1
 8003608:	197b      	adds	r3, r7, r5
 800360a:	0018      	movs	r0, r3
 800360c:	f001 ffbd 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8003610:	0003      	movs	r3, r0
 8003612:	3b0d      	subs	r3, #13
 8003614:	b29b      	uxth	r3, r3
 8003616:	b21b      	sxth	r3, r3
 8003618:	1979      	adds	r1, r7, r5
 800361a:	25be      	movs	r5, #190	; 0xbe
 800361c:	006d      	lsls	r5, r5, #1
 800361e:	1978      	adds	r0, r7, r5
 8003620:	2200      	movs	r2, #0
 8003622:	9202      	str	r2, [sp, #8]
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	22d2      	movs	r2, #210	; 0xd2
 8003628:	0052      	lsls	r2, r2, #1
 800362a:	18bb      	adds	r3, r7, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	230d      	movs	r3, #13
 8003632:	2200      	movs	r2, #0
 8003634:	f002 fdf7 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
 8003638:	4a4d      	ldr	r2, [pc, #308]	; (8003770 <main+0x384>)
 800363a:	23ae      	movs	r3, #174	; 0xae
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	18f8      	adds	r0, r7, r3
 8003640:	197b      	adds	r3, r7, r5
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2302      	movs	r3, #2
 8003646:	0021      	movs	r1, r4
 8003648:	f002 fd72 	bl	8006130 <_ZN21CHOSEN_STATE_TEXT_BOXC1EhthRK12TFT_TEXT_BOX>
 800364c:	19bb      	adds	r3, r7, r6
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2278      	movs	r2, #120	; 0x78
 8003652:	18ba      	adds	r2, r7, r2
 8003654:	015b      	lsls	r3, r3, #5
 8003656:	18d2      	adds	r2, r2, r3
 8003658:	23ae      	movs	r3, #174	; 0xae
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	0010      	movs	r0, r2
 8003660:	0019      	movs	r1, r3
 8003662:	231d      	movs	r3, #29
 8003664:	001a      	movs	r2, r3
 8003666:	f002 ff23 	bl	80064b0 <memcpy>
  for(uint8_t i = 0; i < NUM_BOXES; i++)
 800366a:	19bb      	adds	r3, r7, r6
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	19bb      	adds	r3, r7, r6
 8003670:	3201      	adds	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e777      	b.n	8003566 <main+0x17a>
  }
  stateSelector.write(stateNames[0], fontColor, stateSelectorFontSize);
 8003676:	4943      	ldr	r1, [pc, #268]	; (8003784 <main+0x398>)
 8003678:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <main+0x384>)
 800367a:	248c      	movs	r4, #140	; 0x8c
 800367c:	0064      	lsls	r4, r4, #1
 800367e:	1938      	adds	r0, r7, r4
 8003680:	2303      	movs	r3, #3
 8003682:	f002 fe44 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
  //Initialize debouncer for buttons
  SW_DEBOUNCE okButton{ENC_OK_GPIO_Port, ENC_OK_Pin, 2, 8, htim6.Instance};
 8003686:	4b40      	ldr	r3, [pc, #256]	; (8003788 <main+0x39c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	493f      	ldr	r1, [pc, #252]	; (800378c <main+0x3a0>)
 8003690:	254c      	movs	r5, #76	; 0x4c
 8003692:	1978      	adds	r0, r7, r5
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2308      	movs	r3, #8
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2302      	movs	r3, #2
 800369c:	f000 ff8e 	bl	80045bc <_ZN11SW_DEBOUNCEC1EP12GPIO_TypeDeftmhP11TIM_TypeDef>
  okButtonPtr = &okButton;
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <main+0x3a4>)
 80036a2:	197a      	adds	r2, r7, r5
 80036a4:	601a      	str	r2, [r3, #0]
  SW_DEBOUNCE cancelButton{BTN_CANCEL_Port, BTN_CANCEL_Pin, 2, 8, htim6.Instance};
 80036a6:	4b38      	ldr	r3, [pc, #224]	; (8003788 <main+0x39c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	0152      	lsls	r2, r2, #5
 80036ae:	4937      	ldr	r1, [pc, #220]	; (800378c <main+0x3a0>)
 80036b0:	2524      	movs	r5, #36	; 0x24
 80036b2:	1978      	adds	r0, r7, r5
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	2308      	movs	r3, #8
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2302      	movs	r3, #2
 80036bc:	f000 ff7e 	bl	80045bc <_ZN11SW_DEBOUNCEC1EP12GPIO_TypeDeftmhP11TIM_TypeDef>
  cancelButtonPtr = &cancelButton;
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <main+0x3a8>)
 80036c2:	197a      	adds	r2, r7, r5
 80036c4:	601a      	str	r2, [r3, #0]
  //Start timer after initializing all buttons
  htim6.Instance->CR1 |= TIM_CR1_CEN;
 80036c6:	4b30      	ldr	r3, [pc, #192]	; (8003788 <main+0x39c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <main+0x39c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2101      	movs	r1, #1
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
  //Initialize Rotary Encoder
  SELECTION_ENCODER stateEncoder{1, &stateSelector, fontColor, stateSelectorFontSize, stateNames, NUM_NAMES, chosenStates, NUM_BOXES};
 80036d6:	4926      	ldr	r1, [pc, #152]	; (8003770 <main+0x384>)
 80036d8:	193a      	adds	r2, r7, r4
 80036da:	0038      	movs	r0, r7
 80036dc:	2305      	movs	r3, #5
 80036de:	9304      	str	r3, [sp, #16]
 80036e0:	2378      	movs	r3, #120	; 0x78
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	9303      	str	r3, [sp, #12]
 80036e6:	2332      	movs	r3, #50	; 0x32
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <main+0x3ac>)
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2303      	movs	r3, #3
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	000b      	movs	r3, r1
 80036f4:	2101      	movs	r1, #1
 80036f6:	f000 fe3f 	bl	8004378 <_ZN17SELECTION_ENCODERC1EhP12TFT_TEXT_BOXthPKPKctP21CHOSEN_STATE_TEXT_BOXh>
  encoderPtr = &stateEncoder;
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <main+0x3b0>)
 80036fc:	003a      	movs	r2, r7
 80036fe:	601a      	str	r2, [r3, #0]
  //Now enable interrupts for the rotary encoder and debouncer
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003700:	2007      	movs	r0, #7
 8003702:	f7fd feda 	bl	80014ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003706:	2011      	movs	r0, #17
 8003708:	f7fd fed7 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  OVERALL_STATES ovState = OVERALL_STATES::SELECTING;
 800370c:	23db      	movs	r3, #219	; 0xdb
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
  SORTING_STATES soState = SORTING_STATES::MOVE_BASE_MOTOR;
 8003716:	23a4      	movs	r3, #164	; 0xa4
 8003718:	33ff      	adds	r3, #255	; 0xff
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
  CANCEL_STATES caState = CANCEL_STATES::NO_CANCEL;
 8003720:	23b6      	movs	r3, #182	; 0xb6
 8003722:	33ff      	adds	r3, #255	; 0xff
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ovState == OVERALL_STATES::SELECTING)
 800372a:	23db      	movs	r3, #219	; 0xdb
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d000      	beq.n	8003738 <main+0x34c>
 8003736:	e077      	b.n	8003828 <main+0x43c>
	  {
		SWITCH_STATE okButtonState = okButton.getCurrentState();
 8003738:	234c      	movs	r3, #76	; 0x4c
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	0018      	movs	r0, r3
 800373e:	f000 ffe9 	bl	8004714 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 8003742:	0003      	movs	r3, r0
 8003744:	22ca      	movs	r2, #202	; 0xca
 8003746:	0052      	lsls	r2, r2, #1
 8003748:	18b9      	adds	r1, r7, r2
 800374a:	600b      	str	r3, [r1, #0]
		if(okButtonState == SWITCH_STATE::SHORT_PRESS)
 800374c:	18bb      	adds	r3, r7, r2
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d125      	bne.n	80037a0 <main+0x3b4>
		{
			GUI_API::printCurrentState(chosenStates, statesSelected, encoderPtr);
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <main+0x3b0>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2377      	movs	r3, #119	; 0x77
 800375a:	18f9      	adds	r1, r7, r3
 800375c:	2378      	movs	r3, #120	; 0x78
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	0018      	movs	r0, r3
 8003762:	f002 fb19 	bl	8005d98 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER>
 8003766:	e048      	b.n	80037fa <main+0x40e>
 8003768:	20000088 	.word	0x20000088
 800376c:	fffffc60 	.word	0xfffffc60
 8003770:	0000fc60 	.word	0x0000fc60
 8003774:	08006fcc 	.word	0x08006fcc
 8003778:	08007000 	.word	0x08007000
 800377c:	fffffebf 	.word	0xfffffebf
 8003780:	41a00000 	.word	0x41a00000
 8003784:	08006d9c 	.word	0x08006d9c
 8003788:	200000ec 	.word	0x200000ec
 800378c:	48000800 	.word	0x48000800
 8003790:	200001a0 	.word	0x200001a0
 8003794:	200001a4 	.word	0x200001a4
 8003798:	08007418 	.word	0x08007418
 800379c:	2000019c 	.word	0x2000019c
		}else if(okButtonState == SWITCH_STATE::THREE_SECOND_PRESS)
 80037a0:	23ca      	movs	r3, #202	; 0xca
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a64      	ldr	r2, [pc, #400]	; (800393c <main+0x550>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d125      	bne.n	80037fa <main+0x40e>
		{
			GUI_API::displayInProgress(tftDisplay, instructionBox, lineThickness, lineColor, backgroundColor, fontColor);
 80037ae:	4a64      	ldr	r2, [pc, #400]	; (8003940 <main+0x554>)
 80037b0:	23a0      	movs	r3, #160	; 0xa0
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	18f9      	adds	r1, r7, r3
 80037b6:	23aa      	movs	r3, #170	; 0xaa
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	18f8      	adds	r0, r7, r3
 80037bc:	4b60      	ldr	r3, [pc, #384]	; (8003940 <main+0x554>)
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2300      	movs	r3, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	0013      	movs	r3, r2
 80037c6:	2205      	movs	r2, #5
 80037c8:	f002 fb3a 	bl	8005e40 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt>
			UI_API::disableEncoder(ENC_A_Pin, ENC_B_Pin);
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	021a      	lsls	r2, r3, #8
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f002 f990 	bl	8005afc <_ZN6UI_API14disableEncoderEtt>
			ovState = OVERALL_STATES::SORTING;
 80037dc:	23db      	movs	r3, #219	; 0xdb
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
			soState = SORTING_STATES::MOVE_BASE_MOTOR;
 80037e6:	23a4      	movs	r3, #164	; 0xa4
 80037e8:	33ff      	adds	r3, #255	; 0xff
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
			caState = CANCEL_STATES::NO_CANCEL;
 80037f0:	23b6      	movs	r3, #182	; 0xb6
 80037f2:	33ff      	adds	r3, #255	; 0xff
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
		}
		SWITCH_STATE cancelButtonState = cancelButton.getCurrentState();
 80037fa:	2324      	movs	r3, #36	; 0x24
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 ff88 	bl	8004714 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 8003804:	0003      	movs	r3, r0
 8003806:	22c8      	movs	r2, #200	; 0xc8
 8003808:	0052      	lsls	r2, r2, #1
 800380a:	18b9      	adds	r1, r7, r2
 800380c:	600b      	str	r3, [r1, #0]
		if(cancelButtonState >= SWITCH_STATE::SHORT_PRESS)
 800380e:	18bb      	adds	r3, r7, r2
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	dd89      	ble.n	800372a <main+0x33e>
		{
			GUI_API::clearCurrentState(chosenStates, statesSelected);
 8003816:	2377      	movs	r3, #119	; 0x77
 8003818:	18fa      	adds	r2, r7, r3
 800381a:	2378      	movs	r3, #120	; 0x78
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f002 fae9 	bl	8005df8 <_ZN7GUI_API17clearCurrentStateEP21CHOSEN_STATE_TEXT_BOXRh>
 8003826:	e780      	b.n	800372a <main+0x33e>
		}
	  }else if(ovState == OVERALL_STATES::SORTING)
 8003828:	23db      	movs	r3, #219	; 0xdb
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d000      	beq.n	8003836 <main+0x44a>
 8003834:	e779      	b.n	800372a <main+0x33e>
		}else if(soState == SORTING_STATES::TAKE_PICTURES)
		{

		}
		//Can cancel in any soState
		if(caState == CANCEL_STATES::CONFIRM_CANCEL)
 8003836:	23b6      	movs	r3, #182	; 0xb6
 8003838:	33ff      	adds	r3, #255	; 0xff
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d158      	bne.n	80038f4 <main+0x508>
		{
			SWITCH_STATE cancelButtonState = cancelButton.getCurrentState();
 8003842:	2324      	movs	r3, #36	; 0x24
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	0018      	movs	r0, r3
 8003848:	f000 ff64 	bl	8004714 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 800384c:	0003      	movs	r3, r0
 800384e:	22cc      	movs	r2, #204	; 0xcc
 8003850:	0052      	lsls	r2, r2, #1
 8003852:	18b9      	adds	r1, r7, r2
 8003854:	600b      	str	r3, [r1, #0]
			if(cancelButtonState == SWITCH_STATE::SHORT_PRESS)
 8003856:	18bb      	adds	r3, r7, r2
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10d      	bne.n	800387a <main+0x48e>
			{
				//Cancel the cancel
				GUI_API::removeConfirmQuit(tftDisplay, lineThickness, backgroundColor);
 800385e:	23aa      	movs	r3, #170	; 0xaa
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2200      	movs	r2, #0
 8003866:	2105      	movs	r1, #5
 8003868:	0018      	movs	r0, r3
 800386a:	f002 fc09 	bl	8006080 <_ZN7GUI_API17removeConfirmQuitER7TFT_GFXtt>
				caState = CANCEL_STATES::NO_CANCEL;
 800386e:	23b6      	movs	r3, #182	; 0xb6
 8003870:	33ff      	adds	r3, #255	; 0xff
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e757      	b.n	800372a <main+0x33e>
			}else if(cancelButtonState == SWITCH_STATE::THREE_SECOND_PRESS)
 800387a:	23cc      	movs	r3, #204	; 0xcc
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2e      	ldr	r2, [pc, #184]	; (800393c <main+0x550>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d000      	beq.n	800388a <main+0x49e>
 8003888:	e74f      	b.n	800372a <main+0x33e>
			{
				//Go back to selecting states
				ovState = OVERALL_STATES::SELECTING;
 800388a:	23db      	movs	r3, #219	; 0xdb
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
				GUI_API::resetSelectionGUI(tftDisplay, instructionBox, mainTitle, stateSelector,chosenStates, backgroundColor,
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <main+0x558>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	228c      	movs	r2, #140	; 0x8c
 800389a:	0052      	lsls	r2, r2, #1
 800389c:	18bc      	adds	r4, r7, r2
 800389e:	2296      	movs	r2, #150	; 0x96
 80038a0:	0052      	lsls	r2, r2, #1
 80038a2:	18ba      	adds	r2, r7, r2
 80038a4:	21a0      	movs	r1, #160	; 0xa0
 80038a6:	0049      	lsls	r1, r1, #1
 80038a8:	1879      	adds	r1, r7, r1
 80038aa:	20aa      	movs	r0, #170	; 0xaa
 80038ac:	0040      	lsls	r0, r0, #1
 80038ae:	1838      	adds	r0, r7, r0
 80038b0:	9307      	str	r3, [sp, #28]
 80038b2:	2377      	movs	r3, #119	; 0x77
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	9306      	str	r3, [sp, #24]
 80038b8:	2303      	movs	r3, #3
 80038ba:	9305      	str	r3, [sp, #20]
 80038bc:	2305      	movs	r3, #5
 80038be:	9304      	str	r3, [sp, #16]
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <main+0x554>)
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <main+0x554>)
 80038c6:	9302      	str	r3, [sp, #8]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	2378      	movs	r3, #120	; 0x78
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	0023      	movs	r3, r4
 80038d4:	f002 f92e 	bl	8005b34 <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER>
						fontColor, lineColor, lineThickness, stateSelectorFontSize, statesSelected, encoderPtr);
				UI_API::enableEncoder(ENC_A_Pin, ENC_B_Pin);
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	021a      	lsls	r2, r3, #8
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f002 f8ee 	bl	8005ac4 <_ZN6UI_API13enableEncoderEtt>
				//Consume the last button press
				okButton.getCurrentState();
 80038e8:	234c      	movs	r3, #76	; 0x4c
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 ff11 	bl	8004714 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 80038f2:	e71a      	b.n	800372a <main+0x33e>
			}
		}else if(caState == CANCEL_STATES::NO_CANCEL)
 80038f4:	23b6      	movs	r3, #182	; 0xb6
 80038f6:	33ff      	adds	r3, #255	; 0xff
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d000      	beq.n	8003902 <main+0x516>
 8003900:	e713      	b.n	800372a <main+0x33e>
		{
			SWITCH_STATE cancelButtonState = cancelButton.getCurrentState();
 8003902:	2324      	movs	r3, #36	; 0x24
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	0018      	movs	r0, r3
 8003908:	f000 ff04 	bl	8004714 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 800390c:	0003      	movs	r3, r0
 800390e:	22ce      	movs	r2, #206	; 0xce
 8003910:	0052      	lsls	r2, r2, #1
 8003912:	18b9      	adds	r1, r7, r2
 8003914:	600b      	str	r3, [r1, #0]
			if(cancelButtonState >= SWITCH_STATE::SHORT_PRESS)
 8003916:	18bb      	adds	r3, r7, r2
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	dc00      	bgt.n	8003920 <main+0x534>
 800391e:	e704      	b.n	800372a <main+0x33e>
			{
				GUI_API::addConfirmQuit(tftDisplay, lineThickness, fontColor, backgroundColor);
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <main+0x554>)
 8003922:	23aa      	movs	r3, #170	; 0xaa
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	18f8      	adds	r0, r7, r3
 8003928:	2300      	movs	r3, #0
 800392a:	2105      	movs	r1, #5
 800392c:	f002 fb1c 	bl	8005f68 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt>
				caState = CANCEL_STATES::CONFIRM_CANCEL;
 8003930:	23b6      	movs	r3, #182	; 0xb6
 8003932:	33ff      	adds	r3, #255	; 0xff
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
			}
		}
	  }
  }
 800393a:	e6f6      	b.n	800372a <main+0x33e>
 800393c:	00000bb8 	.word	0x00000bb8
 8003940:	0000fc60 	.word	0x0000fc60
 8003944:	2000019c 	.word	0x2000019c

08003948 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b099      	sub	sp, #100	; 0x64
 800394c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394e:	242c      	movs	r4, #44	; 0x2c
 8003950:	193b      	adds	r3, r7, r4
 8003952:	0018      	movs	r0, r3
 8003954:	2334      	movs	r3, #52	; 0x34
 8003956:	001a      	movs	r2, r3
 8003958:	2100      	movs	r1, #0
 800395a:	f002 fdb2 	bl	80064c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800395e:	231c      	movs	r3, #28
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	0018      	movs	r0, r3
 8003964:	2310      	movs	r3, #16
 8003966:	001a      	movs	r2, r3
 8003968:	2100      	movs	r1, #0
 800396a:	f002 fdaa 	bl	80064c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800396e:	003b      	movs	r3, r7
 8003970:	0018      	movs	r0, r3
 8003972:	231c      	movs	r3, #28
 8003974:	001a      	movs	r2, r3
 8003976:	2100      	movs	r1, #0
 8003978:	f002 fda3 	bl	80064c2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800397c:	193b      	adds	r3, r7, r4
 800397e:	2220      	movs	r2, #32
 8003980:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003982:	193b      	adds	r3, r7, r4
 8003984:	2201      	movs	r2, #1
 8003986:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003988:	193b      	adds	r3, r7, r4
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800398e:	193b      	adds	r3, r7, r4
 8003990:	0018      	movs	r0, r3
 8003992:	f7fd ff93 	bl	80018bc <HAL_RCC_OscConfig>
 8003996:	0003      	movs	r3, r0
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	4193      	sbcs	r3, r2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80039a2:	f000 f9ef 	bl	8003d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039a6:	211c      	movs	r1, #28
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2207      	movs	r2, #7
 80039ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	2203      	movs	r2, #3
 80039b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	2200      	movs	r2, #0
 80039be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	2101      	movs	r1, #1
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fe fad9 	bl	8001f7c <HAL_RCC_ClockConfig>
 80039ca:	0003      	movs	r3, r0
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	4193      	sbcs	r3, r2
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 80039d6:	f000 f9d5 	bl	8003d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039da:	003b      	movs	r3, r7
 80039dc:	2202      	movs	r2, #2
 80039de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80039e0:	003b      	movs	r3, r7
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039e6:	003b      	movs	r3, r7
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7fe fc6f 	bl	80022cc <HAL_RCCEx_PeriphCLKConfig>
 80039ee:	0003      	movs	r3, r0
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	4193      	sbcs	r3, r2
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80039fa:	f000 f9c3 	bl	8003d84 <Error_Handler>
  }
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b019      	add	sp, #100	; 0x64
 8003a04:	bd90      	pop	{r4, r7, pc}
	...

08003a08 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a10:	4a28      	ldr	r2, [pc, #160]	; (8003ab4 <_ZL12MX_SPI2_Initv+0xac>)
 8003a12:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a14:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a16:	2282      	movs	r2, #130	; 0x82
 8003a18:	0052      	lsls	r2, r2, #1
 8003a1a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a24:	22e0      	movs	r2, #224	; 0xe0
 8003a26:	00d2      	lsls	r2, r2, #3
 8003a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a2a:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a30:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a40:	2210      	movs	r2, #16
 8003a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a4a:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fe fd2e 	bl	80024cc <HAL_SPI_Init>
 8003a70:	0003      	movs	r3, r0
 8003a72:	1e5a      	subs	r2, r3, #1
 8003a74:	4193      	sbcs	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8003a7c:	f000 f982 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //Send 1 random byte to reset the sck
  uint8_t temp = 0;
 8003a80:	1dfb      	adds	r3, r7, #7
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 8003a86:	2301      	movs	r3, #1
 8003a88:	425b      	negs	r3, r3
 8003a8a:	1df9      	adds	r1, r7, #7
 8003a8c:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f7fe fdb6 	bl	8002600 <HAL_SPI_Transmit>
  resetTftBoard();
 8003a94:	f001 fd8d 	bl	80055b2 <resetTftBoard>
  pullCSLow();
 8003a98:	f001 fda6 	bl	80055e8 <pullCSLow>
  ili9341_hspi_init(hspi2.Instance);
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <_ZL12MX_SPI2_Initv+0xa8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f001 fe44 	bl	800572e <ili9341_hspi_init>
  /* USER CODE END SPI2_Init 2 */

}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	20000088 	.word	0x20000088
 8003ab4:	40003800 	.word	0x40003800

08003ab8 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abe:	003b      	movs	r3, r7
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f002 fcfb 	bl	80064c2 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */
  //Set a period of 2ms
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003ace:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <_ZL12MX_TIM6_Initv+0x9c>)
 8003ad0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003ad4:	22ef      	movs	r2, #239	; 0xef
 8003ad6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400-1;
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003ae0:	2290      	movs	r2, #144	; 0x90
 8003ae2:	32ff      	adds	r2, #255	; 0xff
 8003ae4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003aec:	4b18      	ldr	r3, [pc, #96]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003aee:	0018      	movs	r0, r3
 8003af0:	f7ff f81e 	bl	8002b30 <HAL_TIM_Base_Init>
 8003af4:	0003      	movs	r3, r0
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	4193      	sbcs	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 8003b00:	f000 f940 	bl	8003d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b04:	003b      	movs	r3, r7
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b0a:	003b      	movs	r3, r7
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b10:	003a      	movs	r2, r7
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7ff f8b8 	bl	8002c8c <HAL_TIMEx_MasterConfigSynchronization>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	4193      	sbcs	r3, r2
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <_ZL12MX_TIM6_Initv+0x74>
  {
    Error_Handler();
 8003b28:	f000 f92c 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  //Clear status reg
  htim6.Instance->SR &= TIM_SR_UIF;
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <_ZL12MX_TIM6_Initv+0x98>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	400a      	ands	r2, r1
 8003b3a:	611a      	str	r2, [r3, #16]
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2103      	movs	r1, #3
 8003b40:	2011      	movs	r0, #17
 8003b42:	f7fd fca5 	bl	8001490 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM6_Init 2 */

}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	200000ec 	.word	0x200000ec
 8003b54:	40001000 	.word	0x40001000

08003b58 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <_ZL19MX_USART2_UART_Initv+0x64>)
 8003b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b64:	2296      	movs	r2, #150	; 0x96
 8003b66:	0212      	lsls	r2, r2, #8
 8003b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b7e:	220c      	movs	r2, #12
 8003b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff f8b9 	bl	8002d14 <HAL_UART_Init>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	1e5a      	subs	r2, r3, #1
 8003ba6:	4193      	sbcs	r3, r2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8003bae:	f000 f8e9 	bl	8003d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2000012c 	.word	0x2000012c
 8003bbc:	40004400 	.word	0x40004400

08003bc0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b08b      	sub	sp, #44	; 0x2c
 8003bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc6:	2414      	movs	r4, #20
 8003bc8:	193b      	adds	r3, r7, r4
 8003bca:	0018      	movs	r0, r3
 8003bcc:	2314      	movs	r3, #20
 8003bce:	001a      	movs	r2, r3
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f002 fc76 	bl	80064c2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	4b66      	ldr	r3, [pc, #408]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	0309      	lsls	r1, r1, #12
 8003be0:	430a      	orrs	r2, r1
 8003be2:	615a      	str	r2, [r3, #20]
 8003be4:	4b63      	ldr	r3, [pc, #396]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	031b      	lsls	r3, r3, #12
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	4b5f      	ldr	r3, [pc, #380]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	03c9      	lsls	r1, r1, #15
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	615a      	str	r2, [r3, #20]
 8003c00:	4b5c      	ldr	r3, [pc, #368]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	03db      	lsls	r3, r3, #15
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0e:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0289      	lsls	r1, r1, #10
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	615a      	str	r2, [r3, #20]
 8003c1c:	4b55      	ldr	r3, [pc, #340]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	029b      	lsls	r3, r3, #10
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b52      	ldr	r3, [pc, #328]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	02c9      	lsls	r1, r1, #11
 8003c34:	430a      	orrs	r2, r1
 8003c36:	615a      	str	r2, [r3, #20]
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <_ZL12MX_GPIO_Initv+0x1b4>)
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	02db      	lsls	r3, r3, #11
 8003c40:	4013      	ands	r3, r2
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 8003c46:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7fd fdea 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8003c52:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	2102      	movs	r1, #2
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7fd fde4 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003c5e:	2390      	movs	r3, #144	; 0x90
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	2200      	movs	r2, #0
 8003c64:	2121      	movs	r1, #33	; 0x21
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7fd fddd 	bl	8001826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c6c:	193b      	adds	r3, r7, r4
 8003c6e:	2280      	movs	r2, #128	; 0x80
 8003c70:	0192      	lsls	r2, r2, #6
 8003c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <_ZL12MX_GPIO_Initv+0x1bc>)
 8003c78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	193b      	adds	r3, r7, r4
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c80:	193b      	adds	r3, r7, r4
 8003c82:	4a3d      	ldr	r2, [pc, #244]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003c84:	0019      	movs	r1, r3
 8003c86:	0010      	movs	r0, r2
 8003c88:	f7fd fc34 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_D_C_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = TFT_D_C_Pin|SPI2_NSS_Pin;
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	2203      	movs	r2, #3
 8003c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	2201      	movs	r2, #1
 8003c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	193b      	adds	r3, r7, r4
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003ca8:	0019      	movs	r1, r3
 8003caa:	0010      	movs	r0, r2
 8003cac:	f7fd fc22 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|LD2_Pin;
 8003cb0:	193b      	adds	r3, r7, r4
 8003cb2:	2221      	movs	r2, #33	; 0x21
 8003cb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	2201      	movs	r2, #1
 8003cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	193b      	adds	r3, r7, r4
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc2:	193b      	adds	r3, r7, r4
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc8:	193a      	adds	r2, r7, r4
 8003cca:	2390      	movs	r3, #144	; 0x90
 8003ccc:	05db      	lsls	r3, r3, #23
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7fd fc0f 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	0212      	lsls	r2, r2, #8
 8003cdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <_ZL12MX_GPIO_Initv+0x1c0>)
 8003ce2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ce4:	193b      	adds	r3, r7, r4
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8003cea:	193a      	adds	r2, r7, r4
 8003cec:	2390      	movs	r3, #144	; 0x90
 8003cee:	05db      	lsls	r3, r3, #23
 8003cf0:	0011      	movs	r1, r2
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fd fbfe 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin;
 8003cf8:	0021      	movs	r1, r4
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	00d2      	lsls	r2, r2, #3
 8003d00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <_ZL12MX_GPIO_Initv+0x1c0>)
 8003d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8003d0e:	000c      	movs	r4, r1
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003d14:	0019      	movs	r1, r3
 8003d16:	0010      	movs	r0, r2
 8003d18:	f7fd fbec 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_OK_Pin */
  GPIO_InitStruct.Pin = ENC_OK_Pin;
 8003d1c:	0021      	movs	r1, r4
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	0112      	lsls	r2, r2, #4
 8003d24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2201      	movs	r2, #1
 8003d30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_OK_GPIO_Port, &GPIO_InitStruct);
 8003d32:	000c      	movs	r4, r1
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003d38:	0019      	movs	r1, r3
 8003d3a:	0010      	movs	r0, r2
 8003d3c:	f7fd fbda 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_CANCEL_Pin;
 8003d40:	0021      	movs	r1, r4
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	0152      	lsls	r2, r2, #5
 8003d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	2201      	movs	r2, #1
 8003d54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_CANCEL_Port, &GPIO_InitStruct);
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <_ZL12MX_GPIO_Initv+0x1b8>)
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	0010      	movs	r0, r2
 8003d5e:	f7fd fbc9 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2101      	movs	r1, #1
 8003d66:	2007      	movs	r0, #7
 8003d68:	f7fd fb92 	bl	8001490 <HAL_NVIC_SetPriority>
}
 8003d6c:	46c0      	nop			; (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b00b      	add	sp, #44	; 0x2c
 8003d72:	bd90      	pop	{r4, r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	48000800 	.word	0x48000800
 8003d7c:	10210000 	.word	0x10210000
 8003d80:	10310000 	.word	0x10310000

08003d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <HAL_MspInit+0x44>)
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_MspInit+0x44>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_MspInit+0x44>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	607b      	str	r3, [r7, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_MspInit+0x44>)
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_MspInit+0x44>)
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	0549      	lsls	r1, r1, #21
 8003db8:	430a      	orrs	r2, r1
 8003dba:	61da      	str	r2, [r3, #28]
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_MspInit+0x44>)
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	055b      	lsls	r3, r3, #21
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b08b      	sub	sp, #44	; 0x2c
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	2314      	movs	r3, #20
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	0018      	movs	r0, r3
 8003de6:	2314      	movs	r3, #20
 8003de8:	001a      	movs	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f002 fb69 	bl	80064c2 <memset>
  if(hspi->Instance==SPI2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <HAL_SPI_MspInit+0xdc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d157      	bne.n	8003eaa <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	01c9      	lsls	r1, r1, #7
 8003e04:	430a      	orrs	r2, r1
 8003e06:	61da      	str	r2, [r3, #28]
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	01db      	lsls	r3, r3, #7
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e16:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0309      	lsls	r1, r1, #12
 8003e20:	430a      	orrs	r2, r1
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	031b      	lsls	r3, r3, #12
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	02c9      	lsls	r1, r1, #11
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	02db      	lsls	r3, r3, #11
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e4e:	2114      	movs	r1, #20
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	220c      	movs	r2, #12
 8003e54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2202      	movs	r2, #2
 8003e5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2203      	movs	r2, #3
 8003e66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e6e:	000c      	movs	r4, r1
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <HAL_SPI_MspInit+0xe4>)
 8003e74:	0019      	movs	r1, r3
 8003e76:	0010      	movs	r0, r2
 8003e78:	f7fd fb3c 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e7c:	0021      	movs	r1, r4
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	00d2      	lsls	r2, r2, #3
 8003e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2202      	movs	r2, #2
 8003e8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	2203      	movs	r2, #3
 8003e96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	2205      	movs	r2, #5
 8003e9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	187b      	adds	r3, r7, r1
 8003ea0:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	f7fd fb25 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b00b      	add	sp, #44	; 0x2c
 8003eb0:	bd90      	pop	{r4, r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	40003800 	.word	0x40003800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	48000800 	.word	0x48000800
 8003ec0:	48000400 	.word	0x48000400

08003ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_TIM_Base_MspInit+0x34>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10b      	bne.n	8003eee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_TIM_Base_MspInit+0x38>)
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_TIM_Base_MspInit+0x38>)
 8003edc:	2110      	movs	r1, #16
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	61da      	str	r2, [r3, #28]
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_TIM_Base_MspInit+0x38>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40001000 	.word	0x40001000
 8003efc:	40021000 	.word	0x40021000

08003f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	2314      	movs	r3, #20
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	2314      	movs	r3, #20
 8003f10:	001a      	movs	r2, r3
 8003f12:	2100      	movs	r1, #0
 8003f14:	f002 fad5 	bl	80064c2 <memset>
  if(huart->Instance==USART2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_UART_MspInit+0x90>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d132      	bne.n	8003f88 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f22:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_UART_MspInit+0x94>)
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <HAL_UART_MspInit+0x94>)
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	0289      	lsls	r1, r1, #10
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	61da      	str	r2, [r3, #28]
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_UART_MspInit+0x94>)
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	029b      	lsls	r3, r3, #10
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_UART_MspInit+0x94>)
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_UART_MspInit+0x94>)
 8003f44:	2180      	movs	r1, #128	; 0x80
 8003f46:	0289      	lsls	r1, r1, #10
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	615a      	str	r2, [r3, #20]
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_UART_MspInit+0x94>)
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	029b      	lsls	r3, r3, #10
 8003f54:	4013      	ands	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f5a:	2114      	movs	r1, #20
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	220c      	movs	r2, #12
 8003f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2202      	movs	r2, #2
 8003f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2201      	movs	r2, #1
 8003f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	187a      	adds	r2, r7, r1
 8003f7c:	2390      	movs	r3, #144	; 0x90
 8003f7e:	05db      	lsls	r3, r3, #23
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7fd fab6 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b00a      	add	sp, #40	; 0x28
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40004400 	.word	0x40004400
 8003f94:	40021000 	.word	0x40021000

08003f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fa6:	e7fe      	b.n	8003fa6 <HardFault_Handler+0x4>

08003fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fc0:	f7fd f98a 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  //This is for the encoder A input
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7fd fc56 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  //This is for the encoder B input
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fd fc51 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  //This is for button and should be removed
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7fd fc4c 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
	//Clear interrupt flag
	htim6.Instance->SR &= ~TIM_SR_UIF;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <TIM6_DAC_IRQHandler+0x30>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <TIM6_DAC_IRQHandler+0x30>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2101      	movs	r1, #1
 8004004:	438a      	bics	r2, r1
 8004006:	611a      	str	r2, [r3, #16]
	okButtonPtr->process();
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <TIM6_DAC_IRQHandler+0x34>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0018      	movs	r0, r3
 800400e:	f000 fb13 	bl	8004638 <_ZN11SW_DEBOUNCE7processEv>
	cancelButtonPtr->process();
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <TIM6_DAC_IRQHandler+0x38>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 fb0e 	bl	8004638 <_ZN11SW_DEBOUNCE7processEv>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	200000ec 	.word	0x200000ec
 8004028:	200001a0 	.word	0x200001a0
 800402c:	200001a4 	.word	0x200001a4

08004030 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	0002      	movs	r2, r0
 8004038:	1dbb      	adds	r3, r7, #6
 800403a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin)
 800403c:	1dbb      	adds	r3, r7, #6
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	429a      	cmp	r2, r3
 8004046:	d005      	beq.n	8004054 <HAL_GPIO_EXTI_Callback+0x24>
 8004048:	1dbb      	adds	r3, r7, #6
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	429a      	cmp	r2, r3
 8004052:	d118      	bne.n	8004086 <HAL_GPIO_EXTI_Callback+0x56>
	{
		encoderPtr->process((ENC_A_GPIO_Port->IDR & ENC_A_Pin) != 0, (ENC_B_GPIO_Port->IDR & ENC_B_Pin) != 0);
 8004054:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <HAL_GPIO_EXTI_Callback+0x98>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0018      	movs	r0, r3
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <HAL_GPIO_EXTI_Callback+0x9c>)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4013      	ands	r3, r2
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	4193      	sbcs	r3, r2
 8004068:	b2db      	uxtb	r3, r3
 800406a:	0019      	movs	r1, r3
 800406c:	2390      	movs	r3, #144	; 0x90
 800406e:	05db      	lsls	r3, r3, #23
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	4013      	ands	r3, r2
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	4193      	sbcs	r3, r2
 800407c:	b2db      	uxtb	r3, r3
 800407e:	001a      	movs	r2, r3
 8004080:	f000 f8d4 	bl	800422c <_ZN14ROTARY_ENCODER7processEhh>
	{
		HAL_Delay(10);
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}
 8004084:	e01b      	b.n	80040be <HAL_GPIO_EXTI_Callback+0x8e>
	}else if(GPIO_Pin == B1_Pin)
 8004086:	1dbb      	adds	r3, r7, #6
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	429a      	cmp	r2, r3
 8004090:	d115      	bne.n	80040be <HAL_GPIO_EXTI_Callback+0x8e>
		HAL_Delay(10);
 8004092:	200a      	movs	r0, #10
 8004094:	f7fd f936 	bl	8001304 <HAL_Delay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	019b      	lsls	r3, r3, #6
 800409c:	4a0b      	ldr	r2, [pc, #44]	; (80040cc <HAL_GPIO_EXTI_Callback+0x9c>)
 800409e:	0019      	movs	r1, r3
 80040a0:	0010      	movs	r0, r2
 80040a2:	f7fd fba3 	bl	80017ec <HAL_GPIO_ReadPin>
 80040a6:	0003      	movs	r3, r0
 80040a8:	425a      	negs	r2, r3
 80040aa:	4153      	adcs	r3, r2
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_GPIO_EXTI_Callback+0x8e>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80040b2:	2390      	movs	r3, #144	; 0x90
 80040b4:	05db      	lsls	r3, r3, #23
 80040b6:	2120      	movs	r1, #32
 80040b8:	0018      	movs	r0, r3
 80040ba:	f7fd fbd1 	bl	8001860 <HAL_GPIO_TogglePin>
}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b002      	add	sp, #8
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	2000019c 	.word	0x2000019c
 80040cc:	48000800 	.word	0x48000800

080040d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
	return 1;
 80040d4:	2301      	movs	r3, #1
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_kill>:

int _kill(int pid, int sig)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040e6:	f002 f9b9 	bl	800645c <__errno>
 80040ea:	0003      	movs	r3, r0
 80040ec:	2216      	movs	r2, #22
 80040ee:	601a      	str	r2, [r3, #0]
	return -1;
 80040f0:	2301      	movs	r3, #1
 80040f2:	425b      	negs	r3, r3
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_exit>:

void _exit (int status)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004104:	2301      	movs	r3, #1
 8004106:	425a      	negs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0011      	movs	r1, r2
 800410c:	0018      	movs	r0, r3
 800410e:	f7ff ffe5 	bl	80040dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004112:	e7fe      	b.n	8004112 <_exit+0x16>

08004114 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <_sbrk+0x50>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <_sbrk+0x16>
		heap_end = &end;
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <_sbrk+0x50>)
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <_sbrk+0x54>)
 8004128:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800412a:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <_sbrk+0x50>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <_sbrk+0x50>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	466a      	mov	r2, sp
 800413a:	4293      	cmp	r3, r2
 800413c:	d907      	bls.n	800414e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800413e:	f002 f98d 	bl	800645c <__errno>
 8004142:	0003      	movs	r3, r0
 8004144:	220c      	movs	r2, #12
 8004146:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004148:	2301      	movs	r3, #1
 800414a:	425b      	negs	r3, r3
 800414c:	e006      	b.n	800415c <_sbrk+0x48>
	}

	heap_end += incr;
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <_sbrk+0x50>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	18d2      	adds	r2, r2, r3
 8004156:	4b03      	ldr	r3, [pc, #12]	; (8004164 <_sbrk+0x50>)
 8004158:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b004      	add	sp, #16
 8004162:	bd80      	pop	{r7, pc}
 8004164:	200001a8 	.word	0x200001a8
 8004168:	200001c0 	.word	0x200001c0

0800416c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <SystemInit+0x70>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <SystemInit+0x70>)
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800417c:	4b17      	ldr	r3, [pc, #92]	; (80041dc <SystemInit+0x70>)
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <SystemInit+0x70>)
 8004182:	4917      	ldr	r1, [pc, #92]	; (80041e0 <SystemInit+0x74>)
 8004184:	400a      	ands	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <SystemInit+0x70>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <SystemInit+0x70>)
 800418e:	4915      	ldr	r1, [pc, #84]	; (80041e4 <SystemInit+0x78>)
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <SystemInit+0x70>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <SystemInit+0x70>)
 800419a:	4913      	ldr	r1, [pc, #76]	; (80041e8 <SystemInit+0x7c>)
 800419c:	400a      	ands	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <SystemInit+0x70>)
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <SystemInit+0x70>)
 80041a6:	4911      	ldr	r1, [pc, #68]	; (80041ec <SystemInit+0x80>)
 80041a8:	400a      	ands	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <SystemInit+0x70>)
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <SystemInit+0x70>)
 80041b2:	210f      	movs	r1, #15
 80041b4:	438a      	bics	r2, r1
 80041b6:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80041b8:	4b08      	ldr	r3, [pc, #32]	; (80041dc <SystemInit+0x70>)
 80041ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041bc:	4b07      	ldr	r3, [pc, #28]	; (80041dc <SystemInit+0x70>)
 80041be:	490c      	ldr	r1, [pc, #48]	; (80041f0 <SystemInit+0x84>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <SystemInit+0x70>)
 80041c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <SystemInit+0x70>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80041d0:	4b02      	ldr	r3, [pc, #8]	; (80041dc <SystemInit+0x70>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]

}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000
 80041e0:	08ffb80c 	.word	0x08ffb80c
 80041e4:	fef6ffff 	.word	0xfef6ffff
 80041e8:	fffbffff 	.word	0xfffbffff
 80041ec:	ffc0ffff 	.word	0xffc0ffff
 80041f0:	fffcfe2c 	.word	0xfffcfe2c

080041f4 <_ZN14ROTARY_ENCODERC1Eh>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
ROTARY_ENCODER::ROTARY_ENCODER(uint8_t ticks_per_step):
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	000a      	movs	r2, r1
 80041fe:	1cfb      	adds	r3, r7, #3
 8004200:	701a      	strb	r2, [r3, #0]
ticksPerStep{ticks_per_step}, tickCounter{0}, state{R_START}
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <_ZN14ROTARY_ENCODERC1Eh+0x34>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1cfa      	adds	r2, r7, #3
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	711a      	strb	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	80da      	strh	r2, [r3, #6]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	721a      	strb	r2, [r3, #8]
{}
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	0800751c 	.word	0x0800751c

0800422c <_ZN14ROTARY_ENCODER7processEhh>:

void ROTARY_ENCODER::process(uint8_t a_state, uint8_t b_state)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	0008      	movs	r0, r1
 8004236:	0011      	movs	r1, r2
 8004238:	1cfb      	adds	r3, r7, #3
 800423a:	1c02      	adds	r2, r0, #0
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	1cbb      	adds	r3, r7, #2
 8004240:	1c0a      	adds	r2, r1, #0
 8004242:	701a      	strb	r2, [r3, #0]
	state = ttable[state & 0xF][((a_state & 0x1) << 1) | (b_state & 0x1)];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7a1b      	ldrb	r3, [r3, #8]
 8004248:	001a      	movs	r2, r3
 800424a:	230f      	movs	r3, #15
 800424c:	401a      	ands	r2, r3
 800424e:	1cfb      	adds	r3, r7, #3
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2102      	movs	r1, #2
 8004256:	4019      	ands	r1, r3
 8004258:	1cbb      	adds	r3, r7, #2
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2001      	movs	r0, #1
 800425e:	4003      	ands	r3, r0
 8004260:	430b      	orrs	r3, r1
 8004262:	492d      	ldr	r1, [pc, #180]	; (8004318 <_ZN14ROTARY_ENCODER7processEhh+0xec>)
 8004264:	0092      	lsls	r2, r2, #2
 8004266:	188a      	adds	r2, r1, r2
 8004268:	5cd2      	ldrb	r2, [r2, r3]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	721a      	strb	r2, [r3, #8]
	if(state & (DIR_CCW | DIR_CW))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7a1b      	ldrb	r3, [r3, #8]
 8004272:	001a      	movs	r2, r3
 8004274:	2330      	movs	r3, #48	; 0x30
 8004276:	4013      	ands	r3, r2
 8004278:	d049      	beq.n	800430e <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	{
	    if(state & DIR_CW)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	7a1b      	ldrb	r3, [r3, #8]
 800427e:	001a      	movs	r2, r3
 8004280:	2310      	movs	r3, #16
 8004282:	4013      	ands	r3, r2
 8004284:	d011      	beq.n	80042aa <_ZN14ROTARY_ENCODER7processEhh+0x7e>
	    {
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter < 0)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2206      	movs	r2, #6
 800428a:	5e9b      	ldrsh	r3, [r3, r2]
 800428c:	2b00      	cmp	r3, #0
 800428e:	da02      	bge.n	8004296 <_ZN14ROTARY_ENCODER7processEhh+0x6a>
	    	{
	    		this->tickCounter = 0;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2206      	movs	r2, #6
 800429a:	5e9b      	ldrsh	r3, [r3, r2]
 800429c:	b29b      	uxth	r3, r3
 800429e:	3301      	adds	r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b21a      	sxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	80da      	strh	r2, [r3, #6]
 80042a8:	e010      	b.n	80042cc <_ZN14ROTARY_ENCODER7processEhh+0xa0>
	    }else{
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter > 0)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2206      	movs	r2, #6
 80042ae:	5e9b      	ldrsh	r3, [r3, r2]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd02      	ble.n	80042ba <_ZN14ROTARY_ENCODER7processEhh+0x8e>
	    	{
	    		this->tickCounter = 0;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2206      	movs	r2, #6
 80042be:	5e9b      	ldrsh	r3, [r3, r2]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	80da      	strh	r2, [r3, #6]
	    }

	    uint16_t tempCounter = (this->tickCounter < 0) ? this->tickCounter * -1 : this->tickCounter;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2206      	movs	r2, #6
 80042d0:	5e9b      	ldrsh	r3, [r3, r2]
 80042d2:	17d9      	asrs	r1, r3, #31
 80042d4:	185a      	adds	r2, r3, r1
 80042d6:	404a      	eors	r2, r1
 80042d8:	210e      	movs	r1, #14
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	801a      	strh	r2, [r3, #0]
	    if(tempCounter >= this->ticksPerStep)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	791b      	ldrb	r3, [r3, #4]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	187a      	adds	r2, r7, r1
 80042e6:	8812      	ldrh	r2, [r2, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d310      	bcc.n	800430e <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	    {
	    	this->doStep(state & DIR_CW);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	7a12      	ldrb	r2, [r2, #8]
 80042f6:	0011      	movs	r1, r2
 80042f8:	2210      	movs	r2, #16
 80042fa:	400a      	ands	r2, r1
 80042fc:	1e51      	subs	r1, r2, #1
 80042fe:	418a      	sbcs	r2, r1
 8004300:	b2d1      	uxtb	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	0010      	movs	r0, r2
 8004306:	4798      	blx	r3
	    	this->tickCounter = 0;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	80da      	strh	r2, [r3, #6]
	    }
	}
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	080074f8 	.word	0x080074f8

0800431c <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_>:

//Private Function Definitions
namespace
{
bool stringsEqual(const char* string1, const char* string2)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	if(string1 == nullptr || string2 == nullptr)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x16>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x1a>
	{
		return false;
 8004332:	2300      	movs	r3, #0
 8004334:	e01c      	b.n	8004370 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x54>
	}
	while(*string1 != '\0' && *string2 != '\0' && *(string1) == *(string2))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x44>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x44>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d106      	bne.n	8004360 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x44>
	{
		string1++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3301      	adds	r3, #1
 8004356:	607b      	str	r3, [r7, #4]
		string2++;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3301      	adds	r3, #1
 800435c:	603b      	str	r3, [r7, #0]
	while(*string1 != '\0' && *string2 != '\0' && *(string1) == *(string2))
 800435e:	e7ea      	b.n	8004336 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x1a>
	}
	return (*string1 == *string2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	425a      	negs	r2, r3
 800436c:	4153      	adcs	r3, r2
 800436e:	b2db      	uxtb	r3, r3
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ZN17SELECTION_ENCODERC1EhP12TFT_TEXT_BOXthPKPKctP21CHOSEN_STATE_TEXT_BOXh>:

}

//Public Function Definitions
SELECTION_ENCODER::SELECTION_ENCODER(uint8_t ticks_per_step, TFT_TEXT_BOX* display_box,
 8004378:	b5b0      	push	{r4, r5, r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	0008      	movs	r0, r1
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	0019      	movs	r1, r3
 8004386:	240b      	movs	r4, #11
 8004388:	193b      	adds	r3, r7, r4
 800438a:	1c02      	adds	r2, r0, #0
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	2508      	movs	r5, #8
 8004390:	197b      	adds	r3, r7, r5
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
		uint16_t font_color, uint8_t font_size, const char * const * output_text_array, uint16_t output_text_length,
		CHOSEN_STATE_TEXT_BOX* selected_states,uint8_t selected_states_length):
ROTARY_ENCODER(ticks_per_step), displayBox{display_box}, fontColor{font_color},
fontSize{font_size}, outputTextArray{output_text_array}, outputTextLength{output_text_length}, nameIndex{0},
selectedStates{selected_states}, numSelectedStates{selected_states_length}
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	193b      	adds	r3, r7, r4
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	0019      	movs	r1, r3
 800439e:	0010      	movs	r0, r2
 80043a0:	f7ff ff28 	bl	80041f4 <_ZN14ROTARY_ENCODERC1Eh>
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <_ZN17SELECTION_ENCODERC1EhP12TFT_TEXT_BOXthPKPKctP21CHOSEN_STATE_TEXT_BOXh+0x90>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	197a      	adds	r2, r7, r5
 80043b4:	8812      	ldrh	r2, [r2, #0]
 80043b6:	821a      	strh	r2, [r3, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2218      	movs	r2, #24
 80043bc:	2108      	movs	r1, #8
 80043be:	468c      	mov	ip, r1
 80043c0:	44bc      	add	ip, r7
 80043c2:	4462      	add	r2, ip
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	749a      	strb	r2, [r3, #18]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	615a      	str	r2, [r3, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	2108      	movs	r1, #8
 80043d4:	468c      	mov	ip, r1
 80043d6:	44bc      	add	ip, r7
 80043d8:	4462      	add	r2, ip
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	831a      	strh	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	835a      	strh	r2, [r3, #26]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e8:	61da      	str	r2, [r3, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2228      	movs	r2, #40	; 0x28
 80043ee:	2108      	movs	r1, #8
 80043f0:	468c      	mov	ip, r1
 80043f2:	44bc      	add	ip, r7
 80043f4:	4462      	add	r2, ip
 80043f6:	2120      	movs	r1, #32
 80043f8:	7812      	ldrb	r2, [r2, #0]
 80043fa:	545a      	strb	r2, [r3, r1]
{}
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b004      	add	sp, #16
 8004404:	bdb0      	pop	{r4, r5, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	08007528 	.word	0x08007528

0800440c <_ZN17SELECTION_ENCODER19getCurrentNameIndexEv>:

uint16_t SELECTION_ENCODER::getCurrentNameIndex(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
	return this->nameIndex;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8b5b      	ldrh	r3, [r3, #26]
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b002      	add	sp, #8
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZN17SELECTION_ENCODER19setCurrentNameIndexEt>:

void SELECTION_ENCODER::setCurrentNameIndex(uint16_t index)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	000a      	movs	r2, r1
 800442a:	1cbb      	adds	r3, r7, #2
 800442c:	801a      	strh	r2, [r3, #0]
	this->nameIndex = index;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1cba      	adds	r2, r7, #2
 8004432:	8812      	ldrh	r2, [r2, #0]
 8004434:	835a      	strh	r2, [r3, #26]
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}

0800443e <_ZN17SELECTION_ENCODER23printNextAvailableStateEv>:

void SELECTION_ENCODER::printNextAvailableState(void)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
	this->doStep(true);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	2101      	movs	r1, #1
 8004450:	0010      	movs	r0, r2
 8004452:	4798      	blx	r3
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc>:

bool SELECTION_ENCODER::stringAlreadyPresent(const char* check_string)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < this->numSelectedStates; i++)
 8004466:	230f      	movs	r3, #15
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	220f      	movs	r2, #15
 8004476:	18ba      	adds	r2, r7, r2
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d21a      	bcs.n	80044b4 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x58>
	{
		if(stringsEqual(this->selectedStates[i].getCurrentText(), check_string))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	230f      	movs	r3, #15
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	015b      	lsls	r3, r3, #5
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	0018      	movs	r0, r3
 800448e:	f001 feb5 	bl	80061fc <_ZN21CHOSEN_STATE_TEXT_BOX14getCurrentTextEv>
 8004492:	0002      	movs	r2, r0
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f7ff ff3f 	bl	800431c <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x4a>
		{
			return true;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x5a>
	for(uint8_t i = 0; i < this->numSelectedStates; i++)
 80044a6:	210f      	movs	r1, #15
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	3201      	adds	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	e7dc      	b.n	800446e <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x12>
		}
	}
	return false;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b004      	add	sp, #16
 80044bc:	bd80      	pop	{r7, pc}

080044be <_ZN17SELECTION_ENCODER6doStepEb>:

void SELECTION_ENCODER::doStep(bool up_not_down)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	000a      	movs	r2, r1
 80044c8:	1cfb      	adds	r3, r7, #3
 80044ca:	701a      	strb	r2, [r3, #0]
	bool validIndex = false;
 80044cc:	230f      	movs	r3, #15
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
	while(!validIndex)
 80044d4:	230f      	movs	r3, #15
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d13b      	bne.n	8004556 <_ZN17SELECTION_ENCODER6doStepEb+0x98>
	{
		if(up_not_down)
 80044de:	1cfb      	adds	r3, r7, #3
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <_ZN17SELECTION_ENCODER6doStepEb+0x4e>
		{
			if(this->nameIndex == (this->outputTextLength - 1))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8b5b      	ldrh	r3, [r3, #26]
 80044ea:	001a      	movs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8b1b      	ldrh	r3, [r3, #24]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d103      	bne.n	80044fe <_ZN17SELECTION_ENCODER6doStepEb+0x40>
			{
				this->nameIndex = 0;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	835a      	strh	r2, [r3, #26]
 80044fc:	e017      	b.n	800452e <_ZN17SELECTION_ENCODER6doStepEb+0x70>
			}else{
				this->nameIndex++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8b5b      	ldrh	r3, [r3, #26]
 8004502:	3301      	adds	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	835a      	strh	r2, [r3, #26]
 800450a:	e010      	b.n	800452e <_ZN17SELECTION_ENCODER6doStepEb+0x70>
			}
		}else{
			if(this->nameIndex == 0)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8b5b      	ldrh	r3, [r3, #26]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <_ZN17SELECTION_ENCODER6doStepEb+0x64>
			{
				this->nameIndex = this->outputTextLength - 1;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8b1b      	ldrh	r3, [r3, #24]
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	835a      	strh	r2, [r3, #26]
 8004520:	e005      	b.n	800452e <_ZN17SELECTION_ENCODER6doStepEb+0x70>
			}else{
				this->nameIndex--;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8b5b      	ldrh	r3, [r3, #26]
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	835a      	strh	r2, [r3, #26]
			}
		}
		validIndex = !this->stringAlreadyPresent(this->outputTextArray[this->nameIndex]);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8b5b      	ldrh	r3, [r3, #26]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0011      	movs	r1, r2
 8004540:	0018      	movs	r0, r3
 8004542:	f7ff ff8b 	bl	800445c <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc>
 8004546:	0003      	movs	r3, r0
 8004548:	0019      	movs	r1, r3
 800454a:	230f      	movs	r3, #15
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2201      	movs	r2, #1
 8004550:	404a      	eors	r2, r1
 8004552:	701a      	strb	r2, [r3, #0]
	while(!validIndex)
 8004554:	e7be      	b.n	80044d4 <_ZN17SELECTION_ENCODER6doStepEb+0x16>
	}
	displayBox->write(this->outputTextArray[this->nameIndex], this->fontColor, this->fontSize);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68d8      	ldr	r0, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8b5b      	ldrh	r3, [r3, #26]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8a1a      	ldrh	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	7c9b      	ldrb	r3, [r3, #18]
 8004570:	f001 fecd 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	b004      	add	sp, #16
 800457a:	bd80      	pop	{r7, pc}

0800457c <_ZN11SW_DEBOUNCE20startCriticalSectionEv>:

//Public Function Prototypes

//Private Function Definitions
inline void SW_DEBOUNCE::startCriticalSection(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	this->timerInstance->DIER &= ~TIM_DIER_UIE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2101      	movs	r1, #1
 8004590:	438a      	bics	r2, r1
 8004592:	60da      	str	r2, [r3, #12]
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b002      	add	sp, #8
 800459a:	bd80      	pop	{r7, pc}

0800459c <_ZN11SW_DEBOUNCE19stopCriticalSectionEv>:
inline void SW_DEBOUNCE::stopCriticalSection(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	this->timerInstance->DIER |= TIM_DIER_UIE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	2101      	movs	r1, #1
 80045b0:	430a      	orrs	r2, r1
 80045b2:	60da      	str	r2, [r3, #12]
}
 80045b4:	46c0      	nop			; (mov r8, r8)
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_ZN11SW_DEBOUNCEC1EP12GPIO_TypeDeftmhP11TIM_TypeDef>:
//Public Function Definitions
SW_DEBOUNCE::SW_DEBOUNCE(GPIO_TypeDef* gpio_port, uint16_t gpio_pin, uint32_t timer_period_ms, uint8_t ms_for_valid_press, TIM_TypeDef* timer_instance):
 80045bc:	b5b0      	push	{r4, r5, r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	801a      	strh	r2, [r3, #0]
gpioPort{gpio_port}, gpioPin{gpio_pin}, debouncedState{SWITCH_STATE::NO_PRESS},
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{static_cast<uint8_t>(1 << static_cast<uint8_t>(ms_for_valid_press/timer_period_ms))},
msHeldCounter{0}, timerPeriodMs{timer_period_ms}, msForValidPress{ms_for_valid_press} , timerInstance{timer_instance}
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1dba      	adds	r2, r7, #6
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	809a      	strh	r2, [r3, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22ff      	movs	r2, #255	; 0xff
 80045e4:	731a      	strb	r2, [r3, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{static_cast<uint8_t>(1 << static_cast<uint8_t>(ms_for_valid_press/timer_period_ms))},
 80045ec:	2418      	movs	r4, #24
 80045ee:	2508      	movs	r5, #8
 80045f0:	197b      	adds	r3, r7, r5
 80045f2:	191b      	adds	r3, r3, r4
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fb fd85 	bl	8000108 <__udivsi3>
 80045fe:	0003      	movs	r3, r0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	001a      	movs	r2, r3
 8004604:	2301      	movs	r3, #1
 8004606:	4093      	lsls	r3, r2
msHeldCounter{0}, timerPeriodMs{timer_period_ms}, msForValidPress{ms_for_valid_press} , timerInstance{timer_instance}
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	751a      	strb	r2, [r3, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	61da      	str	r2, [r3, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	197a      	adds	r2, r7, r5
 800461e:	1912      	adds	r2, r2, r4
 8004620:	2120      	movs	r1, #32
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	545a      	strb	r2, [r3, r1]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
{}
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004638 <_ZN11SW_DEBOUNCE7processEv>:

void SW_DEBOUNCE::process(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	this->switchBitSequence = (this->switchBitSequence << 1) | ((this->gpioPort->IDR & this->gpioPin) != 0);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7b1b      	ldrb	r3, [r3, #12]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	b25a      	sxtb	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	8889      	ldrh	r1, [r1, #4]
 8004652:	400b      	ands	r3, r1
 8004654:	1e59      	subs	r1, r3, #1
 8004656:	418b      	sbcs	r3, r1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	b25b      	sxtb	r3, r3
 800465c:	4313      	orrs	r3, r2
 800465e:	b25b      	sxtb	r3, r3
 8004660:	b2da      	uxtb	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	731a      	strb	r2, [r3, #12]
	if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_OPEN)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11b      	bne.n	80046a6 <_ZN11SW_DEBOUNCE7processEv+0x6e>
	{
		if((this->switchBitSequence & (this->validPressBitSequence | (this->validPressBitSequence - 1))) == this->validPressBitSequence)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7b1b      	ldrb	r3, [r3, #12]
 8004672:	001a      	movs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7d1b      	ldrb	r3, [r3, #20]
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7d1b      	ldrb	r3, [r3, #20]
 800467e:	3b01      	subs	r3, #1
 8004680:	430b      	orrs	r3, r1
 8004682:	4013      	ands	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	7d12      	ldrb	r2, [r2, #20]
 8004688:	4293      	cmp	r3, r2
 800468a:	d13a      	bne.n	8004702 <_ZN11SW_DEBOUNCE7processEv+0xca>
		{
			this->stateMachineState = SW_STATE_MACHINE::VALID_PRESS_DETECTED;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	611a      	str	r2, [r3, #16]
			this->msHeldCounter = this->msForValidPress;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	5c9b      	ldrb	r3, [r3, r2]
 8004698:	001a      	movs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	619a      	str	r2, [r3, #24]
			//Reset the bit sequence to only count held time now
			this->switchBitSequence = 0;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	731a      	strb	r2, [r3, #12]
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
		{
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
		}
	}
}
 80046a4:	e02d      	b.n	8004702 <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::VALID_PRESS_DETECTED)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d11e      	bne.n	80046ec <_ZN11SW_DEBOUNCE7processEv+0xb4>
		if(!this->switchBitSequence)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7b1b      	ldrb	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d107      	bne.n	80046c6 <_ZN11SW_DEBOUNCE7processEv+0x8e>
			this->msHeldCounter+= this->timerPeriodMs;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	18d2      	adds	r2, r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	619a      	str	r2, [r3, #24]
}
 80046c4:	e01d      	b.n	8004702 <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_RELEASED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	611a      	str	r2, [r3, #16]
			if(this->msHeldCounter >= static_cast<uint32_t>(SWITCH_STATE::THREE_SECOND_PRESS))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a0e      	ldr	r2, [pc, #56]	; (800470c <_ZN11SW_DEBOUNCE7processEv+0xd4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d903      	bls.n	80046de <_ZN11SW_DEBOUNCE7processEv+0xa6>
				this->debouncedState = SWITCH_STATE::THREE_SECOND_PRESS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <_ZN11SW_DEBOUNCE7processEv+0xd8>)
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	e002      	b.n	80046e4 <_ZN11SW_DEBOUNCE7processEv+0xac>
				this->debouncedState = SWITCH_STATE::SHORT_PRESS;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	609a      	str	r2, [r3, #8]
			this->msHeldCounter = 0;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	619a      	str	r2, [r3, #24]
}
 80046ea:	e00a      	b.n	8004702 <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_RELEASED)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d106      	bne.n	8004702 <_ZN11SW_DEBOUNCE7processEv+0xca>
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7b1b      	ldrb	r3, [r3, #12]
 80046f8:	2bff      	cmp	r3, #255	; 0xff
 80046fa:	d102      	bne.n	8004702 <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]
}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b002      	add	sp, #8
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	00000bb7 	.word	0x00000bb7
 8004710:	00000bb8 	.word	0x00000bb8

08004714 <_ZN11SW_DEBOUNCE15getCurrentStateEv>:

SWITCH_STATE SW_DEBOUNCE::getCurrentState(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	this->startCriticalSection();
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f7ff ff2c 	bl	800457c <_ZN11SW_DEBOUNCE20startCriticalSectionEv>
	SWITCH_STATE temp = this->debouncedState;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	60fb      	str	r3, [r7, #12]
	this->debouncedState = SWITCH_STATE::NO_PRESS;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
	this->stopCriticalSection();
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f7ff ff32 	bl	800459c <_ZN11SW_DEBOUNCE19stopCriticalSectionEv>
	return temp;
 8004738:	68fb      	ldr	r3, [r7, #12]
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b004      	add	sp, #16
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZN7TFT_GFX11getWordSizeEPKc>:

//Public Function Prototypes

//Private Function Definitions
uint8_t TFT_GFX::getWordSize(const char* string)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 800474c:	230f      	movs	r3, #15
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
	while(*string != ' ' && *string != '\0')
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b20      	cmp	r3, #32
 800475a:	d00d      	beq.n	8004778 <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
	{
		counter++;
 8004764:	210f      	movs	r1, #15
 8004766:	187b      	adds	r3, r7, r1
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	187b      	adds	r3, r7, r1
 800476c:	3201      	adds	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
		string++;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	603b      	str	r3, [r7, #0]
	while(*string != ' ' && *string != '\0')
 8004776:	e7ed      	b.n	8004754 <_ZN7TFT_GFX11getWordSizeEPKc+0x12>
	}
	return counter;
 8004778:	230f      	movs	r3, #15
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	781b      	ldrb	r3, [r3, #0]
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b004      	add	sp, #16
 8004784:	bd80      	pop	{r7, pc}

08004786 <_ZN7TFT_GFX11getLineSizeEPKch>:

uint8_t TFT_GFX::getLineSize(const char* string, uint8_t max_chars_in_line)
{
 8004786:	b5b0      	push	{r4, r5, r7, lr}
 8004788:	b086      	sub	sp, #24
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	1dfb      	adds	r3, r7, #7
 8004792:	701a      	strb	r2, [r3, #0]
	uint8_t currCharsInLine = 0;
 8004794:	2317      	movs	r3, #23
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
	bool overFlowed = false;
 800479c:	2316      	movs	r3, #22
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
	while(*string && !overFlowed)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d03f      	beq.n	800482c <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
 80047ac:	2316      	movs	r3, #22
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d13a      	bne.n	800482c <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
	{
		uint8_t nextWordSize = this->getWordSize(string);
 80047b6:	2515      	movs	r5, #21
 80047b8:	197c      	adds	r4, r7, r5
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff ffbe 	bl	8004742 <_ZN7TFT_GFX11getWordSizeEPKc>
 80047c6:	0003      	movs	r3, r0
 80047c8:	7023      	strb	r3, [r4, #0]
		//This is to account for spaces
		if(nextWordSize == 0)
 80047ca:	197b      	adds	r3, r7, r5
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <_ZN7TFT_GFX11getLineSizeEPKch+0x54>
		{
			nextWordSize = 1;
 80047d2:	2315      	movs	r3, #21
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
		}
		//Check if we overflow
		if(currCharsInLine + nextWordSize > max_chars_in_line)
 80047da:	2317      	movs	r3, #23
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	2315      	movs	r3, #21
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	18d2      	adds	r2, r2, r3
 80047e8:	1dfb      	adds	r3, r7, #7
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	dd0e      	ble.n	800480e <_ZN7TFT_GFX11getLineSizeEPKch+0x88>
		{
			if(currCharsInLine == 0)
 80047f0:	2317      	movs	r3, #23
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <_ZN7TFT_GFX11getLineSizeEPKch+0x7e>
			{
				currCharsInLine = max_chars_in_line;
 80047fa:	2317      	movs	r3, #23
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	1dfa      	adds	r2, r7, #7
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	701a      	strb	r2, [r3, #0]
			}
			overFlowed = true;
 8004804:	2316      	movs	r3, #22
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e7ca      	b.n	80047a4 <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}else{
			currCharsInLine += nextWordSize;
 800480e:	2217      	movs	r2, #23
 8004810:	18bb      	adds	r3, r7, r2
 8004812:	18b9      	adds	r1, r7, r2
 8004814:	2015      	movs	r0, #21
 8004816:	183a      	adds	r2, r7, r0
 8004818:	7809      	ldrb	r1, [r1, #0]
 800481a:	7812      	ldrb	r2, [r2, #0]
 800481c:	188a      	adds	r2, r1, r2
 800481e:	701a      	strb	r2, [r3, #0]
			string += nextWordSize;
 8004820:	183b      	adds	r3, r7, r0
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	60bb      	str	r3, [r7, #8]
	while(*string && !overFlowed)
 800482a:	e7bb      	b.n	80047a4 <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}
	}
	return currCharsInLine;
 800482c:	2317      	movs	r3, #23
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	781b      	ldrb	r3, [r3, #0]
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b006      	add	sp, #24
 8004838:	bdb0      	pop	{r4, r5, r7, pc}

0800483a <_ZN7TFT_GFX13getStringSizeEPKc>:

uint8_t TFT_GFX::getStringSize(const char* string)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8004844:	230f      	movs	r3, #15
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	603a      	str	r2, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	4193      	sbcs	r3, r2
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d006      	beq.n	800486c <_ZN7TFT_GFX13getStringSizeEPKc+0x32>
	{
		counter++;
 800485e:	210f      	movs	r1, #15
 8004860:	187b      	adds	r3, r7, r1
 8004862:	781a      	ldrb	r2, [r3, #0]
 8004864:	187b      	adds	r3, r7, r1
 8004866:	3201      	adds	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 800486a:	e7ef      	b.n	800484c <_ZN7TFT_GFX13getStringSizeEPKc+0x12>
	}
	return counter;
 800486c:	230f      	movs	r3, #15
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	781b      	ldrb	r3, [r3, #0]
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b004      	add	sp, #16
 8004878:	bd80      	pop	{r7, pc}

0800487a <_ZN7TFT_GFXC1EP11SPI_TypeDef>:
//Public Function Definitions
TFT_GFX::TFT_GFX(SPI_TypeDef *SPIx):
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
spiInstance{SPIx}, _width{ILI9341_TFTWIDTH}, _height{ILI9341_TFTHEIGHT}
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	22f0      	movs	r2, #240	; 0xf0
 800488e:	809a      	strh	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	22a0      	movs	r2, #160	; 0xa0
 8004894:	0052      	lsls	r2, r2, #1
 8004896:	80da      	strh	r2, [r3, #6]
{}
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b002      	add	sp, #8
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZN7TFT_GFX13setAddrWindowEtttt>:

void TFT_GFX::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80048a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	000c      	movs	r4, r1
 80048ac:	0010      	movs	r0, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	250a      	movs	r5, #10
 80048b2:	197b      	adds	r3, r7, r5
 80048b4:	1c22      	adds	r2, r4, #0
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	2608      	movs	r6, #8
 80048ba:	19bb      	adds	r3, r7, r6
 80048bc:	1c02      	adds	r2, r0, #0
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	1dbb      	adds	r3, r7, #6
 80048c2:	1c0a      	adds	r2, r1, #0
 80048c4:	801a      	strh	r2, [r3, #0]
    uint16_t x2 = (x1 + w - 1);
 80048c6:	002c      	movs	r4, r5
 80048c8:	193a      	adds	r2, r7, r4
 80048ca:	1dbb      	adds	r3, r7, #6
 80048cc:	8812      	ldrh	r2, [r2, #0]
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	2316      	movs	r3, #22
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	3a01      	subs	r2, #1
 80048da:	801a      	strh	r2, [r3, #0]
    uint16_t y2 = (y1 + h - 1);
 80048dc:	0035      	movs	r5, r6
 80048de:	197b      	adds	r3, r7, r5
 80048e0:	2228      	movs	r2, #40	; 0x28
 80048e2:	2108      	movs	r1, #8
 80048e4:	1879      	adds	r1, r7, r1
 80048e6:	1889      	adds	r1, r1, r2
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	880b      	ldrh	r3, [r1, #0]
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	2614      	movs	r6, #20
 80048f2:	19bb      	adds	r3, r7, r6
 80048f4:	3a01      	subs	r2, #1
 80048f6:	801a      	strh	r2, [r3, #0]
	// Set column range.
	hspi_cmd(this->spiInstance, 0x2A);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	212a      	movs	r1, #42	; 0x2a
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 feba 	bl	8005678 <hspi_cmd>
	hspi_w16(this->spiInstance, x1);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	193b      	adds	r3, r7, r4
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	0019      	movs	r1, r3
 800490e:	0010      	movs	r0, r2
 8004910:	f000 fe8e 	bl	8005630 <hspi_w16>
	hspi_w16(this->spiInstance, x2);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2316      	movs	r3, #22
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	0019      	movs	r1, r3
 8004920:	0010      	movs	r0, r2
 8004922:	f000 fe85 	bl	8005630 <hspi_w16>
	
	// Set row range.
	hspi_cmd(this->spiInstance, 0x2B);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	212b      	movs	r1, #43	; 0x2b
 800492c:	0018      	movs	r0, r3
 800492e:	f000 fea3 	bl	8005678 <hspi_cmd>
	hspi_w16(this->spiInstance, y1);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	197b      	adds	r3, r7, r5
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	0019      	movs	r1, r3
 800493c:	0010      	movs	r0, r2
 800493e:	f000 fe77 	bl	8005630 <hspi_w16>
	hspi_w16(this->spiInstance, y2);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	19bb      	adds	r3, r7, r6
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	0019      	movs	r1, r3
 800494c:	0010      	movs	r0, r2
 800494e:	f000 fe6f 	bl	8005630 <hspi_w16>
	
	// Set 'write to RAM'
	hspi_cmd(this->spiInstance, 0x2C);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	0018      	movs	r0, r3
 800495a:	f000 fe8d 	bl	8005678 <hspi_cmd>
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b007      	add	sp, #28
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004966 <_ZN7TFT_GFX10writePixelEsst>:

void TFT_GFX::writePixel(int16_t x, int16_t y, uint16_t color) 
{
 8004966:	b5b0      	push	{r4, r5, r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af02      	add	r7, sp, #8
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	000c      	movs	r4, r1
 8004970:	0010      	movs	r0, r2
 8004972:	0019      	movs	r1, r3
 8004974:	250a      	movs	r5, #10
 8004976:	197b      	adds	r3, r7, r5
 8004978:	1c22      	adds	r2, r4, #0
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	2308      	movs	r3, #8
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	1c02      	adds	r2, r0, #0
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	1c0a      	adds	r2, r1, #0
 8004988:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && (y >= 0) && (y < this->_height)) 
 800498a:	197b      	adds	r3, r7, r5
 800498c:	2200      	movs	r2, #0
 800498e:	5e9b      	ldrsh	r3, [r3, r2]
 8004990:	2b00      	cmp	r3, #0
 8004992:	db29      	blt.n	80049e8 <_ZN7TFT_GFX10writePixelEsst+0x82>
 8004994:	230a      	movs	r3, #10
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2200      	movs	r2, #0
 800499a:	5e9b      	ldrsh	r3, [r3, r2]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	8892      	ldrh	r2, [r2, #4]
 80049a0:	4293      	cmp	r3, r2
 80049a2:	da21      	bge.n	80049e8 <_ZN7TFT_GFX10writePixelEsst+0x82>
 80049a4:	2308      	movs	r3, #8
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	5e9b      	ldrsh	r3, [r3, r2]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	db1b      	blt.n	80049e8 <_ZN7TFT_GFX10writePixelEsst+0x82>
 80049b0:	2308      	movs	r3, #8
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	2200      	movs	r2, #0
 80049b6:	5e9b      	ldrsh	r3, [r3, r2]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	88d2      	ldrh	r2, [r2, #6]
 80049bc:	4293      	cmp	r3, r2
 80049be:	da13      	bge.n	80049e8 <_ZN7TFT_GFX10writePixelEsst+0x82>
    {
        setAddrWindow(x, y, 1, 1);
 80049c0:	230a      	movs	r3, #10
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	8819      	ldrh	r1, [r3, #0]
 80049c6:	2308      	movs	r3, #8
 80049c8:	18fb      	adds	r3, r7, r3
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	2301      	movs	r3, #1
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2301      	movs	r3, #1
 80049d4:	f7ff ff65 	bl	80048a2 <_ZN7TFT_GFX13setAddrWindowEtttt>
        hspi_w16(this->spiInstance, color);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	1dbb      	adds	r3, r7, #6
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	0019      	movs	r1, r3
 80049e2:	0010      	movs	r0, r2
 80049e4:	f000 fe24 	bl	8005630 <hspi_w16>
    }
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b004      	add	sp, #16
 80049ee:	bdb0      	pop	{r4, r5, r7, pc}

080049f0 <_ZN7TFT_GFX13writeFillRectEsssst>:

void TFT_GFX::writeFillRect(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	000c      	movs	r4, r1
 80049fa:	0010      	movs	r0, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	230a      	movs	r3, #10
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	1c22      	adds	r2, r4, #0
 8004a04:	801a      	strh	r2, [r3, #0]
 8004a06:	2308      	movs	r3, #8
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	1c02      	adds	r2, r0, #0
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	1dbb      	adds	r3, r7, #6
 8004a10:	1c0a      	adds	r2, r1, #0
 8004a12:	801a      	strh	r2, [r3, #0]
    if(w && h) {                            // Nonzero width and height?
 8004a14:	1dbb      	adds	r3, r7, #6
 8004a16:	2200      	movs	r2, #0
 8004a18:	5e9b      	ldrsh	r3, [r3, r2]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d100      	bne.n	8004a20 <_ZN7TFT_GFX13writeFillRectEsssst+0x30>
 8004a1e:	e0c8      	b.n	8004bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
 8004a20:	2328      	movs	r3, #40	; 0x28
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2200      	movs	r2, #0
 8004a26:	5e9b      	ldrsh	r3, [r3, r2]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d100      	bne.n	8004a2e <_ZN7TFT_GFX13writeFillRectEsssst+0x3e>
 8004a2c:	e0c1      	b.n	8004bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
        if(w < 0) {                         // If negative width...
 8004a2e:	1dbb      	adds	r3, r7, #6
 8004a30:	2200      	movs	r2, #0
 8004a32:	5e9b      	ldrsh	r3, [r3, r2]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da10      	bge.n	8004a5a <_ZN7TFT_GFX13writeFillRectEsssst+0x6a>
            x +=  w + 1;                    //   Move X to left edge
 8004a38:	1dbb      	adds	r3, r7, #6
 8004a3a:	881a      	ldrh	r2, [r3, #0]
 8004a3c:	210a      	movs	r1, #10
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	18d3      	adds	r3, r2, r3
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	801a      	strh	r2, [r3, #0]
            w  = -w;                        //   Use positive width
 8004a4e:	1dbb      	adds	r3, r7, #6
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	425b      	negs	r3, r3
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	1dbb      	adds	r3, r7, #6
 8004a58:	801a      	strh	r2, [r3, #0]
        }
        if(x < this->_width) {                    // Not off right
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2200      	movs	r2, #0
 8004a60:	5e9b      	ldrsh	r3, [r3, r2]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	8892      	ldrh	r2, [r2, #4]
 8004a66:	4293      	cmp	r3, r2
 8004a68:	db00      	blt.n	8004a6c <_ZN7TFT_GFX13writeFillRectEsssst+0x7c>
 8004a6a:	e0a2      	b.n	8004bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
            if(h < 0) {                     // If negative height...
 8004a6c:	2328      	movs	r3, #40	; 0x28
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	2200      	movs	r2, #0
 8004a72:	5e9b      	ldrsh	r3, [r3, r2]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da11      	bge.n	8004a9c <_ZN7TFT_GFX13writeFillRectEsssst+0xac>
                y +=  h + 1;                //   Move Y to top edge
 8004a78:	2128      	movs	r1, #40	; 0x28
 8004a7a:	187b      	adds	r3, r7, r1
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	2008      	movs	r0, #8
 8004a80:	183b      	adds	r3, r7, r0
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	183b      	adds	r3, r7, r0
 8004a8e:	801a      	strh	r2, [r3, #0]
                h  = -h;                    //   Use positive height
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	425b      	negs	r3, r3
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	801a      	strh	r2, [r3, #0]
            }
            if(y < this->_height) {               // Not off bottom
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	5e9b      	ldrsh	r3, [r3, r2]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	88d2      	ldrh	r2, [r2, #6]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	db00      	blt.n	8004aae <_ZN7TFT_GFX13writeFillRectEsssst+0xbe>
 8004aac:	e081      	b.n	8004bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                int16_t x2 = x + w - 1;
 8004aae:	230a      	movs	r3, #10
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	1dbb      	adds	r3, r7, #6
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	18d3      	adds	r3, r2, r3
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	2116      	movs	r1, #22
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	801a      	strh	r2, [r3, #0]
                if(x2 >= 0) {               // Not off left
 8004ac6:	187b      	adds	r3, r7, r1
 8004ac8:	2200      	movs	r2, #0
 8004aca:	5e9b      	ldrsh	r3, [r3, r2]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da00      	bge.n	8004ad2 <_ZN7TFT_GFX13writeFillRectEsssst+0xe2>
 8004ad0:	e06f      	b.n	8004bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                    int16_t y2 = y + h - 1;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	2328      	movs	r3, #40	; 0x28
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	2114      	movs	r1, #20
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	801a      	strh	r2, [r3, #0]
                    if(y2 >= 0) {           // Not off top
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	2200      	movs	r2, #0
 8004af0:	5e9b      	ldrsh	r3, [r3, r2]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	db5d      	blt.n	8004bb2 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                        // Rectangle partly or fully overlaps screen
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 8004af6:	230a      	movs	r3, #10
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	2200      	movs	r2, #0
 8004afc:	5e9b      	ldrsh	r3, [r3, r2]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da0a      	bge.n	8004b18 <_ZN7TFT_GFX13writeFillRectEsssst+0x128>
 8004b02:	230a      	movs	r3, #10
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2200      	movs	r2, #0
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	2316      	movs	r3, #22
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	1dbb      	adds	r3, r7, #6
 8004b16:	801a      	strh	r2, [r3, #0]
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8004b18:	2308      	movs	r3, #8
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	5e9b      	ldrsh	r3, [r3, r2]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da0b      	bge.n	8004b3c <_ZN7TFT_GFX13writeFillRectEsssst+0x14c>
 8004b24:	2308      	movs	r3, #8
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	2200      	movs	r2, #0
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	2314      	movs	r3, #20
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	2328      	movs	r3, #40	; 0x28
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	801a      	strh	r2, [r3, #0]
                        if(x2 >= this->_width)  { w = this->_width  - x;   } // Clip right
 8004b3c:	2316      	movs	r3, #22
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	2200      	movs	r2, #0
 8004b42:	5e9b      	ldrsh	r3, [r3, r2]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	8892      	ldrh	r2, [r2, #4]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	db08      	blt.n	8004b5e <_ZN7TFT_GFX13writeFillRectEsssst+0x16e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	889a      	ldrh	r2, [r3, #4]
 8004b50:	230a      	movs	r3, #10
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	1dbb      	adds	r3, r7, #6
 8004b5c:	801a      	strh	r2, [r3, #0]
                        if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8004b5e:	2314      	movs	r3, #20
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2200      	movs	r2, #0
 8004b64:	5e9b      	ldrsh	r3, [r3, r2]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	88d2      	ldrh	r2, [r2, #6]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	db09      	blt.n	8004b82 <_ZN7TFT_GFX13writeFillRectEsssst+0x192>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88da      	ldrh	r2, [r3, #6]
 8004b72:	2308      	movs	r3, #8
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	2328      	movs	r3, #40	; 0x28
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	801a      	strh	r2, [r3, #0]
                        writeFillRectPreclipped(x, y, w, h, color);
 8004b82:	1dbb      	adds	r3, r7, #6
 8004b84:	2400      	movs	r4, #0
 8004b86:	5f1c      	ldrsh	r4, [r3, r4]
 8004b88:	2308      	movs	r3, #8
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	5e9a      	ldrsh	r2, [r3, r2]
 8004b90:	230a      	movs	r3, #10
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	2100      	movs	r1, #0
 8004b96:	5e59      	ldrsh	r1, [r3, r1]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	232c      	movs	r3, #44	; 0x2c
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	2328      	movs	r3, #40	; 0x28
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2500      	movs	r5, #0
 8004ba8:	5f5b      	ldrsh	r3, [r3, r5]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	0023      	movs	r3, r4
 8004bae:	f000 f804 	bl	8004bba <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
                    }
                }
            }
        }
    }
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b006      	add	sp, #24
 8004bb8:	bdb0      	pop	{r4, r5, r7, pc}

08004bba <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>:

inline void TFT_GFX::writeFillRectPreclipped(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8004bba:	b5b0      	push	{r4, r5, r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	000c      	movs	r4, r1
 8004bc4:	0010      	movs	r0, r2
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	250a      	movs	r5, #10
 8004bca:	197b      	adds	r3, r7, r5
 8004bcc:	1c22      	adds	r2, r4, #0
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	2408      	movs	r4, #8
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	1c02      	adds	r2, r0, #0
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	1dbb      	adds	r3, r7, #6
 8004bda:	1c0a      	adds	r2, r1, #0
 8004bdc:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, w, h);
 8004bde:	197b      	adds	r3, r7, r5
 8004be0:	8819      	ldrh	r1, [r3, #0]
 8004be2:	193b      	adds	r3, r7, r4
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	881c      	ldrh	r4, [r3, #0]
 8004bea:	2520      	movs	r5, #32
 8004bec:	197b      	adds	r3, r7, r5
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	0023      	movs	r3, r4
 8004bf6:	f7ff fe54 	bl	80048a2 <_ZN7TFT_GFX13setAddrWindowEtttt>
    writeColor(color, (uint32_t)w * h);
 8004bfa:	1dbb      	adds	r3, r7, #6
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	5e9b      	ldrsh	r3, [r3, r2]
 8004c00:	197a      	adds	r2, r7, r5
 8004c02:	2100      	movs	r1, #0
 8004c04:	5e52      	ldrsh	r2, [r2, r1]
 8004c06:	435a      	muls	r2, r3
 8004c08:	2324      	movs	r3, #36	; 0x24
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	8819      	ldrh	r1, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f804 	bl	8004c1e <_ZN7TFT_GFX10writeColorEtm>
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bdb0      	pop	{r4, r5, r7, pc}

08004c1e <_ZN7TFT_GFX10writeColorEtm>:

void TFT_GFX::writeColor(uint16_t color, uint32_t len){
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	230a      	movs	r3, #10
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	1c0a      	adds	r2, r1, #0
 8004c2e:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++){
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d20c      	bcs.n	8004c56 <_ZN7TFT_GFX10writeColorEtm+0x38>
		hspi_w16(this->spiInstance, color);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	230a      	movs	r3, #10
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	0019      	movs	r1, r3
 8004c48:	0010      	movs	r0, r2
 8004c4a:	f000 fcf1 	bl	8005630 <hspi_w16>
	for(uint32_t i = 0; i < len; i++){
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	3301      	adds	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e7ee      	b.n	8004c34 <_ZN7TFT_GFX10writeColorEtm+0x16>
	}
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b006      	add	sp, #24
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <_ZN7TFT_GFX14writeFastVLineEssst>:

void inline TFT_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8004c5e:	b5b0      	push	{r4, r5, r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af02      	add	r7, sp, #8
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	000c      	movs	r4, r1
 8004c68:	0010      	movs	r0, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	250a      	movs	r5, #10
 8004c6e:	197b      	adds	r3, r7, r5
 8004c70:	1c22      	adds	r2, r4, #0
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	2308      	movs	r3, #8
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	1c02      	adds	r2, r0, #0
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	1dbb      	adds	r3, r7, #6
 8004c7e:	1c0a      	adds	r2, r1, #0
 8004c80:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && h) { // X on screen, nonzero height
 8004c82:	197b      	adds	r3, r7, r5
 8004c84:	2200      	movs	r2, #0
 8004c86:	5e9b      	ldrsh	r3, [r3, r2]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da00      	bge.n	8004c8e <_ZN7TFT_GFX14writeFastVLineEssst+0x30>
 8004c8c:	e072      	b.n	8004d74 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8004c8e:	230a      	movs	r3, #10
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	2200      	movs	r2, #0
 8004c94:	5e9b      	ldrsh	r3, [r3, r2]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	8892      	ldrh	r2, [r2, #4]
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	db00      	blt.n	8004ca0 <_ZN7TFT_GFX14writeFastVLineEssst+0x42>
 8004c9e:	e069      	b.n	8004d74 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 8004ca0:	1dbb      	adds	r3, r7, #6
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	5e9b      	ldrsh	r3, [r3, r2]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d064      	beq.n	8004d74 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
        if(h < 0) {                     // If negative height...
 8004caa:	1dbb      	adds	r3, r7, #6
 8004cac:	2200      	movs	r2, #0
 8004cae:	5e9b      	ldrsh	r3, [r3, r2]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da10      	bge.n	8004cd6 <_ZN7TFT_GFX14writeFastVLineEssst+0x78>
            y +=  h + 1;                //   Move Y to top edge
 8004cb4:	1dbb      	adds	r3, r7, #6
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	2108      	movs	r1, #8
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	18d3      	adds	r3, r2, r3
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	801a      	strh	r2, [r3, #0]
            h  = -h;                    //   Use positive height
 8004cca:	1dbb      	adds	r3, r7, #6
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	425b      	negs	r3, r3
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	1dbb      	adds	r3, r7, #6
 8004cd4:	801a      	strh	r2, [r3, #0]
        }
        if(y < this->_height) {               // Not off bottom
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	2200      	movs	r2, #0
 8004cdc:	5e9b      	ldrsh	r3, [r3, r2]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	88d2      	ldrh	r2, [r2, #6]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	da46      	bge.n	8004d74 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
            int16_t y2 = y + h - 1;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	881a      	ldrh	r2, [r3, #0]
 8004cec:	1dbb      	adds	r3, r7, #6
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	2116      	movs	r1, #22
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	801a      	strh	r2, [r3, #0]
            if(y2 >= 0) {               // Not off top
 8004cfe:	187b      	adds	r3, r7, r1
 8004d00:	2200      	movs	r2, #0
 8004d02:	5e9b      	ldrsh	r3, [r3, r2]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	db35      	blt.n	8004d74 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
                // Line partly or fully overlaps screen
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8004d08:	2308      	movs	r3, #8
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	5e9b      	ldrsh	r3, [r3, r2]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	da0a      	bge.n	8004d2a <_ZN7TFT_GFX14writeFastVLineEssst+0xcc>
 8004d14:	2308      	movs	r3, #8
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	2316      	movs	r3, #22
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	1dbb      	adds	r3, r7, #6
 8004d28:	801a      	strh	r2, [r3, #0]
                if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8004d2a:	2316      	movs	r3, #22
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2200      	movs	r2, #0
 8004d30:	5e9b      	ldrsh	r3, [r3, r2]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	88d2      	ldrh	r2, [r2, #6]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	db08      	blt.n	8004d4c <_ZN7TFT_GFX14writeFastVLineEssst+0xee>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	88da      	ldrh	r2, [r3, #6]
 8004d3e:	2308      	movs	r3, #8
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	1dbb      	adds	r3, r7, #6
 8004d4a:	801a      	strh	r2, [r3, #0]
                writeFillRectPreclipped(x, y, 1, h, color);
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2200      	movs	r2, #0
 8004d52:	5e9a      	ldrsh	r2, [r3, r2]
 8004d54:	230a      	movs	r3, #10
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5e59      	ldrsh	r1, [r3, r1]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	2328      	movs	r3, #40	; 0x28
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	1dbb      	adds	r3, r7, #6
 8004d68:	2400      	movs	r4, #0
 8004d6a:	5f1b      	ldrsh	r3, [r3, r4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f7ff ff23 	bl	8004bba <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
            }
        }
    }
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b006      	add	sp, #24
 8004d7a:	bdb0      	pop	{r4, r5, r7, pc}

08004d7c <_ZN7TFT_GFX8drawCharEsshtthh>:
        }
    }
}

void TFT_GFX::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) 
{
 8004d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	000c      	movs	r4, r1
 8004d86:	0010      	movs	r0, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	250a      	movs	r5, #10
 8004d8c:	197b      	adds	r3, r7, r5
 8004d8e:	1c22      	adds	r2, r4, #0
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	2308      	movs	r3, #8
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	1c02      	adds	r2, r0, #0
 8004d98:	801a      	strh	r2, [r3, #0]
 8004d9a:	1dfb      	adds	r3, r7, #7
 8004d9c:	1c0a      	adds	r2, r1, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
    if((x >= this->_width)            || // Clip right
 8004da0:	197b      	adds	r3, r7, r5
 8004da2:	2200      	movs	r2, #0
 8004da4:	5e9b      	ldrsh	r3, [r3, r2]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	8892      	ldrh	r2, [r2, #4]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	db00      	blt.n	8004db0 <_ZN7TFT_GFX8drawCharEsshtthh+0x34>
 8004dae:	e1c2      	b.n	8005136 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        (y >= this->_height)           || // Clip bottom
 8004db0:	2308      	movs	r3, #8
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2200      	movs	r2, #0
 8004db6:	5e9b      	ldrsh	r3, [r3, r2]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	88d2      	ldrh	r2, [r2, #6]
    if((x >= this->_width)            || // Clip right
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	db00      	blt.n	8004dc2 <_ZN7TFT_GFX8drawCharEsshtthh+0x46>
 8004dc0:	e1b9      	b.n	8005136 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004dc2:	230a      	movs	r3, #10
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5e59      	ldrsh	r1, [r3, r1]
 8004dca:	2330      	movs	r3, #48	; 0x30
 8004dcc:	2208      	movs	r2, #8
 8004dce:	4694      	mov	ip, r2
 8004dd0:	44bc      	add	ip, r7
 8004dd2:	4463      	add	r3, ip
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	0013      	movs	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	18cb      	adds	r3, r1, r3
 8004de0:	3b01      	subs	r3, #1
        (y >= this->_height)           || // Clip bottom
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da00      	bge.n	8004de8 <_ZN7TFT_GFX8drawCharEsshtthh+0x6c>
 8004de6:	e1a6      	b.n	8005136 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8004de8:	2308      	movs	r3, #8
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	2200      	movs	r2, #0
 8004dee:	5e9a      	ldrsh	r2, [r3, r2]
 8004df0:	2334      	movs	r3, #52	; 0x34
 8004df2:	2108      	movs	r1, #8
 8004df4:	468c      	mov	ip, r1
 8004df6:	44bc      	add	ip, r7
 8004df8:	4463      	add	r3, ip
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	18d3      	adds	r3, r2, r3
 8004e00:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da00      	bge.n	8004e08 <_ZN7TFT_GFX8drawCharEsshtthh+0x8c>
 8004e06:	e196      	b.n	8005136 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        return;

    if(c >= 176) c++; // Handle 'classic' charset behavior
 8004e08:	1dfb      	adds	r3, r7, #7
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2baf      	cmp	r3, #175	; 0xaf
 8004e0e:	d904      	bls.n	8004e1a <_ZN7TFT_GFX8drawCharEsshtthh+0x9e>
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781a      	ldrb	r2, [r3, #0]
 8004e14:	1dfb      	adds	r3, r7, #7
 8004e16:	3201      	adds	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]

    //startWrite();
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8004e1a:	2317      	movs	r3, #23
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	2317      	movs	r3, #23
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	dd00      	ble.n	8004e30 <_ZN7TFT_GFX8drawCharEsshtthh+0xb4>
 8004e2e:	e11f      	b.n	8005070 <_ZN7TFT_GFX8drawCharEsshtthh+0x2f4>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8004e30:	1dfb      	adds	r3, r7, #7
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	0013      	movs	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	189a      	adds	r2, r3, r2
 8004e3a:	2317      	movs	r3, #23
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	18d2      	adds	r2, r2, r3
 8004e44:	2316      	movs	r3, #22
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	49bd      	ldr	r1, [pc, #756]	; (8005140 <_ZN7TFT_GFX8drawCharEsshtthh+0x3c4>)
 8004e4a:	5c8a      	ldrb	r2, [r1, r2]
 8004e4c:	701a      	strb	r2, [r3, #0]
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8004e4e:	2315      	movs	r3, #21
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	2315      	movs	r3, #21
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	2b07      	cmp	r3, #7
 8004e60:	dd00      	ble.n	8004e64 <_ZN7TFT_GFX8drawCharEsshtthh+0xe8>
 8004e62:	e0fb      	b.n	800505c <_ZN7TFT_GFX8drawCharEsshtthh+0x2e0>
            if(line & 1) {
 8004e64:	2316      	movs	r3, #22
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d06c      	beq.n	8004f4a <_ZN7TFT_GFX8drawCharEsshtthh+0x1ce>
                if(size_x == 1 && size_y == 1)
 8004e70:	2330      	movs	r3, #48	; 0x30
 8004e72:	2208      	movs	r2, #8
 8004e74:	4694      	mov	ip, r2
 8004e76:	44bc      	add	ip, r7
 8004e78:	4463      	add	r3, ip
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d127      	bne.n	8004ed0 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
 8004e80:	2334      	movs	r3, #52	; 0x34
 8004e82:	2208      	movs	r2, #8
 8004e84:	4694      	mov	ip, r2
 8004e86:	44bc      	add	ip, r7
 8004e88:	4463      	add	r3, ip
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d11f      	bne.n	8004ed0 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
                    writePixel(x+i, y+j, color);
 8004e90:	2317      	movs	r3, #23
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	18d3      	adds	r3, r2, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	b219      	sxth	r1, r3
 8004ea6:	2315      	movs	r3, #21
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	18d3      	adds	r3, r2, r3
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b21a      	sxth	r2, r3
 8004ebc:	2328      	movs	r3, #40	; 0x28
 8004ebe:	2008      	movs	r0, #8
 8004ec0:	4684      	mov	ip, r0
 8004ec2:	44bc      	add	ip, r7
 8004ec4:	4463      	add	r3, ip
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff fd4c 	bl	8004966 <_ZN7TFT_GFX10writePixelEsst>
 8004ece:	e0b5      	b.n	800503c <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 8004ed0:	2317      	movs	r3, #23
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b25b      	sxtb	r3, r3
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2030      	movs	r0, #48	; 0x30
 8004edc:	2408      	movs	r4, #8
 8004ede:	193a      	adds	r2, r7, r4
 8004ee0:	1812      	adds	r2, r2, r0
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	4353      	muls	r3, r2
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	230a      	movs	r3, #10
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	18d3      	adds	r3, r2, r3
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	b219      	sxth	r1, r3
 8004ef6:	2315      	movs	r3, #21
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b25b      	sxtb	r3, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2634      	movs	r6, #52	; 0x34
 8004f02:	193a      	adds	r2, r7, r4
 8004f04:	1992      	adds	r2, r2, r6
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	b292      	uxth	r2, r2
 8004f0a:	4353      	muls	r3, r2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	0023      	movs	r3, r4
 8004f10:	001d      	movs	r5, r3
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	18d3      	adds	r3, r2, r3
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	b21c      	sxth	r4, r3
 8004f1c:	002a      	movs	r2, r5
 8004f1e:	18bb      	adds	r3, r7, r2
 8004f20:	181b      	adds	r3, r3, r0
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b21d      	sxth	r5, r3
 8004f26:	18bb      	adds	r3, r7, r2
 8004f28:	199b      	adds	r3, r3, r6
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	2228      	movs	r2, #40	; 0x28
 8004f32:	2608      	movs	r6, #8
 8004f34:	46b4      	mov	ip, r6
 8004f36:	44bc      	add	ip, r7
 8004f38:	4462      	add	r2, ip
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	9201      	str	r2, [sp, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	002b      	movs	r3, r5
 8004f42:	0022      	movs	r2, r4
 8004f44:	f7ff fd54 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
 8004f48:	e078      	b.n	800503c <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
            } else if(bg != color) {
 8004f4a:	232c      	movs	r3, #44	; 0x2c
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	4694      	mov	ip, r2
 8004f50:	44bc      	add	ip, r7
 8004f52:	4463      	add	r3, ip
 8004f54:	2228      	movs	r2, #40	; 0x28
 8004f56:	2108      	movs	r1, #8
 8004f58:	1879      	adds	r1, r7, r1
 8004f5a:	1889      	adds	r1, r1, r2
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	880b      	ldrh	r3, [r1, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d06b      	beq.n	800503c <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                if(size_x == 1 && size_y == 1)
 8004f64:	2330      	movs	r3, #48	; 0x30
 8004f66:	2208      	movs	r2, #8
 8004f68:	4694      	mov	ip, r2
 8004f6a:	44bc      	add	ip, r7
 8004f6c:	4463      	add	r3, ip
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d127      	bne.n	8004fc4 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
 8004f74:	2334      	movs	r3, #52	; 0x34
 8004f76:	2208      	movs	r2, #8
 8004f78:	4694      	mov	ip, r2
 8004f7a:	44bc      	add	ip, r7
 8004f7c:	4463      	add	r3, ip
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d11f      	bne.n	8004fc4 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
                    writePixel(x+i, y+j, bg);
 8004f84:	2317      	movs	r3, #23
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	230a      	movs	r3, #10
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	18d3      	adds	r3, r2, r3
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b219      	sxth	r1, r3
 8004f9a:	2315      	movs	r3, #21
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b25b      	sxtb	r3, r3
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	18d3      	adds	r3, r2, r3
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b21a      	sxth	r2, r3
 8004fb0:	232c      	movs	r3, #44	; 0x2c
 8004fb2:	2008      	movs	r0, #8
 8004fb4:	4684      	mov	ip, r0
 8004fb6:	44bc      	add	ip, r7
 8004fb8:	4463      	add	r3, ip
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f7ff fcd2 	bl	8004966 <_ZN7TFT_GFX10writePixelEsst>
 8004fc2:	e03b      	b.n	800503c <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 8004fc4:	2317      	movs	r3, #23
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b25b      	sxtb	r3, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2030      	movs	r0, #48	; 0x30
 8004fd0:	2408      	movs	r4, #8
 8004fd2:	193a      	adds	r2, r7, r4
 8004fd4:	1812      	adds	r2, r2, r0
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	4353      	muls	r3, r2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	230a      	movs	r3, #10
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	18d3      	adds	r3, r2, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	b219      	sxth	r1, r3
 8004fea:	2315      	movs	r3, #21
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2634      	movs	r6, #52	; 0x34
 8004ff6:	193a      	adds	r2, r7, r4
 8004ff8:	1992      	adds	r2, r2, r6
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	b292      	uxth	r2, r2
 8004ffe:	4353      	muls	r3, r2
 8005000:	b29a      	uxth	r2, r3
 8005002:	0023      	movs	r3, r4
 8005004:	001d      	movs	r5, r3
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	18d3      	adds	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	b21c      	sxth	r4, r3
 8005010:	002a      	movs	r2, r5
 8005012:	18bb      	adds	r3, r7, r2
 8005014:	181b      	adds	r3, r3, r0
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b21d      	sxth	r5, r3
 800501a:	18bb      	adds	r3, r7, r2
 800501c:	199b      	adds	r3, r3, r6
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b21b      	sxth	r3, r3
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	222c      	movs	r2, #44	; 0x2c
 8005026:	2608      	movs	r6, #8
 8005028:	46b4      	mov	ip, r6
 800502a:	44bc      	add	ip, r7
 800502c:	4462      	add	r2, ip
 800502e:	8812      	ldrh	r2, [r2, #0]
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	002b      	movs	r3, r5
 8005036:	0022      	movs	r2, r4
 8005038:	f7ff fcda 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
        for(int8_t j=0; j<8; j++, line >>= 1) {
 800503c:	2115      	movs	r1, #21
 800503e:	187b      	adds	r3, r7, r1
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b25b      	sxtb	r3, r3
 8005044:	b2db      	uxtb	r3, r3
 8005046:	3301      	adds	r3, #1
 8005048:	b2da      	uxtb	r2, r3
 800504a:	187b      	adds	r3, r7, r1
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	2116      	movs	r1, #22
 8005050:	187b      	adds	r3, r7, r1
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	105a      	asrs	r2, r3, #1
 8005056:	187b      	adds	r3, r7, r1
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e6fc      	b.n	8004e56 <_ZN7TFT_GFX8drawCharEsshtthh+0xda>
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 800505c:	2117      	movs	r1, #23
 800505e:	187b      	adds	r3, r7, r1
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	b25b      	sxtb	r3, r3
 8005064:	b2db      	uxtb	r3, r3
 8005066:	3301      	adds	r3, #1
 8005068:	b2da      	uxtb	r2, r3
 800506a:	187b      	adds	r3, r7, r1
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e6d8      	b.n	8004e22 <_ZN7TFT_GFX8drawCharEsshtthh+0xa6>
            }
        }
    }
    if(bg != color) { // If opaque, draw vertical line for last column
 8005070:	232c      	movs	r3, #44	; 0x2c
 8005072:	2208      	movs	r2, #8
 8005074:	4694      	mov	ip, r2
 8005076:	44bc      	add	ip, r7
 8005078:	4463      	add	r3, ip
 800507a:	2228      	movs	r2, #40	; 0x28
 800507c:	2108      	movs	r1, #8
 800507e:	1879      	adds	r1, r7, r1
 8005080:	1889      	adds	r1, r1, r2
 8005082:	881a      	ldrh	r2, [r3, #0]
 8005084:	880b      	ldrh	r3, [r1, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d056      	beq.n	8005138 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 800508a:	2330      	movs	r3, #48	; 0x30
 800508c:	2208      	movs	r2, #8
 800508e:	4694      	mov	ip, r2
 8005090:	44bc      	add	ip, r7
 8005092:	4463      	add	r3, ip
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d11d      	bne.n	80050d6 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 800509a:	2334      	movs	r3, #52	; 0x34
 800509c:	2208      	movs	r2, #8
 800509e:	4694      	mov	ip, r2
 80050a0:	44bc      	add	ip, r7
 80050a2:	4463      	add	r3, ip
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d115      	bne.n	80050d6 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 80050aa:	230a      	movs	r3, #10
 80050ac:	18fb      	adds	r3, r7, r3
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	3305      	adds	r3, #5
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	b219      	sxth	r1, r3
 80050b6:	2308      	movs	r3, #8
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	2200      	movs	r2, #0
 80050bc:	5e9a      	ldrsh	r2, [r3, r2]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	232c      	movs	r3, #44	; 0x2c
 80050c2:	2408      	movs	r4, #8
 80050c4:	46a4      	mov	ip, r4
 80050c6:	44bc      	add	ip, r7
 80050c8:	4463      	add	r3, ip
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2308      	movs	r3, #8
 80050d0:	f7ff fdc5 	bl	8004c5e <_ZN7TFT_GFX14writeFastVLineEssst>
 80050d4:	e030      	b.n	8005138 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 80050d6:	2030      	movs	r0, #48	; 0x30
 80050d8:	2408      	movs	r4, #8
 80050da:	193b      	adds	r3, r7, r4
 80050dc:	181b      	adds	r3, r3, r0
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	1c1a      	adds	r2, r3, #0
 80050e4:	0092      	lsls	r2, r2, #2
 80050e6:	18d3      	adds	r3, r2, r3
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	230a      	movs	r3, #10
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	18d3      	adds	r3, r2, r3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	b219      	sxth	r1, r3
 80050f6:	193b      	adds	r3, r7, r4
 80050f8:	181b      	adds	r3, r3, r0
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b21d      	sxth	r5, r3
 80050fe:	2334      	movs	r3, #52	; 0x34
 8005100:	2208      	movs	r2, #8
 8005102:	4694      	mov	ip, r2
 8005104:	44bc      	add	ip, r7
 8005106:	4463      	add	r3, ip
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	b29b      	uxth	r3, r3
 8005110:	b21b      	sxth	r3, r3
 8005112:	0022      	movs	r2, r4
 8005114:	18ba      	adds	r2, r7, r2
 8005116:	2400      	movs	r4, #0
 8005118:	5f14      	ldrsh	r4, [r2, r4]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	222c      	movs	r2, #44	; 0x2c
 800511e:	2608      	movs	r6, #8
 8005120:	46b4      	mov	ip, r6
 8005122:	44bc      	add	ip, r7
 8005124:	4462      	add	r2, ip
 8005126:	8812      	ldrh	r2, [r2, #0]
 8005128:	9201      	str	r2, [sp, #4]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	002b      	movs	r3, r5
 800512e:	0022      	movs	r2, r4
 8005130:	f7ff fc5e 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
 8005134:	e000      	b.n	8005138 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        return;
 8005136:	46c0      	nop			; (mov r8, r8)
    }
    //endWrite();
}
 8005138:	46bd      	mov	sp, r7
 800513a:	b007      	add	sp, #28
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	0800752c 	.word	0x0800752c

08005144 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b002      	add	sp, #8
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	0018      	movs	r0, r3
 8005166:	f7ff ffed 	bl	8005144 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800516a:	0003      	movs	r3, r0
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff ffe5 	bl	8005144 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800517a:	0003      	movs	r3, r0
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	805a      	strh	r2, [r3, #2]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b004      	add	sp, #16
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 800518c:	b5b0      	push	{r4, r5, r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f7ff ffd3 	bl	8005144 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800519e:	0004      	movs	r4, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff ffce 	bl	8005144 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80051a8:	0002      	movs	r2, r0
 80051aa:	250c      	movs	r5, #12
 80051ac:	197b      	adds	r3, r7, r5
 80051ae:	0021      	movs	r1, r4
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7ff ffd0 	bl	8005156 <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>
 80051b6:	2108      	movs	r1, #8
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	197a      	adds	r2, r7, r5
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	187a      	adds	r2, r7, r1
 80051c2:	2300      	movs	r3, #0
 80051c4:	8811      	ldrh	r1, [r2, #0]
 80051c6:	0409      	lsls	r1, r1, #16
 80051c8:	0c09      	lsrs	r1, r1, #16
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	041b      	lsls	r3, r3, #16
 80051ce:	430b      	orrs	r3, r1
 80051d0:	8852      	ldrh	r2, [r2, #2]
 80051d2:	0412      	lsls	r2, r2, #16
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	0c1b      	lsrs	r3, r3, #16
 80051d8:	4313      	orrs	r3, r2
    }
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b004      	add	sp, #16
 80051e0:	bdb0      	pop	{r4, r5, r7, pc}

080051e2 <_ZN7TFT_GFX10drawStringEssPKctthhtb>:

std::pair<uint16_t, uint16_t> TFT_GFX::drawString(int16_t init_x, int16_t init_y, const char* s, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, uint16_t x_edge, bool do_center)
{
 80051e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e4:	46c6      	mov	lr, r8
 80051e6:	b500      	push	{lr}
 80051e8:	b08e      	sub	sp, #56	; 0x38
 80051ea:	af04      	add	r7, sp, #16
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	0008      	movs	r0, r1
 80051f0:	0011      	movs	r1, r2
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	230a      	movs	r3, #10
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	1c02      	adds	r2, r0, #0
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	2308      	movs	r3, #8
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	1c0a      	adds	r2, r1, #0
 8005202:	801a      	strh	r2, [r3, #0]
	uint8_t totalChars = this->getStringSize(s);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	0011      	movs	r1, r2
 800520a:	0018      	movs	r0, r3
 800520c:	f7ff fb15 	bl	800483a <_ZN7TFT_GFX13getStringSizeEPKc>
 8005210:	0003      	movs	r3, r0
 8005212:	001a      	movs	r2, r3
 8005214:	211b      	movs	r1, #27
 8005216:	187b      	adds	r3, r7, r1
 8005218:	701a      	strb	r2, [r3, #0]
	totalChars = (totalChars > TFT_GFX::MAX_STRING_LENGTH ? TFT_GFX::MAX_STRING_LENGTH : totalChars);
 800521a:	187b      	adds	r3, r7, r1
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d803      	bhi.n	800522a <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x48>
 8005222:	231b      	movs	r3, #27
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	781a      	ldrb	r2, [r3, #0]
 8005228:	e000      	b.n	800522c <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x4a>
 800522a:	2264      	movs	r2, #100	; 0x64
 800522c:	231b      	movs	r3, #27
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	701a      	strb	r2, [r3, #0]

	uint16_t currX = init_x;
 8005232:	2326      	movs	r3, #38	; 0x26
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	210a      	movs	r1, #10
 8005238:	187a      	adds	r2, r7, r1
 800523a:	8812      	ldrh	r2, [r2, #0]
 800523c:	801a      	strh	r2, [r3, #0]
	uint16_t currY = init_y;
 800523e:	2324      	movs	r3, #36	; 0x24
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	2008      	movs	r0, #8
 8005244:	183a      	adds	r2, r7, r0
 8005246:	8812      	ldrh	r2, [r2, #0]
 8005248:	801a      	strh	r2, [r3, #0]

	uint16_t maxX = init_x;
 800524a:	187b      	adds	r3, r7, r1
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	2318      	movs	r3, #24
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	801a      	strh	r2, [r3, #0]
	uint16_t maxY = init_y + (size_y * 8);
 8005254:	2344      	movs	r3, #68	; 0x44
 8005256:	2208      	movs	r2, #8
 8005258:	4694      	mov	ip, r2
 800525a:	44bc      	add	ip, r7
 800525c:	4463      	add	r3, ip
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	b29a      	uxth	r2, r3
 8005266:	183b      	adds	r3, r7, r0
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	18d3      	adds	r3, r2, r3
 800526c:	b29a      	uxth	r2, r3
 800526e:	2316      	movs	r3, #22
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	801a      	strh	r2, [r3, #0]

	const uint8_t maxCharsInLine = (x_edge - init_x)/(size_x * 6);
 8005274:	2348      	movs	r3, #72	; 0x48
 8005276:	2208      	movs	r2, #8
 8005278:	4694      	mov	ip, r2
 800527a:	44bc      	add	ip, r7
 800527c:	4463      	add	r3, ip
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	187b      	adds	r3, r7, r1
 8005282:	2100      	movs	r1, #0
 8005284:	5e5b      	ldrsh	r3, [r3, r1]
 8005286:	1ad0      	subs	r0, r2, r3
 8005288:	2340      	movs	r3, #64	; 0x40
 800528a:	2208      	movs	r2, #8
 800528c:	4694      	mov	ip, r2
 800528e:	44bc      	add	ip, r7
 8005290:	4463      	add	r3, ip
 8005292:	781a      	ldrb	r2, [r3, #0]
 8005294:	0013      	movs	r3, r2
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	189b      	adds	r3, r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	0019      	movs	r1, r3
 800529e:	f7fa ffbd 	bl	800021c <__divsi3>
 80052a2:	0003      	movs	r3, r0
 80052a4:	001a      	movs	r2, r3
 80052a6:	2321      	movs	r3, #33	; 0x21
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	701a      	strb	r2, [r3, #0]
	while(*s)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d100      	bne.n	80052b6 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xd4>
 80052b4:	e0d9      	b.n	800546a <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x288>
	{
		uint8_t currLineSize = this->getLineSize(s, maxCharsInLine);
 80052b6:	2520      	movs	r5, #32
 80052b8:	197c      	adds	r4, r7, r5
 80052ba:	2321      	movs	r3, #33	; 0x21
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7ff fa5e 	bl	8004786 <_ZN7TFT_GFX11getLineSizeEPKch>
 80052ca:	0003      	movs	r3, r0
 80052cc:	7023      	strb	r3, [r4, #0]
		uint8_t functionalLineSize;
		if(s[currLineSize - 1] == ' ')
 80052ce:	197b      	adds	r3, r7, r5
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	18d3      	adds	r3, r2, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d107      	bne.n	80052ee <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x10c>
		{
			functionalLineSize = currLineSize - 1;
 80052de:	2323      	movs	r3, #35	; 0x23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2220      	movs	r2, #32
 80052e4:	18ba      	adds	r2, r7, r2
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	3a01      	subs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e005      	b.n	80052fa <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x118>
		}else{
			functionalLineSize = currLineSize;
 80052ee:	2323      	movs	r3, #35	; 0x23
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2220      	movs	r2, #32
 80052f4:	18ba      	adds	r2, r7, r2
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	701a      	strb	r2, [r3, #0]
		}

		if(do_center)
 80052fa:	234c      	movs	r3, #76	; 0x4c
 80052fc:	2208      	movs	r2, #8
 80052fe:	4694      	mov	ip, r2
 8005300:	44bc      	add	ip, r7
 8005302:	4463      	add	r3, ip
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d026      	beq.n	8005358 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x176>
		{
			currX = ((x_edge - init_x) - (functionalLineSize * size_x * 6))/2 + init_x;
 800530a:	2348      	movs	r3, #72	; 0x48
 800530c:	2208      	movs	r2, #8
 800530e:	4694      	mov	ip, r2
 8005310:	44bc      	add	ip, r7
 8005312:	4463      	add	r3, ip
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	230a      	movs	r3, #10
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	2100      	movs	r1, #0
 800531c:	5e5b      	ldrsh	r3, [r3, r1]
 800531e:	1ad1      	subs	r1, r2, r3
 8005320:	2323      	movs	r3, #35	; 0x23
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2240      	movs	r2, #64	; 0x40
 8005328:	2008      	movs	r0, #8
 800532a:	4684      	mov	ip, r0
 800532c:	44bc      	add	ip, r7
 800532e:	4462      	add	r2, ip
 8005330:	7812      	ldrb	r2, [r2, #0]
 8005332:	435a      	muls	r2, r3
 8005334:	0013      	movs	r3, r2
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	18cb      	adds	r3, r1, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	da00      	bge.n	8005344 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x162>
 8005342:	3301      	adds	r3, #1
 8005344:	105b      	asrs	r3, r3, #1
 8005346:	b299      	uxth	r1, r3
 8005348:	230a      	movs	r3, #10
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	2326      	movs	r3, #38	; 0x26
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	188a      	adds	r2, r1, r2
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e005      	b.n	8005364 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x182>
		}else{
			currX = init_x;
 8005358:	2326      	movs	r3, #38	; 0x26
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	220a      	movs	r2, #10
 800535e:	18ba      	adds	r2, r7, r2
 8005360:	8812      	ldrh	r2, [r2, #0]
 8005362:	801a      	strh	r2, [r3, #0]
		}

		for(uint8_t i = 0; i < functionalLineSize; i++)
 8005364:	2322      	movs	r3, #34	; 0x22
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	2322      	movs	r3, #34	; 0x22
 800536e:	18fa      	adds	r2, r7, r3
 8005370:	2323      	movs	r3, #35	; 0x23
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d250      	bcs.n	800541e <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x23c>
		{
			drawChar(currX,currY,*(s++),color,bg,size_x,size_y);
 800537c:	2526      	movs	r5, #38	; 0x26
 800537e:	197b      	adds	r3, r7, r5
 8005380:	2100      	movs	r1, #0
 8005382:	5e59      	ldrsh	r1, [r3, r1]
 8005384:	2324      	movs	r3, #36	; 0x24
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2400      	movs	r4, #0
 800538a:	5f1c      	ldrsh	r4, [r3, r4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4698      	mov	r8, r3
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	2344      	movs	r3, #68	; 0x44
 800539a:	2208      	movs	r2, #8
 800539c:	4694      	mov	ip, r2
 800539e:	44bc      	add	ip, r7
 80053a0:	4463      	add	r3, ip
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	2640      	movs	r6, #64	; 0x40
 80053a8:	2308      	movs	r3, #8
 80053aa:	18fa      	adds	r2, r7, r3
 80053ac:	1993      	adds	r3, r2, r6
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	233c      	movs	r3, #60	; 0x3c
 80053b4:	2208      	movs	r2, #8
 80053b6:	4694      	mov	ip, r2
 80053b8:	44bc      	add	ip, r7
 80053ba:	4463      	add	r3, ip
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	2338      	movs	r3, #56	; 0x38
 80053c2:	2208      	movs	r2, #8
 80053c4:	4694      	mov	ip, r2
 80053c6:	44bc      	add	ip, r7
 80053c8:	4463      	add	r3, ip
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	4643      	mov	r3, r8
 80053d0:	0022      	movs	r2, r4
 80053d2:	f7ff fcd3 	bl	8004d7c <_ZN7TFT_GFX8drawCharEsshtthh>
			currX += size_x * 6;
 80053d6:	2308      	movs	r3, #8
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	199b      	adds	r3, r3, r6
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	1c1a      	adds	r2, r3, #0
 80053e2:	1c13      	adds	r3, r2, #0
 80053e4:	18db      	adds	r3, r3, r3
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	18db      	adds	r3, r3, r3
 80053ea:	b299      	uxth	r1, r3
 80053ec:	197b      	adds	r3, r7, r5
 80053ee:	197a      	adds	r2, r7, r5
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	188a      	adds	r2, r1, r2
 80053f4:	801a      	strh	r2, [r3, #0]
			if(currX > maxX)
 80053f6:	2318      	movs	r3, #24
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	197a      	adds	r2, r7, r5
 80053fe:	8812      	ldrh	r2, [r2, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d905      	bls.n	8005410 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x22e>
			{
				maxX = currX;
 8005404:	2318      	movs	r3, #24
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2226      	movs	r2, #38	; 0x26
 800540a:	18ba      	adds	r2, r7, r2
 800540c:	8812      	ldrh	r2, [r2, #0]
 800540e:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < functionalLineSize; i++)
 8005410:	2122      	movs	r1, #34	; 0x22
 8005412:	187b      	adds	r3, r7, r1
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	187b      	adds	r3, r7, r1
 8005418:	3201      	adds	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e7a6      	b.n	800536c <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x18a>
			}
		}
		//Skip the space
		s += (functionalLineSize == currLineSize ? 0 : 1);
 800541e:	2323      	movs	r3, #35	; 0x23
 8005420:	18fa      	adds	r2, r7, r3
 8005422:	2320      	movs	r3, #32
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	4193      	sbcs	r3, r2
 8005430:	b2db      	uxtb	r3, r3
 8005432:	001a      	movs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	189b      	adds	r3, r3, r2
 8005438:	607b      	str	r3, [r7, #4]
		//Go to next row
		currY += size_y * 8;
 800543a:	2344      	movs	r3, #68	; 0x44
 800543c:	2208      	movs	r2, #8
 800543e:	4694      	mov	ip, r2
 8005440:	44bc      	add	ip, r7
 8005442:	4463      	add	r3, ip
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	b299      	uxth	r1, r3
 800544c:	2224      	movs	r2, #36	; 0x24
 800544e:	18bb      	adds	r3, r7, r2
 8005450:	18ba      	adds	r2, r7, r2
 8005452:	8812      	ldrh	r2, [r2, #0]
 8005454:	188a      	adds	r2, r1, r2
 8005456:	801a      	strh	r2, [r3, #0]
		//If the next line starts with a space lets just skip it
		if(*s == ' ')
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b20      	cmp	r3, #32
 800545e:	d000      	beq.n	8005462 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x280>
 8005460:	e724      	b.n	80052ac <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		{
			s++;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3301      	adds	r3, #1
 8005466:	607b      	str	r3, [r7, #4]
	while(*s)
 8005468:	e720      	b.n	80052ac <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		}
	}
	maxY = currY;
 800546a:	2316      	movs	r3, #22
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	18ba      	adds	r2, r7, r2
 8005472:	8812      	ldrh	r2, [r2, #0]
 8005474:	801a      	strh	r2, [r3, #0]
	if(maxX > this->_width)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	889a      	ldrh	r2, [r3, #4]
 800547a:	2318      	movs	r3, #24
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d204      	bcs.n	800548e <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2ac>
	{
		maxX = this->_width;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	889a      	ldrh	r2, [r3, #4]
 8005488:	2318      	movs	r3, #24
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	801a      	strh	r2, [r3, #0]
	}
	if(maxY > this->_height)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	88da      	ldrh	r2, [r3, #6]
 8005492:	2316      	movs	r3, #22
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d204      	bcs.n	80054a6 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2c4>
	{
		maxY = this->_height;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88da      	ldrh	r2, [r3, #6]
 80054a0:	2316      	movs	r3, #22
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	801a      	strh	r2, [r3, #0]
	}
	return std::make_pair(maxX, maxY);
 80054a6:	2316      	movs	r3, #22
 80054a8:	18fa      	adds	r2, r7, r3
 80054aa:	2318      	movs	r3, #24
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	0011      	movs	r1, r2
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7ff fe6b 	bl	800518c <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>
 80054b6:	0003      	movs	r3, r0
 80054b8:	001a      	movs	r2, r3
 80054ba:	211c      	movs	r1, #28
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	187a      	adds	r2, r7, r1
 80054c2:	2300      	movs	r3, #0
 80054c4:	8811      	ldrh	r1, [r2, #0]
 80054c6:	0409      	lsls	r1, r1, #16
 80054c8:	0c09      	lsrs	r1, r1, #16
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	430b      	orrs	r3, r1
 80054d0:	8852      	ldrh	r2, [r2, #2]
 80054d2:	0412      	lsls	r2, r2, #16
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	4313      	orrs	r3, r2
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b00a      	add	sp, #40	; 0x28
 80054e0:	bc04      	pop	{r2}
 80054e2:	4690      	mov	r8, r2
 80054e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054e6 <_ZN7TFT_GFX11setRotationEh>:

void TFT_GFX::setRotation(uint8_t m)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	000a      	movs	r2, r1
 80054f0:	1cfb      	adds	r3, r7, #3
 80054f2:	701a      	strb	r2, [r3, #0]
	uint8_t rotation = m % 4; // can't be higher than 3
 80054f4:	1cfb      	adds	r3, r7, #3
 80054f6:	781a      	ldrb	r2, [r3, #0]
 80054f8:	200f      	movs	r0, #15
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	2103      	movs	r1, #3
 80054fe:	400a      	ands	r2, r1
 8005500:	701a      	strb	r2, [r3, #0]
	    switch (rotation) {
 8005502:	183b      	adds	r3, r7, r0
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d013      	beq.n	8005532 <_ZN7TFT_GFX11setRotationEh+0x4c>
 800550a:	dc02      	bgt.n	8005512 <_ZN7TFT_GFX11setRotationEh+0x2c>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <_ZN7TFT_GFX11setRotationEh+0x36>
 8005510:	e030      	b.n	8005574 <_ZN7TFT_GFX11setRotationEh+0x8e>
 8005512:	2b02      	cmp	r3, #2
 8005514:	d018      	beq.n	8005548 <_ZN7TFT_GFX11setRotationEh+0x62>
 8005516:	2b03      	cmp	r3, #3
 8005518:	d021      	beq.n	800555e <_ZN7TFT_GFX11setRotationEh+0x78>
 800551a:	e02b      	b.n	8005574 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 0:
	            m = (MADCTL_MX | MADCTL_BGR);
 800551c:	1cfb      	adds	r3, r7, #3
 800551e:	2248      	movs	r2, #72	; 0x48
 8005520:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	22f0      	movs	r2, #240	; 0xf0
 8005526:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	22a0      	movs	r2, #160	; 0xa0
 800552c:	0052      	lsls	r2, r2, #1
 800552e:	80da      	strh	r2, [r3, #6]
	            break;
 8005530:	e020      	b.n	8005574 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 1:
	            m = (MADCTL_MV | MADCTL_BGR);
 8005532:	1cfb      	adds	r3, r7, #3
 8005534:	2228      	movs	r2, #40	; 0x28
 8005536:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	22a0      	movs	r2, #160	; 0xa0
 800553c:	0052      	lsls	r2, r2, #1
 800553e:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	22f0      	movs	r2, #240	; 0xf0
 8005544:	80da      	strh	r2, [r3, #6]
	            break;
 8005546:	e015      	b.n	8005574 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 2:
	            m = (MADCTL_MY | MADCTL_BGR);
 8005548:	1cfb      	adds	r3, r7, #3
 800554a:	2288      	movs	r2, #136	; 0x88
 800554c:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	22f0      	movs	r2, #240	; 0xf0
 8005552:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	22a0      	movs	r2, #160	; 0xa0
 8005558:	0052      	lsls	r2, r2, #1
 800555a:	80da      	strh	r2, [r3, #6]
	            break;
 800555c:	e00a      	b.n	8005574 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 3:
	            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 800555e:	1cfb      	adds	r3, r7, #3
 8005560:	22e8      	movs	r2, #232	; 0xe8
 8005562:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	22a0      	movs	r2, #160	; 0xa0
 8005568:	0052      	lsls	r2, r2, #1
 800556a:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	22f0      	movs	r2, #240	; 0xf0
 8005570:	80da      	strh	r2, [r3, #6]
	            break;
 8005572:	46c0      	nop			; (mov r8, r8)
	    }
	    sendCommand(this->spiInstance, ILI9341_MADCTL, &m, 1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	1cfa      	adds	r2, r7, #3
 800557a:	2301      	movs	r3, #1
 800557c:	2136      	movs	r1, #54	; 0x36
 800557e:	f000 f8a7 	bl	80056d0 <sendCommand>
}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b004      	add	sp, #16
 8005588:	bd80      	pop	{r7, pc}

0800558a <_ZN7TFT_GFX5widthEv>:

uint16_t TFT_GFX::width(void)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
	return this->_width;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	889b      	ldrh	r3, [r3, #4]
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b002      	add	sp, #8
 800559c:	bd80      	pop	{r7, pc}

0800559e <_ZN7TFT_GFX6heightEv>:

uint16_t TFT_GFX::height(void)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
	return this->_height;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	88db      	ldrh	r3, [r3, #6]
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b002      	add	sp, #8
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 80055b6:	2390      	movs	r3, #144	; 0x90
 80055b8:	05db      	lsls	r3, r3, #23
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	2390      	movs	r3, #144	; 0x90
 80055be:	05db      	lsls	r3, r3, #23
 80055c0:	2101      	movs	r1, #1
 80055c2:	438a      	bics	r2, r1
 80055c4:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 80055c6:	2096      	movs	r0, #150	; 0x96
 80055c8:	f7fb fe9c 	bl	8001304 <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 80055cc:	2390      	movs	r3, #144	; 0x90
 80055ce:	05db      	lsls	r3, r3, #23
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	2390      	movs	r3, #144	; 0x90
 80055d4:	05db      	lsls	r3, r3, #23
 80055d6:	2101      	movs	r1, #1
 80055d8:	430a      	orrs	r2, r1
 80055da:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 80055dc:	2096      	movs	r0, #150	; 0x96
 80055de:	f7fb fe91 	bl	8001304 <HAL_Delay>
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <pullCSLow>:

void pullCSLow(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <pullCSLow+0x18>)
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <pullCSLow+0x18>)
 80055f2:	2102      	movs	r1, #2
 80055f4:	438a      	bics	r2, r1
 80055f6:	615a      	str	r2, [r3, #20]
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	48000800 	.word	0x48000800

08005604 <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	000a      	movs	r2, r1
 800560e:	1cfb      	adds	r3, r7, #3
 8005610:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2202      	movs	r2, #2
 800561a:	4013      	ands	r3, r2
 800561c:	d0fa      	beq.n	8005614 <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	330c      	adds	r3, #12
 8005622:	1cfa      	adds	r2, r7, #3
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	701a      	strb	r2, [r3, #0]
}
 8005628:	46c0      	nop			; (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b002      	add	sp, #8
 800562e:	bd80      	pop	{r7, pc}

08005630 <hspi_w16>:

void hspi_w16(SPI_TypeDef *SPIx, uint16_t dat) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	000a      	movs	r2, r1
 800563a:	1cbb      	adds	r3, r7, #2
 800563c:	801a      	strh	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	d0fa      	beq.n	8005640 <hspi_w16+0x10>
  // Send the data.
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
 800564a:	1cbb      	adds	r3, r7, #2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	b21a      	sxth	r2, r3
 8005652:	1cbb      	adds	r3, r7, #2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	b29b      	uxth	r3, r3
 800565a:	b21b      	sxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b21a      	sxth	r2, r3
 8005660:	1cbb      	adds	r3, r7, #2
 8005662:	801a      	strh	r2, [r3, #0]
  *(uint16_t*)&(SPIx->DR) = dat;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	330c      	adds	r3, #12
 8005668:	1cba      	adds	r2, r7, #2
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	801a      	strh	r2, [r3, #0]
}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	46bd      	mov	sp, r7
 8005672:	b002      	add	sp, #8
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <hspi_cmd>:

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	000a      	movs	r2, r1
 8005682:	1cfb      	adds	r3, r7, #3
 8005684:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2280      	movs	r2, #128	; 0x80
 800568e:	4013      	ands	r3, r2
 8005690:	d1fa      	bne.n	8005688 <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <hspi_cmd+0x54>)
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <hspi_cmd+0x54>)
 8005698:	2101      	movs	r1, #1
 800569a:	438a      	bics	r2, r1
 800569c:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 800569e:	1cfb      	adds	r3, r7, #3
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0011      	movs	r1, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7ff ffac 	bl	8005604 <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2280      	movs	r2, #128	; 0x80
 80056b4:	4013      	ands	r3, r2
 80056b6:	d1fa      	bne.n	80056ae <hspi_cmd+0x36>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 80056b8:	4b04      	ldr	r3, [pc, #16]	; (80056cc <hspi_cmd+0x54>)
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <hspi_cmd+0x54>)
 80056be:	2101      	movs	r1, #1
 80056c0:	430a      	orrs	r2, r1
 80056c2:	615a      	str	r2, [r3, #20]
}
 80056c4:	46c0      	nop			; (mov r8, r8)
 80056c6:	46bd      	mov	sp, r7
 80056c8:	b002      	add	sp, #8
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	48000800 	.word	0x48000800

080056d0 <sendCommand>:

void sendCommand(SPI_TypeDef *SPIx, uint8_t cmd, uint8_t* data, uint8_t length)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	0008      	movs	r0, r1
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	0019      	movs	r1, r3
 80056de:	240b      	movs	r4, #11
 80056e0:	193b      	adds	r3, r7, r4
 80056e2:	1c02      	adds	r2, r0, #0
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	230a      	movs	r3, #10
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	1c0a      	adds	r2, r1, #0
 80056ec:	701a      	strb	r2, [r3, #0]
	hspi_cmd(SPIx,cmd);
 80056ee:	193b      	adds	r3, r7, r4
 80056f0:	781a      	ldrb	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	0011      	movs	r1, r2
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7ff ffbe 	bl	8005678 <hspi_cmd>
	for(int i = 0; i < length; i++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e00b      	b.n	800571a <sendCommand+0x4a>
	{
		hspi_w8(SPIx, *(data++));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	0011      	movs	r1, r2
 800570e:	0018      	movs	r0, r3
 8005710:	f7ff ff78 	bl	8005604 <hspi_w8>
	for(int i = 0; i < length; i++)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	3301      	adds	r3, #1
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	230a      	movs	r3, #10
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	429a      	cmp	r2, r3
 8005724:	dbed      	blt.n	8005702 <sendCommand+0x32>
	}
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	b007      	add	sp, #28
 800572c:	bd90      	pop	{r4, r7, pc}

0800572e <ili9341_hspi_init>:

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	21ef      	movs	r1, #239	; 0xef
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff ff9c 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2103      	movs	r1, #3
 8005744:	0018      	movs	r0, r3
 8005746:	f7ff ff5d 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x80);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	0018      	movs	r0, r3
 8005750:	f7ff ff58 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2102      	movs	r1, #2
 8005758:	0018      	movs	r0, r3
 800575a:	f7ff ff53 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	21cf      	movs	r1, #207	; 0xcf
 8005762:	0018      	movs	r0, r3
 8005764:	f7ff ff88 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2100      	movs	r1, #0
 800576c:	0018      	movs	r0, r3
 800576e:	f7ff ff49 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	21c1      	movs	r1, #193	; 0xc1
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff ff44 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x30);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2130      	movs	r1, #48	; 0x30
 8005780:	0018      	movs	r0, r3
 8005782:	f7ff ff3f 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	21ed      	movs	r1, #237	; 0xed
 800578a:	0018      	movs	r0, r3
 800578c:	f7ff ff74 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2164      	movs	r1, #100	; 0x64
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff ff35 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2103      	movs	r1, #3
 800579e:	0018      	movs	r0, r3
 80057a0:	f7ff ff30 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x12);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2112      	movs	r1, #18
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7ff ff2b 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x81);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2181      	movs	r1, #129	; 0x81
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7ff ff26 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	21e8      	movs	r1, #232	; 0xe8
 80057bc:	0018      	movs	r0, r3
 80057be:	f7ff ff5b 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2185      	movs	r1, #133	; 0x85
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7ff ff1c 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2100      	movs	r1, #0
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff ff17 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x78);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2178      	movs	r1, #120	; 0x78
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff ff12 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	21cb      	movs	r1, #203	; 0xcb
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7ff ff47 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2139      	movs	r1, #57	; 0x39
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff ff08 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	212c      	movs	r1, #44	; 0x2c
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7ff ff03 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	0018      	movs	r0, r3
 8005804:	f7ff fefe 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2134      	movs	r1, #52	; 0x34
 800580c:	0018      	movs	r0, r3
 800580e:	f7ff fef9 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2102      	movs	r1, #2
 8005816:	0018      	movs	r0, r3
 8005818:	f7ff fef4 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	21f7      	movs	r1, #247	; 0xf7
 8005820:	0018      	movs	r0, r3
 8005822:	f7ff ff29 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2120      	movs	r1, #32
 800582a:	0018      	movs	r0, r3
 800582c:	f7ff feea 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	21ea      	movs	r1, #234	; 0xea
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff ff1f 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2100      	movs	r1, #0
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff fee0 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2100      	movs	r1, #0
 8005848:	0018      	movs	r0, r3
 800584a:	f7ff fedb 	bl	8005604 <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	21c0      	movs	r1, #192	; 0xc0
 8005852:	0018      	movs	r0, r3
 8005854:	f7ff ff10 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2123      	movs	r1, #35	; 0x23
 800585c:	0018      	movs	r0, r3
 800585e:	f7ff fed1 	bl	8005604 <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	21c1      	movs	r1, #193	; 0xc1
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff ff06 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2110      	movs	r1, #16
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff fec7 	bl	8005604 <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	21c5      	movs	r1, #197	; 0xc5
 800587a:	0018      	movs	r0, r3
 800587c:	f7ff fefc 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	213e      	movs	r1, #62	; 0x3e
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff febd 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x28);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2128      	movs	r1, #40	; 0x28
 800588e:	0018      	movs	r0, r3
 8005890:	f7ff feb8 	bl	8005604 <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	21c7      	movs	r1, #199	; 0xc7
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff feed 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2186      	movs	r1, #134	; 0x86
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7ff feae 	bl	8005604 <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2136      	movs	r1, #54	; 0x36
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fee3 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2148      	movs	r1, #72	; 0x48
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff fea4 	bl	8005604 <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2137      	movs	r1, #55	; 0x37
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7ff fed9 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2100      	movs	r1, #0
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fe9a 	bl	8005604 <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	213a      	movs	r1, #58	; 0x3a
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7ff fecf 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2155      	movs	r1, #85	; 0x55
 80058de:	0018      	movs	r0, r3
 80058e0:	f7ff fe90 	bl	8005604 <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	21b1      	movs	r1, #177	; 0xb1
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff fec5 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2100      	movs	r1, #0
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7ff fe86 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x18);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2118      	movs	r1, #24
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff fe81 	bl	8005604 <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	21b6      	movs	r1, #182	; 0xb6
 8005906:	0018      	movs	r0, r3
 8005908:	f7ff feb6 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2108      	movs	r1, #8
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff fe77 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x82);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2182      	movs	r1, #130	; 0x82
 800591a:	0018      	movs	r0, r3
 800591c:	f7ff fe72 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x27);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2127      	movs	r1, #39	; 0x27
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff fe6d 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	21f2      	movs	r1, #242	; 0xf2
 800592e:	0018      	movs	r0, r3
 8005930:	f7ff fea2 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2100      	movs	r1, #0
 8005938:	0018      	movs	r0, r3
 800593a:	f7ff fe63 	bl	8005604 <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2126      	movs	r1, #38	; 0x26
 8005942:	0018      	movs	r0, r3
 8005944:	f7ff fe98 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2101      	movs	r1, #1
 800594c:	0018      	movs	r0, r3
 800594e:	f7ff fe59 	bl	8005604 <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	21e0      	movs	r1, #224	; 0xe0
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fe8e 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	210f      	movs	r1, #15
 8005960:	0018      	movs	r0, r3
 8005962:	f7ff fe4f 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2131      	movs	r1, #49	; 0x31
 800596a:	0018      	movs	r0, r3
 800596c:	f7ff fe4a 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	212b      	movs	r1, #43	; 0x2b
 8005974:	0018      	movs	r0, r3
 8005976:	f7ff fe45 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	210c      	movs	r1, #12
 800597e:	0018      	movs	r0, r3
 8005980:	f7ff fe40 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	210e      	movs	r1, #14
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff fe3b 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2108      	movs	r1, #8
 8005992:	0018      	movs	r0, r3
 8005994:	f7ff fe36 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	214e      	movs	r1, #78	; 0x4e
 800599c:	0018      	movs	r0, r3
 800599e:	f7ff fe31 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	21f1      	movs	r1, #241	; 0xf1
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7ff fe2c 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x37);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2137      	movs	r1, #55	; 0x37
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7ff fe27 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2107      	movs	r1, #7
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7ff fe22 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x10);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2110      	movs	r1, #16
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7ff fe1d 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2103      	movs	r1, #3
 80059ce:	0018      	movs	r0, r3
 80059d0:	f7ff fe18 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	210e      	movs	r1, #14
 80059d8:	0018      	movs	r0, r3
 80059da:	f7ff fe13 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x09);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2109      	movs	r1, #9
 80059e2:	0018      	movs	r0, r3
 80059e4:	f7ff fe0e 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2100      	movs	r1, #0
 80059ec:	0018      	movs	r0, r3
 80059ee:	f7ff fe09 	bl	8005604 <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	21e1      	movs	r1, #225	; 0xe1
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff fe3e 	bl	8005678 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2100      	movs	r1, #0
 8005a00:	0018      	movs	r0, r3
 8005a02:	f7ff fdff 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	210e      	movs	r1, #14
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f7ff fdfa 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x14);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2114      	movs	r1, #20
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff fdf5 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2103      	movs	r1, #3
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7ff fdf0 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x11);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2111      	movs	r1, #17
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f7ff fdeb 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2107      	movs	r1, #7
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7ff fde6 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2131      	movs	r1, #49	; 0x31
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f7ff fde1 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	21c1      	movs	r1, #193	; 0xc1
 8005a46:	0018      	movs	r0, r3
 8005a48:	f7ff fddc 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x48);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2148      	movs	r1, #72	; 0x48
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7ff fdd7 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2108      	movs	r1, #8
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7ff fdd2 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	210f      	movs	r1, #15
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7ff fdcd 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	210c      	movs	r1, #12
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f7ff fdc8 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2131      	movs	r1, #49	; 0x31
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7ff fdc3 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x36);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2136      	movs	r1, #54	; 0x36
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7ff fdbe 	bl	8005604 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	210f      	movs	r1, #15
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7ff fdb9 	bl	8005604 <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2111      	movs	r1, #17
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7ff fdee 	bl	8005678 <hspi_cmd>
  HAL_Delay(150);
 8005a9c:	2096      	movs	r0, #150	; 0x96
 8005a9e:	f7fb fc31 	bl	8001304 <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2129      	movs	r1, #41	; 0x29
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7ff fde6 	bl	8005678 <hspi_cmd>
	HAL_Delay(150);
 8005aac:	2096      	movs	r0, #150	; 0x96
 8005aae:	f7fb fc29 	bl	8001304 <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2113      	movs	r1, #19
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7ff fdde 	bl	8005678 <hspi_cmd>
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_ZN6UI_API13enableEncoderEtt>:

//Public Function Definitions
namespace UI_API
{
	void enableEncoder(uint16_t encA_pin, uint16_t encb_pin)
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	0002      	movs	r2, r0
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	1c0a      	adds	r2, r1, #0
 8005ad4:	801a      	strh	r2, [r3, #0]
		EXTI->IMR |= encA_pin | encb_pin;
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <_ZN6UI_API13enableEncoderEtt+0x34>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	1db9      	adds	r1, r7, #6
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	8809      	ldrh	r1, [r1, #0]
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	0019      	movs	r1, r3
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <_ZN6UI_API13enableEncoderEtt+0x34>)
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
	}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b002      	add	sp, #8
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	40010400 	.word	0x40010400

08005afc <_ZN6UI_API14disableEncoderEtt>:
	void disableEncoder(uint16_t encA_pin, uint16_t encb_pin)
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	0002      	movs	r2, r0
 8005b04:	1dbb      	adds	r3, r7, #6
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	1c0a      	adds	r2, r1, #0
 8005b0c:	801a      	strh	r2, [r3, #0]
		EXTI->IMR &= ~(encA_pin | encb_pin);
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <_ZN6UI_API14disableEncoderEtt+0x34>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	1db9      	adds	r1, r7, #6
 8005b14:	1d3b      	adds	r3, r7, #4
 8005b16:	8809      	ldrh	r1, [r1, #0]
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	0019      	movs	r1, r3
 8005b22:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <_ZN6UI_API14disableEncoderEtt+0x34>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
	}
 8005b28:	46c0      	nop			; (mov r8, r8)
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40010400 	.word	0x40010400

08005b34 <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER>:
namespace GUI_API
{
void resetSelectionGUI(TFT_GFX& tftDisplay, TFT_TEXT_BOX& instructionBox, TFT_TEXT_BOX& mainTitle, TFT_TEXT_BOX& stateSelector, CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES],
		const uint16_t backgroundColor,const uint16_t fontColor,const uint16_t lineColor,const uint16_t lineThickness,const uint8_t stateSelectorFontSize,
		uint8_t& statesSelected, SELECTION_ENCODER* encoder_ptr)
{
 8005b34:	b5b0      	push	{r4, r5, r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
	//Clear the chosen states
	for(uint8_t i = 0; i < NUM_BOXES; i++)
 8005b42:	2317      	movs	r3, #23
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	2317      	movs	r3, #23
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d80e      	bhi.n	8005b72 <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER+0x3e>
	{
		chosenStates[i].clearCurrentText();
 8005b54:	2417      	movs	r4, #23
 8005b56:	193b      	adds	r3, r7, r4
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	015b      	lsls	r3, r3, #5
 8005b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b5e:	18d3      	adds	r3, r2, r3
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 fb55 	bl	8006210 <_ZN21CHOSEN_STATE_TEXT_BOX16clearCurrentTextEv>
	for(uint8_t i = 0; i < NUM_BOXES; i++)
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	193b      	adds	r3, r7, r4
 8005b6c:	3201      	adds	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e7eb      	b.n	8005b4a <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER+0x16>
	}
	encoder_ptr->setCurrentNameIndex(0);
 8005b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b74:	2100      	movs	r1, #0
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7fe fc52 	bl	8004420 <_ZN17SELECTION_ENCODER19setCurrentNameIndexEt>
	statesSelected = 0;
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
	drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
 8005b82:	2334      	movs	r3, #52	; 0x34
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	881c      	ldrh	r4, [r3, #0]
 8005b88:	2530      	movs	r5, #48	; 0x30
 8005b8a:	197b      	adds	r3, r7, r5
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	232c      	movs	r3, #44	; 0x2c
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	8819      	ldrh	r1, [r3, #0]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	2338      	movs	r3, #56	; 0x38
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	0023      	movs	r3, r4
 8005ba0:	f000 f810 	bl	8005bc4 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>
	writeSelectionWords(instructionBox, mainTitle, stateSelector, fontColor, stateSelectorFontSize);
 8005ba4:	197b      	adds	r3, r7, r5
 8005ba6:	881c      	ldrh	r4, [r3, #0]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	233c      	movs	r3, #60	; 0x3c
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	0023      	movs	r3, r4
 8005bb8:	f000 f8c2 	bl	8005d40 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th>
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b006      	add	sp, #24
 8005bc2:	bdb0      	pop	{r4, r5, r7, pc}

08005bc4 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>:

void drawSelectionLines(TFT_GFX& tftDisplay,const uint16_t backgroundColor,const uint16_t fontColor,const uint16_t lineColor,const uint16_t lineThickness)
{
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	000c      	movs	r4, r1
 8005bce:	0010      	movs	r0, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	1c22      	adds	r2, r4, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	2408      	movs	r4, #8
 8005bdc:	193b      	adds	r3, r7, r4
 8005bde:	1c02      	adds	r2, r0, #0
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	1dbb      	adds	r3, r7, #6
 8005be4:	1c0a      	adds	r2, r1, #0
 8005be6:	801a      	strh	r2, [r3, #0]
	//Set background to correct color and add outline
	tftDisplay.writeFillRect(0, 0, tftDisplay.width(), tftDisplay.height(), lineColor);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	0018      	movs	r0, r3
 8005bec:	f7ff fccd 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	b21c      	sxth	r4, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7ff fcd1 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	b21b      	sxth	r3, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	1dba      	adds	r2, r7, #6
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	9201      	str	r2, [sp, #4]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	0023      	movs	r3, r4
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2100      	movs	r1, #0
 8005c10:	f7fe feee 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width() - lineThickness * 2, tftDisplay.height() - lineThickness * 2, backgroundColor);
 8005c14:	2630      	movs	r6, #48	; 0x30
 8005c16:	19bb      	adds	r3, r7, r6
 8005c18:	2100      	movs	r1, #0
 8005c1a:	5e5c      	ldrsh	r4, [r3, r1]
 8005c1c:	19bb      	adds	r3, r7, r6
 8005c1e:	2100      	movs	r1, #0
 8005c20:	5e5d      	ldrsh	r5, [r3, r1]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f7ff fcb0 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	19bb      	adds	r3, r7, r6
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	18db      	adds	r3, r3, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	b21e      	sxth	r6, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff fcad 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005c44:	0003      	movs	r3, r0
 8005c46:	001a      	movs	r2, r3
 8005c48:	2330      	movs	r3, #48	; 0x30
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	18db      	adds	r3, r3, r3
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	18ba      	adds	r2, r7, r2
 8005c5e:	8812      	ldrh	r2, [r2, #0]
 8005c60:	9201      	str	r2, [sp, #4]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	0033      	movs	r3, r6
 8005c66:	002a      	movs	r2, r5
 8005c68:	0021      	movs	r1, r4
 8005c6a:	f7fe fec1 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
	//Draw the GUI lines
	tftDisplay.writeFillRect(0,(tftDisplay.height()-lineThickness)/2, tftDisplay.width(), lineThickness, lineColor);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff fc94 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005c76:	0003      	movs	r3, r0
 8005c78:	001a      	movs	r2, r3
 8005c7a:	2630      	movs	r6, #48	; 0x30
 8005c7c:	19bb      	adds	r3, r7, r6
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	d500      	bpl.n	8005c86 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt+0xc2>
 8005c84:	3301      	adds	r3, #1
 8005c86:	105b      	asrs	r3, r3, #1
 8005c88:	b21c      	sxth	r4, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff fc7c 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005c92:	0003      	movs	r3, r0
 8005c94:	b219      	sxth	r1, r3
 8005c96:	2330      	movs	r3, #48	; 0x30
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	5e9b      	ldrsh	r3, [r3, r2]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	1dba      	adds	r2, r7, #6
 8005ca2:	8812      	ldrh	r2, [r2, #0]
 8005ca4:	9201      	str	r2, [sp, #4]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	000b      	movs	r3, r1
 8005caa:	0022      	movs	r2, r4
 8005cac:	2100      	movs	r1, #0
 8005cae:	f7fe fe9f 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
	for(uint16_t i = 1; i < NUM_BOXES; i++)
 8005cb2:	2316      	movs	r3, #22
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	2316      	movs	r3, #22
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d839      	bhi.n	8005d38 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt+0x174>
	{
	  tftDisplay.writeFillRect(0, tftDisplay.height()/2 + i*(tftDisplay.height()/(2 *NUM_BOXES)) - lineThickness/2, tftDisplay.width(), lineThickness, lineColor);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7ff fc69 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	b29c      	uxth	r4, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7ff fc62 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	210a      	movs	r1, #10
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fa fa9c 	bl	800021c <__divsi3>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2516      	movs	r5, #22
 8005cea:	197a      	adds	r2, r7, r5
 8005cec:	8812      	ldrh	r2, [r2, #0]
 8005cee:	4353      	muls	r3, r2
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	18e3      	adds	r3, r4, r3
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	2630      	movs	r6, #48	; 0x30
 8005cf8:	19bb      	adds	r3, r7, r6
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	b21c      	sxth	r4, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff fc3e 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	b219      	sxth	r1, r3
 8005d12:	19bb      	adds	r3, r7, r6
 8005d14:	2200      	movs	r2, #0
 8005d16:	5e9b      	ldrsh	r3, [r3, r2]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	1dba      	adds	r2, r7, #6
 8005d1c:	8812      	ldrh	r2, [r2, #0]
 8005d1e:	9201      	str	r2, [sp, #4]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	000b      	movs	r3, r1
 8005d24:	0022      	movs	r2, r4
 8005d26:	2100      	movs	r1, #0
 8005d28:	f7fe fe62 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
	for(uint16_t i = 1; i < NUM_BOXES; i++)
 8005d2c:	197b      	adds	r3, r7, r5
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	197b      	adds	r3, r7, r5
 8005d32:	3201      	adds	r2, #1
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e7c0      	b.n	8005cba <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt+0xf6>
	}
}
 8005d38:	46c0      	nop			; (mov r8, r8)
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b007      	add	sp, #28
 8005d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d40 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th>:

void writeSelectionWords(TFT_TEXT_BOX& instructionBox, TFT_TEXT_BOX& mainTitle, TFT_TEXT_BOX& stateSelector,const uint16_t fontColor,
		const uint8_t stateSelectorFontSize)
{
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	001a      	movs	r2, r3
 8005d4e:	1cbb      	adds	r3, r7, #2
 8005d50:	801a      	strh	r2, [r3, #0]
	instructionBox.write("*Hold OK button for 3 seconds to confirm selection.", fontColor, 1);
 8005d52:	1cbb      	adds	r3, r7, #2
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	490d      	ldr	r1, [pc, #52]	; (8005d8c <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th+0x4c>)
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f000 fad7 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
	mainTitle.write("State Selection: ", fontColor, 2);
 8005d60:	1cbb      	adds	r3, r7, #2
 8005d62:	881a      	ldrh	r2, [r3, #0]
 8005d64:	490a      	ldr	r1, [pc, #40]	; (8005d90 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th+0x50>)
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f000 fad0 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
	stateSelector.write(stateNames[0], fontColor, stateSelectorFontSize);
 8005d6e:	4909      	ldr	r1, [pc, #36]	; (8005d94 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th+0x54>)
 8005d70:	2320      	movs	r3, #32
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	781c      	ldrb	r4, [r3, #0]
 8005d76:	1cbb      	adds	r3, r7, #2
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	0023      	movs	r3, r4
 8005d7e:	f000 fac6 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b005      	add	sp, #20
 8005d88:	bd90      	pop	{r4, r7, pc}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	08007244 	.word	0x08007244
 8005d90:	08007278 	.word	0x08007278
 8005d94:	08007014 	.word	0x08007014

08005d98 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER>:

void printCurrentState(CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES], uint8_t& statesSelected,SELECTION_ENCODER* encoderPtr)
{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	//Stay at the last state box
	if(statesSelected == NUM_BOXES)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d105      	bne.n	8005db8 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER+0x20>
	{
	  statesSelected--;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	701a      	strb	r2, [r3, #0]
	}
	chosenStates[statesSelected++].printState(stateNames[encoderPtr->getCurrentNameIndex()]);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	b2d1      	uxtb	r1, r2
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	7011      	strb	r1, [r2, #0]
 8005dc4:	015b      	lsls	r3, r3, #5
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	18d4      	adds	r4, r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f7fe fb1d 	bl	800440c <_ZN17SELECTION_ENCODER19getCurrentNameIndexEv>
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER+0x5c>)
 8005dd8:	0092      	lsls	r2, r2, #2
 8005dda:	58d3      	ldr	r3, [r2, r3]
 8005ddc:	0019      	movs	r1, r3
 8005dde:	0020      	movs	r0, r4
 8005de0:	f000 f9ec 	bl	80061bc <_ZN21CHOSEN_STATE_TEXT_BOX10printStateEPKc>
	encoderPtr->printNextAvailableState();
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7fe fb29 	bl	800443e <_ZN17SELECTION_ENCODER23printNextAvailableStateEv>
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b005      	add	sp, #20
 8005df2:	bd90      	pop	{r4, r7, pc}
 8005df4:	08007a2c 	.word	0x08007a2c

08005df8 <_ZN7GUI_API17clearCurrentStateEP21CHOSEN_STATE_TEXT_BOXRh>:

void clearCurrentState(CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES], uint8_t& statesSelected)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
	if(statesSelected > 0)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d015      	beq.n	8005e36 <_ZN7GUI_API17clearCurrentStateEP21CHOSEN_STATE_TEXT_BOXRh+0x3e>
	{
		chosenStates[--statesSelected].clear();
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	015b      	lsls	r3, r3, #5
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	18d3      	adds	r3, r2, r3
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 fab5 	bl	8006390 <_ZN12TFT_TEXT_BOX5clearEv>
		chosenStates[statesSelected].clearCurrentText();
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	015b      	lsls	r3, r3, #5
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	18d3      	adds	r3, r2, r3
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 f9ed 	bl	8006210 <_ZN21CHOSEN_STATE_TEXT_BOX16clearCurrentTextEv>
	}
}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b002      	add	sp, #8
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt>:

void displayInProgress(TFT_GFX& tftDisplay, TFT_TEXT_BOX& instructionBox, const uint16_t lineThickness, const uint16_t lineColor, const uint16_t backgroundColor, const uint16_t fontColor)
{
 8005e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e42:	b08f      	sub	sp, #60	; 0x3c
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	0019      	movs	r1, r3
 8005e4c:	1dbb      	adds	r3, r7, #6
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	1c0a      	adds	r2, r1, #0
 8005e54:	801a      	strh	r2, [r3, #0]
	tftDisplay.writeFillRect(0, 0, tftDisplay.width(), tftDisplay.height(), lineColor);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7ff fb96 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	b21c      	sxth	r4, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7ff fb9a 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	b21b      	sxth	r3, r3
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	1d3a      	adds	r2, r7, #4
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	9201      	str	r2, [sp, #4]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	0023      	movs	r3, r4
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	f7fe fdb7 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width() - lineThickness * 2, tftDisplay.height() - lineThickness * 2, backgroundColor);
 8005e82:	1dbb      	adds	r3, r7, #6
 8005e84:	2400      	movs	r4, #0
 8005e86:	5f1c      	ldrsh	r4, [r3, r4]
 8005e88:	1dbb      	adds	r3, r7, #6
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	5f5d      	ldrsh	r5, [r3, r5]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7ff fb7a 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005e96:	0003      	movs	r3, r0
 8005e98:	001a      	movs	r2, r3
 8005e9a:	1dbb      	adds	r3, r7, #6
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	18db      	adds	r3, r3, r3
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21e      	sxth	r6, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7ff fb77 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	001a      	movs	r2, r3
 8005eb4:	1dbb      	adds	r3, r7, #6
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	18db      	adds	r3, r3, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	b21b      	sxth	r3, r3
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	18ba      	adds	r2, r7, r2
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	9201      	str	r2, [sp, #4]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	0033      	movs	r3, r6
 8005ed0:	002a      	movs	r2, r5
 8005ed2:	0021      	movs	r1, r4
 8005ed4:	f7fe fd8c 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
	TFT_TEXT_BOX statusBox{&tftDisplay,backgroundColor, lineThickness, (uint16_t)(tftDisplay.height()/3.0f),(int16_t)(tftDisplay.width() - lineThickness),true};
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f7ff fb5f 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f7fb f860 	bl	8000fa8 <__aeabi_i2f>
 8005ee8:	1c03      	adds	r3, r0, #0
 8005eea:	491c      	ldr	r1, [pc, #112]	; (8005f5c <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt+0x11c>)
 8005eec:	1c18      	adds	r0, r3, #0
 8005eee:	f7fa fc33 	bl	8000758 <__aeabi_fdiv>
 8005ef2:	1c03      	adds	r3, r0, #0
 8005ef4:	1c18      	adds	r0, r3, #0
 8005ef6:	f7fa fa7d 	bl	80003f4 <__aeabi_f2uiz>
 8005efa:	0003      	movs	r3, r0
 8005efc:	b29c      	uxth	r4, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	0018      	movs	r0, r3
 8005f02:	f7ff fb42 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005f06:	0003      	movs	r3, r0
 8005f08:	001a      	movs	r2, r3
 8005f0a:	1dbb      	adds	r3, r7, #6
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	1dba      	adds	r2, r7, #6
 8005f16:	8816      	ldrh	r6, [r2, #0]
 8005f18:	2240      	movs	r2, #64	; 0x40
 8005f1a:	18ba      	adds	r2, r7, r2
 8005f1c:	8815      	ldrh	r5, [r2, #0]
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	2214      	movs	r2, #20
 8005f22:	18b8      	adds	r0, r7, r2
 8005f24:	2201      	movs	r2, #1
 8005f26:	9202      	str	r2, [sp, #8]
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	9400      	str	r4, [sp, #0]
 8005f2c:	0033      	movs	r3, r6
 8005f2e:	002a      	movs	r2, r5
 8005f30:	f000 f979 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	statusBox.write("Scan in Progress!", fontColor, 4);
 8005f34:	2444      	movs	r4, #68	; 0x44
 8005f36:	193b      	adds	r3, r7, r4
 8005f38:	881a      	ldrh	r2, [r3, #0]
 8005f3a:	4909      	ldr	r1, [pc, #36]	; (8005f60 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt+0x120>)
 8005f3c:	2314      	movs	r3, #20
 8005f3e:	18f8      	adds	r0, r7, r3
 8005f40:	2304      	movs	r3, #4
 8005f42:	f000 f9e4 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
	instructionBox.write("*Press cancel to quit the current operation and go back to selecting states.", fontColor, 1);
 8005f46:	193b      	adds	r3, r7, r4
 8005f48:	881a      	ldrh	r2, [r3, #0]
 8005f4a:	4906      	ldr	r1, [pc, #24]	; (8005f64 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt+0x124>)
 8005f4c:	68b8      	ldr	r0, [r7, #8]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f000 f9dd 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 8005f54:	46c0      	nop			; (mov r8, r8)
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b00b      	add	sp, #44	; 0x2c
 8005f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5c:	40400000 	.word	0x40400000
 8005f60:	0800728c 	.word	0x0800728c
 8005f64:	080072a0 	.word	0x080072a0

08005f68 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt>:

void addConfirmQuit(TFT_GFX& tftDisplay, const uint16_t lineThickness,const uint16_t fontColor,const uint16_t backgroundColor)
{
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6a:	b095      	sub	sp, #84	; 0x54
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	000c      	movs	r4, r1
 8005f72:	0010      	movs	r0, r2
 8005f74:	0019      	movs	r1, r3
 8005f76:	250a      	movs	r5, #10
 8005f78:	197b      	adds	r3, r7, r5
 8005f7a:	1c22      	adds	r2, r4, #0
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	2308      	movs	r3, #8
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	1c02      	adds	r2, r0, #0
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	1dbb      	adds	r3, r7, #6
 8005f88:	1c0a      	adds	r2, r1, #0
 8005f8a:	801a      	strh	r2, [r3, #0]
	TFT_TEXT_BOX confirmQuit{&tftDisplay, backgroundColor, lineThickness + 8, (uint16_t)(3*tftDisplay.height()/5.0f),(int16_t)(tftDisplay.width() - lineThickness - 8), true};
 8005f8c:	197b      	adds	r3, r7, r5
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	3308      	adds	r3, #8
 8005f92:	b29e      	uxth	r6, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff fb01 	bl	800559e <_ZN7TFT_GFX6heightEv>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	0013      	movs	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fa fffe 	bl	8000fa8 <__aeabi_i2f>
 8005fac:	1c03      	adds	r3, r0, #0
 8005fae:	4931      	ldr	r1, [pc, #196]	; (8006074 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt+0x10c>)
 8005fb0:	1c18      	adds	r0, r3, #0
 8005fb2:	f7fa fbd1 	bl	8000758 <__aeabi_fdiv>
 8005fb6:	1c03      	adds	r3, r0, #0
 8005fb8:	1c18      	adds	r0, r3, #0
 8005fba:	f7fa fa1b 	bl	80003f4 <__aeabi_f2uiz>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	b29c      	uxth	r4, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f7ff fae0 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	001a      	movs	r2, r3
 8005fce:	197b      	adds	r3, r7, r5
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b08      	subs	r3, #8
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	b21b      	sxth	r3, r3
 8005fdc:	1dba      	adds	r2, r7, #6
 8005fde:	8815      	ldrh	r5, [r2, #0]
 8005fe0:	68f9      	ldr	r1, [r7, #12]
 8005fe2:	2228      	movs	r2, #40	; 0x28
 8005fe4:	18b8      	adds	r0, r7, r2
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	9400      	str	r4, [sp, #0]
 8005fee:	0033      	movs	r3, r6
 8005ff0:	002a      	movs	r2, r5
 8005ff2:	f000 f918 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomConfirmQuit = confirmQuit.write("*Are you sure you want to quit?*", fontColor, 2);
 8005ff6:	213e      	movs	r1, #62	; 0x3e
 8005ff8:	187c      	adds	r4, r7, r1
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	881a      	ldrh	r2, [r3, #0]
 8006000:	491d      	ldr	r1, [pc, #116]	; (8006078 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt+0x110>)
 8006002:	2028      	movs	r0, #40	; 0x28
 8006004:	1838      	adds	r0, r7, r0
 8006006:	2302      	movs	r3, #2
 8006008:	f000 f981 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
 800600c:	0003      	movs	r3, r0
 800600e:	8023      	strh	r3, [r4, #0]
	TFT_TEXT_BOX confirmQuitInstructions{&tftDisplay, backgroundColor, lineThickness + 8, (uint16_t)(bottomConfirmQuit + 10),(int16_t)(tftDisplay.width() - lineThickness - 8), true};
 8006010:	250a      	movs	r5, #10
 8006012:	197b      	adds	r3, r7, r5
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	b29e      	uxth	r6, r3
 800601a:	213e      	movs	r1, #62	; 0x3e
 800601c:	187b      	adds	r3, r7, r1
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	330a      	adds	r3, #10
 8006022:	b29c      	uxth	r4, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	0018      	movs	r0, r3
 8006028:	f7ff faaf 	bl	800558a <_ZN7TFT_GFX5widthEv>
 800602c:	0003      	movs	r3, r0
 800602e:	001a      	movs	r2, r3
 8006030:	197b      	adds	r3, r7, r5
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b08      	subs	r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	b21b      	sxth	r3, r3
 800603e:	1dba      	adds	r2, r7, #6
 8006040:	8815      	ldrh	r5, [r2, #0]
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	2214      	movs	r2, #20
 8006046:	18b8      	adds	r0, r7, r2
 8006048:	2201      	movs	r2, #1
 800604a:	9202      	str	r2, [sp, #8]
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	9400      	str	r4, [sp, #0]
 8006050:	0033      	movs	r3, r6
 8006052:	002a      	movs	r2, r5
 8006054:	f000 f8e7 	bl	8006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	confirmQuitInstructions.write("Hold cancel for 3 seconds to confirm quit, tap to cancel.", fontColor, 1);
 8006058:	2308      	movs	r3, #8
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	4907      	ldr	r1, [pc, #28]	; (800607c <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt+0x114>)
 8006060:	2314      	movs	r3, #20
 8006062:	18f8      	adds	r0, r7, r3
 8006064:	2301      	movs	r3, #1
 8006066:	f000 f952 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b011      	add	sp, #68	; 0x44
 8006070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	40a00000 	.word	0x40a00000
 8006078:	080072f0 	.word	0x080072f0
 800607c:	08007314 	.word	0x08007314

08006080 <_ZN7GUI_API17removeConfirmQuitER7TFT_GFXtt>:

void removeConfirmQuit(TFT_GFX& tftDisplay, const uint16_t lineThickness, const uint16_t backgroundColor)
{
 8006080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006082:	b087      	sub	sp, #28
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	0008      	movs	r0, r1
 800608a:	0011      	movs	r1, r2
 800608c:	1cbb      	adds	r3, r7, #2
 800608e:	1c02      	adds	r2, r0, #0
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	003b      	movs	r3, r7
 8006094:	1c0a      	adds	r2, r1, #0
 8006096:	801a      	strh	r2, [r3, #0]
	uint16_t yVal = (uint16_t)(3*tftDisplay.height()/5.0f);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0018      	movs	r0, r3
 800609c:	f7ff fa7f 	bl	800559e <_ZN7TFT_GFX6heightEv>
 80060a0:	0003      	movs	r3, r0
 80060a2:	001a      	movs	r2, r3
 80060a4:	0013      	movs	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	189b      	adds	r3, r3, r2
 80060aa:	0018      	movs	r0, r3
 80060ac:	f7fa ff7c 	bl	8000fa8 <__aeabi_i2f>
 80060b0:	1c03      	adds	r3, r0, #0
 80060b2:	491e      	ldr	r1, [pc, #120]	; (800612c <_ZN7GUI_API17removeConfirmQuitER7TFT_GFXtt+0xac>)
 80060b4:	1c18      	adds	r0, r3, #0
 80060b6:	f7fa fb4f 	bl	8000758 <__aeabi_fdiv>
 80060ba:	1c03      	adds	r3, r0, #0
 80060bc:	250e      	movs	r5, #14
 80060be:	197c      	adds	r4, r7, r5
 80060c0:	1c18      	adds	r0, r3, #0
 80060c2:	f7fa f997 	bl	80003f4 <__aeabi_f2uiz>
 80060c6:	0003      	movs	r3, r0
 80060c8:	8023      	strh	r3, [r4, #0]
	tftDisplay.writeFillRect(lineThickness, yVal, tftDisplay.width() - (lineThickness * 2),tftDisplay.height() - lineThickness - yVal , backgroundColor);
 80060ca:	1cbb      	adds	r3, r7, #2
 80060cc:	2400      	movs	r4, #0
 80060ce:	5f1c      	ldrsh	r4, [r3, r4]
 80060d0:	197b      	adds	r3, r7, r5
 80060d2:	2200      	movs	r2, #0
 80060d4:	5e9d      	ldrsh	r5, [r3, r2]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0018      	movs	r0, r3
 80060da:	f7ff fa56 	bl	800558a <_ZN7TFT_GFX5widthEv>
 80060de:	0003      	movs	r3, r0
 80060e0:	001a      	movs	r2, r3
 80060e2:	1cbb      	adds	r3, r7, #2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	18db      	adds	r3, r3, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	b21e      	sxth	r6, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f7ff fa53 	bl	800559e <_ZN7TFT_GFX6heightEv>
 80060f8:	0003      	movs	r3, r0
 80060fa:	001a      	movs	r2, r3
 80060fc:	1cbb      	adds	r3, r7, #2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	b29a      	uxth	r2, r3
 8006104:	230e      	movs	r3, #14
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	b21b      	sxth	r3, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	003a      	movs	r2, r7
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	0033      	movs	r3, r6
 800611c:	002a      	movs	r2, r5
 800611e:	0021      	movs	r1, r4
 8006120:	f7fe fc66 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
}
 8006124:	46c0      	nop			; (mov r8, r8)
 8006126:	46bd      	mov	sp, r7
 8006128:	b005      	add	sp, #20
 800612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612c:	40a00000 	.word	0x40a00000

08006130 <_ZN21CHOSEN_STATE_TEXT_BOXC1EhthRK12TFT_TEXT_BOX>:

}//namespace GUI_API

CHOSEN_STATE_TEXT_BOX::CHOSEN_STATE_TEXT_BOX(uint8_t text_box_number, uint16_t font_color,
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	000c      	movs	r4, r1
 800613a:	0010      	movs	r0, r2
 800613c:	0019      	movs	r1, r3
 800613e:	1cfb      	adds	r3, r7, #3
 8006140:	1c22      	adds	r2, r4, #0
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	003b      	movs	r3, r7
 8006146:	1c02      	adds	r2, r0, #0
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	1cbb      	adds	r3, r7, #2
 800614c:	1c0a      	adds	r2, r1, #0
 800614e:	701a      	strb	r2, [r3, #0]
		uint8_t font_size, const TFT_TEXT_BOX& general_text_box):
TFT_TEXT_BOX(general_text_box),currentText{nullptr}, textBoxNumber{text_box_number}, fontColor{font_color}, fontSize{font_size}
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006156:	c313      	stmia	r3!, {r0, r1, r4}
 8006158:	6811      	ldr	r1, [r2, #0]
 800615a:	6019      	str	r1, [r3, #0]
 800615c:	7912      	ldrb	r2, [r2, #4]
 800615e:	711a      	strb	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	615a      	str	r2, [r3, #20]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	1cfa      	adds	r2, r7, #3
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	761a      	strb	r2, [r3, #24]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	003a      	movs	r2, r7
 8006172:	8812      	ldrh	r2, [r2, #0]
 8006174:	835a      	strh	r2, [r3, #26]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1cba      	adds	r2, r7, #2
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	771a      	strb	r2, [r3, #28]
{}
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	b003      	add	sp, #12
 8006186:	bd90      	pop	{r4, r7, pc}

08006188 <_ZN21CHOSEN_STATE_TEXT_BOXC1Ev>:

CHOSEN_STATE_TEXT_BOX::CHOSEN_STATE_TEXT_BOX(void):
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
TFT_TEXT_BOX(),currentText{nullptr}, textBoxNumber{0}, fontColor{0}, fontSize{0}
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0018      	movs	r0, r3
 8006194:	f000 f89a 	bl	80062cc <_ZN12TFT_TEXT_BOXC1Ev>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	615a      	str	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	761a      	strb	r2, [r3, #24]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	835a      	strh	r2, [r3, #26]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
{}
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0018      	movs	r0, r3
 80061b4:	46bd      	mov	sp, r7
 80061b6:	b002      	add	sp, #8
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <_ZN21CHOSEN_STATE_TEXT_BOX10printStateEPKc>:

void CHOSEN_STATE_TEXT_BOX::printState(const char* state_name)
{
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	this->currentText = state_name;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	615a      	str	r2, [r3, #20]
	char outputString[STATE_MAX_CHARS + 3 + 1];
	sprintf(outputString, "%d: %s",this->textBoxNumber,state_name);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	7e1b      	ldrb	r3, [r3, #24]
 80061d0:	001a      	movs	r2, r3
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	4908      	ldr	r1, [pc, #32]	; (80061f8 <_ZN21CHOSEN_STATE_TEXT_BOX10printStateEPKc+0x3c>)
 80061d6:	240c      	movs	r4, #12
 80061d8:	1938      	adds	r0, r7, r4
 80061da:	f000 f9c5 	bl	8006568 <siprintf>
	this->write(outputString, this->fontColor, this->fontSize);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8b5a      	ldrh	r2, [r3, #26]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7f1b      	ldrb	r3, [r3, #28]
 80061e8:	1939      	adds	r1, r7, r4
 80061ea:	f000 f890 	bl	800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	b009      	add	sp, #36	; 0x24
 80061f4:	bd90      	pop	{r4, r7, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	08007350 	.word	0x08007350

080061fc <_ZN21CHOSEN_STATE_TEXT_BOX14getCurrentTextEv>:

const char* CHOSEN_STATE_TEXT_BOX::getCurrentText(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	return this->currentText;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b002      	add	sp, #8
 800620e:	bd80      	pop	{r7, pc}

08006210 <_ZN21CHOSEN_STATE_TEXT_BOX16clearCurrentTextEv>:

void CHOSEN_STATE_TEXT_BOX::clearCurrentText(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	this->currentText = nullptr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	615a      	str	r2, [r3, #20]
}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	46bd      	mov	sp, r7
 8006222:	b002      	add	sp, #8
 8006224:	bd80      	pop	{r7, pc}

08006226 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
TFT_TEXT_BOX::TFT_TEXT_BOX(TFT_GFX* display, uint16_t bg_color, uint16_t x_pos, uint16_t y_pos, int16_t x_edge, bool is_centered):
 8006226:	b590      	push	{r4, r7, lr}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	0019      	movs	r1, r3
 8006232:	1dbb      	adds	r3, r7, #6
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	1c0a      	adds	r2, r1, #0
 800623a:	801a      	strh	r2, [r3, #0]
main_display{display}, xPos{x_pos}, yPos{y_pos}, prevMaxX{x_pos}, prevMaxY{y_pos}, bgColor{bg_color}, isCentered{is_centered}
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1d3a      	adds	r2, r7, #4
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	809a      	strh	r2, [r3, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2120      	movs	r1, #32
 800624e:	187a      	adds	r2, r7, r1
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	80da      	strh	r2, [r3, #6]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1d3a      	adds	r2, r7, #4
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	811a      	strh	r2, [r3, #8]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	187a      	adds	r2, r7, r1
 8006260:	8812      	ldrh	r2, [r2, #0]
 8006262:	815a      	strh	r2, [r3, #10]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1dba      	adds	r2, r7, #6
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	819a      	strh	r2, [r3, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2228      	movs	r2, #40	; 0x28
 8006270:	18ba      	adds	r2, r7, r2
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	741a      	strb	r2, [r3, #16]
{
	if(x_edge <= x_pos || x_edge > display->width())
 8006276:	2324      	movs	r3, #36	; 0x24
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	2200      	movs	r2, #0
 800627c:	5e9a      	ldrsh	r2, [r3, r2]
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	dd0a      	ble.n	800629c <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x76>
 8006286:	2324      	movs	r3, #36	; 0x24
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	2400      	movs	r4, #0
 800628c:	5f1c      	ldrsh	r4, [r3, r4]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	0018      	movs	r0, r3
 8006292:	f7ff f97a 	bl	800558a <_ZN7TFT_GFX5widthEv>
 8006296:	0003      	movs	r3, r0
 8006298:	429c      	cmp	r4, r3
 800629a:	dd01      	ble.n	80062a0 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7a>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7c>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d008      	beq.n	80062b8 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x92>
	{
		this->wrapXEdge = display->width();
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	0018      	movs	r0, r3
 80062aa:	f7ff f96e 	bl	800558a <_ZN7TFT_GFX5widthEv>
 80062ae:	0003      	movs	r3, r0
 80062b0:	001a      	movs	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	81da      	strh	r2, [r3, #14]
 80062b6:	e004      	b.n	80062c2 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x9c>
	}else{
		this->wrapXEdge = x_edge;
 80062b8:	2324      	movs	r3, #36	; 0x24
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	881a      	ldrh	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	81da      	strh	r2, [r3, #14]
	}
}
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b005      	add	sp, #20
 80062ca:	bd90      	pop	{r4, r7, pc}

080062cc <_ZN12TFT_TEXT_BOXC1Ev>:

TFT_TEXT_BOX::TFT_TEXT_BOX(void):
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
main_display{nullptr}, xPos{0}, yPos{0}, prevMaxX{0}, prevMaxY{0}, bgColor{0},wrapXEdge{0}, isCentered{0}
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	809a      	strh	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	80da      	strh	r2, [r3, #6]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	811a      	strh	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	815a      	strh	r2, [r3, #10]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	819a      	strh	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	81da      	strh	r2, [r3, #14]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	741a      	strb	r2, [r3, #16]
{}
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b002      	add	sp, #8
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZN12TFT_TEXT_BOX5writeEPKcth>:

uint16_t TFT_TEXT_BOX::write(const char* string, uint16_t font_color, uint8_t font_size)
{
 800630e:	b5b0      	push	{r4, r5, r7, lr}
 8006310:	b08c      	sub	sp, #48	; 0x30
 8006312:	af06      	add	r7, sp, #24
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	0019      	movs	r1, r3
 800631a:	1dbb      	adds	r3, r7, #6
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	1d7b      	adds	r3, r7, #5
 8006320:	1c0a      	adds	r2, r1, #0
 8006322:	701a      	strb	r2, [r3, #0]
    //First clear previous text
    this->clear();
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 f832 	bl	8006390 <_ZN12TFT_TEXT_BOX5clearEv>
    //Then draw new text
	std::pair<uint16_t, uint16_t> drawStringRet = this->main_display->drawString(this->xPos, this->yPos, string, font_color, font_color, font_size, font_size, this->wrapXEdge, this->isCentered);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	889b      	ldrh	r3, [r3, #4]
 8006334:	b219      	sxth	r1, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	b21c      	sxth	r4, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	89db      	ldrh	r3, [r3, #14]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	7c12      	ldrb	r2, [r2, #16]
 8006344:	68bd      	ldr	r5, [r7, #8]
 8006346:	9205      	str	r2, [sp, #20]
 8006348:	9304      	str	r3, [sp, #16]
 800634a:	1d7b      	adds	r3, r7, #5
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	1d7b      	adds	r3, r7, #5
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	1dbb      	adds	r3, r7, #6
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	1dbb      	adds	r3, r7, #6
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	002b      	movs	r3, r5
 8006364:	0022      	movs	r2, r4
 8006366:	f7fe ff3c 	bl	80051e2 <_ZN7TFT_GFX10drawStringEssPKctthhtb>
 800636a:	0003      	movs	r3, r0
 800636c:	001a      	movs	r2, r3
 800636e:	2114      	movs	r1, #20
 8006370:	187b      	adds	r3, r7, r1
 8006372:	601a      	str	r2, [r3, #0]
	this->prevMaxX = drawStringRet.first;
 8006374:	187b      	adds	r3, r7, r1
 8006376:	881a      	ldrh	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	811a      	strh	r2, [r3, #8]
	this->prevMaxY = drawStringRet.second;
 800637c:	187b      	adds	r3, r7, r1
 800637e:	885a      	ldrh	r2, [r3, #2]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	815a      	strh	r2, [r3, #10]
	return this->prevMaxY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	895b      	ldrh	r3, [r3, #10]
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b006      	add	sp, #24
 800638e:	bdb0      	pop	{r4, r5, r7, pc}

08006390 <_ZN12TFT_TEXT_BOX5clearEv>:

void TFT_TEXT_BOX::clear(void)
{
 8006390:	b5b0      	push	{r4, r5, r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af02      	add	r7, sp, #8
 8006396:	6078      	str	r0, [r7, #4]
    this->main_display->writeFillRect(this->xPos, this->yPos, this->prevMaxX - this->xPos, this->prevMaxY - this->yPos, this->bgColor);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	889b      	ldrh	r3, [r3, #4]
 80063a0:	b219      	sxth	r1, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	88db      	ldrh	r3, [r3, #6]
 80063a6:	b21c      	sxth	r4, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	891a      	ldrh	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	889b      	ldrh	r3, [r3, #4]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	b21d      	sxth	r5, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	895a      	ldrh	r2, [r3, #10]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	88db      	ldrh	r3, [r3, #6]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	b21b      	sxth	r3, r3
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	8992      	ldrh	r2, [r2, #12]
 80063c8:	9201      	str	r2, [sp, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	002b      	movs	r3, r5
 80063ce:	0022      	movs	r2, r4
 80063d0:	f7fe fb0e 	bl	80049f0 <_ZN7TFT_GFX13writeFillRectEsssst>
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b002      	add	sp, #8
 80063da:	bdb0      	pop	{r4, r5, r7, pc}

080063dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80063dc:	480d      	ldr	r0, [pc, #52]	; (8006414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80063de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063e0:	480d      	ldr	r0, [pc, #52]	; (8006418 <LoopForever+0x6>)
  ldr r1, =_edata
 80063e2:	490e      	ldr	r1, [pc, #56]	; (800641c <LoopForever+0xa>)
  ldr r2, =_sidata
 80063e4:	4a0e      	ldr	r2, [pc, #56]	; (8006420 <LoopForever+0xe>)
  movs r3, #0
 80063e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063e8:	e002      	b.n	80063f0 <LoopCopyDataInit>

080063ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063ee:	3304      	adds	r3, #4

080063f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063f4:	d3f9      	bcc.n	80063ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063f6:	4a0b      	ldr	r2, [pc, #44]	; (8006424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80063f8:	4c0b      	ldr	r4, [pc, #44]	; (8006428 <LoopForever+0x16>)
  movs r3, #0
 80063fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063fc:	e001      	b.n	8006402 <LoopFillZerobss>

080063fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006400:	3204      	adds	r2, #4

08006402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006404:	d3fb      	bcc.n	80063fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006406:	f7fd feb1 	bl	800416c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800640a:	f000 f82d 	bl	8006468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800640e:	f7fc ffed 	bl	80033ec <main>

08006412 <LoopForever>:

LoopForever:
    b LoopForever
 8006412:	e7fe      	b.n	8006412 <LoopForever>
  ldr   r0, =_estack
 8006414:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800641c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8006420:	08007b30 	.word	0x08007b30
  ldr r2, =_sbss
 8006424:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8006428:	200001bc 	.word	0x200001bc

0800642c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800642c:	e7fe      	b.n	800642c <ADC1_COMP_IRQHandler>

0800642e <__cxa_pure_virtual>:
 800642e:	b510      	push	{r4, lr}
 8006430:	f000 f804 	bl	800643c <_ZSt9terminatev>

08006434 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4780      	blx	r0
 8006438:	f000 f808 	bl	800644c <abort>

0800643c <_ZSt9terminatev>:
 800643c:	4b02      	ldr	r3, [pc, #8]	; (8006448 <_ZSt9terminatev+0xc>)
 800643e:	b510      	push	{r4, lr}
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	f7ff fff7 	bl	8006434 <_ZN10__cxxabiv111__terminateEPFvvE>
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	20000004 	.word	0x20000004

0800644c <abort>:
 800644c:	b510      	push	{r4, lr}
 800644e:	2006      	movs	r0, #6
 8006450:	f000 f86a 	bl	8006528 <raise>
 8006454:	2001      	movs	r0, #1
 8006456:	f7fd fe51 	bl	80040fc <_exit>
	...

0800645c <__errno>:
 800645c:	4b01      	ldr	r3, [pc, #4]	; (8006464 <__errno+0x8>)
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	4770      	bx	lr
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	20000008 	.word	0x20000008

08006468 <__libc_init_array>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	2600      	movs	r6, #0
 800646c:	4d0c      	ldr	r5, [pc, #48]	; (80064a0 <__libc_init_array+0x38>)
 800646e:	4c0d      	ldr	r4, [pc, #52]	; (80064a4 <__libc_init_array+0x3c>)
 8006470:	1b64      	subs	r4, r4, r5
 8006472:	10a4      	asrs	r4, r4, #2
 8006474:	42a6      	cmp	r6, r4
 8006476:	d109      	bne.n	800648c <__libc_init_array+0x24>
 8006478:	2600      	movs	r6, #0
 800647a:	f000 fc73 	bl	8006d64 <_init>
 800647e:	4d0a      	ldr	r5, [pc, #40]	; (80064a8 <__libc_init_array+0x40>)
 8006480:	4c0a      	ldr	r4, [pc, #40]	; (80064ac <__libc_init_array+0x44>)
 8006482:	1b64      	subs	r4, r4, r5
 8006484:	10a4      	asrs	r4, r4, #2
 8006486:	42a6      	cmp	r6, r4
 8006488:	d105      	bne.n	8006496 <__libc_init_array+0x2e>
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	00b3      	lsls	r3, r6, #2
 800648e:	58eb      	ldr	r3, [r5, r3]
 8006490:	4798      	blx	r3
 8006492:	3601      	adds	r6, #1
 8006494:	e7ee      	b.n	8006474 <__libc_init_array+0xc>
 8006496:	00b3      	lsls	r3, r6, #2
 8006498:	58eb      	ldr	r3, [r5, r3]
 800649a:	4798      	blx	r3
 800649c:	3601      	adds	r6, #1
 800649e:	e7f2      	b.n	8006486 <__libc_init_array+0x1e>
 80064a0:	08007b28 	.word	0x08007b28
 80064a4:	08007b28 	.word	0x08007b28
 80064a8:	08007b28 	.word	0x08007b28
 80064ac:	08007b2c 	.word	0x08007b2c

080064b0 <memcpy>:
 80064b0:	2300      	movs	r3, #0
 80064b2:	b510      	push	{r4, lr}
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d100      	bne.n	80064ba <memcpy+0xa>
 80064b8:	bd10      	pop	{r4, pc}
 80064ba:	5ccc      	ldrb	r4, [r1, r3]
 80064bc:	54c4      	strb	r4, [r0, r3]
 80064be:	3301      	adds	r3, #1
 80064c0:	e7f8      	b.n	80064b4 <memcpy+0x4>

080064c2 <memset>:
 80064c2:	0003      	movs	r3, r0
 80064c4:	1812      	adds	r2, r2, r0
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d100      	bne.n	80064cc <memset+0xa>
 80064ca:	4770      	bx	lr
 80064cc:	7019      	strb	r1, [r3, #0]
 80064ce:	3301      	adds	r3, #1
 80064d0:	e7f9      	b.n	80064c6 <memset+0x4>

080064d2 <_raise_r>:
 80064d2:	b570      	push	{r4, r5, r6, lr}
 80064d4:	0004      	movs	r4, r0
 80064d6:	000d      	movs	r5, r1
 80064d8:	291f      	cmp	r1, #31
 80064da:	d904      	bls.n	80064e6 <_raise_r+0x14>
 80064dc:	2316      	movs	r3, #22
 80064de:	6003      	str	r3, [r0, #0]
 80064e0:	2001      	movs	r0, #1
 80064e2:	4240      	negs	r0, r0
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <_raise_r+0x24>
 80064ec:	008a      	lsls	r2, r1, #2
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	2a00      	cmp	r2, #0
 80064f4:	d108      	bne.n	8006508 <_raise_r+0x36>
 80064f6:	0020      	movs	r0, r4
 80064f8:	f000 f832 	bl	8006560 <_getpid_r>
 80064fc:	002a      	movs	r2, r5
 80064fe:	0001      	movs	r1, r0
 8006500:	0020      	movs	r0, r4
 8006502:	f000 f81b 	bl	800653c <_kill_r>
 8006506:	e7ed      	b.n	80064e4 <_raise_r+0x12>
 8006508:	2000      	movs	r0, #0
 800650a:	2a01      	cmp	r2, #1
 800650c:	d0ea      	beq.n	80064e4 <_raise_r+0x12>
 800650e:	1c51      	adds	r1, r2, #1
 8006510:	d103      	bne.n	800651a <_raise_r+0x48>
 8006512:	2316      	movs	r3, #22
 8006514:	3001      	adds	r0, #1
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	e7e4      	b.n	80064e4 <_raise_r+0x12>
 800651a:	2400      	movs	r4, #0
 800651c:	0028      	movs	r0, r5
 800651e:	601c      	str	r4, [r3, #0]
 8006520:	4790      	blx	r2
 8006522:	0020      	movs	r0, r4
 8006524:	e7de      	b.n	80064e4 <_raise_r+0x12>
	...

08006528 <raise>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4b03      	ldr	r3, [pc, #12]	; (8006538 <raise+0x10>)
 800652c:	0001      	movs	r1, r0
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	f7ff ffcf 	bl	80064d2 <_raise_r>
 8006534:	bd10      	pop	{r4, pc}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	20000008 	.word	0x20000008

0800653c <_kill_r>:
 800653c:	2300      	movs	r3, #0
 800653e:	b570      	push	{r4, r5, r6, lr}
 8006540:	4c06      	ldr	r4, [pc, #24]	; (800655c <_kill_r+0x20>)
 8006542:	0005      	movs	r5, r0
 8006544:	0008      	movs	r0, r1
 8006546:	0011      	movs	r1, r2
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	f7fd fdc7 	bl	80040dc <_kill>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	d103      	bne.n	800655a <_kill_r+0x1e>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d000      	beq.n	800655a <_kill_r+0x1e>
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	200001b8 	.word	0x200001b8

08006560 <_getpid_r>:
 8006560:	b510      	push	{r4, lr}
 8006562:	f7fd fdb5 	bl	80040d0 <_getpid>
 8006566:	bd10      	pop	{r4, pc}

08006568 <siprintf>:
 8006568:	b40e      	push	{r1, r2, r3}
 800656a:	b500      	push	{lr}
 800656c:	490b      	ldr	r1, [pc, #44]	; (800659c <siprintf+0x34>)
 800656e:	b09c      	sub	sp, #112	; 0x70
 8006570:	ab1d      	add	r3, sp, #116	; 0x74
 8006572:	9002      	str	r0, [sp, #8]
 8006574:	9006      	str	r0, [sp, #24]
 8006576:	9107      	str	r1, [sp, #28]
 8006578:	9104      	str	r1, [sp, #16]
 800657a:	4809      	ldr	r0, [pc, #36]	; (80065a0 <siprintf+0x38>)
 800657c:	4909      	ldr	r1, [pc, #36]	; (80065a4 <siprintf+0x3c>)
 800657e:	cb04      	ldmia	r3!, {r2}
 8006580:	9105      	str	r1, [sp, #20]
 8006582:	6800      	ldr	r0, [r0, #0]
 8006584:	a902      	add	r1, sp, #8
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	f000 f8ce 	bl	8006728 <_svfiprintf_r>
 800658c:	2300      	movs	r3, #0
 800658e:	9a02      	ldr	r2, [sp, #8]
 8006590:	7013      	strb	r3, [r2, #0]
 8006592:	b01c      	add	sp, #112	; 0x70
 8006594:	bc08      	pop	{r3}
 8006596:	b003      	add	sp, #12
 8006598:	4718      	bx	r3
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	7fffffff 	.word	0x7fffffff
 80065a0:	20000008 	.word	0x20000008
 80065a4:	ffff0208 	.word	0xffff0208

080065a8 <_malloc_r>:
 80065a8:	2303      	movs	r3, #3
 80065aa:	b570      	push	{r4, r5, r6, lr}
 80065ac:	1ccd      	adds	r5, r1, #3
 80065ae:	439d      	bics	r5, r3
 80065b0:	3508      	adds	r5, #8
 80065b2:	0006      	movs	r6, r0
 80065b4:	2d0c      	cmp	r5, #12
 80065b6:	d21e      	bcs.n	80065f6 <_malloc_r+0x4e>
 80065b8:	250c      	movs	r5, #12
 80065ba:	42a9      	cmp	r1, r5
 80065bc:	d81d      	bhi.n	80065fa <_malloc_r+0x52>
 80065be:	0030      	movs	r0, r6
 80065c0:	f000 fb56 	bl	8006c70 <__malloc_lock>
 80065c4:	4a25      	ldr	r2, [pc, #148]	; (800665c <_malloc_r+0xb4>)
 80065c6:	6814      	ldr	r4, [r2, #0]
 80065c8:	0021      	movs	r1, r4
 80065ca:	2900      	cmp	r1, #0
 80065cc:	d119      	bne.n	8006602 <_malloc_r+0x5a>
 80065ce:	4c24      	ldr	r4, [pc, #144]	; (8006660 <_malloc_r+0xb8>)
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <_malloc_r+0x36>
 80065d6:	0030      	movs	r0, r6
 80065d8:	f000 fb1a 	bl	8006c10 <_sbrk_r>
 80065dc:	6020      	str	r0, [r4, #0]
 80065de:	0029      	movs	r1, r5
 80065e0:	0030      	movs	r0, r6
 80065e2:	f000 fb15 	bl	8006c10 <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d12b      	bne.n	8006642 <_malloc_r+0x9a>
 80065ea:	230c      	movs	r3, #12
 80065ec:	0030      	movs	r0, r6
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	f000 fb3f 	bl	8006c72 <__malloc_unlock>
 80065f4:	e003      	b.n	80065fe <_malloc_r+0x56>
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	dadf      	bge.n	80065ba <_malloc_r+0x12>
 80065fa:	230c      	movs	r3, #12
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	2000      	movs	r0, #0
 8006600:	bd70      	pop	{r4, r5, r6, pc}
 8006602:	680b      	ldr	r3, [r1, #0]
 8006604:	1b5b      	subs	r3, r3, r5
 8006606:	d419      	bmi.n	800663c <_malloc_r+0x94>
 8006608:	2b0b      	cmp	r3, #11
 800660a:	d903      	bls.n	8006614 <_malloc_r+0x6c>
 800660c:	600b      	str	r3, [r1, #0]
 800660e:	18cc      	adds	r4, r1, r3
 8006610:	6025      	str	r5, [r4, #0]
 8006612:	e003      	b.n	800661c <_malloc_r+0x74>
 8006614:	684b      	ldr	r3, [r1, #4]
 8006616:	428c      	cmp	r4, r1
 8006618:	d10d      	bne.n	8006636 <_malloc_r+0x8e>
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	0030      	movs	r0, r6
 800661e:	f000 fb28 	bl	8006c72 <__malloc_unlock>
 8006622:	0020      	movs	r0, r4
 8006624:	2207      	movs	r2, #7
 8006626:	300b      	adds	r0, #11
 8006628:	1d23      	adds	r3, r4, #4
 800662a:	4390      	bics	r0, r2
 800662c:	1ac3      	subs	r3, r0, r3
 800662e:	d0e7      	beq.n	8006600 <_malloc_r+0x58>
 8006630:	425a      	negs	r2, r3
 8006632:	50e2      	str	r2, [r4, r3]
 8006634:	e7e4      	b.n	8006600 <_malloc_r+0x58>
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	000c      	movs	r4, r1
 800663a:	e7ef      	b.n	800661c <_malloc_r+0x74>
 800663c:	000c      	movs	r4, r1
 800663e:	6849      	ldr	r1, [r1, #4]
 8006640:	e7c3      	b.n	80065ca <_malloc_r+0x22>
 8006642:	2303      	movs	r3, #3
 8006644:	1cc4      	adds	r4, r0, #3
 8006646:	439c      	bics	r4, r3
 8006648:	42a0      	cmp	r0, r4
 800664a:	d0e1      	beq.n	8006610 <_malloc_r+0x68>
 800664c:	1a21      	subs	r1, r4, r0
 800664e:	0030      	movs	r0, r6
 8006650:	f000 fade 	bl	8006c10 <_sbrk_r>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d1db      	bne.n	8006610 <_malloc_r+0x68>
 8006658:	e7c7      	b.n	80065ea <_malloc_r+0x42>
 800665a:	46c0      	nop			; (mov r8, r8)
 800665c:	200001ac 	.word	0x200001ac
 8006660:	200001b0 	.word	0x200001b0

08006664 <__ssputs_r>:
 8006664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006666:	688e      	ldr	r6, [r1, #8]
 8006668:	b085      	sub	sp, #20
 800666a:	0007      	movs	r7, r0
 800666c:	000c      	movs	r4, r1
 800666e:	9203      	str	r2, [sp, #12]
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	429e      	cmp	r6, r3
 8006674:	d83c      	bhi.n	80066f0 <__ssputs_r+0x8c>
 8006676:	2390      	movs	r3, #144	; 0x90
 8006678:	898a      	ldrh	r2, [r1, #12]
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	421a      	tst	r2, r3
 800667e:	d034      	beq.n	80066ea <__ssputs_r+0x86>
 8006680:	2503      	movs	r5, #3
 8006682:	6909      	ldr	r1, [r1, #16]
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	1a5b      	subs	r3, r3, r1
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	6963      	ldr	r3, [r4, #20]
 800668c:	9802      	ldr	r0, [sp, #8]
 800668e:	435d      	muls	r5, r3
 8006690:	0feb      	lsrs	r3, r5, #31
 8006692:	195d      	adds	r5, r3, r5
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	106d      	asrs	r5, r5, #1
 8006698:	3301      	adds	r3, #1
 800669a:	181b      	adds	r3, r3, r0
 800669c:	42ab      	cmp	r3, r5
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x3e>
 80066a0:	001d      	movs	r5, r3
 80066a2:	0553      	lsls	r3, r2, #21
 80066a4:	d532      	bpl.n	800670c <__ssputs_r+0xa8>
 80066a6:	0029      	movs	r1, r5
 80066a8:	0038      	movs	r0, r7
 80066aa:	f7ff ff7d 	bl	80065a8 <_malloc_r>
 80066ae:	1e06      	subs	r6, r0, #0
 80066b0:	d109      	bne.n	80066c6 <__ssputs_r+0x62>
 80066b2:	230c      	movs	r3, #12
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	2340      	movs	r3, #64	; 0x40
 80066b8:	2001      	movs	r0, #1
 80066ba:	89a2      	ldrh	r2, [r4, #12]
 80066bc:	4240      	negs	r0, r0
 80066be:	4313      	orrs	r3, r2
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	b005      	add	sp, #20
 80066c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c6:	9a02      	ldr	r2, [sp, #8]
 80066c8:	6921      	ldr	r1, [r4, #16]
 80066ca:	f7ff fef1 	bl	80064b0 <memcpy>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	4a14      	ldr	r2, [pc, #80]	; (8006724 <__ssputs_r+0xc0>)
 80066d2:	401a      	ands	r2, r3
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	4313      	orrs	r3, r2
 80066d8:	81a3      	strh	r3, [r4, #12]
 80066da:	9b02      	ldr	r3, [sp, #8]
 80066dc:	6126      	str	r6, [r4, #16]
 80066de:	18f6      	adds	r6, r6, r3
 80066e0:	6026      	str	r6, [r4, #0]
 80066e2:	6165      	str	r5, [r4, #20]
 80066e4:	9e01      	ldr	r6, [sp, #4]
 80066e6:	1aed      	subs	r5, r5, r3
 80066e8:	60a5      	str	r5, [r4, #8]
 80066ea:	9b01      	ldr	r3, [sp, #4]
 80066ec:	429e      	cmp	r6, r3
 80066ee:	d900      	bls.n	80066f2 <__ssputs_r+0x8e>
 80066f0:	9e01      	ldr	r6, [sp, #4]
 80066f2:	0032      	movs	r2, r6
 80066f4:	9903      	ldr	r1, [sp, #12]
 80066f6:	6820      	ldr	r0, [r4, #0]
 80066f8:	f000 faa7 	bl	8006c4a <memmove>
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	2000      	movs	r0, #0
 8006700:	1b9b      	subs	r3, r3, r6
 8006702:	60a3      	str	r3, [r4, #8]
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	199e      	adds	r6, r3, r6
 8006708:	6026      	str	r6, [r4, #0]
 800670a:	e7da      	b.n	80066c2 <__ssputs_r+0x5e>
 800670c:	002a      	movs	r2, r5
 800670e:	0038      	movs	r0, r7
 8006710:	f000 fafa 	bl	8006d08 <_realloc_r>
 8006714:	1e06      	subs	r6, r0, #0
 8006716:	d1e0      	bne.n	80066da <__ssputs_r+0x76>
 8006718:	6921      	ldr	r1, [r4, #16]
 800671a:	0038      	movs	r0, r7
 800671c:	f000 faaa 	bl	8006c74 <_free_r>
 8006720:	e7c7      	b.n	80066b2 <__ssputs_r+0x4e>
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	fffffb7f 	.word	0xfffffb7f

08006728 <_svfiprintf_r>:
 8006728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672a:	b0a1      	sub	sp, #132	; 0x84
 800672c:	9003      	str	r0, [sp, #12]
 800672e:	001d      	movs	r5, r3
 8006730:	898b      	ldrh	r3, [r1, #12]
 8006732:	000f      	movs	r7, r1
 8006734:	0016      	movs	r6, r2
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	d511      	bpl.n	800675e <_svfiprintf_r+0x36>
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10e      	bne.n	800675e <_svfiprintf_r+0x36>
 8006740:	2140      	movs	r1, #64	; 0x40
 8006742:	f7ff ff31 	bl	80065a8 <_malloc_r>
 8006746:	6038      	str	r0, [r7, #0]
 8006748:	6138      	str	r0, [r7, #16]
 800674a:	2800      	cmp	r0, #0
 800674c:	d105      	bne.n	800675a <_svfiprintf_r+0x32>
 800674e:	230c      	movs	r3, #12
 8006750:	9a03      	ldr	r2, [sp, #12]
 8006752:	3801      	subs	r0, #1
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	b021      	add	sp, #132	; 0x84
 8006758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	2300      	movs	r3, #0
 8006760:	ac08      	add	r4, sp, #32
 8006762:	6163      	str	r3, [r4, #20]
 8006764:	3320      	adds	r3, #32
 8006766:	7663      	strb	r3, [r4, #25]
 8006768:	3310      	adds	r3, #16
 800676a:	76a3      	strb	r3, [r4, #26]
 800676c:	9507      	str	r5, [sp, #28]
 800676e:	0035      	movs	r5, r6
 8006770:	782b      	ldrb	r3, [r5, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <_svfiprintf_r+0x52>
 8006776:	2b25      	cmp	r3, #37	; 0x25
 8006778:	d146      	bne.n	8006808 <_svfiprintf_r+0xe0>
 800677a:	1bab      	subs	r3, r5, r6
 800677c:	9305      	str	r3, [sp, #20]
 800677e:	d00c      	beq.n	800679a <_svfiprintf_r+0x72>
 8006780:	0032      	movs	r2, r6
 8006782:	0039      	movs	r1, r7
 8006784:	9803      	ldr	r0, [sp, #12]
 8006786:	f7ff ff6d 	bl	8006664 <__ssputs_r>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d100      	bne.n	8006790 <_svfiprintf_r+0x68>
 800678e:	e0ae      	b.n	80068ee <_svfiprintf_r+0x1c6>
 8006790:	6962      	ldr	r2, [r4, #20]
 8006792:	9b05      	ldr	r3, [sp, #20]
 8006794:	4694      	mov	ip, r2
 8006796:	4463      	add	r3, ip
 8006798:	6163      	str	r3, [r4, #20]
 800679a:	782b      	ldrb	r3, [r5, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d100      	bne.n	80067a2 <_svfiprintf_r+0x7a>
 80067a0:	e0a5      	b.n	80068ee <_svfiprintf_r+0x1c6>
 80067a2:	2201      	movs	r2, #1
 80067a4:	2300      	movs	r3, #0
 80067a6:	4252      	negs	r2, r2
 80067a8:	6062      	str	r2, [r4, #4]
 80067aa:	a904      	add	r1, sp, #16
 80067ac:	3254      	adds	r2, #84	; 0x54
 80067ae:	1852      	adds	r2, r2, r1
 80067b0:	1c6e      	adds	r6, r5, #1
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	60e3      	str	r3, [r4, #12]
 80067b6:	60a3      	str	r3, [r4, #8]
 80067b8:	7013      	strb	r3, [r2, #0]
 80067ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80067bc:	7831      	ldrb	r1, [r6, #0]
 80067be:	2205      	movs	r2, #5
 80067c0:	4853      	ldr	r0, [pc, #332]	; (8006910 <_svfiprintf_r+0x1e8>)
 80067c2:	f000 fa37 	bl	8006c34 <memchr>
 80067c6:	1c75      	adds	r5, r6, #1
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d11f      	bne.n	800680c <_svfiprintf_r+0xe4>
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	06d3      	lsls	r3, r2, #27
 80067d0:	d504      	bpl.n	80067dc <_svfiprintf_r+0xb4>
 80067d2:	2353      	movs	r3, #83	; 0x53
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	185b      	adds	r3, r3, r1
 80067d8:	2120      	movs	r1, #32
 80067da:	7019      	strb	r1, [r3, #0]
 80067dc:	0713      	lsls	r3, r2, #28
 80067de:	d504      	bpl.n	80067ea <_svfiprintf_r+0xc2>
 80067e0:	2353      	movs	r3, #83	; 0x53
 80067e2:	a904      	add	r1, sp, #16
 80067e4:	185b      	adds	r3, r3, r1
 80067e6:	212b      	movs	r1, #43	; 0x2b
 80067e8:	7019      	strb	r1, [r3, #0]
 80067ea:	7833      	ldrb	r3, [r6, #0]
 80067ec:	2b2a      	cmp	r3, #42	; 0x2a
 80067ee:	d016      	beq.n	800681e <_svfiprintf_r+0xf6>
 80067f0:	0035      	movs	r5, r6
 80067f2:	2100      	movs	r1, #0
 80067f4:	200a      	movs	r0, #10
 80067f6:	68e3      	ldr	r3, [r4, #12]
 80067f8:	782a      	ldrb	r2, [r5, #0]
 80067fa:	1c6e      	adds	r6, r5, #1
 80067fc:	3a30      	subs	r2, #48	; 0x30
 80067fe:	2a09      	cmp	r2, #9
 8006800:	d94e      	bls.n	80068a0 <_svfiprintf_r+0x178>
 8006802:	2900      	cmp	r1, #0
 8006804:	d018      	beq.n	8006838 <_svfiprintf_r+0x110>
 8006806:	e010      	b.n	800682a <_svfiprintf_r+0x102>
 8006808:	3501      	adds	r5, #1
 800680a:	e7b1      	b.n	8006770 <_svfiprintf_r+0x48>
 800680c:	4b40      	ldr	r3, [pc, #256]	; (8006910 <_svfiprintf_r+0x1e8>)
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	1ac0      	subs	r0, r0, r3
 8006812:	2301      	movs	r3, #1
 8006814:	4083      	lsls	r3, r0
 8006816:	4313      	orrs	r3, r2
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	002e      	movs	r6, r5
 800681c:	e7ce      	b.n	80067bc <_svfiprintf_r+0x94>
 800681e:	9b07      	ldr	r3, [sp, #28]
 8006820:	1d19      	adds	r1, r3, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	9107      	str	r1, [sp, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	db01      	blt.n	800682e <_svfiprintf_r+0x106>
 800682a:	930b      	str	r3, [sp, #44]	; 0x2c
 800682c:	e004      	b.n	8006838 <_svfiprintf_r+0x110>
 800682e:	425b      	negs	r3, r3
 8006830:	60e3      	str	r3, [r4, #12]
 8006832:	2302      	movs	r3, #2
 8006834:	4313      	orrs	r3, r2
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	782b      	ldrb	r3, [r5, #0]
 800683a:	2b2e      	cmp	r3, #46	; 0x2e
 800683c:	d10a      	bne.n	8006854 <_svfiprintf_r+0x12c>
 800683e:	786b      	ldrb	r3, [r5, #1]
 8006840:	2b2a      	cmp	r3, #42	; 0x2a
 8006842:	d135      	bne.n	80068b0 <_svfiprintf_r+0x188>
 8006844:	9b07      	ldr	r3, [sp, #28]
 8006846:	3502      	adds	r5, #2
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9207      	str	r2, [sp, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db2b      	blt.n	80068aa <_svfiprintf_r+0x182>
 8006852:	9309      	str	r3, [sp, #36]	; 0x24
 8006854:	4e2f      	ldr	r6, [pc, #188]	; (8006914 <_svfiprintf_r+0x1ec>)
 8006856:	7829      	ldrb	r1, [r5, #0]
 8006858:	2203      	movs	r2, #3
 800685a:	0030      	movs	r0, r6
 800685c:	f000 f9ea 	bl	8006c34 <memchr>
 8006860:	2800      	cmp	r0, #0
 8006862:	d006      	beq.n	8006872 <_svfiprintf_r+0x14a>
 8006864:	2340      	movs	r3, #64	; 0x40
 8006866:	1b80      	subs	r0, r0, r6
 8006868:	4083      	lsls	r3, r0
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	3501      	adds	r5, #1
 800686e:	4313      	orrs	r3, r2
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	7829      	ldrb	r1, [r5, #0]
 8006874:	2206      	movs	r2, #6
 8006876:	4828      	ldr	r0, [pc, #160]	; (8006918 <_svfiprintf_r+0x1f0>)
 8006878:	1c6e      	adds	r6, r5, #1
 800687a:	7621      	strb	r1, [r4, #24]
 800687c:	f000 f9da 	bl	8006c34 <memchr>
 8006880:	2800      	cmp	r0, #0
 8006882:	d03c      	beq.n	80068fe <_svfiprintf_r+0x1d6>
 8006884:	4b25      	ldr	r3, [pc, #148]	; (800691c <_svfiprintf_r+0x1f4>)
 8006886:	2b00      	cmp	r3, #0
 8006888:	d125      	bne.n	80068d6 <_svfiprintf_r+0x1ae>
 800688a:	2207      	movs	r2, #7
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	3307      	adds	r3, #7
 8006890:	4393      	bics	r3, r2
 8006892:	3308      	adds	r3, #8
 8006894:	9307      	str	r3, [sp, #28]
 8006896:	6963      	ldr	r3, [r4, #20]
 8006898:	9a04      	ldr	r2, [sp, #16]
 800689a:	189b      	adds	r3, r3, r2
 800689c:	6163      	str	r3, [r4, #20]
 800689e:	e766      	b.n	800676e <_svfiprintf_r+0x46>
 80068a0:	4343      	muls	r3, r0
 80068a2:	2101      	movs	r1, #1
 80068a4:	189b      	adds	r3, r3, r2
 80068a6:	0035      	movs	r5, r6
 80068a8:	e7a6      	b.n	80067f8 <_svfiprintf_r+0xd0>
 80068aa:	2301      	movs	r3, #1
 80068ac:	425b      	negs	r3, r3
 80068ae:	e7d0      	b.n	8006852 <_svfiprintf_r+0x12a>
 80068b0:	2300      	movs	r3, #0
 80068b2:	200a      	movs	r0, #10
 80068b4:	001a      	movs	r2, r3
 80068b6:	3501      	adds	r5, #1
 80068b8:	6063      	str	r3, [r4, #4]
 80068ba:	7829      	ldrb	r1, [r5, #0]
 80068bc:	1c6e      	adds	r6, r5, #1
 80068be:	3930      	subs	r1, #48	; 0x30
 80068c0:	2909      	cmp	r1, #9
 80068c2:	d903      	bls.n	80068cc <_svfiprintf_r+0x1a4>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0c5      	beq.n	8006854 <_svfiprintf_r+0x12c>
 80068c8:	9209      	str	r2, [sp, #36]	; 0x24
 80068ca:	e7c3      	b.n	8006854 <_svfiprintf_r+0x12c>
 80068cc:	4342      	muls	r2, r0
 80068ce:	2301      	movs	r3, #1
 80068d0:	1852      	adds	r2, r2, r1
 80068d2:	0035      	movs	r5, r6
 80068d4:	e7f1      	b.n	80068ba <_svfiprintf_r+0x192>
 80068d6:	ab07      	add	r3, sp, #28
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	003a      	movs	r2, r7
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <_svfiprintf_r+0x1f8>)
 80068de:	0021      	movs	r1, r4
 80068e0:	9803      	ldr	r0, [sp, #12]
 80068e2:	e000      	b.n	80068e6 <_svfiprintf_r+0x1be>
 80068e4:	bf00      	nop
 80068e6:	9004      	str	r0, [sp, #16]
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	3301      	adds	r3, #1
 80068ec:	d1d3      	bne.n	8006896 <_svfiprintf_r+0x16e>
 80068ee:	89bb      	ldrh	r3, [r7, #12]
 80068f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068f2:	065b      	lsls	r3, r3, #25
 80068f4:	d400      	bmi.n	80068f8 <_svfiprintf_r+0x1d0>
 80068f6:	e72e      	b.n	8006756 <_svfiprintf_r+0x2e>
 80068f8:	2001      	movs	r0, #1
 80068fa:	4240      	negs	r0, r0
 80068fc:	e72b      	b.n	8006756 <_svfiprintf_r+0x2e>
 80068fe:	ab07      	add	r3, sp, #28
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	003a      	movs	r2, r7
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <_svfiprintf_r+0x1f8>)
 8006906:	0021      	movs	r1, r4
 8006908:	9803      	ldr	r0, [sp, #12]
 800690a:	f000 f879 	bl	8006a00 <_printf_i>
 800690e:	e7ea      	b.n	80068e6 <_svfiprintf_r+0x1be>
 8006910:	08007af4 	.word	0x08007af4
 8006914:	08007afa 	.word	0x08007afa
 8006918:	08007afe 	.word	0x08007afe
 800691c:	00000000 	.word	0x00000000
 8006920:	08006665 	.word	0x08006665

08006924 <_printf_common>:
 8006924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006926:	0015      	movs	r5, r2
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	688a      	ldr	r2, [r1, #8]
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	9000      	str	r0, [sp, #0]
 8006930:	000c      	movs	r4, r1
 8006932:	4293      	cmp	r3, r2
 8006934:	da00      	bge.n	8006938 <_printf_common+0x14>
 8006936:	0013      	movs	r3, r2
 8006938:	0022      	movs	r2, r4
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	3243      	adds	r2, #67	; 0x43
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	2a00      	cmp	r2, #0
 8006942:	d001      	beq.n	8006948 <_printf_common+0x24>
 8006944:	3301      	adds	r3, #1
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	069b      	lsls	r3, r3, #26
 800694c:	d502      	bpl.n	8006954 <_printf_common+0x30>
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	3302      	adds	r3, #2
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	2706      	movs	r7, #6
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	401f      	ands	r7, r3
 800695a:	d027      	beq.n	80069ac <_printf_common+0x88>
 800695c:	0023      	movs	r3, r4
 800695e:	3343      	adds	r3, #67	; 0x43
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	4193      	sbcs	r3, r2
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	0692      	lsls	r2, r2, #26
 800696a:	d430      	bmi.n	80069ce <_printf_common+0xaa>
 800696c:	0022      	movs	r2, r4
 800696e:	9901      	ldr	r1, [sp, #4]
 8006970:	3243      	adds	r2, #67	; 0x43
 8006972:	9800      	ldr	r0, [sp, #0]
 8006974:	9e08      	ldr	r6, [sp, #32]
 8006976:	47b0      	blx	r6
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d025      	beq.n	80069c8 <_printf_common+0xa4>
 800697c:	2306      	movs	r3, #6
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	682a      	ldr	r2, [r5, #0]
 8006982:	68e1      	ldr	r1, [r4, #12]
 8006984:	4003      	ands	r3, r0
 8006986:	2500      	movs	r5, #0
 8006988:	2b04      	cmp	r3, #4
 800698a:	d103      	bne.n	8006994 <_printf_common+0x70>
 800698c:	1a8d      	subs	r5, r1, r2
 800698e:	43eb      	mvns	r3, r5
 8006990:	17db      	asrs	r3, r3, #31
 8006992:	401d      	ands	r5, r3
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	6922      	ldr	r2, [r4, #16]
 8006998:	4293      	cmp	r3, r2
 800699a:	dd01      	ble.n	80069a0 <_printf_common+0x7c>
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	18ed      	adds	r5, r5, r3
 80069a0:	2700      	movs	r7, #0
 80069a2:	42bd      	cmp	r5, r7
 80069a4:	d120      	bne.n	80069e8 <_printf_common+0xc4>
 80069a6:	2000      	movs	r0, #0
 80069a8:	e010      	b.n	80069cc <_printf_common+0xa8>
 80069aa:	3701      	adds	r7, #1
 80069ac:	68e3      	ldr	r3, [r4, #12]
 80069ae:	682a      	ldr	r2, [r5, #0]
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	42bb      	cmp	r3, r7
 80069b4:	ddd2      	ble.n	800695c <_printf_common+0x38>
 80069b6:	0022      	movs	r2, r4
 80069b8:	2301      	movs	r3, #1
 80069ba:	3219      	adds	r2, #25
 80069bc:	9901      	ldr	r1, [sp, #4]
 80069be:	9800      	ldr	r0, [sp, #0]
 80069c0:	9e08      	ldr	r6, [sp, #32]
 80069c2:	47b0      	blx	r6
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d1f0      	bne.n	80069aa <_printf_common+0x86>
 80069c8:	2001      	movs	r0, #1
 80069ca:	4240      	negs	r0, r0
 80069cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069ce:	2030      	movs	r0, #48	; 0x30
 80069d0:	18e1      	adds	r1, r4, r3
 80069d2:	3143      	adds	r1, #67	; 0x43
 80069d4:	7008      	strb	r0, [r1, #0]
 80069d6:	0021      	movs	r1, r4
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	3145      	adds	r1, #69	; 0x45
 80069dc:	7809      	ldrb	r1, [r1, #0]
 80069de:	18a2      	adds	r2, r4, r2
 80069e0:	3243      	adds	r2, #67	; 0x43
 80069e2:	3302      	adds	r3, #2
 80069e4:	7011      	strb	r1, [r2, #0]
 80069e6:	e7c1      	b.n	800696c <_printf_common+0x48>
 80069e8:	0022      	movs	r2, r4
 80069ea:	2301      	movs	r3, #1
 80069ec:	321a      	adds	r2, #26
 80069ee:	9901      	ldr	r1, [sp, #4]
 80069f0:	9800      	ldr	r0, [sp, #0]
 80069f2:	9e08      	ldr	r6, [sp, #32]
 80069f4:	47b0      	blx	r6
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	d0e6      	beq.n	80069c8 <_printf_common+0xa4>
 80069fa:	3701      	adds	r7, #1
 80069fc:	e7d1      	b.n	80069a2 <_printf_common+0x7e>
	...

08006a00 <_printf_i>:
 8006a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a02:	b089      	sub	sp, #36	; 0x24
 8006a04:	9204      	str	r2, [sp, #16]
 8006a06:	000a      	movs	r2, r1
 8006a08:	3243      	adds	r2, #67	; 0x43
 8006a0a:	9305      	str	r3, [sp, #20]
 8006a0c:	9003      	str	r0, [sp, #12]
 8006a0e:	9202      	str	r2, [sp, #8]
 8006a10:	7e0a      	ldrb	r2, [r1, #24]
 8006a12:	000c      	movs	r4, r1
 8006a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a16:	2a6e      	cmp	r2, #110	; 0x6e
 8006a18:	d100      	bne.n	8006a1c <_printf_i+0x1c>
 8006a1a:	e086      	b.n	8006b2a <_printf_i+0x12a>
 8006a1c:	d81f      	bhi.n	8006a5e <_printf_i+0x5e>
 8006a1e:	2a63      	cmp	r2, #99	; 0x63
 8006a20:	d033      	beq.n	8006a8a <_printf_i+0x8a>
 8006a22:	d808      	bhi.n	8006a36 <_printf_i+0x36>
 8006a24:	2a00      	cmp	r2, #0
 8006a26:	d100      	bne.n	8006a2a <_printf_i+0x2a>
 8006a28:	e08c      	b.n	8006b44 <_printf_i+0x144>
 8006a2a:	2a58      	cmp	r2, #88	; 0x58
 8006a2c:	d04d      	beq.n	8006aca <_printf_i+0xca>
 8006a2e:	0025      	movs	r5, r4
 8006a30:	3542      	adds	r5, #66	; 0x42
 8006a32:	702a      	strb	r2, [r5, #0]
 8006a34:	e030      	b.n	8006a98 <_printf_i+0x98>
 8006a36:	2a64      	cmp	r2, #100	; 0x64
 8006a38:	d001      	beq.n	8006a3e <_printf_i+0x3e>
 8006a3a:	2a69      	cmp	r2, #105	; 0x69
 8006a3c:	d1f7      	bne.n	8006a2e <_printf_i+0x2e>
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	6825      	ldr	r5, [r4, #0]
 8006a42:	1d0a      	adds	r2, r1, #4
 8006a44:	0628      	lsls	r0, r5, #24
 8006a46:	d529      	bpl.n	8006a9c <_printf_i+0x9c>
 8006a48:	6808      	ldr	r0, [r1, #0]
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	da03      	bge.n	8006a58 <_printf_i+0x58>
 8006a50:	232d      	movs	r3, #45	; 0x2d
 8006a52:	9a02      	ldr	r2, [sp, #8]
 8006a54:	4240      	negs	r0, r0
 8006a56:	7013      	strb	r3, [r2, #0]
 8006a58:	4e6b      	ldr	r6, [pc, #428]	; (8006c08 <_printf_i+0x208>)
 8006a5a:	270a      	movs	r7, #10
 8006a5c:	e04f      	b.n	8006afe <_printf_i+0xfe>
 8006a5e:	2a73      	cmp	r2, #115	; 0x73
 8006a60:	d074      	beq.n	8006b4c <_printf_i+0x14c>
 8006a62:	d808      	bhi.n	8006a76 <_printf_i+0x76>
 8006a64:	2a6f      	cmp	r2, #111	; 0x6f
 8006a66:	d01f      	beq.n	8006aa8 <_printf_i+0xa8>
 8006a68:	2a70      	cmp	r2, #112	; 0x70
 8006a6a:	d1e0      	bne.n	8006a2e <_printf_i+0x2e>
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	6809      	ldr	r1, [r1, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	6022      	str	r2, [r4, #0]
 8006a74:	e003      	b.n	8006a7e <_printf_i+0x7e>
 8006a76:	2a75      	cmp	r2, #117	; 0x75
 8006a78:	d016      	beq.n	8006aa8 <_printf_i+0xa8>
 8006a7a:	2a78      	cmp	r2, #120	; 0x78
 8006a7c:	d1d7      	bne.n	8006a2e <_printf_i+0x2e>
 8006a7e:	0022      	movs	r2, r4
 8006a80:	2178      	movs	r1, #120	; 0x78
 8006a82:	3245      	adds	r2, #69	; 0x45
 8006a84:	7011      	strb	r1, [r2, #0]
 8006a86:	4e61      	ldr	r6, [pc, #388]	; (8006c0c <_printf_i+0x20c>)
 8006a88:	e022      	b.n	8006ad0 <_printf_i+0xd0>
 8006a8a:	0025      	movs	r5, r4
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	3542      	adds	r5, #66	; 0x42
 8006a90:	1d11      	adds	r1, r2, #4
 8006a92:	6019      	str	r1, [r3, #0]
 8006a94:	6813      	ldr	r3, [r2, #0]
 8006a96:	702b      	strb	r3, [r5, #0]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e065      	b.n	8006b68 <_printf_i+0x168>
 8006a9c:	6808      	ldr	r0, [r1, #0]
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	0669      	lsls	r1, r5, #25
 8006aa2:	d5d3      	bpl.n	8006a4c <_printf_i+0x4c>
 8006aa4:	b200      	sxth	r0, r0
 8006aa6:	e7d1      	b.n	8006a4c <_printf_i+0x4c>
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	6825      	ldr	r5, [r4, #0]
 8006aac:	1d08      	adds	r0, r1, #4
 8006aae:	6018      	str	r0, [r3, #0]
 8006ab0:	6808      	ldr	r0, [r1, #0]
 8006ab2:	062e      	lsls	r6, r5, #24
 8006ab4:	d505      	bpl.n	8006ac2 <_printf_i+0xc2>
 8006ab6:	4e54      	ldr	r6, [pc, #336]	; (8006c08 <_printf_i+0x208>)
 8006ab8:	2708      	movs	r7, #8
 8006aba:	2a6f      	cmp	r2, #111	; 0x6f
 8006abc:	d01b      	beq.n	8006af6 <_printf_i+0xf6>
 8006abe:	270a      	movs	r7, #10
 8006ac0:	e019      	b.n	8006af6 <_printf_i+0xf6>
 8006ac2:	066d      	lsls	r5, r5, #25
 8006ac4:	d5f7      	bpl.n	8006ab6 <_printf_i+0xb6>
 8006ac6:	b280      	uxth	r0, r0
 8006ac8:	e7f5      	b.n	8006ab6 <_printf_i+0xb6>
 8006aca:	3145      	adds	r1, #69	; 0x45
 8006acc:	4e4e      	ldr	r6, [pc, #312]	; (8006c08 <_printf_i+0x208>)
 8006ace:	700a      	strb	r2, [r1, #0]
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	6822      	ldr	r2, [r4, #0]
 8006ad4:	1d01      	adds	r1, r0, #4
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	6019      	str	r1, [r3, #0]
 8006ada:	0615      	lsls	r5, r2, #24
 8006adc:	d521      	bpl.n	8006b22 <_printf_i+0x122>
 8006ade:	07d3      	lsls	r3, r2, #31
 8006ae0:	d502      	bpl.n	8006ae8 <_printf_i+0xe8>
 8006ae2:	2320      	movs	r3, #32
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	2710      	movs	r7, #16
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d103      	bne.n	8006af6 <_printf_i+0xf6>
 8006aee:	2320      	movs	r3, #32
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	439a      	bics	r2, r3
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	0023      	movs	r3, r4
 8006af8:	2200      	movs	r2, #0
 8006afa:	3343      	adds	r3, #67	; 0x43
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	60a3      	str	r3, [r4, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	db58      	blt.n	8006bb8 <_printf_i+0x1b8>
 8006b06:	2204      	movs	r2, #4
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	4391      	bics	r1, r2
 8006b0c:	6021      	str	r1, [r4, #0]
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d154      	bne.n	8006bbc <_printf_i+0x1bc>
 8006b12:	9d02      	ldr	r5, [sp, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05a      	beq.n	8006bce <_printf_i+0x1ce>
 8006b18:	0025      	movs	r5, r4
 8006b1a:	7833      	ldrb	r3, [r6, #0]
 8006b1c:	3542      	adds	r5, #66	; 0x42
 8006b1e:	702b      	strb	r3, [r5, #0]
 8006b20:	e055      	b.n	8006bce <_printf_i+0x1ce>
 8006b22:	0655      	lsls	r5, r2, #25
 8006b24:	d5db      	bpl.n	8006ade <_printf_i+0xde>
 8006b26:	b280      	uxth	r0, r0
 8006b28:	e7d9      	b.n	8006ade <_printf_i+0xde>
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	680d      	ldr	r5, [r1, #0]
 8006b2e:	1d10      	adds	r0, r2, #4
 8006b30:	6949      	ldr	r1, [r1, #20]
 8006b32:	6018      	str	r0, [r3, #0]
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	062e      	lsls	r6, r5, #24
 8006b38:	d501      	bpl.n	8006b3e <_printf_i+0x13e>
 8006b3a:	6019      	str	r1, [r3, #0]
 8006b3c:	e002      	b.n	8006b44 <_printf_i+0x144>
 8006b3e:	066d      	lsls	r5, r5, #25
 8006b40:	d5fb      	bpl.n	8006b3a <_printf_i+0x13a>
 8006b42:	8019      	strh	r1, [r3, #0]
 8006b44:	2300      	movs	r3, #0
 8006b46:	9d02      	ldr	r5, [sp, #8]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	e04f      	b.n	8006bec <_printf_i+0x1ec>
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	1d11      	adds	r1, r2, #4
 8006b50:	6019      	str	r1, [r3, #0]
 8006b52:	6815      	ldr	r5, [r2, #0]
 8006b54:	2100      	movs	r1, #0
 8006b56:	6862      	ldr	r2, [r4, #4]
 8006b58:	0028      	movs	r0, r5
 8006b5a:	f000 f86b 	bl	8006c34 <memchr>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d001      	beq.n	8006b66 <_printf_i+0x166>
 8006b62:	1b40      	subs	r0, r0, r5
 8006b64:	6060      	str	r0, [r4, #4]
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9a02      	ldr	r2, [sp, #8]
 8006b6e:	7013      	strb	r3, [r2, #0]
 8006b70:	e03c      	b.n	8006bec <_printf_i+0x1ec>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	002a      	movs	r2, r5
 8006b76:	9904      	ldr	r1, [sp, #16]
 8006b78:	9803      	ldr	r0, [sp, #12]
 8006b7a:	9d05      	ldr	r5, [sp, #20]
 8006b7c:	47a8      	blx	r5
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d03e      	beq.n	8006c00 <_printf_i+0x200>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	079b      	lsls	r3, r3, #30
 8006b86:	d415      	bmi.n	8006bb4 <_printf_i+0x1b4>
 8006b88:	9b07      	ldr	r3, [sp, #28]
 8006b8a:	68e0      	ldr	r0, [r4, #12]
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	da39      	bge.n	8006c04 <_printf_i+0x204>
 8006b90:	0018      	movs	r0, r3
 8006b92:	e037      	b.n	8006c04 <_printf_i+0x204>
 8006b94:	0022      	movs	r2, r4
 8006b96:	2301      	movs	r3, #1
 8006b98:	3219      	adds	r2, #25
 8006b9a:	9904      	ldr	r1, [sp, #16]
 8006b9c:	9803      	ldr	r0, [sp, #12]
 8006b9e:	9e05      	ldr	r6, [sp, #20]
 8006ba0:	47b0      	blx	r6
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d02c      	beq.n	8006c00 <_printf_i+0x200>
 8006ba6:	3501      	adds	r5, #1
 8006ba8:	68e3      	ldr	r3, [r4, #12]
 8006baa:	9a07      	ldr	r2, [sp, #28]
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	42ab      	cmp	r3, r5
 8006bb0:	dcf0      	bgt.n	8006b94 <_printf_i+0x194>
 8006bb2:	e7e9      	b.n	8006b88 <_printf_i+0x188>
 8006bb4:	2500      	movs	r5, #0
 8006bb6:	e7f7      	b.n	8006ba8 <_printf_i+0x1a8>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d0ad      	beq.n	8006b18 <_printf_i+0x118>
 8006bbc:	9d02      	ldr	r5, [sp, #8]
 8006bbe:	0039      	movs	r1, r7
 8006bc0:	f7f9 fb28 	bl	8000214 <__aeabi_uidivmod>
 8006bc4:	5c73      	ldrb	r3, [r6, r1]
 8006bc6:	3d01      	subs	r5, #1
 8006bc8:	702b      	strb	r3, [r5, #0]
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d1f7      	bne.n	8006bbe <_printf_i+0x1be>
 8006bce:	2f08      	cmp	r7, #8
 8006bd0:	d109      	bne.n	8006be6 <_printf_i+0x1e6>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	07db      	lsls	r3, r3, #31
 8006bd6:	d506      	bpl.n	8006be6 <_printf_i+0x1e6>
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	6922      	ldr	r2, [r4, #16]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	dc02      	bgt.n	8006be6 <_printf_i+0x1e6>
 8006be0:	2330      	movs	r3, #48	; 0x30
 8006be2:	3d01      	subs	r5, #1
 8006be4:	702b      	strb	r3, [r5, #0]
 8006be6:	9b02      	ldr	r3, [sp, #8]
 8006be8:	1b5b      	subs	r3, r3, r5
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	aa07      	add	r2, sp, #28
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	0021      	movs	r1, r4
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	9803      	ldr	r0, [sp, #12]
 8006bf8:	f7ff fe94 	bl	8006924 <_printf_common>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d1b8      	bne.n	8006b72 <_printf_i+0x172>
 8006c00:	2001      	movs	r0, #1
 8006c02:	4240      	negs	r0, r0
 8006c04:	b009      	add	sp, #36	; 0x24
 8006c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c08:	08007b05 	.word	0x08007b05
 8006c0c:	08007b16 	.word	0x08007b16

08006c10 <_sbrk_r>:
 8006c10:	2300      	movs	r3, #0
 8006c12:	b570      	push	{r4, r5, r6, lr}
 8006c14:	4c06      	ldr	r4, [pc, #24]	; (8006c30 <_sbrk_r+0x20>)
 8006c16:	0005      	movs	r5, r0
 8006c18:	0008      	movs	r0, r1
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	f7fd fa7a 	bl	8004114 <_sbrk>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d103      	bne.n	8006c2c <_sbrk_r+0x1c>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d000      	beq.n	8006c2c <_sbrk_r+0x1c>
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	bd70      	pop	{r4, r5, r6, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	200001b8 	.word	0x200001b8

08006c34 <memchr>:
 8006c34:	b2c9      	uxtb	r1, r1
 8006c36:	1882      	adds	r2, r0, r2
 8006c38:	4290      	cmp	r0, r2
 8006c3a:	d101      	bne.n	8006c40 <memchr+0xc>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	4770      	bx	lr
 8006c40:	7803      	ldrb	r3, [r0, #0]
 8006c42:	428b      	cmp	r3, r1
 8006c44:	d0fb      	beq.n	8006c3e <memchr+0xa>
 8006c46:	3001      	adds	r0, #1
 8006c48:	e7f6      	b.n	8006c38 <memchr+0x4>

08006c4a <memmove>:
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	4288      	cmp	r0, r1
 8006c4e:	d902      	bls.n	8006c56 <memmove+0xc>
 8006c50:	188b      	adds	r3, r1, r2
 8006c52:	4298      	cmp	r0, r3
 8006c54:	d303      	bcc.n	8006c5e <memmove+0x14>
 8006c56:	2300      	movs	r3, #0
 8006c58:	e007      	b.n	8006c6a <memmove+0x20>
 8006c5a:	5c8b      	ldrb	r3, [r1, r2]
 8006c5c:	5483      	strb	r3, [r0, r2]
 8006c5e:	3a01      	subs	r2, #1
 8006c60:	d2fb      	bcs.n	8006c5a <memmove+0x10>
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	5ccc      	ldrb	r4, [r1, r3]
 8006c66:	54c4      	strb	r4, [r0, r3]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d1fa      	bne.n	8006c64 <memmove+0x1a>
 8006c6e:	e7f8      	b.n	8006c62 <memmove+0x18>

08006c70 <__malloc_lock>:
 8006c70:	4770      	bx	lr

08006c72 <__malloc_unlock>:
 8006c72:	4770      	bx	lr

08006c74 <_free_r>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	0005      	movs	r5, r0
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d010      	beq.n	8006c9e <_free_r+0x2a>
 8006c7c:	1f0c      	subs	r4, r1, #4
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da00      	bge.n	8006c86 <_free_r+0x12>
 8006c84:	18e4      	adds	r4, r4, r3
 8006c86:	0028      	movs	r0, r5
 8006c88:	f7ff fff2 	bl	8006c70 <__malloc_lock>
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <_free_r+0x90>)
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <_free_r+0x2c>
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	6014      	str	r4, [r2, #0]
 8006c98:	0028      	movs	r0, r5
 8006c9a:	f7ff ffea 	bl	8006c72 <__malloc_unlock>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d909      	bls.n	8006cb8 <_free_r+0x44>
 8006ca4:	6821      	ldr	r1, [r4, #0]
 8006ca6:	1860      	adds	r0, r4, r1
 8006ca8:	4283      	cmp	r3, r0
 8006caa:	d1f3      	bne.n	8006c94 <_free_r+0x20>
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	1841      	adds	r1, r0, r1
 8006cb2:	6021      	str	r1, [r4, #0]
 8006cb4:	e7ee      	b.n	8006c94 <_free_r+0x20>
 8006cb6:	0013      	movs	r3, r2
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	d001      	beq.n	8006cc2 <_free_r+0x4e>
 8006cbe:	42a2      	cmp	r2, r4
 8006cc0:	d9f9      	bls.n	8006cb6 <_free_r+0x42>
 8006cc2:	6819      	ldr	r1, [r3, #0]
 8006cc4:	1858      	adds	r0, r3, r1
 8006cc6:	42a0      	cmp	r0, r4
 8006cc8:	d10b      	bne.n	8006ce2 <_free_r+0x6e>
 8006cca:	6820      	ldr	r0, [r4, #0]
 8006ccc:	1809      	adds	r1, r1, r0
 8006cce:	1858      	adds	r0, r3, r1
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	4282      	cmp	r2, r0
 8006cd4:	d1e0      	bne.n	8006c98 <_free_r+0x24>
 8006cd6:	6810      	ldr	r0, [r2, #0]
 8006cd8:	6852      	ldr	r2, [r2, #4]
 8006cda:	1841      	adds	r1, r0, r1
 8006cdc:	6019      	str	r1, [r3, #0]
 8006cde:	605a      	str	r2, [r3, #4]
 8006ce0:	e7da      	b.n	8006c98 <_free_r+0x24>
 8006ce2:	42a0      	cmp	r0, r4
 8006ce4:	d902      	bls.n	8006cec <_free_r+0x78>
 8006ce6:	230c      	movs	r3, #12
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	e7d5      	b.n	8006c98 <_free_r+0x24>
 8006cec:	6821      	ldr	r1, [r4, #0]
 8006cee:	1860      	adds	r0, r4, r1
 8006cf0:	4282      	cmp	r2, r0
 8006cf2:	d103      	bne.n	8006cfc <_free_r+0x88>
 8006cf4:	6810      	ldr	r0, [r2, #0]
 8006cf6:	6852      	ldr	r2, [r2, #4]
 8006cf8:	1841      	adds	r1, r0, r1
 8006cfa:	6021      	str	r1, [r4, #0]
 8006cfc:	6062      	str	r2, [r4, #4]
 8006cfe:	605c      	str	r4, [r3, #4]
 8006d00:	e7ca      	b.n	8006c98 <_free_r+0x24>
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	200001ac 	.word	0x200001ac

08006d08 <_realloc_r>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	0007      	movs	r7, r0
 8006d0c:	000d      	movs	r5, r1
 8006d0e:	0016      	movs	r6, r2
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d105      	bne.n	8006d20 <_realloc_r+0x18>
 8006d14:	0011      	movs	r1, r2
 8006d16:	f7ff fc47 	bl	80065a8 <_malloc_r>
 8006d1a:	0004      	movs	r4, r0
 8006d1c:	0020      	movs	r0, r4
 8006d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d103      	bne.n	8006d2c <_realloc_r+0x24>
 8006d24:	f7ff ffa6 	bl	8006c74 <_free_r>
 8006d28:	0034      	movs	r4, r6
 8006d2a:	e7f7      	b.n	8006d1c <_realloc_r+0x14>
 8006d2c:	f000 f812 	bl	8006d54 <_malloc_usable_size_r>
 8006d30:	002c      	movs	r4, r5
 8006d32:	42b0      	cmp	r0, r6
 8006d34:	d2f2      	bcs.n	8006d1c <_realloc_r+0x14>
 8006d36:	0031      	movs	r1, r6
 8006d38:	0038      	movs	r0, r7
 8006d3a:	f7ff fc35 	bl	80065a8 <_malloc_r>
 8006d3e:	1e04      	subs	r4, r0, #0
 8006d40:	d0ec      	beq.n	8006d1c <_realloc_r+0x14>
 8006d42:	0029      	movs	r1, r5
 8006d44:	0032      	movs	r2, r6
 8006d46:	f7ff fbb3 	bl	80064b0 <memcpy>
 8006d4a:	0029      	movs	r1, r5
 8006d4c:	0038      	movs	r0, r7
 8006d4e:	f7ff ff91 	bl	8006c74 <_free_r>
 8006d52:	e7e3      	b.n	8006d1c <_realloc_r+0x14>

08006d54 <_malloc_usable_size_r>:
 8006d54:	1f0b      	subs	r3, r1, #4
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1f18      	subs	r0, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da01      	bge.n	8006d62 <_malloc_usable_size_r+0xe>
 8006d5e:	580b      	ldr	r3, [r1, r0]
 8006d60:	18c0      	adds	r0, r0, r3
 8006d62:	4770      	bx	lr

08006d64 <_init>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr

08006d70 <_fini>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	46c0      	nop			; (mov r8, r8)
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr
