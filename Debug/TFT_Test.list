
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000641c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007280  08007280  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007280  08007280  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007280  08007280  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000006c  080072f4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080072f4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001976f  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d69  00000000  00000000  00039803  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  0003d570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  0003e348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b8f4  00000000  00000000  0003efc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb72  00000000  00000000  0005a8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083926  00000000  00000000  0006a42e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edd54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003760  00000000  00000000  000eddd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080064c4 	.word	0x080064c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080064c4 	.word	0x080064c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 fe4e 	bl	800109c <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fdaf 	bl	8000f68 <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 fbe5 	bl	8000be0 <__aeabi_fsub>
 8000416:	f000 fda7 	bl	8000f68 <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fadd>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	4647      	mov	r7, r8
 8000428:	46ce      	mov	lr, r9
 800042a:	0243      	lsls	r3, r0, #9
 800042c:	0a5b      	lsrs	r3, r3, #9
 800042e:	0044      	lsls	r4, r0, #1
 8000430:	0fc2      	lsrs	r2, r0, #31
 8000432:	469c      	mov	ip, r3
 8000434:	0048      	lsls	r0, r1, #1
 8000436:	00dd      	lsls	r5, r3, #3
 8000438:	024b      	lsls	r3, r1, #9
 800043a:	0e24      	lsrs	r4, r4, #24
 800043c:	0a5b      	lsrs	r3, r3, #9
 800043e:	0e00      	lsrs	r0, r0, #24
 8000440:	b580      	push	{r7, lr}
 8000442:	4698      	mov	r8, r3
 8000444:	0026      	movs	r6, r4
 8000446:	4691      	mov	r9, r2
 8000448:	0fc9      	lsrs	r1, r1, #31
 800044a:	00db      	lsls	r3, r3, #3
 800044c:	1a27      	subs	r7, r4, r0
 800044e:	428a      	cmp	r2, r1
 8000450:	d029      	beq.n	80004a6 <__aeabi_fadd+0x82>
 8000452:	2f00      	cmp	r7, #0
 8000454:	dd15      	ble.n	8000482 <__aeabi_fadd+0x5e>
 8000456:	2800      	cmp	r0, #0
 8000458:	d14a      	bne.n	80004f0 <__aeabi_fadd+0xcc>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d000      	beq.n	8000460 <__aeabi_fadd+0x3c>
 800045e:	e095      	b.n	800058c <__aeabi_fadd+0x168>
 8000460:	08ed      	lsrs	r5, r5, #3
 8000462:	2cff      	cmp	r4, #255	; 0xff
 8000464:	d100      	bne.n	8000468 <__aeabi_fadd+0x44>
 8000466:	e088      	b.n	800057a <__aeabi_fadd+0x156>
 8000468:	026b      	lsls	r3, r5, #9
 800046a:	0a5b      	lsrs	r3, r3, #9
 800046c:	b2e6      	uxtb	r6, r4
 800046e:	025b      	lsls	r3, r3, #9
 8000470:	05f6      	lsls	r6, r6, #23
 8000472:	0a58      	lsrs	r0, r3, #9
 8000474:	4330      	orrs	r0, r6
 8000476:	07d2      	lsls	r2, r2, #31
 8000478:	4310      	orrs	r0, r2
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4690      	mov	r8, r2
 800047e:	4699      	mov	r9, r3
 8000480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000482:	2f00      	cmp	r7, #0
 8000484:	d000      	beq.n	8000488 <__aeabi_fadd+0x64>
 8000486:	e087      	b.n	8000598 <__aeabi_fadd+0x174>
 8000488:	1c60      	adds	r0, r4, #1
 800048a:	b2c0      	uxtb	r0, r0
 800048c:	2801      	cmp	r0, #1
 800048e:	dc00      	bgt.n	8000492 <__aeabi_fadd+0x6e>
 8000490:	e0b6      	b.n	8000600 <__aeabi_fadd+0x1dc>
 8000492:	1aee      	subs	r6, r5, r3
 8000494:	0172      	lsls	r2, r6, #5
 8000496:	d500      	bpl.n	800049a <__aeabi_fadd+0x76>
 8000498:	e0c5      	b.n	8000626 <__aeabi_fadd+0x202>
 800049a:	2e00      	cmp	r6, #0
 800049c:	d13d      	bne.n	800051a <__aeabi_fadd+0xf6>
 800049e:	2200      	movs	r2, #0
 80004a0:	2600      	movs	r6, #0
 80004a2:	2300      	movs	r3, #0
 80004a4:	e7e3      	b.n	800046e <__aeabi_fadd+0x4a>
 80004a6:	2f00      	cmp	r7, #0
 80004a8:	dc00      	bgt.n	80004ac <__aeabi_fadd+0x88>
 80004aa:	e096      	b.n	80005da <__aeabi_fadd+0x1b6>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d05d      	beq.n	800056c <__aeabi_fadd+0x148>
 80004b0:	2cff      	cmp	r4, #255	; 0xff
 80004b2:	d060      	beq.n	8000576 <__aeabi_fadd+0x152>
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	4313      	orrs	r3, r2
 80004ba:	2f1b      	cmp	r7, #27
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fadd+0x9c>
 80004be:	e0ec      	b.n	800069a <__aeabi_fadd+0x276>
 80004c0:	2220      	movs	r2, #32
 80004c2:	1bd2      	subs	r2, r2, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	4093      	lsls	r3, r2
 80004c8:	40f8      	lsrs	r0, r7
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4193      	sbcs	r3, r2
 80004ce:	4303      	orrs	r3, r0
 80004d0:	18ed      	adds	r5, r5, r3
 80004d2:	016b      	lsls	r3, r5, #5
 80004d4:	d57b      	bpl.n	80005ce <__aeabi_fadd+0x1aa>
 80004d6:	3401      	adds	r4, #1
 80004d8:	2cff      	cmp	r4, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0xba>
 80004dc:	e0b7      	b.n	800064e <__aeabi_fadd+0x22a>
 80004de:	2201      	movs	r2, #1
 80004e0:	2607      	movs	r6, #7
 80004e2:	402a      	ands	r2, r5
 80004e4:	086b      	lsrs	r3, r5, #1
 80004e6:	4d9a      	ldr	r5, [pc, #616]	; (8000750 <__aeabi_fadd+0x32c>)
 80004e8:	401d      	ands	r5, r3
 80004ea:	4315      	orrs	r5, r2
 80004ec:	402e      	ands	r6, r5
 80004ee:	e029      	b.n	8000544 <__aeabi_fadd+0x120>
 80004f0:	2cff      	cmp	r4, #255	; 0xff
 80004f2:	d0b5      	beq.n	8000460 <__aeabi_fadd+0x3c>
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	4313      	orrs	r3, r2
 80004fa:	2f1b      	cmp	r7, #27
 80004fc:	dd00      	ble.n	8000500 <__aeabi_fadd+0xdc>
 80004fe:	e0b2      	b.n	8000666 <__aeabi_fadd+0x242>
 8000500:	2220      	movs	r2, #32
 8000502:	1bd2      	subs	r2, r2, r7
 8000504:	0019      	movs	r1, r3
 8000506:	4093      	lsls	r3, r2
 8000508:	40f9      	lsrs	r1, r7
 800050a:	1e5a      	subs	r2, r3, #1
 800050c:	4193      	sbcs	r3, r2
 800050e:	430b      	orrs	r3, r1
 8000510:	1aed      	subs	r5, r5, r3
 8000512:	016b      	lsls	r3, r5, #5
 8000514:	d55b      	bpl.n	80005ce <__aeabi_fadd+0x1aa>
 8000516:	01ad      	lsls	r5, r5, #6
 8000518:	09ae      	lsrs	r6, r5, #6
 800051a:	0030      	movs	r0, r6
 800051c:	f000 fdc8 	bl	80010b0 <__clzsi2>
 8000520:	3805      	subs	r0, #5
 8000522:	4086      	lsls	r6, r0
 8000524:	4284      	cmp	r4, r0
 8000526:	dc65      	bgt.n	80005f4 <__aeabi_fadd+0x1d0>
 8000528:	1b04      	subs	r4, r0, r4
 800052a:	0033      	movs	r3, r6
 800052c:	2020      	movs	r0, #32
 800052e:	3401      	adds	r4, #1
 8000530:	40e3      	lsrs	r3, r4
 8000532:	1b04      	subs	r4, r0, r4
 8000534:	40a6      	lsls	r6, r4
 8000536:	1e75      	subs	r5, r6, #1
 8000538:	41ae      	sbcs	r6, r5
 800053a:	4333      	orrs	r3, r6
 800053c:	2607      	movs	r6, #7
 800053e:	001d      	movs	r5, r3
 8000540:	2400      	movs	r4, #0
 8000542:	401e      	ands	r6, r3
 8000544:	2201      	movs	r2, #1
 8000546:	464b      	mov	r3, r9
 8000548:	401a      	ands	r2, r3
 800054a:	2e00      	cmp	r6, #0
 800054c:	d004      	beq.n	8000558 <__aeabi_fadd+0x134>
 800054e:	230f      	movs	r3, #15
 8000550:	402b      	ands	r3, r5
 8000552:	2b04      	cmp	r3, #4
 8000554:	d000      	beq.n	8000558 <__aeabi_fadd+0x134>
 8000556:	3504      	adds	r5, #4
 8000558:	016b      	lsls	r3, r5, #5
 800055a:	d400      	bmi.n	800055e <__aeabi_fadd+0x13a>
 800055c:	e780      	b.n	8000460 <__aeabi_fadd+0x3c>
 800055e:	3401      	adds	r4, #1
 8000560:	b2e6      	uxtb	r6, r4
 8000562:	2cff      	cmp	r4, #255	; 0xff
 8000564:	d12f      	bne.n	80005c6 <__aeabi_fadd+0x1a2>
 8000566:	26ff      	movs	r6, #255	; 0xff
 8000568:	2300      	movs	r3, #0
 800056a:	e780      	b.n	800046e <__aeabi_fadd+0x4a>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d152      	bne.n	8000616 <__aeabi_fadd+0x1f2>
 8000570:	2cff      	cmp	r4, #255	; 0xff
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0x152>
 8000574:	e774      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000576:	000a      	movs	r2, r1
 8000578:	08ed      	lsrs	r5, r5, #3
 800057a:	2d00      	cmp	r5, #0
 800057c:	d0f3      	beq.n	8000566 <__aeabi_fadd+0x142>
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	03db      	lsls	r3, r3, #15
 8000582:	432b      	orrs	r3, r5
 8000584:	025b      	lsls	r3, r3, #9
 8000586:	0a5b      	lsrs	r3, r3, #9
 8000588:	26ff      	movs	r6, #255	; 0xff
 800058a:	e770      	b.n	800046e <__aeabi_fadd+0x4a>
 800058c:	3f01      	subs	r7, #1
 800058e:	2f00      	cmp	r7, #0
 8000590:	d0be      	beq.n	8000510 <__aeabi_fadd+0xec>
 8000592:	2cff      	cmp	r4, #255	; 0xff
 8000594:	d1b1      	bne.n	80004fa <__aeabi_fadd+0xd6>
 8000596:	e763      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000598:	2c00      	cmp	r4, #0
 800059a:	d047      	beq.n	800062c <__aeabi_fadd+0x208>
 800059c:	28ff      	cmp	r0, #255	; 0xff
 800059e:	d069      	beq.n	8000674 <__aeabi_fadd+0x250>
 80005a0:	2480      	movs	r4, #128	; 0x80
 80005a2:	04e4      	lsls	r4, r4, #19
 80005a4:	427a      	negs	r2, r7
 80005a6:	4325      	orrs	r5, r4
 80005a8:	2a1b      	cmp	r2, #27
 80005aa:	dd00      	ble.n	80005ae <__aeabi_fadd+0x18a>
 80005ac:	e0c5      	b.n	800073a <__aeabi_fadd+0x316>
 80005ae:	002c      	movs	r4, r5
 80005b0:	2620      	movs	r6, #32
 80005b2:	40d4      	lsrs	r4, r2
 80005b4:	1ab2      	subs	r2, r6, r2
 80005b6:	4095      	lsls	r5, r2
 80005b8:	1e6a      	subs	r2, r5, #1
 80005ba:	4195      	sbcs	r5, r2
 80005bc:	4325      	orrs	r5, r4
 80005be:	1b5d      	subs	r5, r3, r5
 80005c0:	0004      	movs	r4, r0
 80005c2:	4689      	mov	r9, r1
 80005c4:	e7a5      	b.n	8000512 <__aeabi_fadd+0xee>
 80005c6:	01ab      	lsls	r3, r5, #6
 80005c8:	0a5b      	lsrs	r3, r3, #9
 80005ca:	e750      	b.n	800046e <__aeabi_fadd+0x4a>
 80005cc:	2400      	movs	r4, #0
 80005ce:	2201      	movs	r2, #1
 80005d0:	464b      	mov	r3, r9
 80005d2:	401a      	ands	r2, r3
 80005d4:	076b      	lsls	r3, r5, #29
 80005d6:	d1ba      	bne.n	800054e <__aeabi_fadd+0x12a>
 80005d8:	e742      	b.n	8000460 <__aeabi_fadd+0x3c>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d13b      	bne.n	8000656 <__aeabi_fadd+0x232>
 80005de:	3401      	adds	r4, #1
 80005e0:	b2e0      	uxtb	r0, r4
 80005e2:	2801      	cmp	r0, #1
 80005e4:	dd4a      	ble.n	800067c <__aeabi_fadd+0x258>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d0bd      	beq.n	8000566 <__aeabi_fadd+0x142>
 80005ea:	2607      	movs	r6, #7
 80005ec:	18ed      	adds	r5, r5, r3
 80005ee:	086d      	lsrs	r5, r5, #1
 80005f0:	402e      	ands	r6, r5
 80005f2:	e7a7      	b.n	8000544 <__aeabi_fadd+0x120>
 80005f4:	2307      	movs	r3, #7
 80005f6:	4d57      	ldr	r5, [pc, #348]	; (8000754 <__aeabi_fadd+0x330>)
 80005f8:	1a24      	subs	r4, r4, r0
 80005fa:	4035      	ands	r5, r6
 80005fc:	401e      	ands	r6, r3
 80005fe:	e7a1      	b.n	8000544 <__aeabi_fadd+0x120>
 8000600:	2c00      	cmp	r4, #0
 8000602:	d11b      	bne.n	800063c <__aeabi_fadd+0x218>
 8000604:	2d00      	cmp	r5, #0
 8000606:	d16e      	bne.n	80006e6 <__aeabi_fadd+0x2c2>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x1ea>
 800060c:	e09a      	b.n	8000744 <__aeabi_fadd+0x320>
 800060e:	000a      	movs	r2, r1
 8000610:	001d      	movs	r5, r3
 8000612:	003c      	movs	r4, r7
 8000614:	e724      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000616:	3f01      	subs	r7, #1
 8000618:	2f00      	cmp	r7, #0
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x1fa>
 800061c:	e758      	b.n	80004d0 <__aeabi_fadd+0xac>
 800061e:	2cff      	cmp	r4, #255	; 0xff
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x200>
 8000622:	e74a      	b.n	80004ba <__aeabi_fadd+0x96>
 8000624:	e7a7      	b.n	8000576 <__aeabi_fadd+0x152>
 8000626:	1b5e      	subs	r6, r3, r5
 8000628:	4689      	mov	r9, r1
 800062a:	e776      	b.n	800051a <__aeabi_fadd+0xf6>
 800062c:	2d00      	cmp	r5, #0
 800062e:	d11c      	bne.n	800066a <__aeabi_fadd+0x246>
 8000630:	000a      	movs	r2, r1
 8000632:	28ff      	cmp	r0, #255	; 0xff
 8000634:	d01f      	beq.n	8000676 <__aeabi_fadd+0x252>
 8000636:	0004      	movs	r4, r0
 8000638:	001d      	movs	r5, r3
 800063a:	e711      	b.n	8000460 <__aeabi_fadd+0x3c>
 800063c:	2d00      	cmp	r5, #0
 800063e:	d15d      	bne.n	80006fc <__aeabi_fadd+0x2d8>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d117      	bne.n	8000674 <__aeabi_fadd+0x250>
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	2200      	movs	r2, #0
 8000648:	03db      	lsls	r3, r3, #15
 800064a:	26ff      	movs	r6, #255	; 0xff
 800064c:	e70f      	b.n	800046e <__aeabi_fadd+0x4a>
 800064e:	000a      	movs	r2, r1
 8000650:	26ff      	movs	r6, #255	; 0xff
 8000652:	2300      	movs	r3, #0
 8000654:	e70b      	b.n	800046e <__aeabi_fadd+0x4a>
 8000656:	2c00      	cmp	r4, #0
 8000658:	d121      	bne.n	800069e <__aeabi_fadd+0x27a>
 800065a:	2d00      	cmp	r5, #0
 800065c:	d166      	bne.n	800072c <__aeabi_fadd+0x308>
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d1e9      	bne.n	8000636 <__aeabi_fadd+0x212>
 8000662:	001d      	movs	r5, r3
 8000664:	e787      	b.n	8000576 <__aeabi_fadd+0x152>
 8000666:	2301      	movs	r3, #1
 8000668:	e752      	b.n	8000510 <__aeabi_fadd+0xec>
 800066a:	1c7a      	adds	r2, r7, #1
 800066c:	d0a7      	beq.n	80005be <__aeabi_fadd+0x19a>
 800066e:	43fa      	mvns	r2, r7
 8000670:	28ff      	cmp	r0, #255	; 0xff
 8000672:	d199      	bne.n	80005a8 <__aeabi_fadd+0x184>
 8000674:	000a      	movs	r2, r1
 8000676:	001d      	movs	r5, r3
 8000678:	24ff      	movs	r4, #255	; 0xff
 800067a:	e6f1      	b.n	8000460 <__aeabi_fadd+0x3c>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d121      	bne.n	80006c4 <__aeabi_fadd+0x2a0>
 8000680:	2d00      	cmp	r5, #0
 8000682:	d04f      	beq.n	8000724 <__aeabi_fadd+0x300>
 8000684:	2b00      	cmp	r3, #0
 8000686:	d04c      	beq.n	8000722 <__aeabi_fadd+0x2fe>
 8000688:	18ed      	adds	r5, r5, r3
 800068a:	016b      	lsls	r3, r5, #5
 800068c:	d59e      	bpl.n	80005cc <__aeabi_fadd+0x1a8>
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <__aeabi_fadd+0x330>)
 8000690:	3607      	adds	r6, #7
 8000692:	402e      	ands	r6, r5
 8000694:	2401      	movs	r4, #1
 8000696:	401d      	ands	r5, r3
 8000698:	e754      	b.n	8000544 <__aeabi_fadd+0x120>
 800069a:	2301      	movs	r3, #1
 800069c:	e718      	b.n	80004d0 <__aeabi_fadd+0xac>
 800069e:	28ff      	cmp	r0, #255	; 0xff
 80006a0:	d0df      	beq.n	8000662 <__aeabi_fadd+0x23e>
 80006a2:	2480      	movs	r4, #128	; 0x80
 80006a4:	04e4      	lsls	r4, r4, #19
 80006a6:	427f      	negs	r7, r7
 80006a8:	4325      	orrs	r5, r4
 80006aa:	2f1b      	cmp	r7, #27
 80006ac:	dc4d      	bgt.n	800074a <__aeabi_fadd+0x326>
 80006ae:	2620      	movs	r6, #32
 80006b0:	1bf6      	subs	r6, r6, r7
 80006b2:	002c      	movs	r4, r5
 80006b4:	40b5      	lsls	r5, r6
 80006b6:	40fc      	lsrs	r4, r7
 80006b8:	1e6a      	subs	r2, r5, #1
 80006ba:	4195      	sbcs	r5, r2
 80006bc:	4325      	orrs	r5, r4
 80006be:	18ed      	adds	r5, r5, r3
 80006c0:	0004      	movs	r4, r0
 80006c2:	e706      	b.n	80004d2 <__aeabi_fadd+0xae>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d0cc      	beq.n	8000662 <__aeabi_fadd+0x23e>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x2aa>
 80006cc:	e753      	b.n	8000576 <__aeabi_fadd+0x152>
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4660      	mov	r0, ip
 80006d2:	03c9      	lsls	r1, r1, #15
 80006d4:	4208      	tst	r0, r1
 80006d6:	d003      	beq.n	80006e0 <__aeabi_fadd+0x2bc>
 80006d8:	4640      	mov	r0, r8
 80006da:	4208      	tst	r0, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x2bc>
 80006de:	001d      	movs	r5, r3
 80006e0:	2101      	movs	r1, #1
 80006e2:	4011      	ands	r1, r2
 80006e4:	e747      	b.n	8000576 <__aeabi_fadd+0x152>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fadd+0x2c8>
 80006ea:	e6b9      	b.n	8000460 <__aeabi_fadd+0x3c>
 80006ec:	1aea      	subs	r2, r5, r3
 80006ee:	0150      	lsls	r0, r2, #5
 80006f0:	d525      	bpl.n	800073e <__aeabi_fadd+0x31a>
 80006f2:	2607      	movs	r6, #7
 80006f4:	1b5d      	subs	r5, r3, r5
 80006f6:	402e      	ands	r6, r5
 80006f8:	4689      	mov	r9, r1
 80006fa:	e723      	b.n	8000544 <__aeabi_fadd+0x120>
 80006fc:	24ff      	movs	r4, #255	; 0xff
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fadd+0x2e0>
 8000702:	e6ad      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	4660      	mov	r0, ip
 8000708:	03d2      	lsls	r2, r2, #15
 800070a:	4210      	tst	r0, r2
 800070c:	d004      	beq.n	8000718 <__aeabi_fadd+0x2f4>
 800070e:	4640      	mov	r0, r8
 8000710:	4210      	tst	r0, r2
 8000712:	d101      	bne.n	8000718 <__aeabi_fadd+0x2f4>
 8000714:	001d      	movs	r5, r3
 8000716:	4689      	mov	r9, r1
 8000718:	2201      	movs	r2, #1
 800071a:	464b      	mov	r3, r9
 800071c:	24ff      	movs	r4, #255	; 0xff
 800071e:	401a      	ands	r2, r3
 8000720:	e69e      	b.n	8000460 <__aeabi_fadd+0x3c>
 8000722:	002b      	movs	r3, r5
 8000724:	08dd      	lsrs	r5, r3, #3
 8000726:	000a      	movs	r2, r1
 8000728:	2400      	movs	r4, #0
 800072a:	e69d      	b.n	8000468 <__aeabi_fadd+0x44>
 800072c:	1c7a      	adds	r2, r7, #1
 800072e:	d0c6      	beq.n	80006be <__aeabi_fadd+0x29a>
 8000730:	43ff      	mvns	r7, r7
 8000732:	28ff      	cmp	r0, #255	; 0xff
 8000734:	d1b9      	bne.n	80006aa <__aeabi_fadd+0x286>
 8000736:	001d      	movs	r5, r3
 8000738:	e71d      	b.n	8000576 <__aeabi_fadd+0x152>
 800073a:	2501      	movs	r5, #1
 800073c:	e73f      	b.n	80005be <__aeabi_fadd+0x19a>
 800073e:	1e15      	subs	r5, r2, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x320>
 8000742:	e744      	b.n	80005ce <__aeabi_fadd+0x1aa>
 8000744:	2200      	movs	r2, #0
 8000746:	2300      	movs	r3, #0
 8000748:	e691      	b.n	800046e <__aeabi_fadd+0x4a>
 800074a:	2501      	movs	r5, #1
 800074c:	e7b7      	b.n	80006be <__aeabi_fadd+0x29a>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	7dffffff 	.word	0x7dffffff
 8000754:	fbffffff 	.word	0xfbffffff

08000758 <__aeabi_fdiv>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	4657      	mov	r7, sl
 800075c:	464e      	mov	r6, r9
 800075e:	4645      	mov	r5, r8
 8000760:	46de      	mov	lr, fp
 8000762:	0244      	lsls	r4, r0, #9
 8000764:	b5e0      	push	{r5, r6, r7, lr}
 8000766:	0046      	lsls	r6, r0, #1
 8000768:	4688      	mov	r8, r1
 800076a:	0a64      	lsrs	r4, r4, #9
 800076c:	0e36      	lsrs	r6, r6, #24
 800076e:	0fc7      	lsrs	r7, r0, #31
 8000770:	2e00      	cmp	r6, #0
 8000772:	d063      	beq.n	800083c <__aeabi_fdiv+0xe4>
 8000774:	2eff      	cmp	r6, #255	; 0xff
 8000776:	d024      	beq.n	80007c2 <__aeabi_fdiv+0x6a>
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	00e4      	lsls	r4, r4, #3
 800077c:	04db      	lsls	r3, r3, #19
 800077e:	431c      	orrs	r4, r3
 8000780:	2300      	movs	r3, #0
 8000782:	4699      	mov	r9, r3
 8000784:	469b      	mov	fp, r3
 8000786:	3e7f      	subs	r6, #127	; 0x7f
 8000788:	4643      	mov	r3, r8
 800078a:	4642      	mov	r2, r8
 800078c:	025d      	lsls	r5, r3, #9
 800078e:	0fd2      	lsrs	r2, r2, #31
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	0e1b      	lsrs	r3, r3, #24
 8000796:	4690      	mov	r8, r2
 8000798:	4692      	mov	sl, r2
 800079a:	d065      	beq.n	8000868 <__aeabi_fdiv+0x110>
 800079c:	2bff      	cmp	r3, #255	; 0xff
 800079e:	d055      	beq.n	800084c <__aeabi_fdiv+0xf4>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	2100      	movs	r1, #0
 80007a4:	00ed      	lsls	r5, r5, #3
 80007a6:	04d2      	lsls	r2, r2, #19
 80007a8:	3b7f      	subs	r3, #127	; 0x7f
 80007aa:	4315      	orrs	r5, r2
 80007ac:	1af6      	subs	r6, r6, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	464a      	mov	r2, r9
 80007b2:	407b      	eors	r3, r7
 80007b4:	2a0f      	cmp	r2, #15
 80007b6:	d900      	bls.n	80007ba <__aeabi_fdiv+0x62>
 80007b8:	e08d      	b.n	80008d6 <__aeabi_fdiv+0x17e>
 80007ba:	486d      	ldr	r0, [pc, #436]	; (8000970 <__aeabi_fdiv+0x218>)
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	5882      	ldr	r2, [r0, r2]
 80007c0:	4697      	mov	pc, r2
 80007c2:	2c00      	cmp	r4, #0
 80007c4:	d154      	bne.n	8000870 <__aeabi_fdiv+0x118>
 80007c6:	2308      	movs	r3, #8
 80007c8:	4699      	mov	r9, r3
 80007ca:	3b06      	subs	r3, #6
 80007cc:	26ff      	movs	r6, #255	; 0xff
 80007ce:	469b      	mov	fp, r3
 80007d0:	e7da      	b.n	8000788 <__aeabi_fdiv+0x30>
 80007d2:	2500      	movs	r5, #0
 80007d4:	4653      	mov	r3, sl
 80007d6:	2902      	cmp	r1, #2
 80007d8:	d01b      	beq.n	8000812 <__aeabi_fdiv+0xba>
 80007da:	2903      	cmp	r1, #3
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fdiv+0x88>
 80007de:	e0bf      	b.n	8000960 <__aeabi_fdiv+0x208>
 80007e0:	2901      	cmp	r1, #1
 80007e2:	d028      	beq.n	8000836 <__aeabi_fdiv+0xde>
 80007e4:	0030      	movs	r0, r6
 80007e6:	307f      	adds	r0, #127	; 0x7f
 80007e8:	2800      	cmp	r0, #0
 80007ea:	dd20      	ble.n	800082e <__aeabi_fdiv+0xd6>
 80007ec:	076a      	lsls	r2, r5, #29
 80007ee:	d004      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f0:	220f      	movs	r2, #15
 80007f2:	402a      	ands	r2, r5
 80007f4:	2a04      	cmp	r2, #4
 80007f6:	d000      	beq.n	80007fa <__aeabi_fdiv+0xa2>
 80007f8:	3504      	adds	r5, #4
 80007fa:	012a      	lsls	r2, r5, #4
 80007fc:	d503      	bpl.n	8000806 <__aeabi_fdiv+0xae>
 80007fe:	0030      	movs	r0, r6
 8000800:	4a5c      	ldr	r2, [pc, #368]	; (8000974 <__aeabi_fdiv+0x21c>)
 8000802:	3080      	adds	r0, #128	; 0x80
 8000804:	4015      	ands	r5, r2
 8000806:	28fe      	cmp	r0, #254	; 0xfe
 8000808:	dc03      	bgt.n	8000812 <__aeabi_fdiv+0xba>
 800080a:	01ac      	lsls	r4, r5, #6
 800080c:	0a64      	lsrs	r4, r4, #9
 800080e:	b2c2      	uxtb	r2, r0
 8000810:	e001      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	2400      	movs	r4, #0
 8000816:	0264      	lsls	r4, r4, #9
 8000818:	05d2      	lsls	r2, r2, #23
 800081a:	0a60      	lsrs	r0, r4, #9
 800081c:	07db      	lsls	r3, r3, #31
 800081e:	4310      	orrs	r0, r2
 8000820:	4318      	orrs	r0, r3
 8000822:	bc3c      	pop	{r2, r3, r4, r5}
 8000824:	4690      	mov	r8, r2
 8000826:	4699      	mov	r9, r3
 8000828:	46a2      	mov	sl, r4
 800082a:	46ab      	mov	fp, r5
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	2201      	movs	r2, #1
 8000830:	1a10      	subs	r0, r2, r0
 8000832:	281b      	cmp	r0, #27
 8000834:	dd7c      	ble.n	8000930 <__aeabi_fdiv+0x1d8>
 8000836:	2200      	movs	r2, #0
 8000838:	2400      	movs	r4, #0
 800083a:	e7ec      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800083c:	2c00      	cmp	r4, #0
 800083e:	d11d      	bne.n	800087c <__aeabi_fdiv+0x124>
 8000840:	2304      	movs	r3, #4
 8000842:	4699      	mov	r9, r3
 8000844:	3b03      	subs	r3, #3
 8000846:	2600      	movs	r6, #0
 8000848:	469b      	mov	fp, r3
 800084a:	e79d      	b.n	8000788 <__aeabi_fdiv+0x30>
 800084c:	3eff      	subs	r6, #255	; 0xff
 800084e:	2d00      	cmp	r5, #0
 8000850:	d120      	bne.n	8000894 <__aeabi_fdiv+0x13c>
 8000852:	2102      	movs	r1, #2
 8000854:	4643      	mov	r3, r8
 8000856:	464a      	mov	r2, r9
 8000858:	407b      	eors	r3, r7
 800085a:	430a      	orrs	r2, r1
 800085c:	2a0f      	cmp	r2, #15
 800085e:	d8d8      	bhi.n	8000812 <__aeabi_fdiv+0xba>
 8000860:	4845      	ldr	r0, [pc, #276]	; (8000978 <__aeabi_fdiv+0x220>)
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	5882      	ldr	r2, [r0, r2]
 8000866:	4697      	mov	pc, r2
 8000868:	2d00      	cmp	r5, #0
 800086a:	d119      	bne.n	80008a0 <__aeabi_fdiv+0x148>
 800086c:	2101      	movs	r1, #1
 800086e:	e7f1      	b.n	8000854 <__aeabi_fdiv+0xfc>
 8000870:	230c      	movs	r3, #12
 8000872:	4699      	mov	r9, r3
 8000874:	3b09      	subs	r3, #9
 8000876:	26ff      	movs	r6, #255	; 0xff
 8000878:	469b      	mov	fp, r3
 800087a:	e785      	b.n	8000788 <__aeabi_fdiv+0x30>
 800087c:	0020      	movs	r0, r4
 800087e:	f000 fc17 	bl	80010b0 <__clzsi2>
 8000882:	2676      	movs	r6, #118	; 0x76
 8000884:	1f43      	subs	r3, r0, #5
 8000886:	409c      	lsls	r4, r3
 8000888:	2300      	movs	r3, #0
 800088a:	4276      	negs	r6, r6
 800088c:	1a36      	subs	r6, r6, r0
 800088e:	4699      	mov	r9, r3
 8000890:	469b      	mov	fp, r3
 8000892:	e779      	b.n	8000788 <__aeabi_fdiv+0x30>
 8000894:	464a      	mov	r2, r9
 8000896:	2303      	movs	r3, #3
 8000898:	431a      	orrs	r2, r3
 800089a:	4691      	mov	r9, r2
 800089c:	2103      	movs	r1, #3
 800089e:	e786      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008a0:	0028      	movs	r0, r5
 80008a2:	f000 fc05 	bl	80010b0 <__clzsi2>
 80008a6:	1f43      	subs	r3, r0, #5
 80008a8:	1836      	adds	r6, r6, r0
 80008aa:	409d      	lsls	r5, r3
 80008ac:	3676      	adds	r6, #118	; 0x76
 80008ae:	2100      	movs	r1, #0
 80008b0:	e77d      	b.n	80007ae <__aeabi_fdiv+0x56>
 80008b2:	2480      	movs	r4, #128	; 0x80
 80008b4:	2300      	movs	r3, #0
 80008b6:	03e4      	lsls	r4, r4, #15
 80008b8:	22ff      	movs	r2, #255	; 0xff
 80008ba:	e7ac      	b.n	8000816 <__aeabi_fdiv+0xbe>
 80008bc:	2500      	movs	r5, #0
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	03db      	lsls	r3, r3, #15
 80008c2:	421c      	tst	r4, r3
 80008c4:	d028      	beq.n	8000918 <__aeabi_fdiv+0x1c0>
 80008c6:	421d      	tst	r5, r3
 80008c8:	d126      	bne.n	8000918 <__aeabi_fdiv+0x1c0>
 80008ca:	432b      	orrs	r3, r5
 80008cc:	025c      	lsls	r4, r3, #9
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	4643      	mov	r3, r8
 80008d2:	22ff      	movs	r2, #255	; 0xff
 80008d4:	e79f      	b.n	8000816 <__aeabi_fdiv+0xbe>
 80008d6:	0162      	lsls	r2, r4, #5
 80008d8:	016c      	lsls	r4, r5, #5
 80008da:	42a2      	cmp	r2, r4
 80008dc:	d224      	bcs.n	8000928 <__aeabi_fdiv+0x1d0>
 80008de:	211b      	movs	r1, #27
 80008e0:	2500      	movs	r5, #0
 80008e2:	3e01      	subs	r6, #1
 80008e4:	2701      	movs	r7, #1
 80008e6:	0010      	movs	r0, r2
 80008e8:	006d      	lsls	r5, r5, #1
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	2800      	cmp	r0, #0
 80008ee:	db01      	blt.n	80008f4 <__aeabi_fdiv+0x19c>
 80008f0:	4294      	cmp	r4, r2
 80008f2:	d801      	bhi.n	80008f8 <__aeabi_fdiv+0x1a0>
 80008f4:	1b12      	subs	r2, r2, r4
 80008f6:	433d      	orrs	r5, r7
 80008f8:	3901      	subs	r1, #1
 80008fa:	2900      	cmp	r1, #0
 80008fc:	d1f3      	bne.n	80008e6 <__aeabi_fdiv+0x18e>
 80008fe:	0014      	movs	r4, r2
 8000900:	1e62      	subs	r2, r4, #1
 8000902:	4194      	sbcs	r4, r2
 8000904:	4325      	orrs	r5, r4
 8000906:	e76d      	b.n	80007e4 <__aeabi_fdiv+0x8c>
 8000908:	46ba      	mov	sl, r7
 800090a:	4659      	mov	r1, fp
 800090c:	0025      	movs	r5, r4
 800090e:	4653      	mov	r3, sl
 8000910:	2902      	cmp	r1, #2
 8000912:	d000      	beq.n	8000916 <__aeabi_fdiv+0x1be>
 8000914:	e761      	b.n	80007da <__aeabi_fdiv+0x82>
 8000916:	e77c      	b.n	8000812 <__aeabi_fdiv+0xba>
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	03db      	lsls	r3, r3, #15
 800091c:	431c      	orrs	r4, r3
 800091e:	0264      	lsls	r4, r4, #9
 8000920:	0a64      	lsrs	r4, r4, #9
 8000922:	003b      	movs	r3, r7
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	e776      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000928:	1b12      	subs	r2, r2, r4
 800092a:	211a      	movs	r1, #26
 800092c:	2501      	movs	r5, #1
 800092e:	e7d9      	b.n	80008e4 <__aeabi_fdiv+0x18c>
 8000930:	369e      	adds	r6, #158	; 0x9e
 8000932:	002a      	movs	r2, r5
 8000934:	40b5      	lsls	r5, r6
 8000936:	002c      	movs	r4, r5
 8000938:	40c2      	lsrs	r2, r0
 800093a:	1e65      	subs	r5, r4, #1
 800093c:	41ac      	sbcs	r4, r5
 800093e:	4314      	orrs	r4, r2
 8000940:	0762      	lsls	r2, r4, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x1f6>
 8000944:	220f      	movs	r2, #15
 8000946:	4022      	ands	r2, r4
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x1f6>
 800094c:	3404      	adds	r4, #4
 800094e:	0162      	lsls	r2, r4, #5
 8000950:	d403      	bmi.n	800095a <__aeabi_fdiv+0x202>
 8000952:	01a4      	lsls	r4, r4, #6
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	2200      	movs	r2, #0
 8000958:	e75d      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800095a:	2201      	movs	r2, #1
 800095c:	2400      	movs	r4, #0
 800095e:	e75a      	b.n	8000816 <__aeabi_fdiv+0xbe>
 8000960:	2480      	movs	r4, #128	; 0x80
 8000962:	03e4      	lsls	r4, r4, #15
 8000964:	432c      	orrs	r4, r5
 8000966:	0264      	lsls	r4, r4, #9
 8000968:	0a64      	lsrs	r4, r4, #9
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	e753      	b.n	8000816 <__aeabi_fdiv+0xbe>
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	08006ab8 	.word	0x08006ab8
 8000974:	f7ffffff 	.word	0xf7ffffff
 8000978:	08006af8 	.word	0x08006af8

0800097c <__aeabi_fmul>:
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	464e      	mov	r6, r9
 8000980:	4657      	mov	r7, sl
 8000982:	4645      	mov	r5, r8
 8000984:	46de      	mov	lr, fp
 8000986:	b5e0      	push	{r5, r6, r7, lr}
 8000988:	0243      	lsls	r3, r0, #9
 800098a:	0a5b      	lsrs	r3, r3, #9
 800098c:	0045      	lsls	r5, r0, #1
 800098e:	b083      	sub	sp, #12
 8000990:	1c0f      	adds	r7, r1, #0
 8000992:	4699      	mov	r9, r3
 8000994:	0e2d      	lsrs	r5, r5, #24
 8000996:	0fc6      	lsrs	r6, r0, #31
 8000998:	2d00      	cmp	r5, #0
 800099a:	d057      	beq.n	8000a4c <__aeabi_fmul+0xd0>
 800099c:	2dff      	cmp	r5, #255	; 0xff
 800099e:	d024      	beq.n	80009ea <__aeabi_fmul+0x6e>
 80009a0:	2080      	movs	r0, #128	; 0x80
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	04c0      	lsls	r0, r0, #19
 80009a6:	4318      	orrs	r0, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	4681      	mov	r9, r0
 80009ac:	469a      	mov	sl, r3
 80009ae:	469b      	mov	fp, r3
 80009b0:	3d7f      	subs	r5, #127	; 0x7f
 80009b2:	027c      	lsls	r4, r7, #9
 80009b4:	007a      	lsls	r2, r7, #1
 80009b6:	0ffb      	lsrs	r3, r7, #31
 80009b8:	0a64      	lsrs	r4, r4, #9
 80009ba:	0e12      	lsrs	r2, r2, #24
 80009bc:	4698      	mov	r8, r3
 80009be:	d023      	beq.n	8000a08 <__aeabi_fmul+0x8c>
 80009c0:	2aff      	cmp	r2, #255	; 0xff
 80009c2:	d04b      	beq.n	8000a5c <__aeabi_fmul+0xe0>
 80009c4:	00e3      	lsls	r3, r4, #3
 80009c6:	2480      	movs	r4, #128	; 0x80
 80009c8:	2000      	movs	r0, #0
 80009ca:	04e4      	lsls	r4, r4, #19
 80009cc:	3a7f      	subs	r2, #127	; 0x7f
 80009ce:	431c      	orrs	r4, r3
 80009d0:	18ad      	adds	r5, r5, r2
 80009d2:	1c6b      	adds	r3, r5, #1
 80009d4:	4647      	mov	r7, r8
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	4653      	mov	r3, sl
 80009da:	4077      	eors	r7, r6
 80009dc:	003a      	movs	r2, r7
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d848      	bhi.n	8000a74 <__aeabi_fmul+0xf8>
 80009e2:	497d      	ldr	r1, [pc, #500]	; (8000bd8 <__aeabi_fmul+0x25c>)
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	58cb      	ldr	r3, [r1, r3]
 80009e8:	469f      	mov	pc, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fmul+0x74>
 80009ee:	e085      	b.n	8000afc <__aeabi_fmul+0x180>
 80009f0:	3308      	adds	r3, #8
 80009f2:	469a      	mov	sl, r3
 80009f4:	3b06      	subs	r3, #6
 80009f6:	469b      	mov	fp, r3
 80009f8:	027c      	lsls	r4, r7, #9
 80009fa:	007a      	lsls	r2, r7, #1
 80009fc:	0ffb      	lsrs	r3, r7, #31
 80009fe:	25ff      	movs	r5, #255	; 0xff
 8000a00:	0a64      	lsrs	r4, r4, #9
 8000a02:	0e12      	lsrs	r2, r2, #24
 8000a04:	4698      	mov	r8, r3
 8000a06:	d1db      	bne.n	80009c0 <__aeabi_fmul+0x44>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fmul+0x92>
 8000a0c:	e090      	b.n	8000b30 <__aeabi_fmul+0x1b4>
 8000a0e:	4652      	mov	r2, sl
 8000a10:	2301      	movs	r3, #1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	4692      	mov	sl, r2
 8000a16:	2001      	movs	r0, #1
 8000a18:	e7db      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000a1a:	464c      	mov	r4, r9
 8000a1c:	4658      	mov	r0, fp
 8000a1e:	0017      	movs	r7, r2
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d024      	beq.n	8000a6e <__aeabi_fmul+0xf2>
 8000a24:	2803      	cmp	r0, #3
 8000a26:	d100      	bne.n	8000a2a <__aeabi_fmul+0xae>
 8000a28:	e0cf      	b.n	8000bca <__aeabi_fmul+0x24e>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2801      	cmp	r0, #1
 8000a30:	d14d      	bne.n	8000ace <__aeabi_fmul+0x152>
 8000a32:	0258      	lsls	r0, r3, #9
 8000a34:	05d2      	lsls	r2, r2, #23
 8000a36:	0a40      	lsrs	r0, r0, #9
 8000a38:	07ff      	lsls	r7, r7, #31
 8000a3a:	4310      	orrs	r0, r2
 8000a3c:	4338      	orrs	r0, r7
 8000a3e:	b003      	add	sp, #12
 8000a40:	bc3c      	pop	{r2, r3, r4, r5}
 8000a42:	4690      	mov	r8, r2
 8000a44:	4699      	mov	r9, r3
 8000a46:	46a2      	mov	sl, r4
 8000a48:	46ab      	mov	fp, r5
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d15b      	bne.n	8000b08 <__aeabi_fmul+0x18c>
 8000a50:	2304      	movs	r3, #4
 8000a52:	469a      	mov	sl, r3
 8000a54:	3b03      	subs	r3, #3
 8000a56:	2500      	movs	r5, #0
 8000a58:	469b      	mov	fp, r3
 8000a5a:	e7aa      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000a5c:	35ff      	adds	r5, #255	; 0xff
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d160      	bne.n	8000b24 <__aeabi_fmul+0x1a8>
 8000a62:	4652      	mov	r2, sl
 8000a64:	2302      	movs	r3, #2
 8000a66:	431a      	orrs	r2, r3
 8000a68:	4692      	mov	sl, r2
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	e7b1      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	2300      	movs	r3, #0
 8000a72:	e7de      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000a74:	464b      	mov	r3, r9
 8000a76:	0c1b      	lsrs	r3, r3, #16
 8000a78:	469c      	mov	ip, r3
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	0426      	lsls	r6, r4, #16
 8000a7e:	0c36      	lsrs	r6, r6, #16
 8000a80:	0418      	lsls	r0, r3, #16
 8000a82:	4661      	mov	r1, ip
 8000a84:	0033      	movs	r3, r6
 8000a86:	0c22      	lsrs	r2, r4, #16
 8000a88:	4664      	mov	r4, ip
 8000a8a:	0c00      	lsrs	r0, r0, #16
 8000a8c:	4343      	muls	r3, r0
 8000a8e:	434e      	muls	r6, r1
 8000a90:	4350      	muls	r0, r2
 8000a92:	4354      	muls	r4, r2
 8000a94:	1980      	adds	r0, r0, r6
 8000a96:	0c1a      	lsrs	r2, r3, #16
 8000a98:	1812      	adds	r2, r2, r0
 8000a9a:	4296      	cmp	r6, r2
 8000a9c:	d903      	bls.n	8000aa6 <__aeabi_fmul+0x12a>
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0249      	lsls	r1, r1, #9
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4464      	add	r4, ip
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	0410      	lsls	r0, r2, #16
 8000aac:	18c0      	adds	r0, r0, r3
 8000aae:	0183      	lsls	r3, r0, #6
 8000ab0:	1e5e      	subs	r6, r3, #1
 8000ab2:	41b3      	sbcs	r3, r6
 8000ab4:	0e80      	lsrs	r0, r0, #26
 8000ab6:	4318      	orrs	r0, r3
 8000ab8:	0c13      	lsrs	r3, r2, #16
 8000aba:	191b      	adds	r3, r3, r4
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	0123      	lsls	r3, r4, #4
 8000ac4:	d579      	bpl.n	8000bba <__aeabi_fmul+0x23e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	0862      	lsrs	r2, r4, #1
 8000aca:	401c      	ands	r4, r3
 8000acc:	4314      	orrs	r4, r2
 8000ace:	9a01      	ldr	r2, [sp, #4]
 8000ad0:	327f      	adds	r2, #127	; 0x7f
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	dd4d      	ble.n	8000b72 <__aeabi_fmul+0x1f6>
 8000ad6:	0763      	lsls	r3, r4, #29
 8000ad8:	d004      	beq.n	8000ae4 <__aeabi_fmul+0x168>
 8000ada:	230f      	movs	r3, #15
 8000adc:	4023      	ands	r3, r4
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fmul+0x168>
 8000ae2:	3404      	adds	r4, #4
 8000ae4:	0123      	lsls	r3, r4, #4
 8000ae6:	d503      	bpl.n	8000af0 <__aeabi_fmul+0x174>
 8000ae8:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <__aeabi_fmul+0x260>)
 8000aea:	9a01      	ldr	r2, [sp, #4]
 8000aec:	401c      	ands	r4, r3
 8000aee:	3280      	adds	r2, #128	; 0x80
 8000af0:	2afe      	cmp	r2, #254	; 0xfe
 8000af2:	dcbc      	bgt.n	8000a6e <__aeabi_fmul+0xf2>
 8000af4:	01a3      	lsls	r3, r4, #6
 8000af6:	0a5b      	lsrs	r3, r3, #9
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	e79a      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000afc:	230c      	movs	r3, #12
 8000afe:	469a      	mov	sl, r3
 8000b00:	3b09      	subs	r3, #9
 8000b02:	25ff      	movs	r5, #255	; 0xff
 8000b04:	469b      	mov	fp, r3
 8000b06:	e754      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fad1 	bl	80010b0 <__clzsi2>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	1f43      	subs	r3, r0, #5
 8000b12:	2576      	movs	r5, #118	; 0x76
 8000b14:	409a      	lsls	r2, r3
 8000b16:	2300      	movs	r3, #0
 8000b18:	426d      	negs	r5, r5
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	1a2d      	subs	r5, r5, r0
 8000b1e:	469a      	mov	sl, r3
 8000b20:	469b      	mov	fp, r3
 8000b22:	e746      	b.n	80009b2 <__aeabi_fmul+0x36>
 8000b24:	4652      	mov	r2, sl
 8000b26:	2303      	movs	r3, #3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4692      	mov	sl, r2
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e750      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000b30:	0020      	movs	r0, r4
 8000b32:	f000 fabd 	bl	80010b0 <__clzsi2>
 8000b36:	1f43      	subs	r3, r0, #5
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	409c      	lsls	r4, r3
 8000b3c:	3d76      	subs	r5, #118	; 0x76
 8000b3e:	2000      	movs	r0, #0
 8000b40:	e747      	b.n	80009d2 <__aeabi_fmul+0x56>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	2700      	movs	r7, #0
 8000b46:	03db      	lsls	r3, r3, #15
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	e772      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000b4c:	4642      	mov	r2, r8
 8000b4e:	e766      	b.n	8000a1e <__aeabi_fmul+0xa2>
 8000b50:	464c      	mov	r4, r9
 8000b52:	0032      	movs	r2, r6
 8000b54:	4658      	mov	r0, fp
 8000b56:	e762      	b.n	8000a1e <__aeabi_fmul+0xa2>
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	03db      	lsls	r3, r3, #15
 8000b5e:	421a      	tst	r2, r3
 8000b60:	d022      	beq.n	8000ba8 <__aeabi_fmul+0x22c>
 8000b62:	421c      	tst	r4, r3
 8000b64:	d120      	bne.n	8000ba8 <__aeabi_fmul+0x22c>
 8000b66:	4323      	orrs	r3, r4
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	4647      	mov	r7, r8
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	e75f      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000b72:	2301      	movs	r3, #1
 8000b74:	1a9a      	subs	r2, r3, r2
 8000b76:	2a1b      	cmp	r2, #27
 8000b78:	dc21      	bgt.n	8000bbe <__aeabi_fmul+0x242>
 8000b7a:	0023      	movs	r3, r4
 8000b7c:	9901      	ldr	r1, [sp, #4]
 8000b7e:	40d3      	lsrs	r3, r2
 8000b80:	319e      	adds	r1, #158	; 0x9e
 8000b82:	408c      	lsls	r4, r1
 8000b84:	001a      	movs	r2, r3
 8000b86:	0023      	movs	r3, r4
 8000b88:	1e5c      	subs	r4, r3, #1
 8000b8a:	41a3      	sbcs	r3, r4
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	075a      	lsls	r2, r3, #29
 8000b90:	d004      	beq.n	8000b9c <__aeabi_fmul+0x220>
 8000b92:	220f      	movs	r2, #15
 8000b94:	401a      	ands	r2, r3
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d000      	beq.n	8000b9c <__aeabi_fmul+0x220>
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	015a      	lsls	r2, r3, #5
 8000b9e:	d411      	bmi.n	8000bc4 <__aeabi_fmul+0x248>
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	0a5b      	lsrs	r3, r3, #9
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e744      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	464a      	mov	r2, r9
 8000bac:	03db      	lsls	r3, r3, #15
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	0a5b      	lsrs	r3, r3, #9
 8000bb4:	0037      	movs	r7, r6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	e73b      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bba:	9501      	str	r5, [sp, #4]
 8000bbc:	e787      	b.n	8000ace <__aeabi_fmul+0x152>
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e736      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e733      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	e72c      	b.n	8000a32 <__aeabi_fmul+0xb6>
 8000bd8:	08006b38 	.word	0x08006b38
 8000bdc:	f7ffffff 	.word	0xf7ffffff

08000be0 <__aeabi_fsub>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	4647      	mov	r7, r8
 8000be4:	46ce      	mov	lr, r9
 8000be6:	0044      	lsls	r4, r0, #1
 8000be8:	0fc2      	lsrs	r2, r0, #31
 8000bea:	b580      	push	{r7, lr}
 8000bec:	0247      	lsls	r7, r0, #9
 8000bee:	0248      	lsls	r0, r1, #9
 8000bf0:	0a40      	lsrs	r0, r0, #9
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	4666      	mov	r6, ip
 8000bf6:	0048      	lsls	r0, r1, #1
 8000bf8:	0a7f      	lsrs	r7, r7, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	00f6      	lsls	r6, r6, #3
 8000bfe:	0025      	movs	r5, r4
 8000c00:	4690      	mov	r8, r2
 8000c02:	00fb      	lsls	r3, r7, #3
 8000c04:	0e00      	lsrs	r0, r0, #24
 8000c06:	0fc9      	lsrs	r1, r1, #31
 8000c08:	46b1      	mov	r9, r6
 8000c0a:	28ff      	cmp	r0, #255	; 0xff
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x30>
 8000c0e:	e085      	b.n	8000d1c <__aeabi_fsub+0x13c>
 8000c10:	2601      	movs	r6, #1
 8000c12:	4071      	eors	r1, r6
 8000c14:	1a26      	subs	r6, r4, r0
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d057      	beq.n	8000cca <__aeabi_fsub+0xea>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	dd43      	ble.n	8000ca6 <__aeabi_fsub+0xc6>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d000      	beq.n	8000c24 <__aeabi_fsub+0x44>
 8000c22:	e07f      	b.n	8000d24 <__aeabi_fsub+0x144>
 8000c24:	4649      	mov	r1, r9
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x4c>
 8000c2a:	e0aa      	b.n	8000d82 <__aeabi_fsub+0x1a2>
 8000c2c:	3e01      	subs	r6, #1
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d000      	beq.n	8000c34 <__aeabi_fsub+0x54>
 8000c32:	e0f7      	b.n	8000e24 <__aeabi_fsub+0x244>
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	015a      	lsls	r2, r3, #5
 8000c38:	d400      	bmi.n	8000c3c <__aeabi_fsub+0x5c>
 8000c3a:	e08b      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	099c      	lsrs	r4, r3, #6
 8000c40:	0020      	movs	r0, r4
 8000c42:	f000 fa35 	bl	80010b0 <__clzsi2>
 8000c46:	3805      	subs	r0, #5
 8000c48:	4084      	lsls	r4, r0
 8000c4a:	4285      	cmp	r5, r0
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_fsub+0x70>
 8000c4e:	e0d3      	b.n	8000df8 <__aeabi_fsub+0x218>
 8000c50:	1b45      	subs	r5, r0, r5
 8000c52:	0023      	movs	r3, r4
 8000c54:	2020      	movs	r0, #32
 8000c56:	3501      	adds	r5, #1
 8000c58:	40eb      	lsrs	r3, r5
 8000c5a:	1b45      	subs	r5, r0, r5
 8000c5c:	40ac      	lsls	r4, r5
 8000c5e:	1e62      	subs	r2, r4, #1
 8000c60:	4194      	sbcs	r4, r2
 8000c62:	4323      	orrs	r3, r4
 8000c64:	2407      	movs	r4, #7
 8000c66:	2500      	movs	r5, #0
 8000c68:	401c      	ands	r4, r3
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	400a      	ands	r2, r1
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fsub+0x9e>
 8000c74:	210f      	movs	r1, #15
 8000c76:	4019      	ands	r1, r3
 8000c78:	2904      	cmp	r1, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fsub+0x9e>
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	0159      	lsls	r1, r3, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0xa4>
 8000c82:	e080      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000c84:	3501      	adds	r5, #1
 8000c86:	b2ec      	uxtb	r4, r5
 8000c88:	2dff      	cmp	r5, #255	; 0xff
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0xae>
 8000c8c:	e0a3      	b.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000c8e:	24ff      	movs	r4, #255	; 0xff
 8000c90:	2300      	movs	r3, #0
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	05e4      	lsls	r4, r4, #23
 8000c96:	0a58      	lsrs	r0, r3, #9
 8000c98:	07d2      	lsls	r2, r2, #31
 8000c9a:	4320      	orrs	r0, r4
 8000c9c:	4310      	orrs	r0, r2
 8000c9e:	bc0c      	pop	{r2, r3}
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d174      	bne.n	8000d94 <__aeabi_fsub+0x1b4>
 8000caa:	1c60      	adds	r0, r4, #1
 8000cac:	b2c0      	uxtb	r0, r0
 8000cae:	2801      	cmp	r0, #1
 8000cb0:	dc00      	bgt.n	8000cb4 <__aeabi_fsub+0xd4>
 8000cb2:	e0a7      	b.n	8000e04 <__aeabi_fsub+0x224>
 8000cb4:	464a      	mov	r2, r9
 8000cb6:	1a9c      	subs	r4, r3, r2
 8000cb8:	0162      	lsls	r2, r4, #5
 8000cba:	d500      	bpl.n	8000cbe <__aeabi_fsub+0xde>
 8000cbc:	e0b6      	b.n	8000e2c <__aeabi_fsub+0x24c>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d1be      	bne.n	8000c40 <__aeabi_fsub+0x60>
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e7e3      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_fsub+0xf0>
 8000cce:	e085      	b.n	8000ddc <__aeabi_fsub+0x1fc>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d046      	beq.n	8000d62 <__aeabi_fsub+0x182>
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d049      	beq.n	8000d6c <__aeabi_fsub+0x18c>
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	4648      	mov	r0, r9
 8000cdc:	04d2      	lsls	r2, r2, #19
 8000cde:	4310      	orrs	r0, r2
 8000ce0:	4681      	mov	r9, r0
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2e1b      	cmp	r6, #27
 8000ce6:	dc09      	bgt.n	8000cfc <__aeabi_fsub+0x11c>
 8000ce8:	2020      	movs	r0, #32
 8000cea:	464c      	mov	r4, r9
 8000cec:	1b80      	subs	r0, r0, r6
 8000cee:	4084      	lsls	r4, r0
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	40f2      	lsrs	r2, r6
 8000cf6:	1e44      	subs	r4, r0, #1
 8000cf8:	41a0      	sbcs	r0, r4
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	189b      	adds	r3, r3, r2
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	d528      	bpl.n	8000d54 <__aeabi_fsub+0x174>
 8000d02:	3501      	adds	r5, #1
 8000d04:	2dff      	cmp	r5, #255	; 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fsub+0x12a>
 8000d08:	e0a8      	b.n	8000e5c <__aeabi_fsub+0x27c>
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2407      	movs	r4, #7
 8000d0e:	4994      	ldr	r1, [pc, #592]	; (8000f60 <__aeabi_fsub+0x380>)
 8000d10:	401a      	ands	r2, r3
 8000d12:	085b      	lsrs	r3, r3, #1
 8000d14:	400b      	ands	r3, r1
 8000d16:	4313      	orrs	r3, r2
 8000d18:	401c      	ands	r4, r3
 8000d1a:	e7a6      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_fsub+0x142>
 8000d20:	e778      	b.n	8000c14 <__aeabi_fsub+0x34>
 8000d22:	e775      	b.n	8000c10 <__aeabi_fsub+0x30>
 8000d24:	2cff      	cmp	r4, #255	; 0xff
 8000d26:	d054      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	04d2      	lsls	r2, r2, #19
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	4689      	mov	r9, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	2e1b      	cmp	r6, #27
 8000d36:	dc09      	bgt.n	8000d4c <__aeabi_fsub+0x16c>
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	1b89      	subs	r1, r1, r6
 8000d3e:	4088      	lsls	r0, r1
 8000d40:	464a      	mov	r2, r9
 8000d42:	0001      	movs	r1, r0
 8000d44:	40f2      	lsrs	r2, r6
 8000d46:	1e48      	subs	r0, r1, #1
 8000d48:	4181      	sbcs	r1, r0
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	015a      	lsls	r2, r3, #5
 8000d50:	d500      	bpl.n	8000d54 <__aeabi_fsub+0x174>
 8000d52:	e773      	b.n	8000c3c <__aeabi_fsub+0x5c>
 8000d54:	2201      	movs	r2, #1
 8000d56:	4641      	mov	r1, r8
 8000d58:	400a      	ands	r2, r1
 8000d5a:	0759      	lsls	r1, r3, #29
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x180>
 8000d5e:	e789      	b.n	8000c74 <__aeabi_fsub+0x94>
 8000d60:	e011      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000d62:	4648      	mov	r0, r9
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d158      	bne.n	8000e1a <__aeabi_fsub+0x23a>
 8000d68:	2cff      	cmp	r4, #255	; 0xff
 8000d6a:	d10c      	bne.n	8000d86 <__aeabi_fsub+0x1a6>
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x194>
 8000d72:	e78c      	b.n	8000c8e <__aeabi_fsub+0xae>
 8000d74:	2080      	movs	r0, #128	; 0x80
 8000d76:	03c0      	lsls	r0, r0, #15
 8000d78:	4303      	orrs	r3, r0
 8000d7a:	025b      	lsls	r3, r3, #9
 8000d7c:	0a5b      	lsrs	r3, r3, #9
 8000d7e:	24ff      	movs	r4, #255	; 0xff
 8000d80:	e787      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000d82:	2cff      	cmp	r4, #255	; 0xff
 8000d84:	d025      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	2dff      	cmp	r5, #255	; 0xff
 8000d8a:	d0f0      	beq.n	8000d6e <__aeabi_fsub+0x18e>
 8000d8c:	025b      	lsls	r3, r3, #9
 8000d8e:	0a5b      	lsrs	r3, r3, #9
 8000d90:	b2ec      	uxtb	r4, r5
 8000d92:	e77e      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d04d      	beq.n	8000e34 <__aeabi_fsub+0x254>
 8000d98:	28ff      	cmp	r0, #255	; 0xff
 8000d9a:	d018      	beq.n	8000dce <__aeabi_fsub+0x1ee>
 8000d9c:	2480      	movs	r4, #128	; 0x80
 8000d9e:	04e4      	lsls	r4, r4, #19
 8000da0:	4272      	negs	r2, r6
 8000da2:	4323      	orrs	r3, r4
 8000da4:	2a1b      	cmp	r2, #27
 8000da6:	dd00      	ble.n	8000daa <__aeabi_fsub+0x1ca>
 8000da8:	e0c4      	b.n	8000f34 <__aeabi_fsub+0x354>
 8000daa:	001c      	movs	r4, r3
 8000dac:	2520      	movs	r5, #32
 8000dae:	40d4      	lsrs	r4, r2
 8000db0:	1aaa      	subs	r2, r5, r2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	1e5a      	subs	r2, r3, #1
 8000db6:	4193      	sbcs	r3, r2
 8000db8:	4323      	orrs	r3, r4
 8000dba:	464a      	mov	r2, r9
 8000dbc:	0005      	movs	r5, r0
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	e738      	b.n	8000c36 <__aeabi_fsub+0x56>
 8000dc4:	1c72      	adds	r2, r6, #1
 8000dc6:	d0f8      	beq.n	8000dba <__aeabi_fsub+0x1da>
 8000dc8:	43f2      	mvns	r2, r6
 8000dca:	28ff      	cmp	r0, #255	; 0xff
 8000dcc:	d1ea      	bne.n	8000da4 <__aeabi_fsub+0x1c4>
 8000dce:	000a      	movs	r2, r1
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	25ff      	movs	r5, #255	; 0xff
 8000dd4:	e7d7      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000dd6:	019b      	lsls	r3, r3, #6
 8000dd8:	0a5b      	lsrs	r3, r3, #9
 8000dda:	e75a      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d141      	bne.n	8000e64 <__aeabi_fsub+0x284>
 8000de0:	1c65      	adds	r5, r4, #1
 8000de2:	b2e9      	uxtb	r1, r5
 8000de4:	2901      	cmp	r1, #1
 8000de6:	dd45      	ble.n	8000e74 <__aeabi_fsub+0x294>
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x20e>
 8000dec:	e74f      	b.n	8000c8e <__aeabi_fsub+0xae>
 8000dee:	2407      	movs	r4, #7
 8000df0:	444b      	add	r3, r9
 8000df2:	085b      	lsrs	r3, r3, #1
 8000df4:	401c      	ands	r4, r3
 8000df6:	e738      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000df8:	2207      	movs	r2, #7
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <__aeabi_fsub+0x384>)
 8000dfc:	1a2d      	subs	r5, r5, r0
 8000dfe:	4023      	ands	r3, r4
 8000e00:	4014      	ands	r4, r2
 8000e02:	e732      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000e04:	2c00      	cmp	r4, #0
 8000e06:	d11d      	bne.n	8000e44 <__aeabi_fsub+0x264>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d17a      	bne.n	8000f02 <__aeabi_fsub+0x322>
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fsub+0x234>
 8000e12:	e091      	b.n	8000f38 <__aeabi_fsub+0x358>
 8000e14:	000a      	movs	r2, r1
 8000e16:	2500      	movs	r5, #0
 8000e18:	e7b5      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e1a:	3e01      	subs	r6, #1
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d119      	bne.n	8000e54 <__aeabi_fsub+0x274>
 8000e20:	444b      	add	r3, r9
 8000e22:	e76c      	b.n	8000cfe <__aeabi_fsub+0x11e>
 8000e24:	2cff      	cmp	r4, #255	; 0xff
 8000e26:	d184      	bne.n	8000d32 <__aeabi_fsub+0x152>
 8000e28:	25ff      	movs	r5, #255	; 0xff
 8000e2a:	e7ac      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e2c:	464a      	mov	r2, r9
 8000e2e:	4688      	mov	r8, r1
 8000e30:	1ad4      	subs	r4, r2, r3
 8000e32:	e705      	b.n	8000c40 <__aeabi_fsub+0x60>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1c5      	bne.n	8000dc4 <__aeabi_fsub+0x1e4>
 8000e38:	000a      	movs	r2, r1
 8000e3a:	28ff      	cmp	r0, #255	; 0xff
 8000e3c:	d0c8      	beq.n	8000dd0 <__aeabi_fsub+0x1f0>
 8000e3e:	0005      	movs	r5, r0
 8000e40:	464b      	mov	r3, r9
 8000e42:	e7a0      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d149      	bne.n	8000edc <__aeabi_fsub+0x2fc>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d077      	beq.n	8000f3e <__aeabi_fsub+0x35e>
 8000e4e:	000a      	movs	r2, r1
 8000e50:	25ff      	movs	r5, #255	; 0xff
 8000e52:	e798      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000e54:	2cff      	cmp	r4, #255	; 0xff
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x27a>
 8000e58:	e743      	b.n	8000ce2 <__aeabi_fsub+0x102>
 8000e5a:	e787      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	24ff      	movs	r4, #255	; 0xff
 8000e60:	2300      	movs	r3, #0
 8000e62:	e716      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000e64:	2c00      	cmp	r4, #0
 8000e66:	d115      	bne.n	8000e94 <__aeabi_fsub+0x2b4>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d157      	bne.n	8000f1c <__aeabi_fsub+0x33c>
 8000e6c:	28ff      	cmp	r0, #255	; 0xff
 8000e6e:	d1e6      	bne.n	8000e3e <__aeabi_fsub+0x25e>
 8000e70:	464b      	mov	r3, r9
 8000e72:	e77b      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000e74:	2c00      	cmp	r4, #0
 8000e76:	d120      	bne.n	8000eba <__aeabi_fsub+0x2da>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d057      	beq.n	8000f2c <__aeabi_fsub+0x34c>
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d053      	beq.n	8000f2a <__aeabi_fsub+0x34a>
 8000e82:	444b      	add	r3, r9
 8000e84:	015a      	lsls	r2, r3, #5
 8000e86:	d568      	bpl.n	8000f5a <__aeabi_fsub+0x37a>
 8000e88:	2407      	movs	r4, #7
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <__aeabi_fsub+0x384>)
 8000e8c:	401c      	ands	r4, r3
 8000e8e:	2501      	movs	r5, #1
 8000e90:	4013      	ands	r3, r2
 8000e92:	e6ea      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000e94:	28ff      	cmp	r0, #255	; 0xff
 8000e96:	d0eb      	beq.n	8000e70 <__aeabi_fsub+0x290>
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	04d2      	lsls	r2, r2, #19
 8000e9c:	4276      	negs	r6, r6
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	2e1b      	cmp	r6, #27
 8000ea2:	dc53      	bgt.n	8000f4c <__aeabi_fsub+0x36c>
 8000ea4:	2520      	movs	r5, #32
 8000ea6:	1bad      	subs	r5, r5, r6
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	40ab      	lsls	r3, r5
 8000eac:	40f2      	lsrs	r2, r6
 8000eae:	1e5c      	subs	r4, r3, #1
 8000eb0:	41a3      	sbcs	r3, r4
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	444b      	add	r3, r9
 8000eb6:	0005      	movs	r5, r0
 8000eb8:	e721      	b.n	8000cfe <__aeabi_fsub+0x11e>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0d8      	beq.n	8000e70 <__aeabi_fsub+0x290>
 8000ebe:	4649      	mov	r1, r9
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x2e6>
 8000ec4:	e752      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	03c9      	lsls	r1, r1, #15
 8000eca:	420f      	tst	r7, r1
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x2f0>
 8000ece:	e74d      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	4208      	tst	r0, r1
 8000ed4:	d000      	beq.n	8000ed8 <__aeabi_fsub+0x2f8>
 8000ed6:	e749      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000ed8:	464b      	mov	r3, r9
 8000eda:	e747      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000edc:	4648      	mov	r0, r9
 8000ede:	25ff      	movs	r5, #255	; 0xff
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x306>
 8000ee4:	e74f      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	03d2      	lsls	r2, r2, #15
 8000eea:	4217      	tst	r7, r2
 8000eec:	d004      	beq.n	8000ef8 <__aeabi_fsub+0x318>
 8000eee:	4660      	mov	r0, ip
 8000ef0:	4210      	tst	r0, r2
 8000ef2:	d101      	bne.n	8000ef8 <__aeabi_fsub+0x318>
 8000ef4:	464b      	mov	r3, r9
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4641      	mov	r1, r8
 8000efc:	25ff      	movs	r5, #255	; 0xff
 8000efe:	400a      	ands	r2, r1
 8000f00:	e741      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000f02:	4648      	mov	r0, r9
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d01f      	beq.n	8000f48 <__aeabi_fsub+0x368>
 8000f08:	1a1a      	subs	r2, r3, r0
 8000f0a:	0150      	lsls	r0, r2, #5
 8000f0c:	d520      	bpl.n	8000f50 <__aeabi_fsub+0x370>
 8000f0e:	464a      	mov	r2, r9
 8000f10:	2407      	movs	r4, #7
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	401c      	ands	r4, r3
 8000f16:	4688      	mov	r8, r1
 8000f18:	2500      	movs	r5, #0
 8000f1a:	e6a6      	b.n	8000c6a <__aeabi_fsub+0x8a>
 8000f1c:	1c74      	adds	r4, r6, #1
 8000f1e:	d0c9      	beq.n	8000eb4 <__aeabi_fsub+0x2d4>
 8000f20:	43f6      	mvns	r6, r6
 8000f22:	28ff      	cmp	r0, #255	; 0xff
 8000f24:	d1bc      	bne.n	8000ea0 <__aeabi_fsub+0x2c0>
 8000f26:	464b      	mov	r3, r9
 8000f28:	e720      	b.n	8000d6c <__aeabi_fsub+0x18c>
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	464b      	mov	r3, r9
 8000f2e:	2500      	movs	r5, #0
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	e72b      	b.n	8000d8c <__aeabi_fsub+0x1ac>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e740      	b.n	8000dba <__aeabi_fsub+0x1da>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e6a9      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	2200      	movs	r2, #0
 8000f42:	03db      	lsls	r3, r3, #15
 8000f44:	24ff      	movs	r4, #255	; 0xff
 8000f46:	e6a4      	b.n	8000c92 <__aeabi_fsub+0xb2>
 8000f48:	2500      	movs	r5, #0
 8000f4a:	e71c      	b.n	8000d86 <__aeabi_fsub+0x1a6>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e7b1      	b.n	8000eb4 <__aeabi_fsub+0x2d4>
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d0f1      	beq.n	8000f38 <__aeabi_fsub+0x358>
 8000f54:	0013      	movs	r3, r2
 8000f56:	2500      	movs	r5, #0
 8000f58:	e6fc      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	e6fa      	b.n	8000d54 <__aeabi_fsub+0x174>
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	7dffffff 	.word	0x7dffffff
 8000f64:	fbffffff 	.word	0xfbffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	0e12      	lsrs	r2, r2, #24
 8000f72:	2000      	movs	r0, #0
 8000f74:	2a7e      	cmp	r2, #126	; 0x7e
 8000f76:	d90d      	bls.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f78:	2a9d      	cmp	r2, #157	; 0x9d
 8000f7a:	d80c      	bhi.n	8000f96 <__aeabi_f2iz+0x2e>
 8000f7c:	2080      	movs	r0, #128	; 0x80
 8000f7e:	0400      	lsls	r0, r0, #16
 8000f80:	4301      	orrs	r1, r0
 8000f82:	2a95      	cmp	r2, #149	; 0x95
 8000f84:	dc0a      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f86:	2096      	movs	r0, #150	; 0x96
 8000f88:	1a82      	subs	r2, r0, r2
 8000f8a:	40d1      	lsrs	r1, r2
 8000f8c:	4248      	negs	r0, r1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d100      	bne.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f92:	0008      	movs	r0, r1
 8000f94:	4770      	bx	lr
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f98:	1898      	adds	r0, r3, r2
 8000f9a:	e7fb      	b.n	8000f94 <__aeabi_f2iz+0x2c>
 8000f9c:	3a96      	subs	r2, #150	; 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f4      	b.n	8000f8c <__aeabi_f2iz+0x24>
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_i2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d03d      	beq.n	800102a <__aeabi_i2f+0x82>
 8000fae:	17c3      	asrs	r3, r0, #31
 8000fb0:	18c5      	adds	r5, r0, r3
 8000fb2:	405d      	eors	r5, r3
 8000fb4:	0fc4      	lsrs	r4, r0, #31
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 f87a 	bl	80010b0 <__clzsi2>
 8000fbc:	229e      	movs	r2, #158	; 0x9e
 8000fbe:	1a12      	subs	r2, r2, r0
 8000fc0:	2a96      	cmp	r2, #150	; 0x96
 8000fc2:	dc07      	bgt.n	8000fd4 <__aeabi_i2f+0x2c>
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	2808      	cmp	r0, #8
 8000fc8:	dd33      	ble.n	8001032 <__aeabi_i2f+0x8a>
 8000fca:	3808      	subs	r0, #8
 8000fcc:	4085      	lsls	r5, r0
 8000fce:	0268      	lsls	r0, r5, #9
 8000fd0:	0a40      	lsrs	r0, r0, #9
 8000fd2:	e023      	b.n	800101c <__aeabi_i2f+0x74>
 8000fd4:	2a99      	cmp	r2, #153	; 0x99
 8000fd6:	dd0b      	ble.n	8000ff0 <__aeabi_i2f+0x48>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	0029      	movs	r1, r5
 8000fdc:	1a1b      	subs	r3, r3, r0
 8000fde:	40d9      	lsrs	r1, r3
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	331b      	adds	r3, #27
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	002b      	movs	r3, r5
 8000fe8:	1e5d      	subs	r5, r3, #1
 8000fea:	41ab      	sbcs	r3, r5
 8000fec:	4319      	orrs	r1, r3
 8000fee:	000d      	movs	r5, r1
 8000ff0:	2805      	cmp	r0, #5
 8000ff2:	dd01      	ble.n	8000ff8 <__aeabi_i2f+0x50>
 8000ff4:	1f43      	subs	r3, r0, #5
 8000ff6:	409d      	lsls	r5, r3
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <__aeabi_i2f+0x90>)
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	076e      	lsls	r6, r5, #29
 8001000:	d009      	beq.n	8001016 <__aeabi_i2f+0x6e>
 8001002:	260f      	movs	r6, #15
 8001004:	4035      	ands	r5, r6
 8001006:	2d04      	cmp	r5, #4
 8001008:	d005      	beq.n	8001016 <__aeabi_i2f+0x6e>
 800100a:	3304      	adds	r3, #4
 800100c:	015d      	lsls	r5, r3, #5
 800100e:	d502      	bpl.n	8001016 <__aeabi_i2f+0x6e>
 8001010:	229f      	movs	r2, #159	; 0x9f
 8001012:	400b      	ands	r3, r1
 8001014:	1a12      	subs	r2, r2, r0
 8001016:	019b      	lsls	r3, r3, #6
 8001018:	0a58      	lsrs	r0, r3, #9
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	0240      	lsls	r0, r0, #9
 800101e:	05d2      	lsls	r2, r2, #23
 8001020:	0a40      	lsrs	r0, r0, #9
 8001022:	07e4      	lsls	r4, r4, #31
 8001024:	4310      	orrs	r0, r2
 8001026:	4320      	orrs	r0, r4
 8001028:	bd70      	pop	{r4, r5, r6, pc}
 800102a:	2400      	movs	r4, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2000      	movs	r0, #0
 8001030:	e7f4      	b.n	800101c <__aeabi_i2f+0x74>
 8001032:	0268      	lsls	r0, r5, #9
 8001034:	0a40      	lsrs	r0, r0, #9
 8001036:	e7f1      	b.n	800101c <__aeabi_i2f+0x74>
 8001038:	fbffffff 	.word	0xfbffffff

0800103c <__aeabi_cfrcmple>:
 800103c:	4684      	mov	ip, r0
 800103e:	1c08      	adds	r0, r1, #0
 8001040:	4661      	mov	r1, ip
 8001042:	e7ff      	b.n	8001044 <__aeabi_cfcmpeq>

08001044 <__aeabi_cfcmpeq>:
 8001044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001046:	f000 f8c7 	bl	80011d8 <__lesf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	d401      	bmi.n	8001052 <__aeabi_cfcmpeq+0xe>
 800104e:	2100      	movs	r1, #0
 8001050:	42c8      	cmn	r0, r1
 8001052:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001054 <__aeabi_fcmpeq>:
 8001054:	b510      	push	{r4, lr}
 8001056:	f000 f849 	bl	80010ec <__eqsf2>
 800105a:	4240      	negs	r0, r0
 800105c:	3001      	adds	r0, #1
 800105e:	bd10      	pop	{r4, pc}

08001060 <__aeabi_fcmplt>:
 8001060:	b510      	push	{r4, lr}
 8001062:	f000 f8b9 	bl	80011d8 <__lesf2>
 8001066:	2800      	cmp	r0, #0
 8001068:	db01      	blt.n	800106e <__aeabi_fcmplt+0xe>
 800106a:	2000      	movs	r0, #0
 800106c:	bd10      	pop	{r4, pc}
 800106e:	2001      	movs	r0, #1
 8001070:	bd10      	pop	{r4, pc}
 8001072:	46c0      	nop			; (mov r8, r8)

08001074 <__aeabi_fcmple>:
 8001074:	b510      	push	{r4, lr}
 8001076:	f000 f8af 	bl	80011d8 <__lesf2>
 800107a:	2800      	cmp	r0, #0
 800107c:	dd01      	ble.n	8001082 <__aeabi_fcmple+0xe>
 800107e:	2000      	movs	r0, #0
 8001080:	bd10      	pop	{r4, pc}
 8001082:	2001      	movs	r0, #1
 8001084:	bd10      	pop	{r4, pc}
 8001086:	46c0      	nop			; (mov r8, r8)

08001088 <__aeabi_fcmpgt>:
 8001088:	b510      	push	{r4, lr}
 800108a:	f000 f857 	bl	800113c <__gesf2>
 800108e:	2800      	cmp	r0, #0
 8001090:	dc01      	bgt.n	8001096 <__aeabi_fcmpgt+0xe>
 8001092:	2000      	movs	r0, #0
 8001094:	bd10      	pop	{r4, pc}
 8001096:	2001      	movs	r0, #1
 8001098:	bd10      	pop	{r4, pc}
 800109a:	46c0      	nop			; (mov r8, r8)

0800109c <__aeabi_fcmpge>:
 800109c:	b510      	push	{r4, lr}
 800109e:	f000 f84d 	bl	800113c <__gesf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	da01      	bge.n	80010aa <__aeabi_fcmpge+0xe>
 80010a6:	2000      	movs	r0, #0
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	2001      	movs	r0, #1
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)

080010b0 <__clzsi2>:
 80010b0:	211c      	movs	r1, #28
 80010b2:	2301      	movs	r3, #1
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d301      	bcc.n	80010be <__clzsi2+0xe>
 80010ba:	0c00      	lsrs	r0, r0, #16
 80010bc:	3910      	subs	r1, #16
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	4298      	cmp	r0, r3
 80010c2:	d301      	bcc.n	80010c8 <__clzsi2+0x18>
 80010c4:	0a00      	lsrs	r0, r0, #8
 80010c6:	3908      	subs	r1, #8
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	4298      	cmp	r0, r3
 80010cc:	d301      	bcc.n	80010d2 <__clzsi2+0x22>
 80010ce:	0900      	lsrs	r0, r0, #4
 80010d0:	3904      	subs	r1, #4
 80010d2:	a202      	add	r2, pc, #8	; (adr r2, 80010dc <__clzsi2+0x2c>)
 80010d4:	5c10      	ldrb	r0, [r2, r0]
 80010d6:	1840      	adds	r0, r0, r1
 80010d8:	4770      	bx	lr
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	02020304 	.word	0x02020304
 80010e0:	01010101 	.word	0x01010101
	...

080010ec <__eqsf2>:
 80010ec:	b570      	push	{r4, r5, r6, lr}
 80010ee:	0042      	lsls	r2, r0, #1
 80010f0:	024e      	lsls	r6, r1, #9
 80010f2:	004c      	lsls	r4, r1, #1
 80010f4:	0245      	lsls	r5, r0, #9
 80010f6:	0a6d      	lsrs	r5, r5, #9
 80010f8:	0e12      	lsrs	r2, r2, #24
 80010fa:	0fc3      	lsrs	r3, r0, #31
 80010fc:	0a76      	lsrs	r6, r6, #9
 80010fe:	0e24      	lsrs	r4, r4, #24
 8001100:	0fc9      	lsrs	r1, r1, #31
 8001102:	2aff      	cmp	r2, #255	; 0xff
 8001104:	d00f      	beq.n	8001126 <__eqsf2+0x3a>
 8001106:	2cff      	cmp	r4, #255	; 0xff
 8001108:	d011      	beq.n	800112e <__eqsf2+0x42>
 800110a:	2001      	movs	r0, #1
 800110c:	42a2      	cmp	r2, r4
 800110e:	d000      	beq.n	8001112 <__eqsf2+0x26>
 8001110:	bd70      	pop	{r4, r5, r6, pc}
 8001112:	42b5      	cmp	r5, r6
 8001114:	d1fc      	bne.n	8001110 <__eqsf2+0x24>
 8001116:	428b      	cmp	r3, r1
 8001118:	d00d      	beq.n	8001136 <__eqsf2+0x4a>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d1f8      	bne.n	8001110 <__eqsf2+0x24>
 800111e:	0028      	movs	r0, r5
 8001120:	1e45      	subs	r5, r0, #1
 8001122:	41a8      	sbcs	r0, r5
 8001124:	e7f4      	b.n	8001110 <__eqsf2+0x24>
 8001126:	2001      	movs	r0, #1
 8001128:	2d00      	cmp	r5, #0
 800112a:	d1f1      	bne.n	8001110 <__eqsf2+0x24>
 800112c:	e7eb      	b.n	8001106 <__eqsf2+0x1a>
 800112e:	2001      	movs	r0, #1
 8001130:	2e00      	cmp	r6, #0
 8001132:	d1ed      	bne.n	8001110 <__eqsf2+0x24>
 8001134:	e7e9      	b.n	800110a <__eqsf2+0x1e>
 8001136:	2000      	movs	r0, #0
 8001138:	e7ea      	b.n	8001110 <__eqsf2+0x24>
 800113a:	46c0      	nop			; (mov r8, r8)

0800113c <__gesf2>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	004a      	lsls	r2, r1, #1
 8001140:	024e      	lsls	r6, r1, #9
 8001142:	0245      	lsls	r5, r0, #9
 8001144:	0044      	lsls	r4, r0, #1
 8001146:	0a6d      	lsrs	r5, r5, #9
 8001148:	0e24      	lsrs	r4, r4, #24
 800114a:	0fc3      	lsrs	r3, r0, #31
 800114c:	0a76      	lsrs	r6, r6, #9
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	0fc9      	lsrs	r1, r1, #31
 8001152:	2cff      	cmp	r4, #255	; 0xff
 8001154:	d015      	beq.n	8001182 <__gesf2+0x46>
 8001156:	2aff      	cmp	r2, #255	; 0xff
 8001158:	d00e      	beq.n	8001178 <__gesf2+0x3c>
 800115a:	2c00      	cmp	r4, #0
 800115c:	d115      	bne.n	800118a <__gesf2+0x4e>
 800115e:	2a00      	cmp	r2, #0
 8001160:	d101      	bne.n	8001166 <__gesf2+0x2a>
 8001162:	2e00      	cmp	r6, #0
 8001164:	d01c      	beq.n	80011a0 <__gesf2+0x64>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d014      	beq.n	8001194 <__gesf2+0x58>
 800116a:	428b      	cmp	r3, r1
 800116c:	d027      	beq.n	80011be <__gesf2+0x82>
 800116e:	2002      	movs	r0, #2
 8001170:	3b01      	subs	r3, #1
 8001172:	4018      	ands	r0, r3
 8001174:	3801      	subs	r0, #1
 8001176:	bd70      	pop	{r4, r5, r6, pc}
 8001178:	2e00      	cmp	r6, #0
 800117a:	d0ee      	beq.n	800115a <__gesf2+0x1e>
 800117c:	2002      	movs	r0, #2
 800117e:	4240      	negs	r0, r0
 8001180:	e7f9      	b.n	8001176 <__gesf2+0x3a>
 8001182:	2d00      	cmp	r5, #0
 8001184:	d1fa      	bne.n	800117c <__gesf2+0x40>
 8001186:	2aff      	cmp	r2, #255	; 0xff
 8001188:	d00e      	beq.n	80011a8 <__gesf2+0x6c>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d10e      	bne.n	80011ac <__gesf2+0x70>
 800118e:	2e00      	cmp	r6, #0
 8001190:	d0ed      	beq.n	800116e <__gesf2+0x32>
 8001192:	e00b      	b.n	80011ac <__gesf2+0x70>
 8001194:	2301      	movs	r3, #1
 8001196:	3901      	subs	r1, #1
 8001198:	4399      	bics	r1, r3
 800119a:	0008      	movs	r0, r1
 800119c:	3001      	adds	r0, #1
 800119e:	e7ea      	b.n	8001176 <__gesf2+0x3a>
 80011a0:	2000      	movs	r0, #0
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	d0e7      	beq.n	8001176 <__gesf2+0x3a>
 80011a6:	e7e2      	b.n	800116e <__gesf2+0x32>
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d1e7      	bne.n	800117c <__gesf2+0x40>
 80011ac:	428b      	cmp	r3, r1
 80011ae:	d1de      	bne.n	800116e <__gesf2+0x32>
 80011b0:	4294      	cmp	r4, r2
 80011b2:	dd05      	ble.n	80011c0 <__gesf2+0x84>
 80011b4:	2102      	movs	r1, #2
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	4008      	ands	r0, r1
 80011ba:	3801      	subs	r0, #1
 80011bc:	e7db      	b.n	8001176 <__gesf2+0x3a>
 80011be:	2400      	movs	r4, #0
 80011c0:	42a2      	cmp	r2, r4
 80011c2:	dc04      	bgt.n	80011ce <__gesf2+0x92>
 80011c4:	42b5      	cmp	r5, r6
 80011c6:	d8d2      	bhi.n	800116e <__gesf2+0x32>
 80011c8:	2000      	movs	r0, #0
 80011ca:	42b5      	cmp	r5, r6
 80011cc:	d2d3      	bcs.n	8001176 <__gesf2+0x3a>
 80011ce:	1e58      	subs	r0, r3, #1
 80011d0:	2301      	movs	r3, #1
 80011d2:	4398      	bics	r0, r3
 80011d4:	3001      	adds	r0, #1
 80011d6:	e7ce      	b.n	8001176 <__gesf2+0x3a>

080011d8 <__lesf2>:
 80011d8:	b530      	push	{r4, r5, lr}
 80011da:	0042      	lsls	r2, r0, #1
 80011dc:	0244      	lsls	r4, r0, #9
 80011de:	024d      	lsls	r5, r1, #9
 80011e0:	0fc3      	lsrs	r3, r0, #31
 80011e2:	0048      	lsls	r0, r1, #1
 80011e4:	0a64      	lsrs	r4, r4, #9
 80011e6:	0e12      	lsrs	r2, r2, #24
 80011e8:	0a6d      	lsrs	r5, r5, #9
 80011ea:	0e00      	lsrs	r0, r0, #24
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	2aff      	cmp	r2, #255	; 0xff
 80011f0:	d012      	beq.n	8001218 <__lesf2+0x40>
 80011f2:	28ff      	cmp	r0, #255	; 0xff
 80011f4:	d00c      	beq.n	8001210 <__lesf2+0x38>
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d112      	bne.n	8001220 <__lesf2+0x48>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d119      	bne.n	8001232 <__lesf2+0x5a>
 80011fe:	2d00      	cmp	r5, #0
 8001200:	d117      	bne.n	8001232 <__lesf2+0x5a>
 8001202:	2c00      	cmp	r4, #0
 8001204:	d02b      	beq.n	800125e <__lesf2+0x86>
 8001206:	2002      	movs	r0, #2
 8001208:	3b01      	subs	r3, #1
 800120a:	4018      	ands	r0, r3
 800120c:	3801      	subs	r0, #1
 800120e:	e026      	b.n	800125e <__lesf2+0x86>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d0f0      	beq.n	80011f6 <__lesf2+0x1e>
 8001214:	2002      	movs	r0, #2
 8001216:	e022      	b.n	800125e <__lesf2+0x86>
 8001218:	2c00      	cmp	r4, #0
 800121a:	d1fb      	bne.n	8001214 <__lesf2+0x3c>
 800121c:	28ff      	cmp	r0, #255	; 0xff
 800121e:	d01f      	beq.n	8001260 <__lesf2+0x88>
 8001220:	2800      	cmp	r0, #0
 8001222:	d11f      	bne.n	8001264 <__lesf2+0x8c>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d11d      	bne.n	8001264 <__lesf2+0x8c>
 8001228:	2002      	movs	r0, #2
 800122a:	3b01      	subs	r3, #1
 800122c:	4018      	ands	r0, r3
 800122e:	3801      	subs	r0, #1
 8001230:	e015      	b.n	800125e <__lesf2+0x86>
 8001232:	2c00      	cmp	r4, #0
 8001234:	d00e      	beq.n	8001254 <__lesf2+0x7c>
 8001236:	428b      	cmp	r3, r1
 8001238:	d1e5      	bne.n	8001206 <__lesf2+0x2e>
 800123a:	2200      	movs	r2, #0
 800123c:	4290      	cmp	r0, r2
 800123e:	dc04      	bgt.n	800124a <__lesf2+0x72>
 8001240:	42ac      	cmp	r4, r5
 8001242:	d8e0      	bhi.n	8001206 <__lesf2+0x2e>
 8001244:	2000      	movs	r0, #0
 8001246:	42ac      	cmp	r4, r5
 8001248:	d209      	bcs.n	800125e <__lesf2+0x86>
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	2301      	movs	r3, #1
 800124e:	4398      	bics	r0, r3
 8001250:	3001      	adds	r0, #1
 8001252:	e004      	b.n	800125e <__lesf2+0x86>
 8001254:	2301      	movs	r3, #1
 8001256:	3901      	subs	r1, #1
 8001258:	4399      	bics	r1, r3
 800125a:	0008      	movs	r0, r1
 800125c:	3001      	adds	r0, #1
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	2d00      	cmp	r5, #0
 8001262:	d1d7      	bne.n	8001214 <__lesf2+0x3c>
 8001264:	428b      	cmp	r3, r1
 8001266:	d1ce      	bne.n	8001206 <__lesf2+0x2e>
 8001268:	4282      	cmp	r2, r0
 800126a:	dde7      	ble.n	800123c <__lesf2+0x64>
 800126c:	2102      	movs	r1, #2
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	4008      	ands	r0, r1
 8001272:	3801      	subs	r0, #1
 8001274:	e7f3      	b.n	800125e <__lesf2+0x86>
 8001276:	46c0      	nop			; (mov r8, r8)

08001278 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_Init+0x24>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_Init+0x24>)
 8001282:	2110      	movs	r1, #16
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f809 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f002 f99d 	bl	80035cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80012a8:	f000 ffc2 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 80012ac:	0002      	movs	r2, r0
 80012ae:	23fa      	movs	r3, #250	; 0xfa
 80012b0:	0099      	lsls	r1, r3, #2
 80012b2:	0010      	movs	r0, r2
 80012b4:	f7fe ff28 	bl	8000108 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 f90d 	bl	80014da <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	2301      	movs	r3, #1
 80012c4:	425b      	negs	r3, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f8e1 	bl	8001490 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  uwTick++;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_IncTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_IncTick+0x14>)
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000144 	.word	0x20000144

080012f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	20000144 	.word	0x20000144

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fff0 	bl	80012f0 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	d002      	beq.n	8001324 <HAL_Delay+0x20>
  {
     wait++;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3301      	adds	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	f7ff ffe3 	bl	80012f0 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	d8f7      	bhi.n	8001326 <HAL_Delay+0x22>
  {
  }
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	0002      	movs	r2, r0
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800134c:	1dfb      	adds	r3, r7, #7
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	231f      	movs	r3, #31
 8001354:	401a      	ands	r2, r3
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <NVIC_EnableIRQ+0x28>)
 8001358:	2101      	movs	r1, #1
 800135a:	4091      	lsls	r1, r2
 800135c:	000a      	movs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	e000e100 	.word	0xe000e100

0800136c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b7f      	cmp	r3, #127	; 0x7f
 8001380:	d932      	bls.n	80013e8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <NVIC_SetPriority+0xd4>)
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	0019      	movs	r1, r3
 800138a:	230f      	movs	r3, #15
 800138c:	400b      	ands	r3, r1
 800138e:	3b08      	subs	r3, #8
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3306      	adds	r3, #6
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	18d3      	adds	r3, r2, r3
 8001398:	3304      	adds	r3, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1dfa      	adds	r2, r7, #7
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	0011      	movs	r1, r2
 80013a2:	2203      	movs	r2, #3
 80013a4:	400a      	ands	r2, r1
 80013a6:	00d2      	lsls	r2, r2, #3
 80013a8:	21ff      	movs	r1, #255	; 0xff
 80013aa:	4091      	lsls	r1, r2
 80013ac:	000a      	movs	r2, r1
 80013ae:	43d2      	mvns	r2, r2
 80013b0:	401a      	ands	r2, r3
 80013b2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	22ff      	movs	r2, #255	; 0xff
 80013ba:	401a      	ands	r2, r3
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	0018      	movs	r0, r3
 80013c2:	2303      	movs	r3, #3
 80013c4:	4003      	ands	r3, r0
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ca:	481d      	ldr	r0, [pc, #116]	; (8001440 <NVIC_SetPriority+0xd4>)
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	001c      	movs	r4, r3
 80013d2:	230f      	movs	r3, #15
 80013d4:	4023      	ands	r3, r4
 80013d6:	3b08      	subs	r3, #8
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	430a      	orrs	r2, r1
 80013dc:	3306      	adds	r3, #6
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	18c3      	adds	r3, r0, r3
 80013e2:	3304      	adds	r3, #4
 80013e4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013e6:	e027      	b.n	8001438 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	33c0      	adds	r3, #192	; 0xc0
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	589b      	ldr	r3, [r3, r2]
 80013f8:	1dfa      	adds	r2, r7, #7
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	0011      	movs	r1, r2
 80013fe:	2203      	movs	r2, #3
 8001400:	400a      	ands	r2, r1
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	21ff      	movs	r1, #255	; 0xff
 8001406:	4091      	lsls	r1, r2
 8001408:	000a      	movs	r2, r1
 800140a:	43d2      	mvns	r2, r2
 800140c:	401a      	ands	r2, r3
 800140e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	019b      	lsls	r3, r3, #6
 8001414:	22ff      	movs	r2, #255	; 0xff
 8001416:	401a      	ands	r2, r3
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	2303      	movs	r3, #3
 8001420:	4003      	ands	r3, r0
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <NVIC_SetPriority+0xd8>)
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	430a      	orrs	r2, r1
 8001432:	33c0      	adds	r3, #192	; 0xc0
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	501a      	str	r2, [r3, r0]
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b003      	add	sp, #12
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	e000e100 	.word	0xe000e100

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <SysTick_Config+0x40>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e010      	b.n	8001480 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <SysTick_Config+0x44>)
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	3a01      	subs	r2, #1
 8001464:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	2301      	movs	r3, #1
 8001468:	425b      	negs	r3, r3
 800146a:	2103      	movs	r1, #3
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff ff7d 	bl	800136c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <SysTick_Config+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x44>)
 800147a:	2207      	movs	r2, #7
 800147c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}
 8001488:	00ffffff 	.word	0x00ffffff
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	210f      	movs	r1, #15
 800149c:	187b      	adds	r3, r7, r1
 800149e:	1c02      	adds	r2, r0, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <NVIC_SetPriority>
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b004      	add	sp, #16
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	0002      	movs	r2, r0
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff37 	bl	8001340 <NVIC_EnableIRQ>
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ffaf 	bl	8001448 <SysTick_Config>
 80014ea:	0003      	movs	r3, r0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800150a:	e155      	b.n	80017b8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4091      	lsls	r1, r2
 8001516:	000a      	movs	r2, r1
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d100      	bne.n	8001524 <HAL_GPIO_Init+0x30>
 8001522:	e146      	b.n	80017b2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x40>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d123      	bne.n	800157c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	58d3      	ldr	r3, [r2, r3]
 8001540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2207      	movs	r2, #7
 8001546:	4013      	ands	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2107      	movs	r1, #7
 8001560:	400b      	ands	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	08da      	lsrs	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3208      	adds	r2, #8
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	409a      	lsls	r2, r3
 800158a:	0013      	movs	r3, r2
 800158c:	43da      	mvns	r2, r3
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d00b      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c4:	2b11      	cmp	r3, #17
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	2201      	movs	r2, #1
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	43da      	mvns	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	055b      	lsls	r3, r3, #21
 800166a:	4013      	ands	r3, r2
 800166c:	d100      	bne.n	8001670 <HAL_GPIO_Init+0x17c>
 800166e:	e0a0      	b.n	80017b2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001672:	699a      	ldr	r2, [r3, #24]
 8001674:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 8001676:	2101      	movs	r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	4b54      	ldr	r3, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	589b      	ldr	r3, [r3, r2]
 8001694:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	409a      	lsls	r2, r3
 80016a2:	0013      	movs	r3, r2
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	2390      	movs	r3, #144	; 0x90
 80016b0:	05db      	lsls	r3, r3, #23
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d019      	beq.n	80016ea <HAL_GPIO_Init+0x1f6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <HAL_GPIO_Init+0x2e4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_GPIO_Init+0x1f2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_GPIO_Init+0x2e8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00d      	beq.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x2ec>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d007      	beq.n	80016de <HAL_GPIO_Init+0x1ea>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2f0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_GPIO_Init+0x1e6>
 80016d6:	2304      	movs	r3, #4
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016da:	2305      	movs	r3, #5
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x1f8>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	2103      	movs	r1, #3
 80016f0:	400a      	ands	r2, r1
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	035b      	lsls	r3, r3, #13
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	039b      	lsls	r3, r3, #14
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	40da      	lsrs	r2, r3
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	d000      	beq.n	80017c6 <HAL_GPIO_Init+0x2d2>
 80017c4:	e6a2      	b.n	800150c <HAL_GPIO_Init+0x18>
  } 
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b006      	add	sp, #24
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	0008      	movs	r0, r1
 80017f6:	0011      	movs	r1, r2
 80017f8:	1cbb      	adds	r3, r7, #2
 80017fa:	1c02      	adds	r2, r0, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	1c7b      	adds	r3, r7, #1
 8001800:	1c0a      	adds	r2, r1, #0
 8001802:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	1c7b      	adds	r3, r7, #1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180c:	1cbb      	adds	r3, r7, #2
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	881a      	ldrh	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	0002      	movs	r2, r0
 8001830:	1dbb      	adds	r3, r7, #6
 8001832:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	1dba      	adds	r2, r7, #6
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	4013      	ands	r3, r2
 800183e:	d008      	beq.n	8001852 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001842:	1dba      	adds	r2, r7, #6
 8001844:	8812      	ldrh	r2, [r2, #0]
 8001846:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001848:	1dbb      	adds	r3, r7, #6
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	0018      	movs	r0, r3
 800184e:	f001 ffbb 	bl	80037c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <HAL_RCC_OscConfig+0x18>
 8001876:	e08d      	b.n	8001994 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001878:	4bc5      	ldr	r3, [pc, #788]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	220c      	movs	r2, #12
 800187e:	4013      	ands	r3, r2
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00e      	beq.n	80018a2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4bc2      	ldr	r3, [pc, #776]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	220c      	movs	r2, #12
 800188a:	4013      	ands	r3, r2
 800188c:	2b08      	cmp	r3, #8
 800188e:	d116      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
 8001890:	4bbf      	ldr	r3, [pc, #764]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	23c0      	movs	r3, #192	; 0xc0
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	401a      	ands	r2, r3
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	429a      	cmp	r2, r3
 80018a0:	d10d      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	4bbb      	ldr	r3, [pc, #748]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d100      	bne.n	80018b0 <HAL_RCC_OscConfig+0x50>
 80018ae:	e070      	b.n	8001992 <HAL_RCC_OscConfig+0x132>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d000      	beq.n	80018ba <HAL_RCC_OscConfig+0x5a>
 80018b8:	e06b      	b.n	8001992 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e329      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_OscConfig+0x76>
 80018c6:	4bb2      	ldr	r3, [pc, #712]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4bb1      	ldr	r3, [pc, #708]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	0249      	lsls	r1, r1, #9
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e02f      	b.n	8001936 <HAL_RCC_OscConfig+0xd6>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4bac      	ldr	r3, [pc, #688]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4bab      	ldr	r3, [pc, #684]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018e4:	49ab      	ldr	r1, [pc, #684]	; (8001b94 <HAL_RCC_OscConfig+0x334>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	4ba9      	ldr	r3, [pc, #676]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4ba8      	ldr	r3, [pc, #672]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018f0:	49a9      	ldr	r1, [pc, #676]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 80018f2:	400a      	ands	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e01e      	b.n	8001936 <HAL_RCC_OscConfig+0xd6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d10e      	bne.n	800191e <HAL_RCC_OscConfig+0xbe>
 8001900:	4ba3      	ldr	r3, [pc, #652]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4ba2      	ldr	r3, [pc, #648]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	02c9      	lsls	r1, r1, #11
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4ba0      	ldr	r3, [pc, #640]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b9f      	ldr	r3, [pc, #636]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0249      	lsls	r1, r1, #9
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0xd6>
 800191e:	4b9c      	ldr	r3, [pc, #624]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b9b      	ldr	r3, [pc, #620]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001924:	499b      	ldr	r1, [pc, #620]	; (8001b94 <HAL_RCC_OscConfig+0x334>)
 8001926:	400a      	ands	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	4b99      	ldr	r3, [pc, #612]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b98      	ldr	r3, [pc, #608]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001930:	4999      	ldr	r1, [pc, #612]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d014      	beq.n	8001968 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fcd7 	bl	80012f0 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fcd2 	bl	80012f0 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e2db      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b8d      	ldr	r3, [pc, #564]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	4013      	ands	r3, r2
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xe8>
 8001966:	e015      	b.n	8001994 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fcc2 	bl	80012f0 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fcbd 	bl	80012f0 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2c6      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001984:	4b82      	ldr	r3, [pc, #520]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x112>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x140>
 800199e:	e06c      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a0:	4b7b      	ldr	r3, [pc, #492]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	220c      	movs	r2, #12
 80019a6:	4013      	ands	r3, r2
 80019a8:	d00e      	beq.n	80019c8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019aa:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	220c      	movs	r2, #12
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11f      	bne.n	80019f6 <HAL_RCC_OscConfig+0x196>
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	401a      	ands	r2, r3
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c8:	4b71      	ldr	r3, [pc, #452]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e299      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	22f8      	movs	r2, #248	; 0xf8
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	00da      	lsls	r2, r3, #3
 80019ee:	4b68      	ldr	r3, [pc, #416]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f4:	e041      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fc71 	bl	80012f0 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc6c 	bl	80012f0 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e275      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	22f8      	movs	r2, #248	; 0xf8
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00da      	lsls	r2, r3, #3
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fc4c 	bl	80012f0 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fc47 	bl	80012f0 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e250      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f1      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2208      	movs	r2, #8
 8001a80:	4013      	ands	r3, r2
 8001a82:	d036      	beq.n	8001af2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d019      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fc2a 	bl	80012f0 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fc25 	bl	80012f0 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e22e      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f1      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x242>
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fc10 	bl	80012f0 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fc0b 	bl	80012f0 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e214      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f1      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2204      	movs	r2, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x29e>
 8001afc:	e0b6      	b.n	8001c6c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2317      	movs	r3, #23
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	055b      	lsls	r3, r3, #21
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d111      	bne.n	8001b36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0549      	lsls	r1, r1, #21
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2e:	2317      	movs	r3, #23
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_OscConfig+0x33c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d11a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_RCC_OscConfig+0x33c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_RCC_OscConfig+0x33c>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0049      	lsls	r1, r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fbce 	bl	80012f0 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff fbc9 	bl	80012f0 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1d2      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x33c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x340>
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001b82:	6a1a      	ldr	r2, [r3, #32]
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	621a      	str	r2, [r3, #32]
 8001b8c:	e036      	b.n	8001bfc <HAL_RCC_OscConfig+0x39c>
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40021000 	.word	0x40021000
 8001b94:	fffeffff 	.word	0xfffeffff
 8001b98:	fffbffff 	.word	0xfffbffff
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x362>
 8001ba8:	4bca      	ldr	r3, [pc, #808]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001baa:	6a1a      	ldr	r2, [r3, #32]
 8001bac:	4bc9      	ldr	r3, [pc, #804]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	621a      	str	r2, [r3, #32]
 8001bb4:	4bc7      	ldr	r3, [pc, #796]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4bc6      	ldr	r3, [pc, #792]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bba:	2104      	movs	r1, #4
 8001bbc:	438a      	bics	r2, r1
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x39c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x384>
 8001bca:	4bc2      	ldr	r3, [pc, #776]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bcc:	6a1a      	ldr	r2, [r3, #32]
 8001bce:	4bc1      	ldr	r3, [pc, #772]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	621a      	str	r2, [r3, #32]
 8001bd6:	4bbf      	ldr	r3, [pc, #764]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	4bbe      	ldr	r3, [pc, #760]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bdc:	2101      	movs	r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	621a      	str	r2, [r3, #32]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x39c>
 8001be4:	4bbb      	ldr	r3, [pc, #748]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001be6:	6a1a      	ldr	r2, [r3, #32]
 8001be8:	4bba      	ldr	r3, [pc, #744]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	621a      	str	r2, [r3, #32]
 8001bf0:	4bb8      	ldr	r3, [pc, #736]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	4bb7      	ldr	r3, [pc, #732]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d014      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff fb74 	bl	80012f0 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fb6f 	bl	80012f0 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4aaf      	ldr	r2, [pc, #700]	; (8001ed8 <HAL_RCC_OscConfig+0x678>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e177      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	4bac      	ldr	r3, [pc, #688]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3ae>
 8001c2c:	e013      	b.n	8001c56 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb5f 	bl	80012f0 <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	e009      	b.n	8001c4c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff fb5a 	bl	80012f0 <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4aa5      	ldr	r2, [pc, #660]	; (8001ed8 <HAL_RCC_OscConfig+0x678>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e162      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4ba1      	ldr	r3, [pc, #644]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c56:	2317      	movs	r3, #23
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b9c      	ldr	r3, [pc, #624]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	4b9b      	ldr	r3, [pc, #620]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c66:	499d      	ldr	r1, [pc, #628]	; (8001edc <HAL_RCC_OscConfig+0x67c>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2210      	movs	r2, #16
 8001c72:	4013      	ands	r3, r2
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d12a      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c7e:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c82:	4b94      	ldr	r3, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c84:	2104      	movs	r1, #4
 8001c86:	430a      	orrs	r2, r1
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c8a:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8e:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fb2b 	bl	80012f0 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ca0:	f7ff fb26 	bl	80012f0 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e12f      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cb2:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0f1      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cbc:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	22f8      	movs	r2, #248	; 0xf8
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	00da      	lsls	r2, r3, #3
 8001ccc:	4b81      	ldr	r3, [pc, #516]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd2:	e034      	b.n	8001d3e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	3305      	adds	r3, #5
 8001cda:	d111      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cdc:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	22f8      	movs	r2, #248	; 0xf8
 8001cee:	4393      	bics	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	00da      	lsls	r2, r3, #3
 8001cf8:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfe:	e01e      	b.n	8001d3e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d00:	4b74      	ldr	r3, [pc, #464]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d04:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d06:	2104      	movs	r1, #4
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d0c:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d10:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	438a      	bics	r2, r1
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff faea 	bl	80012f0 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d22:	f7ff fae5 	bl	80012f0 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0ee      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f1      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2220      	movs	r2, #32
 8001d44:	4013      	ands	r3, r2
 8001d46:	d05c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d48:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	220c      	movs	r2, #12
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d00e      	beq.n	8001d72 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d54:	4b5f      	ldr	r3, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	220c      	movs	r2, #12
 8001d5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d114      	bne.n	8001d8a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001d60:	4b5c      	ldr	r3, [pc, #368]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	23c0      	movs	r3, #192	; 0xc0
 8001d66:	025b      	lsls	r3, r3, #9
 8001d68:	401a      	ands	r2, r3
 8001d6a:	23c0      	movs	r3, #192	; 0xc0
 8001d6c:	025b      	lsls	r3, r3, #9
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d10b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d72:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d040      	beq.n	8001e00 <HAL_RCC_OscConfig+0x5a0>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d03c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0c3      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01b      	beq.n	8001dca <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d96:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	0249      	lsls	r1, r1, #9
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff faa6 	bl	80012f0 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001daa:	f7ff faa1 	bl	80012f0 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0aa      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x54a>
 8001dc8:	e01b      	b.n	8001e02 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001dca:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001dd0:	4943      	ldr	r1, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fa8b 	bl	80012f0 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001de0:	f7ff fa86 	bl	80012f0 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e08f      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	025b      	lsls	r3, r3, #9
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x580>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001e00:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d100      	bne.n	8001e0c <HAL_RCC_OscConfig+0x5ac>
 8001e0a:	e081      	b.n	8001f10 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	220c      	movs	r2, #12
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5ba>
 8001e18:	e078      	b.n	8001f0c <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d14c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e28:	492e      	ldr	r1, [pc, #184]	; (8001ee4 <HAL_RCC_OscConfig+0x684>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fa5f 	bl	80012f0 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa5a 	bl	80012f0 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e063      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	049b      	lsls	r3, r3, #18
 8001e52:	4013      	ands	r3, r2
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_RCC_OscConfig+0x688>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0449      	lsls	r1, r1, #17
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fa2d 	bl	80012f0 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fa28 	bl	80012f0 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e031      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	049b      	lsls	r3, r3, #18
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x63c>
 8001eba:	e029      	b.n	8001f10 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_RCC_OscConfig+0x674>)
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <HAL_RCC_OscConfig+0x684>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fa12 	bl	80012f0 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x69e>
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	00001388 	.word	0x00001388
 8001edc:	efffffff 	.word	0xefffffff
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	feffffff 	.word	0xfeffffff
 8001ee8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fa00 	bl	80012f0 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e009      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_RCC_OscConfig+0x6bc>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	049b      	lsls	r3, r3, #18
 8001f06:	4013      	ands	r3, r2
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x68c>
 8001f0a:	e001      	b.n	8001f10 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b006      	add	sp, #24
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000

08001f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f2e:	4b7b      	ldr	r3, [pc, #492]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d911      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3c:	4b77      	ldr	r3, [pc, #476]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	4b75      	ldr	r3, [pc, #468]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0d8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	22f0      	movs	r2, #240	; 0xf0
 8001f70:	4393      	bics	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4b69      	ldr	r3, [pc, #420]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x6a>
 8001f88:	e089      	b.n	800209e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d120      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0b7      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b5d      	ldr	r3, [pc, #372]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	049b      	lsls	r3, r3, #18
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d114      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0ab      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fc2:	4b57      	ldr	r3, [pc, #348]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	025b      	lsls	r3, r3, #9
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e09f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e098      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f97c 	bl	80012f0 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d111      	bne.n	8002028 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002004:	e009      	b.n	800201a <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7ff f973 	bl	80012f0 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	4a44      	ldr	r2, [pc, #272]	; (8002124 <HAL_RCC_ClockConfig+0x204>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e07b      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	220c      	movs	r2, #12
 8002020:	4013      	ands	r3, r2
 8002022:	2b04      	cmp	r3, #4
 8002024:	d1ef      	bne.n	8002006 <HAL_RCC_ClockConfig+0xe6>
 8002026:	e03a      	b.n	800209e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d111      	bne.n	8002054 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	e009      	b.n	8002046 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7ff f95d 	bl	80012f0 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4a39      	ldr	r2, [pc, #228]	; (8002124 <HAL_RCC_ClockConfig+0x204>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e065      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	220c      	movs	r2, #12
 800204c:	4013      	ands	r3, r2
 800204e:	2b08      	cmp	r3, #8
 8002050:	d1ef      	bne.n	8002032 <HAL_RCC_ClockConfig+0x112>
 8002052:	e024      	b.n	800209e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d11b      	bne.n	8002094 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800205c:	e009      	b.n	8002072 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205e:	f7ff f947 	bl	80012f0 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_RCC_ClockConfig+0x204>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e04f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	220c      	movs	r2, #12
 8002078:	4013      	ands	r3, r2
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d1ef      	bne.n	800205e <HAL_RCC_ClockConfig+0x13e>
 800207e:	e00e      	b.n	800209e <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff f936 	bl	80012f0 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	4a26      	ldr	r2, [pc, #152]	; (8002124 <HAL_RCC_ClockConfig+0x204>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e03e      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	220c      	movs	r2, #12
 800209a:	4013      	ands	r3, r2
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d211      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_ClockConfig+0x1fc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e020      	b.n	8002112 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2204      	movs	r2, #4
 80020d6:	4013      	ands	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x208>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	0001      	movs	r1, r0
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	220f      	movs	r2, #15
 80020fc:	4013      	ands	r3, r2
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x20c>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	000a      	movs	r2, r1
 8002104:	40da      	lsrs	r2, r3
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x210>)
 8002108:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff f8c8 	bl	80012a0 <HAL_InitTick>
  
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	00001388 	.word	0x00001388
 8002128:	fffff8ff 	.word	0xfffff8ff
 800212c:	08006c40 	.word	0x08006c40
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b08f      	sub	sp, #60	; 0x3c
 8002138:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800213a:	2314      	movs	r3, #20
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	4a37      	ldr	r2, [pc, #220]	; (800221c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002140:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002142:	c313      	stmia	r3!, {r0, r1, r4}
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4a35      	ldr	r2, [pc, #212]	; (8002220 <HAL_RCC_GetSysClockFreq+0xec>)
 800214c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800214e:	c313      	stmia	r3!, {r0, r1, r4}
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002158:	2300      	movs	r3, #0
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
 800215c:	2300      	movs	r3, #0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf0>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	220c      	movs	r2, #12
 8002172:	4013      	ands	r3, r2
 8002174:	2b08      	cmp	r3, #8
 8002176:	d006      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x52>
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d043      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0xd0>
 800217c:	2b04      	cmp	r3, #4
 800217e:	d144      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002184:	e044      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	220f      	movs	r2, #15
 800218c:	4013      	ands	r3, r2
 800218e:	2214      	movs	r2, #20
 8002190:	18ba      	adds	r2, r7, r2
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	220f      	movs	r2, #15
 800219c:	4013      	ands	r3, r2
 800219e:	1d3a      	adds	r2, r7, #4
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a6:	23c0      	movs	r3, #192	; 0xc0
 80021a8:	025b      	lsls	r3, r3, #9
 80021aa:	401a      	ands	r2, r3
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d109      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80021b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b6:	481c      	ldr	r0, [pc, #112]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021b8:	f7fd ffa6 	bl	8000108 <__udivsi3>
 80021bc:	0003      	movs	r3, r0
 80021be:	001a      	movs	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	4353      	muls	r3, r2
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
 80021c6:	e01a      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80021c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	401a      	ands	r2, r3
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80021d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021da:	4814      	ldr	r0, [pc, #80]	; (800222c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021dc:	f7fd ff94 	bl	8000108 <__udivsi3>
 80021e0:	0003      	movs	r3, r0
 80021e2:	001a      	movs	r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	4353      	muls	r3, r2
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ea:	e008      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80021ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ee:	480e      	ldr	r0, [pc, #56]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021f0:	f7fd ff8a 	bl	8000108 <__udivsi3>
 80021f4:	0003      	movs	r3, r0
 80021f6:	001a      	movs	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	4353      	muls	r3, r2
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002202:	e005      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002208:	e002      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_RCC_GetSysClockFreq+0xf4>)
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800220e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b00f      	add	sp, #60	; 0x3c
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	080064dc 	.word	0x080064dc
 8002220:	080064ec 	.word	0x080064ec
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	02dc6c00 	.word	0x02dc6c00

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <HAL_RCC_GetHCLKFreq+0x10>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20000000 	.word	0x20000000

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	4013      	ands	r3, r2
 800225e:	d100      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002260:	e08f      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2317      	movs	r3, #23
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	055b      	lsls	r3, r3, #21
 8002272:	4013      	ands	r3, r2
 8002274:	d111      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	0549      	lsls	r1, r1, #21
 8002280:	430a      	orrs	r2, r1
 8002282:	61da      	str	r2, [r3, #28]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2317      	movs	r3, #23
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b64      	ldr	r3, [pc, #400]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d11a      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b61      	ldr	r3, [pc, #388]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b60      	ldr	r3, [pc, #384]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	0049      	lsls	r1, r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b4:	f7ff f81c 	bl	80012f0 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7ff f817 	bl	80012f0 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	; 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0a6      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	d0f0      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022dc:	4b52      	ldr	r3, [pc, #328]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d034      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	23c0      	movs	r3, #192	; 0xc0
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d02c      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002304:	4013      	ands	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	430a      	orrs	r2, r1
 8002314:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002318:	6a1a      	ldr	r2, [r3, #32]
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800231c:	4945      	ldr	r1, [pc, #276]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800231e:	400a      	ands	r2, r1
 8002320:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe ffde 	bl	80012f0 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	e009      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe ffd9 	bl	80012f0 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e067      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d0f0      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a34      	ldr	r2, [pc, #208]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800235e:	4013      	ands	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002368:	430a      	orrs	r2, r1
 800236a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800236c:	2317      	movs	r3, #23
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800237c:	492f      	ldr	r1, [pc, #188]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800237e:	400a      	ands	r2, r1
 8002380:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2201      	movs	r2, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	2203      	movs	r2, #3
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800239c:	430a      	orrs	r2, r1
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2220      	movs	r2, #32
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	2210      	movs	r2, #16
 80023ce:	4393      	bics	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	4393      	bics	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4013      	ands	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002418:	430a      	orrs	r2, r1
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b006      	add	sp, #24
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	40021000 	.word	0x40021000
 800242c:	40007000 	.word	0x40007000
 8002430:	fffffcff 	.word	0xfffffcff
 8002434:	fffeffff 	.word	0xfffeffff
 8002438:	00001388 	.word	0x00001388
 800243c:	efffffff 	.word	0xefffffff
 8002440:	fffcffff 	.word	0xfffcffff

08002444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e08a      	b.n	800256c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	225d      	movs	r2, #93	; 0x5d
 8002460:	5c9b      	ldrb	r3, [r3, r2]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	225c      	movs	r2, #92	; 0x5c
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f001 f8ce 	bl	8003614 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	225d      	movs	r2, #93	; 0x5d
 800247c:	2102      	movs	r1, #2
 800247e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	438a      	bics	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	23e0      	movs	r3, #224	; 0xe0
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	429a      	cmp	r2, r3
 800249a:	d902      	bls.n	80024a2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e002      	b.n	80024a8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	015b      	lsls	r3, r3, #5
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	23f0      	movs	r3, #240	; 0xf0
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d008      	beq.n	80024c6 <HAL_SPI_Init+0x82>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	23e0      	movs	r3, #224	; 0xe0
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	429a      	cmp	r2, r3
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	23e0      	movs	r3, #224	; 0xe0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d903      	bls.n	80024e2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
 80024e0:	e002      	b.n	80024e8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	400b      	ands	r3, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	431a      	orrs	r2, r3
 8002516:	0011      	movs	r1, r2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	2204      	movs	r2, #4
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	431a      	orrs	r2, r3
 8002540:	0011      	movs	r1, r2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4907      	ldr	r1, [pc, #28]	; (8002574 <HAL_SPI_Init+0x130>)
 8002558:	400a      	ands	r2, r1
 800255a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	225d      	movs	r2, #93	; 0x5d
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bd80      	pop	{r7, pc}
 8002574:	fffff7ff 	.word	0xfffff7ff

08002578 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	1dbb      	adds	r3, r7, #6
 8002586:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800258c:	231f      	movs	r3, #31
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	225c      	movs	r2, #92	; 0x5c
 8002598:	5c9b      	ldrb	r3, [r3, r2]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_SPI_Transmit+0x2a>
 800259e:	2302      	movs	r3, #2
 80025a0:	e14f      	b.n	8002842 <HAL_SPI_Transmit+0x2ca>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	225c      	movs	r2, #92	; 0x5c
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025aa:	f7fe fea1 	bl	80012f0 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	225d      	movs	r2, #93	; 0x5d
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d004      	beq.n	80025c8 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80025be:	231f      	movs	r3, #31
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80025c6:	e131      	b.n	800282c <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_SPI_Transmit+0x5e>
 80025ce:	1dbb      	adds	r3, r7, #6
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 80025d6:	231f      	movs	r3, #31
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80025de:	e125      	b.n	800282c <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	225d      	movs	r2, #93	; 0x5d
 80025e4:	2103      	movs	r1, #3
 80025e6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1dba      	adds	r2, r7, #6
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1dba      	adds	r2, r7, #6
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2244      	movs	r2, #68	; 0x44
 800260e:	2100      	movs	r1, #0
 8002610:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2246      	movs	r2, #70	; 0x46
 8002616:	2100      	movs	r1, #0
 8002618:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	429a      	cmp	r2, r3
 8002630:	d108      	bne.n	8002644 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	01c9      	lsls	r1, r1, #7
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	4013      	ands	r3, r2
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d007      	beq.n	8002662 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2140      	movs	r1, #64	; 0x40
 800265e:	430a      	orrs	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	23e0      	movs	r3, #224	; 0xe0
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	429a      	cmp	r2, r3
 800266c:	d948      	bls.n	8002700 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_SPI_Transmit+0x108>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d139      	bne.n	80026f4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3302      	adds	r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800269e:	e029      	b.n	80026f4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d10f      	bne.n	80026ce <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3302      	adds	r3, #2
 80026bc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026cc:	e012      	b.n	80026f4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_SPI_Transmit+0x172>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	d00c      	beq.n	80026f4 <HAL_SPI_Transmit+0x17c>
 80026da:	f7fe fe09 	bl	80012f0 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d804      	bhi.n	80026f4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80026ea:	231f      	movs	r3, #31
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80026f2:	e09b      	b.n	800282c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1d0      	bne.n	80026a0 <HAL_SPI_Transmit+0x128>
 80026fe:	e071      	b.n	80027e4 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_SPI_Transmit+0x19a>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d163      	bne.n	80027da <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d90f      	bls.n	800273c <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3302      	adds	r3, #2
 800272a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b02      	subs	r3, #2
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800273a:	e04e      	b.n	80027da <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	320c      	adds	r2, #12
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800275a:	e03e      	b.n	80027da <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d124      	bne.n	80027b4 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d90f      	bls.n	8002794 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	881a      	ldrh	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3302      	adds	r3, #2
 8002782:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b02      	subs	r3, #2
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002792:	e022      	b.n	80027da <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	60ba      	str	r2, [r7, #8]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	320c      	adds	r2, #12
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027b2:	e012      	b.n	80027da <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_SPI_Transmit+0x258>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	d00c      	beq.n	80027da <HAL_SPI_Transmit+0x262>
 80027c0:	f7fe fd96 	bl	80012f0 <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d804      	bhi.n	80027da <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80027d0:	231f      	movs	r3, #31
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80027d8:	e028      	b.n	800282c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1bb      	bne.n	800275c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f916 	bl	8002a1c <SPI_EndRxTxTransaction>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d002      	beq.n	80027fa <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8002820:	231f      	movs	r3, #31
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e000      	b.n	800282c <HAL_SPI_Transmit+0x2b4>
  }

error:
 800282a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	225d      	movs	r2, #93	; 0x5d
 8002830:	2101      	movs	r1, #1
 8002832:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	225c      	movs	r2, #92	; 0x5c
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800283c:	231f      	movs	r3, #31
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	781b      	ldrb	r3, [r3, #0]
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b008      	add	sp, #32
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800285a:	e050      	b.n	80028fe <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	d04d      	beq.n	80028fe <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002868:	f7fe fd42 	bl	80012f0 <HAL_GetTick>
 800286c:	0002      	movs	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d842      	bhi.n	80028fe <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	21e0      	movs	r1, #224	; 0xe0
 8002884:	438a      	bics	r2, r1
 8002886:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	2382      	movs	r3, #130	; 0x82
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	429a      	cmp	r2, r3
 8002892:	d113      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x70>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	429a      	cmp	r2, r3
 800289e:	d005      	beq.n	80028ac <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2140      	movs	r1, #64	; 0x40
 80028b8:	438a      	bics	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d110      	bne.n	80028ea <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4914      	ldr	r1, [pc, #80]	; (8002924 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0189      	lsls	r1, r1, #6
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	225d      	movs	r2, #93	; 0x5d
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	225c      	movs	r2, #92	; 0x5c
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e00e      	b.n	800291c <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	4013      	ands	r3, r2
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	d101      	bne.n	8002912 <SPI_WaitFlagStateUntilTimeout+0xc6>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002912:	2300      	movs	r3, #0
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4293      	cmp	r3, r2
 8002918:	d1a0      	bne.n	800285c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	ffffdfff 	.word	0xffffdfff

08002928 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002936:	e062      	b.n	80029fe <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	23c0      	movs	r3, #192	; 0xc0
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	429a      	cmp	r2, r3
 8002940:	d10c      	bne.n	800295c <SPI_WaitFifoStateUntilTimeout+0x34>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	2117      	movs	r1, #23
 8002954:	187b      	adds	r3, r7, r1
 8002956:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002958:	187b      	adds	r3, r7, r1
 800295a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	d04d      	beq.n	80029fe <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <SPI_WaitFifoStateUntilTimeout+0x50>
 8002968:	f7fe fcc2 	bl	80012f0 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d842      	bhi.n	80029fe <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	21e0      	movs	r1, #224	; 0xe0
 8002984:	438a      	bics	r2, r1
 8002986:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	2382      	movs	r3, #130	; 0x82
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	429a      	cmp	r2, r3
 8002992:	d113      	bne.n	80029bc <SPI_WaitFifoStateUntilTimeout+0x94>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	429a      	cmp	r2, r3
 800299e:	d005      	beq.n	80029ac <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	438a      	bics	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	019b      	lsls	r3, r3, #6
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d110      	bne.n	80029ea <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4911      	ldr	r1, [pc, #68]	; (8002a18 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	0189      	lsls	r1, r1, #6
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	225d      	movs	r2, #93	; 0x5d
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	225c      	movs	r2, #92	; 0x5c
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e008      	b.n	8002a10 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d194      	bne.n	8002938 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b006      	add	sp, #24
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	ffffdfff 	.word	0xffffdfff

08002a1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	23c0      	movs	r3, #192	; 0xc0
 8002a2c:	0159      	lsls	r1, r3, #5
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	0013      	movs	r3, r2
 8002a36:	2200      	movs	r2, #0
 8002a38:	f7ff ff76 	bl	8002928 <SPI_WaitFifoStateUntilTimeout>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d007      	beq.n	8002a50 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	2220      	movs	r2, #32
 8002a46:	431a      	orrs	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e027      	b.n	8002aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	0013      	movs	r3, r2
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	f7ff fef5 	bl	800284c <SPI_WaitFlagStateUntilTimeout>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d007      	beq.n	8002a76 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e014      	b.n	8002aa0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	23c0      	movs	r3, #192	; 0xc0
 8002a7a:	00d9      	lsls	r1, r3, #3
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	0013      	movs	r3, r2
 8002a84:	2200      	movs	r2, #0
 8002a86:	f7ff ff4f 	bl	8002928 <SPI_WaitFifoStateUntilTimeout>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d007      	beq.n	8002a9e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	2220      	movs	r2, #32
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e000      	b.n	8002aa0 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01e      	b.n	8002af8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	223d      	movs	r2, #61	; 0x3d
 8002abe:	5c9b      	ldrb	r3, [r3, r2]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d107      	bne.n	8002ad6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223c      	movs	r2, #60	; 0x3c
 8002aca:	2100      	movs	r1, #0
 8002acc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fe15 	bl	8003700 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223d      	movs	r2, #61	; 0x3d
 8002ada:	2102      	movs	r1, #2
 8002adc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f000 f809 	bl	8002b00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223d      	movs	r2, #61	; 0x3d
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <TIM_Base_SetConfig+0xe8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d008      	beq.n	8002b2e <TIM_Base_SetConfig+0x2e>
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0x2e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a30      	ldr	r2, [pc, #192]	; (8002bec <TIM_Base_SetConfig+0xec>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2270      	movs	r2, #112	; 0x70
 8002b32:	4393      	bics	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <TIM_Base_SetConfig+0xe8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <TIM_Base_SetConfig+0x7a>
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	05db      	lsls	r3, r3, #23
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d013      	beq.n	8002b7a <TIM_Base_SetConfig+0x7a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a25      	ldr	r2, [pc, #148]	; (8002bec <TIM_Base_SetConfig+0xec>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00f      	beq.n	8002b7a <TIM_Base_SetConfig+0x7a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <TIM_Base_SetConfig+0xf0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0x7a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <TIM_Base_SetConfig+0xf4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0x7a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <TIM_Base_SetConfig+0xf8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x7a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <TIM_Base_SetConfig+0xfc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4a20      	ldr	r2, [pc, #128]	; (8002c00 <TIM_Base_SetConfig+0x100>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	4393      	bics	r3, r2
 8002b92:	001a      	movs	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <TIM_Base_SetConfig+0xe8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00b      	beq.n	8002bd2 <TIM_Base_SetConfig+0xd2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	; (8002bf4 <TIM_Base_SetConfig+0xf4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d007      	beq.n	8002bd2 <TIM_Base_SetConfig+0xd2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <TIM_Base_SetConfig+0xf8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0xd2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <TIM_Base_SetConfig+0xfc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d103      	bne.n	8002bda <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	615a      	str	r2, [r3, #20]
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b004      	add	sp, #16
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40002000 	.word	0x40002000
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800
 8002c00:	fffffcff 	.word	0xfffffcff

08002c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223c      	movs	r2, #60	; 0x3c
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e032      	b.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223c      	movs	r2, #60	; 0x3c
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	223d      	movs	r2, #61	; 0x3d
 8002c28:	2102      	movs	r1, #2
 8002c2a:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2170      	movs	r1, #112	; 0x70
 8002c38:	438a      	bics	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223d      	movs	r2, #61	; 0x3d
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223c      	movs	r2, #60	; 0x3c
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b002      	add	sp, #8
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b0f7      	sub	sp, #476	; 0x1dc
 8002c90:	af08      	add	r7, sp, #32
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c92:	f7fe faf1 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c96:	f000 faa5 	bl	80031e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c9a:	f000 fbab 	bl	80033f4 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8002c9e:	f000 fb01 	bl	80032a4 <_ZL12MX_SPI2_Initv>
  MX_TIM6_Init();
 8002ca2:	f000 fb57 	bl	8003354 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  TFT_GFX tftDisplay{hspi2.Instance};
 8002ca6:	4bd7      	ldr	r3, [pc, #860]	; (8003004 <main+0x378>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	24aa      	movs	r4, #170	; 0xaa
 8002cac:	0064      	lsls	r4, r4, #1
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f001 f98f 	bl	8003fd6 <_ZN7TFT_GFXC1EP11SPI_TypeDef>
  const uint16_t backgroundColor = ILI9341_BLACK;
 8002cb8:	23d9      	movs	r3, #217	; 0xd9
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
  const uint16_t fontColor = ILI9341_DARK_ORANGE;
 8002cc2:	23d8      	movs	r3, #216	; 0xd8
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	4acf      	ldr	r2, [pc, #828]	; (8003008 <main+0x37c>)
 8002cca:	801a      	strh	r2, [r3, #0]
  const uint16_t lineColor = ILI9341_DARK_ORANGE;
 8002ccc:	23d7      	movs	r3, #215	; 0xd7
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	4acd      	ldr	r2, [pc, #820]	; (8003008 <main+0x37c>)
 8002cd4:	801a      	strh	r2, [r3, #0]
  const uint16_t lineThickness = 5;
 8002cd6:	23d6      	movs	r3, #214	; 0xd6
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	2205      	movs	r2, #5
 8002cde:	801a      	strh	r2, [r3, #0]
  const uint8_t chosenStatesFontSize = 2;
 8002ce0:	23ac      	movs	r3, #172	; 0xac
 8002ce2:	33ff      	adds	r3, #255	; 0xff
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	701a      	strb	r2, [r3, #0]
  const uint8_t stateSelectorFontSize = 3;
 8002cea:	23d5      	movs	r3, #213	; 0xd5
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	701a      	strb	r2, [r3, #0]
  tftDisplay.setRotation(0);
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f001 ffa2 	bl	8004c42 <_ZN7TFT_GFX11setRotationEh>
  //Set background to correct color and add outline
  GUI_API::drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
 8002cfe:	49c3      	ldr	r1, [pc, #780]	; (800300c <main+0x380>)
 8002d00:	4ac2      	ldr	r2, [pc, #776]	; (800300c <main+0x380>)
 8002d02:	1938      	adds	r0, r7, r4
 8002d04:	2305      	movs	r3, #5
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	000b      	movs	r3, r1
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	f002 fb0a 	bl	8005324 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>
  //Create and set all the text boxes
  TFT_TEXT_BOX instructionBox{&tftDisplay,backgroundColor,lineThickness + 8, lineThickness + 8, (int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	0018      	movs	r0, r3
 8002d14:	f001 ffe7 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	3b0d      	subs	r3, #13
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	b21b      	sxth	r3, r3
 8002d20:	0025      	movs	r5, r4
 8002d22:	1939      	adds	r1, r7, r4
 8002d24:	26a0      	movs	r6, #160	; 0xa0
 8002d26:	0076      	lsls	r6, r6, #1
 8002d28:	19b8      	adds	r0, r7, r6
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	9202      	str	r2, [sp, #8]
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	230d      	movs	r3, #13
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	230d      	movs	r3, #13
 8002d36:	2200      	movs	r2, #0
 8002d38:	f002 fe25 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
  uint16_t bottomInstructionBox = instructionBox.write("*Hold OK button for 3 seconds to confirm selection.", fontColor, 1);
 8002d3c:	23d4      	movs	r3, #212	; 0xd4
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	18fc      	adds	r4, r7, r3
 8002d42:	4ab2      	ldr	r2, [pc, #712]	; (800300c <main+0x380>)
 8002d44:	49b2      	ldr	r1, [pc, #712]	; (8003010 <main+0x384>)
 8002d46:	19b8      	adds	r0, r7, r6
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f002 fe90 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	8023      	strh	r3, [r4, #0]
  TFT_TEXT_BOX mainTitle{&tftDisplay,backgroundColor,lineThickness + 8, (uint16_t)(bottomInstructionBox + 10),(int16_t)(tftDisplay.width() - lineThickness - 8), false};
 8002d52:	23d4      	movs	r3, #212	; 0xd4
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	330a      	adds	r3, #10
 8002d5c:	b29c      	uxth	r4, r3
 8002d5e:	197b      	adds	r3, r7, r5
 8002d60:	0018      	movs	r0, r3
 8002d62:	f001 ffc0 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8002d66:	0003      	movs	r3, r0
 8002d68:	3b0d      	subs	r3, #13
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	1979      	adds	r1, r7, r5
 8002d70:	2696      	movs	r6, #150	; 0x96
 8002d72:	0076      	lsls	r6, r6, #1
 8002d74:	19b8      	adds	r0, r7, r6
 8002d76:	2200      	movs	r2, #0
 8002d78:	9202      	str	r2, [sp, #8]
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	9400      	str	r4, [sp, #0]
 8002d7e:	230d      	movs	r3, #13
 8002d80:	2200      	movs	r2, #0
 8002d82:	f002 fe00 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
  uint16_t bottomMainTitle = mainTitle.write("State Selection: ", fontColor, 2);
 8002d86:	23d3      	movs	r3, #211	; 0xd3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	18fc      	adds	r4, r7, r3
 8002d8c:	4a9f      	ldr	r2, [pc, #636]	; (800300c <main+0x380>)
 8002d8e:	49a1      	ldr	r1, [pc, #644]	; (8003014 <main+0x388>)
 8002d90:	19b8      	adds	r0, r7, r6
 8002d92:	2302      	movs	r3, #2
 8002d94:	f002 fe6b 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	8023      	strh	r3, [r4, #0]
  TFT_TEXT_BOX stateSelector{&tftDisplay, backgroundColor, lineThickness, (uint16_t)(bottomMainTitle + 25),(int16_t)(tftDisplay.width() - lineThickness), true};
 8002d9c:	23d3      	movs	r3, #211	; 0xd3
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	3319      	adds	r3, #25
 8002da6:	b29c      	uxth	r4, r3
 8002da8:	197b      	adds	r3, r7, r5
 8002daa:	0018      	movs	r0, r3
 8002dac:	f001 ff9b 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8002db0:	0003      	movs	r3, r0
 8002db2:	3b05      	subs	r3, #5
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	1979      	adds	r1, r7, r5
 8002dba:	228c      	movs	r2, #140	; 0x8c
 8002dbc:	0052      	lsls	r2, r2, #1
 8002dbe:	18b8      	adds	r0, r7, r2
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	9202      	str	r2, [sp, #8]
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	9400      	str	r4, [sp, #0]
 8002dc8:	2305      	movs	r3, #5
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f002 fddb 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
  //Generate the chosenStates text boxes
  CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES];
 8002dd0:	2378      	movs	r3, #120	; 0x78
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2404      	movs	r4, #4
 8002dd6:	001d      	movs	r5, r3
 8002dd8:	2c00      	cmp	r4, #0
 8002dda:	db05      	blt.n	8002de8 <main+0x15c>
 8002ddc:	0028      	movs	r0, r5
 8002dde:	f002 fd83 	bl	80058e8 <_ZN21CHOSEN_STATE_TEXT_BOXC1Ev>
 8002de2:	3520      	adds	r5, #32
 8002de4:	3c01      	subs	r4, #1
 8002de6:	e7f7      	b.n	8002dd8 <main+0x14c>
  uint8_t statesSelected = 0;
 8002de8:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <main+0x38c>)
 8002dea:	22dc      	movs	r2, #220	; 0xdc
 8002dec:	0052      	lsls	r2, r2, #1
 8002dee:	4694      	mov	ip, r2
 8002df0:	44bc      	add	ip, r7
 8002df2:	4463      	add	r3, ip
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < NUM_BOXES; i++)
 8002df8:	23b8      	movs	r3, #184	; 0xb8
 8002dfa:	33ff      	adds	r3, #255	; 0xff
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	23b8      	movs	r3, #184	; 0xb8
 8002e04:	33ff      	adds	r3, #255	; 0xff
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d900      	bls.n	8002e10 <main+0x184>
 8002e0e:	e080      	b.n	8002f12 <main+0x286>
  {
	  uint16_t yPos = tftDisplay.height()/2.0f + (float)(2*i+1)*tftDisplay.height()/(2.0f* NUM_BOXES * 2.0f) - (chosenStatesFontSize * 8.0f)/2;
 8002e10:	25aa      	movs	r5, #170	; 0xaa
 8002e12:	006d      	lsls	r5, r5, #1
 8002e14:	197b      	adds	r3, r7, r5
 8002e16:	0018      	movs	r0, r3
 8002e18:	f001 ff6f 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fe f8c2 	bl	8000fa8 <__aeabi_i2f>
 8002e24:	1c03      	adds	r3, r0, #0
 8002e26:	2180      	movs	r1, #128	; 0x80
 8002e28:	05c9      	lsls	r1, r1, #23
 8002e2a:	1c18      	adds	r0, r3, #0
 8002e2c:	f7fd fc94 	bl	8000758 <__aeabi_fdiv>
 8002e30:	1c03      	adds	r3, r0, #0
 8002e32:	1c1c      	adds	r4, r3, #0
 8002e34:	26b8      	movs	r6, #184	; 0xb8
 8002e36:	36ff      	adds	r6, #255	; 0xff
 8002e38:	19bb      	adds	r3, r7, r6
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	3301      	adds	r3, #1
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fe f8b1 	bl	8000fa8 <__aeabi_i2f>
 8002e46:	1c05      	adds	r5, r0, #0
 8002e48:	23aa      	movs	r3, #170	; 0xaa
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f001 ff53 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 8002e54:	0003      	movs	r3, r0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fe f8a6 	bl	8000fa8 <__aeabi_i2f>
 8002e5c:	1c03      	adds	r3, r0, #0
 8002e5e:	1c19      	adds	r1, r3, #0
 8002e60:	1c28      	adds	r0, r5, #0
 8002e62:	f7fd fd8b 	bl	800097c <__aeabi_fmul>
 8002e66:	1c03      	adds	r3, r0, #0
 8002e68:	496c      	ldr	r1, [pc, #432]	; (800301c <main+0x390>)
 8002e6a:	1c18      	adds	r0, r3, #0
 8002e6c:	f7fd fc74 	bl	8000758 <__aeabi_fdiv>
 8002e70:	1c03      	adds	r3, r0, #0
 8002e72:	1c19      	adds	r1, r3, #0
 8002e74:	1c20      	adds	r0, r4, #0
 8002e76:	f7fd fad5 	bl	8000424 <__aeabi_fadd>
 8002e7a:	1c03      	adds	r3, r0, #0
 8002e7c:	2182      	movs	r1, #130	; 0x82
 8002e7e:	05c9      	lsls	r1, r1, #23
 8002e80:	1c18      	adds	r0, r3, #0
 8002e82:	f7fd fead 	bl	8000be0 <__aeabi_fsub>
 8002e86:	1c03      	adds	r3, r0, #0
 8002e88:	22d2      	movs	r2, #210	; 0xd2
 8002e8a:	0052      	lsls	r2, r2, #1
 8002e8c:	18bc      	adds	r4, r7, r2
 8002e8e:	1c18      	adds	r0, r3, #0
 8002e90:	f7fd fab0 	bl	80003f4 <__aeabi_f2uiz>
 8002e94:	0003      	movs	r3, r0
 8002e96:	8023      	strh	r3, [r4, #0]
	  chosenStates[i] = CHOSEN_STATE_TEXT_BOX{(uint8_t)(i+1), fontColor, chosenStatesFontSize, TFT_TEXT_BOX{&tftDisplay, backgroundColor, lineThickness + 8, yPos,(int16_t)(tftDisplay.width() - lineThickness - 8), false}};
 8002e98:	19bb      	adds	r3, r7, r6
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b2dc      	uxtb	r4, r3
 8002ea0:	25aa      	movs	r5, #170	; 0xaa
 8002ea2:	006d      	lsls	r5, r5, #1
 8002ea4:	197b      	adds	r3, r7, r5
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f001 ff1d 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8002eac:	0003      	movs	r3, r0
 8002eae:	3b0d      	subs	r3, #13
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	1979      	adds	r1, r7, r5
 8002eb6:	25be      	movs	r5, #190	; 0xbe
 8002eb8:	006d      	lsls	r5, r5, #1
 8002eba:	1978      	adds	r0, r7, r5
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	9202      	str	r2, [sp, #8]
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	22d2      	movs	r2, #210	; 0xd2
 8002ec4:	0052      	lsls	r2, r2, #1
 8002ec6:	18bb      	adds	r3, r7, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	230d      	movs	r3, #13
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f002 fd59 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
 8002ed4:	4a4d      	ldr	r2, [pc, #308]	; (800300c <main+0x380>)
 8002ed6:	23ae      	movs	r3, #174	; 0xae
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	18f8      	adds	r0, r7, r3
 8002edc:	197b      	adds	r3, r7, r5
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	0021      	movs	r1, r4
 8002ee4:	f002 fcd4 	bl	8005890 <_ZN21CHOSEN_STATE_TEXT_BOXC1EhthRK12TFT_TEXT_BOX>
 8002ee8:	19bb      	adds	r3, r7, r6
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2278      	movs	r2, #120	; 0x78
 8002eee:	18ba      	adds	r2, r7, r2
 8002ef0:	015b      	lsls	r3, r3, #5
 8002ef2:	18d2      	adds	r2, r2, r3
 8002ef4:	23ae      	movs	r3, #174	; 0xae
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	0010      	movs	r0, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	231d      	movs	r3, #29
 8002f00:	001a      	movs	r2, r3
 8002f02:	f002 fe85 	bl	8005c10 <memcpy>
  for(uint8_t i = 0; i < NUM_BOXES; i++)
 8002f06:	19bb      	adds	r3, r7, r6
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	19bb      	adds	r3, r7, r6
 8002f0c:	3201      	adds	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e777      	b.n	8002e02 <main+0x176>
  }
  stateSelector.write(stateNames[0], fontColor, stateSelectorFontSize);
 8002f12:	4943      	ldr	r1, [pc, #268]	; (8003020 <main+0x394>)
 8002f14:	4a3d      	ldr	r2, [pc, #244]	; (800300c <main+0x380>)
 8002f16:	248c      	movs	r4, #140	; 0x8c
 8002f18:	0064      	lsls	r4, r4, #1
 8002f1a:	1938      	adds	r0, r7, r4
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	f002 fda6 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
  //Initialize debouncer for buttons
  SW_DEBOUNCE okButton{ENC_OK_GPIO_Port, ENC_OK_Pin, 2, 8, htim6.Instance};
 8002f22:	4b40      	ldr	r3, [pc, #256]	; (8003024 <main+0x398>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	493f      	ldr	r1, [pc, #252]	; (8003028 <main+0x39c>)
 8002f2c:	254c      	movs	r5, #76	; 0x4c
 8002f2e:	1978      	adds	r0, r7, r5
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	2308      	movs	r3, #8
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2302      	movs	r3, #2
 8002f38:	f000 feee 	bl	8003d18 <_ZN11SW_DEBOUNCEC1EP12GPIO_TypeDeftmhP11TIM_TypeDef>
  okButtonPtr = &okButton;
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	; (800302c <main+0x3a0>)
 8002f3e:	197a      	adds	r2, r7, r5
 8002f40:	601a      	str	r2, [r3, #0]
  SW_DEBOUNCE cancelButton{BTN_CANCEL_Port, BTN_CANCEL_Pin, 2, 8, htim6.Instance};
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <main+0x398>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	0152      	lsls	r2, r2, #5
 8002f4a:	4937      	ldr	r1, [pc, #220]	; (8003028 <main+0x39c>)
 8002f4c:	2524      	movs	r5, #36	; 0x24
 8002f4e:	1978      	adds	r0, r7, r5
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2308      	movs	r3, #8
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2302      	movs	r3, #2
 8002f58:	f000 fede 	bl	8003d18 <_ZN11SW_DEBOUNCEC1EP12GPIO_TypeDeftmhP11TIM_TypeDef>
  cancelButtonPtr = &cancelButton;
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <main+0x3a4>)
 8002f5e:	197a      	adds	r2, r7, r5
 8002f60:	601a      	str	r2, [r3, #0]
  //Start timer after initializing all buttons
  htim6.Instance->CR1 |= TIM_CR1_CEN;
 8002f62:	4b30      	ldr	r3, [pc, #192]	; (8003024 <main+0x398>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <main+0x398>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
  //Initialize Rotary Encoder
  SELECTION_ENCODER stateEncoder{1, &stateSelector, fontColor, stateSelectorFontSize, stateNames, NUM_NAMES, chosenStates, NUM_BOXES};
 8002f72:	4926      	ldr	r1, [pc, #152]	; (800300c <main+0x380>)
 8002f74:	193a      	adds	r2, r7, r4
 8002f76:	0038      	movs	r0, r7
 8002f78:	2305      	movs	r3, #5
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	2378      	movs	r3, #120	; 0x78
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	9303      	str	r3, [sp, #12]
 8002f82:	2332      	movs	r3, #50	; 0x32
 8002f84:	9302      	str	r3, [sp, #8]
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <main+0x3a8>)
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	000b      	movs	r3, r1
 8002f90:	2101      	movs	r1, #1
 8002f92:	f000 fd9f 	bl	8003ad4 <_ZN17SELECTION_ENCODERC1EhP12TFT_TEXT_BOXthPKPKctP21CHOSEN_STATE_TEXT_BOXh>
  encoderPtr = &stateEncoder;
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <main+0x3ac>)
 8002f98:	003a      	movs	r2, r7
 8002f9a:	601a      	str	r2, [r3, #0]
  //Now enable interrupts for the rotary encoder and debouncer
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002f9c:	2007      	movs	r0, #7
 8002f9e:	f7fe fa8c 	bl	80014ba <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fa2:	2011      	movs	r0, #17
 8002fa4:	f7fe fa89 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  OVERALL_STATES ovState = OVERALL_STATES::SELECTING;
 8002fa8:	23db      	movs	r3, #219	; 0xdb
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
  SORTING_STATES soState = SORTING_STATES::MOVE_BASE_MOTOR;
 8002fb2:	23a4      	movs	r3, #164	; 0xa4
 8002fb4:	33ff      	adds	r3, #255	; 0xff
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
  CANCEL_STATES caState = CANCEL_STATES::NO_CANCEL;
 8002fbc:	23b6      	movs	r3, #182	; 0xb6
 8002fbe:	33ff      	adds	r3, #255	; 0xff
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ovState == OVERALL_STATES::SELECTING)
 8002fc6:	23db      	movs	r3, #219	; 0xdb
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d000      	beq.n	8002fd4 <main+0x348>
 8002fd2:	e077      	b.n	80030c4 <main+0x438>
	  {
		SWITCH_STATE okButtonState = okButton.getCurrentState();
 8002fd4:	234c      	movs	r3, #76	; 0x4c
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 ff49 	bl	8003e70 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	22ca      	movs	r2, #202	; 0xca
 8002fe2:	0052      	lsls	r2, r2, #1
 8002fe4:	18b9      	adds	r1, r7, r2
 8002fe6:	600b      	str	r3, [r1, #0]
		if(okButtonState == SWITCH_STATE::SHORT_PRESS)
 8002fe8:	18bb      	adds	r3, r7, r2
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d125      	bne.n	800303c <main+0x3b0>
		{
			GUI_API::printCurrentState(chosenStates, statesSelected, encoderPtr);
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <main+0x3ac>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2377      	movs	r3, #119	; 0x77
 8002ff6:	18f9      	adds	r1, r7, r3
 8002ff8:	2378      	movs	r3, #120	; 0x78
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f002 fa7b 	bl	80054f8 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER>
 8003002:	e048      	b.n	8003096 <main+0x40a>
 8003004:	20000088 	.word	0x20000088
 8003008:	fffffc60 	.word	0xfffffc60
 800300c:	0000fc60 	.word	0x0000fc60
 8003010:	0800672c 	.word	0x0800672c
 8003014:	08006760 	.word	0x08006760
 8003018:	fffffebf 	.word	0xfffffebf
 800301c:	41a00000 	.word	0x41a00000
 8003020:	080064fc 	.word	0x080064fc
 8003024:	200000ec 	.word	0x200000ec
 8003028:	48000800 	.word	0x48000800
 800302c:	20000130 	.word	0x20000130
 8003030:	20000134 	.word	0x20000134
 8003034:	08006b78 	.word	0x08006b78
 8003038:	2000012c 	.word	0x2000012c
		}else if(okButtonState == SWITCH_STATE::THREE_SECOND_PRESS)
 800303c:	23ca      	movs	r3, #202	; 0xca
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a64      	ldr	r2, [pc, #400]	; (80031d8 <main+0x54c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d125      	bne.n	8003096 <main+0x40a>
		{
			GUI_API::displayInProgress(tftDisplay, instructionBox, lineThickness, lineColor, backgroundColor, fontColor);
 800304a:	4a64      	ldr	r2, [pc, #400]	; (80031dc <main+0x550>)
 800304c:	23a0      	movs	r3, #160	; 0xa0
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	18f9      	adds	r1, r7, r3
 8003052:	23aa      	movs	r3, #170	; 0xaa
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	18f8      	adds	r0, r7, r3
 8003058:	4b60      	ldr	r3, [pc, #384]	; (80031dc <main+0x550>)
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	2300      	movs	r3, #0
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	0013      	movs	r3, r2
 8003062:	2205      	movs	r2, #5
 8003064:	f002 fa9c 	bl	80055a0 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt>
			UI_API::disableEncoder(ENC_A_Pin, ENC_B_Pin);
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	021a      	lsls	r2, r3, #8
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f002 f8f2 	bl	800525c <_ZN6UI_API14disableEncoderEtt>
			ovState = OVERALL_STATES::SORTING;
 8003078:	23db      	movs	r3, #219	; 0xdb
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
			soState = SORTING_STATES::MOVE_BASE_MOTOR;
 8003082:	23a4      	movs	r3, #164	; 0xa4
 8003084:	33ff      	adds	r3, #255	; 0xff
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
			caState = CANCEL_STATES::NO_CANCEL;
 800308c:	23b6      	movs	r3, #182	; 0xb6
 800308e:	33ff      	adds	r3, #255	; 0xff
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
		}
		SWITCH_STATE cancelButtonState = cancelButton.getCurrentState();
 8003096:	2324      	movs	r3, #36	; 0x24
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fee8 	bl	8003e70 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 80030a0:	0003      	movs	r3, r0
 80030a2:	22c8      	movs	r2, #200	; 0xc8
 80030a4:	0052      	lsls	r2, r2, #1
 80030a6:	18b9      	adds	r1, r7, r2
 80030a8:	600b      	str	r3, [r1, #0]
		if(cancelButtonState >= SWITCH_STATE::SHORT_PRESS)
 80030aa:	18bb      	adds	r3, r7, r2
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	dd89      	ble.n	8002fc6 <main+0x33a>
		{
			GUI_API::clearCurrentState(chosenStates, statesSelected);
 80030b2:	2377      	movs	r3, #119	; 0x77
 80030b4:	18fa      	adds	r2, r7, r3
 80030b6:	2378      	movs	r3, #120	; 0x78
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f002 fa4b 	bl	8005558 <_ZN7GUI_API17clearCurrentStateEP21CHOSEN_STATE_TEXT_BOXRh>
 80030c2:	e780      	b.n	8002fc6 <main+0x33a>
		}
	  }else if(ovState == OVERALL_STATES::SORTING)
 80030c4:	23db      	movs	r3, #219	; 0xdb
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d000      	beq.n	80030d2 <main+0x446>
 80030d0:	e779      	b.n	8002fc6 <main+0x33a>
		}else if(soState == SORTING_STATES::TAKE_PICTURES)
		{

		}
		//Can cancel in any soState
		if(caState == CANCEL_STATES::CONFIRM_CANCEL)
 80030d2:	23b6      	movs	r3, #182	; 0xb6
 80030d4:	33ff      	adds	r3, #255	; 0xff
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d158      	bne.n	8003190 <main+0x504>
		{
			SWITCH_STATE cancelButtonState = cancelButton.getCurrentState();
 80030de:	2324      	movs	r3, #36	; 0x24
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fec4 	bl	8003e70 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 80030e8:	0003      	movs	r3, r0
 80030ea:	22cc      	movs	r2, #204	; 0xcc
 80030ec:	0052      	lsls	r2, r2, #1
 80030ee:	18b9      	adds	r1, r7, r2
 80030f0:	600b      	str	r3, [r1, #0]
			if(cancelButtonState == SWITCH_STATE::SHORT_PRESS)
 80030f2:	18bb      	adds	r3, r7, r2
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10d      	bne.n	8003116 <main+0x48a>
			{
				//Cancel the cancel
				GUI_API::removeConfirmQuit(tftDisplay, lineThickness, backgroundColor);
 80030fa:	23aa      	movs	r3, #170	; 0xaa
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	2105      	movs	r1, #5
 8003104:	0018      	movs	r0, r3
 8003106:	f002 fb6b 	bl	80057e0 <_ZN7GUI_API17removeConfirmQuitER7TFT_GFXtt>
				caState = CANCEL_STATES::NO_CANCEL;
 800310a:	23b6      	movs	r3, #182	; 0xb6
 800310c:	33ff      	adds	r3, #255	; 0xff
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e757      	b.n	8002fc6 <main+0x33a>
			}else if(cancelButtonState == SWITCH_STATE::THREE_SECOND_PRESS)
 8003116:	23cc      	movs	r3, #204	; 0xcc
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <main+0x54c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d000      	beq.n	8003126 <main+0x49a>
 8003124:	e74f      	b.n	8002fc6 <main+0x33a>
			{
				//Go back to selecting states
				ovState = OVERALL_STATES::SELECTING;
 8003126:	23db      	movs	r3, #219	; 0xdb
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
				GUI_API::resetSelectionGUI(tftDisplay, instructionBox, mainTitle, stateSelector,chosenStates, backgroundColor,
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <main+0x554>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	228c      	movs	r2, #140	; 0x8c
 8003136:	0052      	lsls	r2, r2, #1
 8003138:	18bc      	adds	r4, r7, r2
 800313a:	2296      	movs	r2, #150	; 0x96
 800313c:	0052      	lsls	r2, r2, #1
 800313e:	18ba      	adds	r2, r7, r2
 8003140:	21a0      	movs	r1, #160	; 0xa0
 8003142:	0049      	lsls	r1, r1, #1
 8003144:	1879      	adds	r1, r7, r1
 8003146:	20aa      	movs	r0, #170	; 0xaa
 8003148:	0040      	lsls	r0, r0, #1
 800314a:	1838      	adds	r0, r7, r0
 800314c:	9307      	str	r3, [sp, #28]
 800314e:	2377      	movs	r3, #119	; 0x77
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	9306      	str	r3, [sp, #24]
 8003154:	2303      	movs	r3, #3
 8003156:	9305      	str	r3, [sp, #20]
 8003158:	2305      	movs	r3, #5
 800315a:	9304      	str	r3, [sp, #16]
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <main+0x550>)
 800315e:	9303      	str	r3, [sp, #12]
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <main+0x550>)
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2300      	movs	r3, #0
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	2378      	movs	r3, #120	; 0x78
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	0023      	movs	r3, r4
 8003170:	f002 f890 	bl	8005294 <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER>
						fontColor, lineColor, lineThickness, stateSelectorFontSize, statesSelected, encoderPtr);
				UI_API::enableEncoder(ENC_A_Pin, ENC_B_Pin);
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	021a      	lsls	r2, r3, #8
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	0011      	movs	r1, r2
 800317e:	0018      	movs	r0, r3
 8003180:	f002 f850 	bl	8005224 <_ZN6UI_API13enableEncoderEtt>
				//Consume the last button press
				okButton.getCurrentState();
 8003184:	234c      	movs	r3, #76	; 0x4c
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	0018      	movs	r0, r3
 800318a:	f000 fe71 	bl	8003e70 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 800318e:	e71a      	b.n	8002fc6 <main+0x33a>
			}
		}else if(caState == CANCEL_STATES::NO_CANCEL)
 8003190:	23b6      	movs	r3, #182	; 0xb6
 8003192:	33ff      	adds	r3, #255	; 0xff
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d000      	beq.n	800319e <main+0x512>
 800319c:	e713      	b.n	8002fc6 <main+0x33a>
		{
			SWITCH_STATE cancelButtonState = cancelButton.getCurrentState();
 800319e:	2324      	movs	r3, #36	; 0x24
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 fe64 	bl	8003e70 <_ZN11SW_DEBOUNCE15getCurrentStateEv>
 80031a8:	0003      	movs	r3, r0
 80031aa:	22ce      	movs	r2, #206	; 0xce
 80031ac:	0052      	lsls	r2, r2, #1
 80031ae:	18b9      	adds	r1, r7, r2
 80031b0:	600b      	str	r3, [r1, #0]
			if(cancelButtonState >= SWITCH_STATE::SHORT_PRESS)
 80031b2:	18bb      	adds	r3, r7, r2
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	dc00      	bgt.n	80031bc <main+0x530>
 80031ba:	e704      	b.n	8002fc6 <main+0x33a>
			{
				GUI_API::addConfirmQuit(tftDisplay, lineThickness, fontColor, backgroundColor);
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <main+0x550>)
 80031be:	23aa      	movs	r3, #170	; 0xaa
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	18f8      	adds	r0, r7, r3
 80031c4:	2300      	movs	r3, #0
 80031c6:	2105      	movs	r1, #5
 80031c8:	f002 fa7e 	bl	80056c8 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt>
				caState = CANCEL_STATES::CONFIRM_CANCEL;
 80031cc:	23b6      	movs	r3, #182	; 0xb6
 80031ce:	33ff      	adds	r3, #255	; 0xff
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
			}
		}
	  }
  }
 80031d6:	e6f6      	b.n	8002fc6 <main+0x33a>
 80031d8:	00000bb8 	.word	0x00000bb8
 80031dc:	0000fc60 	.word	0x0000fc60
 80031e0:	2000012c 	.word	0x2000012c

080031e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b099      	sub	sp, #100	; 0x64
 80031e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ea:	242c      	movs	r4, #44	; 0x2c
 80031ec:	193b      	adds	r3, r7, r4
 80031ee:	0018      	movs	r0, r3
 80031f0:	2334      	movs	r3, #52	; 0x34
 80031f2:	001a      	movs	r2, r3
 80031f4:	2100      	movs	r1, #0
 80031f6:	f002 fd14 	bl	8005c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031fa:	231c      	movs	r3, #28
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	0018      	movs	r0, r3
 8003200:	2310      	movs	r3, #16
 8003202:	001a      	movs	r2, r3
 8003204:	2100      	movs	r1, #0
 8003206:	f002 fd0c 	bl	8005c22 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800320a:	003b      	movs	r3, r7
 800320c:	0018      	movs	r0, r3
 800320e:	231c      	movs	r3, #28
 8003210:	001a      	movs	r2, r3
 8003212:	2100      	movs	r1, #0
 8003214:	f002 fd05 	bl	8005c22 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003218:	193b      	adds	r3, r7, r4
 800321a:	2220      	movs	r2, #32
 800321c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800321e:	193b      	adds	r3, r7, r4
 8003220:	2201      	movs	r2, #1
 8003222:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003224:	193b      	adds	r3, r7, r4
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800322a:	193b      	adds	r3, r7, r4
 800322c:	0018      	movs	r0, r3
 800322e:	f7fe fb17 	bl	8001860 <HAL_RCC_OscConfig>
 8003232:	0003      	movs	r3, r0
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	4193      	sbcs	r3, r2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 800323e:	f000 f9bf 	bl	80035c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003242:	211c      	movs	r1, #28
 8003244:	187b      	adds	r3, r7, r1
 8003246:	2207      	movs	r2, #7
 8003248:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800324a:	187b      	adds	r3, r7, r1
 800324c:	2203      	movs	r2, #3
 800324e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003250:	187b      	adds	r3, r7, r1
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003256:	187b      	adds	r3, r7, r1
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800325c:	187b      	adds	r3, r7, r1
 800325e:	2101      	movs	r1, #1
 8003260:	0018      	movs	r0, r3
 8003262:	f7fe fe5d 	bl	8001f20 <HAL_RCC_ClockConfig>
 8003266:	0003      	movs	r3, r0
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	4193      	sbcs	r3, r2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8003272:	f000 f9a5 	bl	80035c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003276:	003b      	movs	r3, r7
 8003278:	2202      	movs	r2, #2
 800327a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800327c:	003b      	movs	r3, r7
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003282:	003b      	movs	r3, r7
 8003284:	0018      	movs	r0, r3
 8003286:	f7fe ffdd 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 800328a:	0003      	movs	r3, r0
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	4193      	sbcs	r3, r2
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8003296:	f000 f993 	bl	80035c0 <Error_Handler>
  }
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b019      	add	sp, #100	; 0x64
 80032a0:	bd90      	pop	{r4, r7, pc}
	...

080032a4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032ac:	4a28      	ldr	r2, [pc, #160]	; (8003350 <_ZL12MX_SPI2_Initv+0xac>)
 80032ae:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032b2:	2282      	movs	r2, #130	; 0x82
 80032b4:	0052      	lsls	r2, r2, #1
 80032b6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032c0:	22e0      	movs	r2, #224	; 0xe0
 80032c2:	00d2      	lsls	r2, r2, #3
 80032c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032c6:	4b21      	ldr	r3, [pc, #132]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032c8:	2202      	movs	r2, #2
 80032ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032cc:	4b1f      	ldr	r3, [pc, #124]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80032da:	4b1c      	ldr	r3, [pc, #112]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032dc:	2210      	movs	r2, #16
 80032de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032e6:	4b19      	ldr	r3, [pc, #100]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 8003300:	2200      	movs	r2, #0
 8003302:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff f89c 	bl	8002444 <HAL_SPI_Init>
 800330c:	0003      	movs	r3, r0
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	4193      	sbcs	r3, r2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8003318:	f000 f952 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //Send 1 random byte to reset the sck
  uint8_t temp = 0;
 800331c:	1dfb      	adds	r3, r7, #7
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 8003322:	2301      	movs	r3, #1
 8003324:	425b      	negs	r3, r3
 8003326:	1df9      	adds	r1, r7, #7
 8003328:	4808      	ldr	r0, [pc, #32]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 800332a:	2201      	movs	r2, #1
 800332c:	f7ff f924 	bl	8002578 <HAL_SPI_Transmit>
  resetTftBoard();
 8003330:	f001 fced 	bl	8004d0e <resetTftBoard>
  pullCSLow();
 8003334:	f001 fd06 	bl	8004d44 <pullCSLow>
  ili9341_hspi_init(hspi2.Instance);
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <_ZL12MX_SPI2_Initv+0xa8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0018      	movs	r0, r3
 800333e:	f001 fda5 	bl	8004e8c <ili9341_hspi_init>
  /* USER CODE END SPI2_Init 2 */

}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	20000088 	.word	0x20000088
 8003350:	40003800 	.word	0x40003800

08003354 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335a:	003b      	movs	r3, r7
 800335c:	0018      	movs	r0, r3
 800335e:	2308      	movs	r3, #8
 8003360:	001a      	movs	r2, r3
 8003362:	2100      	movs	r1, #0
 8003364:	f002 fc5d 	bl	8005c22 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */
  //Set a period of 2ms
  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 800336a:	4a21      	ldr	r2, [pc, #132]	; (80033f0 <_ZL12MX_TIM6_Initv+0x9c>)
 800336c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 800336e:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 8003370:	22ef      	movs	r2, #239	; 0xef
 8003372:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400-1;
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 800337c:	2290      	movs	r2, #144	; 0x90
 800337e:	32ff      	adds	r2, #255	; 0xff
 8003380:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003382:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 800338a:	0018      	movs	r0, r3
 800338c:	f7ff fb8c 	bl	8002aa8 <HAL_TIM_Base_Init>
 8003390:	0003      	movs	r3, r0
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	4193      	sbcs	r3, r2
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <_ZL12MX_TIM6_Initv+0x4c>
  {
    Error_Handler();
 800339c:	f000 f910 	bl	80035c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a0:	003b      	movs	r3, r7
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a6:	003b      	movs	r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033ac:	003a      	movs	r2, r7
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7ff fc26 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 80033b8:	0003      	movs	r3, r0
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	4193      	sbcs	r3, r2
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <_ZL12MX_TIM6_Initv+0x74>
  {
    Error_Handler();
 80033c4:	f000 f8fc 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  //Clear status reg
  htim6.Instance->SR &= TIM_SR_UIF;
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <_ZL12MX_TIM6_Initv+0x98>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	400a      	ands	r2, r1
 80033d6:	611a      	str	r2, [r3, #16]
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2103      	movs	r1, #3
 80033dc:	2011      	movs	r0, #17
 80033de:	f7fe f857 	bl	8001490 <HAL_NVIC_SetPriority>
  /* USER CODE END TIM6_Init 2 */

}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	200000ec 	.word	0x200000ec
 80033f0:	40001000 	.word	0x40001000

080033f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	2414      	movs	r4, #20
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	0018      	movs	r0, r3
 8003400:	2314      	movs	r3, #20
 8003402:	001a      	movs	r2, r3
 8003404:	2100      	movs	r1, #0
 8003406:	f002 fc0c 	bl	8005c22 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340a:	4b69      	ldr	r3, [pc, #420]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	0309      	lsls	r1, r1, #12
 8003414:	430a      	orrs	r2, r1
 8003416:	615a      	str	r2, [r3, #20]
 8003418:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	4013      	ands	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003426:	4b62      	ldr	r3, [pc, #392]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	03c9      	lsls	r1, r1, #15
 8003430:	430a      	orrs	r2, r1
 8003432:	615a      	str	r2, [r3, #20]
 8003434:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	03db      	lsls	r3, r3, #15
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0289      	lsls	r1, r1, #10
 800344c:	430a      	orrs	r2, r1
 800344e:	615a      	str	r2, [r3, #20]
 8003450:	4b57      	ldr	r3, [pc, #348]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	4013      	ands	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	02c9      	lsls	r1, r1, #11
 8003468:	430a      	orrs	r2, r1
 800346a:	615a      	str	r2, [r3, #20]
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <_ZL12MX_GPIO_Initv+0x1bc>)
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	02db      	lsls	r3, r3, #11
 8003474:	4013      	ands	r3, r2
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 800347a:	2390      	movs	r3, #144	; 0x90
 800347c:	05db      	lsls	r3, r3, #23
 800347e:	2200      	movs	r2, #0
 8003480:	2120      	movs	r1, #32
 8003482:	0018      	movs	r0, r3
 8003484:	f7fe f9b2 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <_ZL12MX_GPIO_Initv+0x1c0>)
 800348a:	2201      	movs	r2, #1
 800348c:	2102      	movs	r1, #2
 800348e:	0018      	movs	r0, r3
 8003490:	f7fe f9ac 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8003494:	2390      	movs	r3, #144	; 0x90
 8003496:	05db      	lsls	r3, r3, #23
 8003498:	2200      	movs	r2, #0
 800349a:	2110      	movs	r1, #16
 800349c:	0018      	movs	r0, r3
 800349e:	f7fe f9a5 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	2202      	movs	r2, #2
 80034a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	2201      	movs	r2, #1
 80034ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	2203      	movs	r2, #3
 80034b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <_ZL12MX_GPIO_Initv+0x1c0>)
 80034be:	0019      	movs	r1, r3
 80034c0:	0010      	movs	r0, r2
 80034c2:	f7fe f817 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_D_C_Pin*/
  GPIO_InitStruct.Pin = TFT_D_C_Pin;
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	2220      	movs	r2, #32
 80034ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	2201      	movs	r2, #1
 80034d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	2203      	movs	r2, #3
 80034dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TFT_D_C_GPIO_Port, &GPIO_InitStruct);
 80034de:	193a      	adds	r2, r7, r4
 80034e0:	2390      	movs	r3, #144	; 0x90
 80034e2:	05db      	lsls	r3, r3, #23
 80034e4:	0011      	movs	r1, r2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7fe f804 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	2210      	movs	r2, #16
 80034f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	2201      	movs	r2, #1
 80034f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	2200      	movs	r2, #0
 8003502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8003504:	193a      	adds	r2, r7, r4
 8003506:	2390      	movs	r3, #144	; 0x90
 8003508:	05db      	lsls	r3, r3, #23
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f7fd fff1 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_B_Pin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 8003512:	193b      	adds	r3, r7, r4
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	0212      	lsls	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800351a:	193b      	adds	r3, r7, r4
 800351c:	4a26      	ldr	r2, [pc, #152]	; (80035b8 <_ZL12MX_GPIO_Initv+0x1c4>)
 800351e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003520:	193b      	adds	r3, r7, r4
 8003522:	2201      	movs	r2, #1
 8003524:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8003526:	193a      	adds	r2, r7, r4
 8003528:	2390      	movs	r3, #144	; 0x90
 800352a:	05db      	lsls	r3, r3, #23
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f7fd ffe0 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_A_Pin */
  GPIO_InitStruct.Pin = ENC_A_Pin;
 8003534:	0021      	movs	r1, r4
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	00d2      	lsls	r2, r2, #3
 800353c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800353e:	187b      	adds	r3, r7, r1
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8003542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003544:	187b      	adds	r3, r7, r1
 8003546:	2201      	movs	r2, #1
 8003548:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800354a:	000c      	movs	r4, r1
 800354c:	187b      	adds	r3, r7, r1
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <_ZL12MX_GPIO_Initv+0x1c8>)
 8003550:	0019      	movs	r1, r3
 8003552:	0010      	movs	r0, r2
 8003554:	f7fd ffce 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_OK_Pin */
  GPIO_InitStruct.Pin = ENC_OK_Pin;
 8003558:	0021      	movs	r1, r4
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2201      	movs	r2, #1
 800356c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_OK_GPIO_Port, &GPIO_InitStruct);
 800356e:	000c      	movs	r4, r1
 8003570:	187b      	adds	r3, r7, r1
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <_ZL12MX_GPIO_Initv+0x1c8>)
 8003574:	0019      	movs	r1, r3
 8003576:	0010      	movs	r0, r2
 8003578:	f7fd ffbc 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_CANCEL_Pin;
 800357c:	0021      	movs	r1, r4
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	0152      	lsls	r2, r2, #5
 8003584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003586:	187b      	adds	r3, r7, r1
 8003588:	2200      	movs	r2, #0
 800358a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800358c:	187b      	adds	r3, r7, r1
 800358e:	2201      	movs	r2, #1
 8003590:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_CANCEL_Port, &GPIO_InitStruct);
 8003592:	187b      	adds	r3, r7, r1
 8003594:	4a09      	ldr	r2, [pc, #36]	; (80035bc <_ZL12MX_GPIO_Initv+0x1c8>)
 8003596:	0019      	movs	r1, r3
 8003598:	0010      	movs	r0, r2
 800359a:	f7fd ffab 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	2101      	movs	r1, #1
 80035a2:	2007      	movs	r0, #7
 80035a4:	f7fd ff74 	bl	8001490 <HAL_NVIC_SetPriority>
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b00b      	add	sp, #44	; 0x2c
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	10310000 	.word	0x10310000
 80035bc:	48000800 	.word	0x48000800

080035c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_MspInit+0x44>)
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_MspInit+0x44>)
 80035d8:	2101      	movs	r1, #1
 80035da:	430a      	orrs	r2, r1
 80035dc:	619a      	str	r2, [r3, #24]
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_MspInit+0x44>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4013      	ands	r3, r2
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_MspInit+0x44>)
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <HAL_MspInit+0x44>)
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0549      	lsls	r1, r1, #21
 80035f4:	430a      	orrs	r2, r1
 80035f6:	61da      	str	r2, [r3, #28]
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_MspInit+0x44>)
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	055b      	lsls	r3, r3, #21
 8003600:	4013      	ands	r3, r2
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	40021000 	.word	0x40021000

08003614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b08b      	sub	sp, #44	; 0x2c
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	2314      	movs	r3, #20
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	0018      	movs	r0, r3
 8003622:	2314      	movs	r3, #20
 8003624:	001a      	movs	r2, r3
 8003626:	2100      	movs	r1, #0
 8003628:	f002 fafb 	bl	8005c22 <memset>
  if(hspi->Instance==SPI2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2f      	ldr	r2, [pc, #188]	; (80036f0 <HAL_SPI_MspInit+0xdc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d157      	bne.n	80036e6 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	01c9      	lsls	r1, r1, #7
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	01db      	lsls	r3, r3, #7
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	0309      	lsls	r1, r1, #12
 800365c:	430a      	orrs	r2, r1
 800365e:	615a      	str	r2, [r3, #20]
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	031b      	lsls	r3, r3, #12
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	02c9      	lsls	r1, r1, #11
 8003678:	430a      	orrs	r2, r1
 800367a:	615a      	str	r2, [r3, #20]
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_SPI_MspInit+0xe0>)
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	02db      	lsls	r3, r3, #11
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800368a:	2114      	movs	r1, #20
 800368c:	187b      	adds	r3, r7, r1
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2202      	movs	r2, #2
 8003696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2203      	movs	r2, #3
 80036a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	2201      	movs	r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	000c      	movs	r4, r1
 80036ac:	187b      	adds	r3, r7, r1
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <HAL_SPI_MspInit+0xe4>)
 80036b0:	0019      	movs	r1, r3
 80036b2:	0010      	movs	r0, r2
 80036b4:	f7fd ff1e 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036b8:	0021      	movs	r1, r4
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	00d2      	lsls	r2, r2, #3
 80036c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2202      	movs	r2, #2
 80036c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2203      	movs	r2, #3
 80036d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	2205      	movs	r2, #5
 80036d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <HAL_SPI_MspInit+0xe8>)
 80036de:	0019      	movs	r1, r3
 80036e0:	0010      	movs	r0, r2
 80036e2:	f7fd ff07 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b00b      	add	sp, #44	; 0x2c
 80036ec:	bd90      	pop	{r4, r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	40003800 	.word	0x40003800
 80036f4:	40021000 	.word	0x40021000
 80036f8:	48000800 	.word	0x48000800
 80036fc:	48000400 	.word	0x48000400

08003700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_TIM_Base_MspInit+0x34>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10b      	bne.n	800372a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_TIM_Base_MspInit+0x38>)
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <HAL_TIM_Base_MspInit+0x38>)
 8003718:	2110      	movs	r1, #16
 800371a:	430a      	orrs	r2, r1
 800371c:	61da      	str	r2, [r3, #28]
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_TIM_Base_MspInit+0x38>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2210      	movs	r2, #16
 8003724:	4013      	ands	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	40001000 	.word	0x40001000
 8003738:	40021000 	.word	0x40021000

0800373c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800374a:	e7fe      	b.n	800374a <HardFault_Handler+0x4>

0800374c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003764:	f7fd fdb8 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  //This is for the encoder A input
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	0018      	movs	r0, r3
 8003778:	f7fe f856 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  //This is for the encoder B input
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	0018      	movs	r0, r3
 8003782:	f7fe f851 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
	//Clear interrupt flag
	htim6.Instance->SR &= ~TIM_SR_UIF;
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <TIM6_DAC_IRQHandler+0x30>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <TIM6_DAC_IRQHandler+0x30>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2101      	movs	r1, #1
 800379c:	438a      	bics	r2, r1
 800379e:	611a      	str	r2, [r3, #16]
	okButtonPtr->process();
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <TIM6_DAC_IRQHandler+0x34>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 faf5 	bl	8003d94 <_ZN11SW_DEBOUNCE7processEv>
	cancelButtonPtr->process();
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <TIM6_DAC_IRQHandler+0x38>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 faf0 	bl	8003d94 <_ZN11SW_DEBOUNCE7processEv>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	200000ec 	.word	0x200000ec
 80037c0:	20000130 	.word	0x20000130
 80037c4:	20000134 	.word	0x20000134

080037c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	0002      	movs	r2, r0
 80037d0:	1dbb      	adds	r3, r7, #6
 80037d2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ENC_A_Pin || GPIO_Pin == ENC_B_Pin)
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881a      	ldrh	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	429a      	cmp	r2, r3
 80037de:	d005      	beq.n	80037ec <HAL_GPIO_EXTI_Callback+0x24>
 80037e0:	1dbb      	adds	r3, r7, #6
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d117      	bne.n	800381c <HAL_GPIO_EXTI_Callback+0x54>
	{
		encoderPtr->process((ENC_A_GPIO_Port->IDR & ENC_A_Pin) != 0, (ENC_B_GPIO_Port->IDR & ENC_B_Pin) != 0);
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_GPIO_EXTI_Callback+0x5c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_GPIO_EXTI_Callback+0x60>)
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4013      	ands	r3, r2
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	4193      	sbcs	r3, r2
 8003800:	b2db      	uxtb	r3, r3
 8003802:	0019      	movs	r1, r3
 8003804:	2390      	movs	r3, #144	; 0x90
 8003806:	05db      	lsls	r3, r3, #23
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	4013      	ands	r3, r2
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	4193      	sbcs	r3, r2
 8003814:	b2db      	uxtb	r3, r3
 8003816:	001a      	movs	r2, r3
 8003818:	f000 f8b6 	bl	8003988 <_ZN14ROTARY_ENCODER7processEhh>
	}
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	2000012c 	.word	0x2000012c
 8003828:	48000800 	.word	0x48000800

0800382c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	return 1;
 8003830:	2301      	movs	r3, #1
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_kill>:

int _kill(int pid, int sig)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003842:	f002 f9bb 	bl	8005bbc <__errno>
 8003846:	0003      	movs	r3, r0
 8003848:	2216      	movs	r2, #22
 800384a:	601a      	str	r2, [r3, #0]
	return -1;
 800384c:	2301      	movs	r3, #1
 800384e:	425b      	negs	r3, r3
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <_exit>:

void _exit (int status)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003860:	2301      	movs	r3, #1
 8003862:	425a      	negs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ffe5 	bl	8003838 <_kill>
	while (1) {}		/* Make sure we hang here */
 800386e:	e7fe      	b.n	800386e <_exit+0x16>

08003870 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <_sbrk+0x50>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <_sbrk+0x16>
		heap_end = &end;
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <_sbrk+0x50>)
 8003882:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <_sbrk+0x54>)
 8003884:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <_sbrk+0x50>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <_sbrk+0x50>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	18d3      	adds	r3, r2, r3
 8003894:	466a      	mov	r2, sp
 8003896:	4293      	cmp	r3, r2
 8003898:	d907      	bls.n	80038aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800389a:	f002 f98f 	bl	8005bbc <__errno>
 800389e:	0003      	movs	r3, r0
 80038a0:	220c      	movs	r2, #12
 80038a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80038a4:	2301      	movs	r3, #1
 80038a6:	425b      	negs	r3, r3
 80038a8:	e006      	b.n	80038b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <_sbrk+0x50>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <_sbrk+0x50>)
 80038b4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	0018      	movs	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b004      	add	sp, #16
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000138 	.word	0x20000138
 80038c4:	20000150 	.word	0x20000150

080038c8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <SystemInit+0x70>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <SystemInit+0x70>)
 80038d2:	2101      	movs	r1, #1
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <SystemInit+0x70>)
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <SystemInit+0x70>)
 80038de:	4917      	ldr	r1, [pc, #92]	; (800393c <SystemInit+0x74>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <SystemInit+0x70>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <SystemInit+0x70>)
 80038ea:	4915      	ldr	r1, [pc, #84]	; (8003940 <SystemInit+0x78>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <SystemInit+0x70>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <SystemInit+0x70>)
 80038f6:	4913      	ldr	r1, [pc, #76]	; (8003944 <SystemInit+0x7c>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <SystemInit+0x70>)
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <SystemInit+0x70>)
 8003902:	4911      	ldr	r1, [pc, #68]	; (8003948 <SystemInit+0x80>)
 8003904:	400a      	ands	r2, r1
 8003906:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <SystemInit+0x70>)
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <SystemInit+0x70>)
 800390e:	210f      	movs	r1, #15
 8003910:	438a      	bics	r2, r1
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <SystemInit+0x70>)
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <SystemInit+0x70>)
 800391a:	490c      	ldr	r1, [pc, #48]	; (800394c <SystemInit+0x84>)
 800391c:	400a      	ands	r2, r1
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <SystemInit+0x70>)
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <SystemInit+0x70>)
 8003926:	2101      	movs	r1, #1
 8003928:	438a      	bics	r2, r1
 800392a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <SystemInit+0x70>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]

}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	08ffb80c 	.word	0x08ffb80c
 8003940:	fef6ffff 	.word	0xfef6ffff
 8003944:	fffbffff 	.word	0xfffbffff
 8003948:	ffc0ffff 	.word	0xffc0ffff
 800394c:	fffcfe2c 	.word	0xfffcfe2c

08003950 <_ZN14ROTARY_ENCODERC1Eh>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
ROTARY_ENCODER::ROTARY_ENCODER(uint8_t ticks_per_step):
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	000a      	movs	r2, r1
 800395a:	1cfb      	adds	r3, r7, #3
 800395c:	701a      	strb	r2, [r3, #0]
ticksPerStep{ticks_per_step}, tickCounter{0}, state{R_START}
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <_ZN14ROTARY_ENCODERC1Eh+0x34>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1cfa      	adds	r2, r7, #3
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	711a      	strb	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	80da      	strh	r2, [r3, #6]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	721a      	strb	r2, [r3, #8]
{}
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	08006c74 	.word	0x08006c74

08003988 <_ZN14ROTARY_ENCODER7processEhh>:

void ROTARY_ENCODER::process(uint8_t a_state, uint8_t b_state)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	0008      	movs	r0, r1
 8003992:	0011      	movs	r1, r2
 8003994:	1cfb      	adds	r3, r7, #3
 8003996:	1c02      	adds	r2, r0, #0
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	1cbb      	adds	r3, r7, #2
 800399c:	1c0a      	adds	r2, r1, #0
 800399e:	701a      	strb	r2, [r3, #0]
	state = ttable[state & 0xF][((a_state & 0x1) << 1) | (b_state & 0x1)];
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7a1b      	ldrb	r3, [r3, #8]
 80039a4:	001a      	movs	r2, r3
 80039a6:	230f      	movs	r3, #15
 80039a8:	401a      	ands	r2, r3
 80039aa:	1cfb      	adds	r3, r7, #3
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	2102      	movs	r1, #2
 80039b2:	4019      	ands	r1, r3
 80039b4:	1cbb      	adds	r3, r7, #2
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2001      	movs	r0, #1
 80039ba:	4003      	ands	r3, r0
 80039bc:	430b      	orrs	r3, r1
 80039be:	492d      	ldr	r1, [pc, #180]	; (8003a74 <_ZN14ROTARY_ENCODER7processEhh+0xec>)
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	188a      	adds	r2, r1, r2
 80039c4:	5cd2      	ldrb	r2, [r2, r3]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	721a      	strb	r2, [r3, #8]
	if(state & (DIR_CCW | DIR_CW))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7a1b      	ldrb	r3, [r3, #8]
 80039ce:	001a      	movs	r2, r3
 80039d0:	2330      	movs	r3, #48	; 0x30
 80039d2:	4013      	ands	r3, r2
 80039d4:	d049      	beq.n	8003a6a <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	{
	    if(state & DIR_CW)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7a1b      	ldrb	r3, [r3, #8]
 80039da:	001a      	movs	r2, r3
 80039dc:	2310      	movs	r3, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d011      	beq.n	8003a06 <_ZN14ROTARY_ENCODER7processEhh+0x7e>
	    {
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter < 0)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2206      	movs	r2, #6
 80039e6:	5e9b      	ldrsh	r3, [r3, r2]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	da02      	bge.n	80039f2 <_ZN14ROTARY_ENCODER7processEhh+0x6a>
	    	{
	    		this->tickCounter = 0;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter++;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2206      	movs	r2, #6
 80039f6:	5e9b      	ldrsh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	b21a      	sxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	80da      	strh	r2, [r3, #6]
 8003a04:	e010      	b.n	8003a28 <_ZN14ROTARY_ENCODER7processEhh+0xa0>
	    }else{
	    	//Reset tick counter if we were in the middle of turning it one way and we start turning it the other way
	    	if(this->tickCounter > 0)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2206      	movs	r2, #6
 8003a0a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dd02      	ble.n	8003a16 <_ZN14ROTARY_ENCODER7processEhh+0x8e>
	    	{
	    		this->tickCounter = 0;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	80da      	strh	r2, [r3, #6]
	    	}
	        this->tickCounter--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2206      	movs	r2, #6
 8003a1a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b21a      	sxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	80da      	strh	r2, [r3, #6]
	    }

	    uint16_t tempCounter = (this->tickCounter < 0) ? this->tickCounter * -1 : this->tickCounter;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2206      	movs	r2, #6
 8003a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8003a2e:	17d9      	asrs	r1, r3, #31
 8003a30:	185a      	adds	r2, r3, r1
 8003a32:	404a      	eors	r2, r1
 8003a34:	210e      	movs	r1, #14
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	801a      	strh	r2, [r3, #0]
	    if(tempCounter >= this->ticksPerStep)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	791b      	ldrb	r3, [r3, #4]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	187a      	adds	r2, r7, r1
 8003a42:	8812      	ldrh	r2, [r2, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d310      	bcc.n	8003a6a <_ZN14ROTARY_ENCODER7processEhh+0xe2>
	    {
	    	this->doStep(state & DIR_CW);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	7a12      	ldrb	r2, [r2, #8]
 8003a52:	0011      	movs	r1, r2
 8003a54:	2210      	movs	r2, #16
 8003a56:	400a      	ands	r2, r1
 8003a58:	1e51      	subs	r1, r2, #1
 8003a5a:	418a      	sbcs	r2, r1
 8003a5c:	b2d1      	uxtb	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	0010      	movs	r0, r2
 8003a62:	4798      	blx	r3
	    	this->tickCounter = 0;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	80da      	strh	r2, [r3, #6]
	    }
	}
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b004      	add	sp, #16
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	08006c50 	.word	0x08006c50

08003a78 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_>:

//Private Function Definitions
namespace
{
bool stringsEqual(const char* string1, const char* string2)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
	if(string1 == nullptr || string2 == nullptr)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x16>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x1a>
	{
		return false;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e01c      	b.n	8003acc <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x54>
	}
	while(*string1 != '\0' && *string2 != '\0' && *(string1) == *(string2))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x44>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00c      	beq.n	8003abc <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x44>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d106      	bne.n	8003abc <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x44>
	{
		string1++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
		string2++;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	603b      	str	r3, [r7, #0]
	while(*string1 != '\0' && *string2 != '\0' && *(string1) == *(string2))
 8003aba:	e7ea      	b.n	8003a92 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_+0x1a>
	}
	return (*string1 == *string2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	425a      	negs	r2, r3
 8003ac8:	4153      	adcs	r3, r2
 8003aca:	b2db      	uxtb	r3, r3
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_ZN17SELECTION_ENCODERC1EhP12TFT_TEXT_BOXthPKPKctP21CHOSEN_STATE_TEXT_BOXh>:

}

//Public Function Definitions
SELECTION_ENCODER::SELECTION_ENCODER(uint8_t ticks_per_step, TFT_TEXT_BOX* display_box,
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	0008      	movs	r0, r1
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	240b      	movs	r4, #11
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	1c02      	adds	r2, r0, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	2508      	movs	r5, #8
 8003aec:	197b      	adds	r3, r7, r5
 8003aee:	1c0a      	adds	r2, r1, #0
 8003af0:	801a      	strh	r2, [r3, #0]
		uint16_t font_color, uint8_t font_size, const char * const * output_text_array, uint16_t output_text_length,
		CHOSEN_STATE_TEXT_BOX* selected_states,uint8_t selected_states_length):
ROTARY_ENCODER(ticks_per_step), displayBox{display_box}, fontColor{font_color},
fontSize{font_size}, outputTextArray{output_text_array}, outputTextLength{output_text_length}, nameIndex{0},
selectedStates{selected_states}, numSelectedStates{selected_states_length}
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	0019      	movs	r1, r3
 8003afa:	0010      	movs	r0, r2
 8003afc:	f7ff ff28 	bl	8003950 <_ZN14ROTARY_ENCODERC1Eh>
 8003b00:	4a18      	ldr	r2, [pc, #96]	; (8003b64 <_ZN17SELECTION_ENCODERC1EhP12TFT_TEXT_BOXthPKPKctP21CHOSEN_STATE_TEXT_BOXh+0x90>)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	197a      	adds	r2, r7, r5
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	821a      	strh	r2, [r3, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2218      	movs	r2, #24
 8003b18:	2108      	movs	r1, #8
 8003b1a:	468c      	mov	ip, r1
 8003b1c:	44bc      	add	ip, r7
 8003b1e:	4462      	add	r2, ip
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	749a      	strb	r2, [r3, #18]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	615a      	str	r2, [r3, #20]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	2108      	movs	r1, #8
 8003b30:	468c      	mov	ip, r1
 8003b32:	44bc      	add	ip, r7
 8003b34:	4462      	add	r2, ip
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	831a      	strh	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	835a      	strh	r2, [r3, #26]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2228      	movs	r2, #40	; 0x28
 8003b4a:	2108      	movs	r1, #8
 8003b4c:	468c      	mov	ip, r1
 8003b4e:	44bc      	add	ip, r7
 8003b50:	4462      	add	r2, ip
 8003b52:	2120      	movs	r1, #32
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	545a      	strb	r2, [r3, r1]
{}
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bdb0      	pop	{r4, r5, r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	08006c80 	.word	0x08006c80

08003b68 <_ZN17SELECTION_ENCODER19getCurrentNameIndexEv>:

uint16_t SELECTION_ENCODER::getCurrentNameIndex(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	return this->nameIndex;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8b5b      	ldrh	r3, [r3, #26]
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_ZN17SELECTION_ENCODER19setCurrentNameIndexEt>:

void SELECTION_ENCODER::setCurrentNameIndex(uint16_t index)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	000a      	movs	r2, r1
 8003b86:	1cbb      	adds	r3, r7, #2
 8003b88:	801a      	strh	r2, [r3, #0]
	this->nameIndex = index;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1cba      	adds	r2, r7, #2
 8003b8e:	8812      	ldrh	r2, [r2, #0]
 8003b90:	835a      	strh	r2, [r3, #26]
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b002      	add	sp, #8
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZN17SELECTION_ENCODER23printNextAvailableStateEv>:

void SELECTION_ENCODER::printNextAvailableState(void)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
	this->doStep(true);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	2101      	movs	r1, #1
 8003bac:	0010      	movs	r0, r2
 8003bae:	4798      	blx	r3
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc>:

bool SELECTION_ENCODER::stringAlreadyPresent(const char* check_string)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < this->numSelectedStates; i++)
 8003bc2:	230f      	movs	r3, #15
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	5c9b      	ldrb	r3, [r3, r2]
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	18ba      	adds	r2, r7, r2
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d21a      	bcs.n	8003c10 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x58>
	{
		if(stringsEqual(this->selectedStates[i].getCurrentText(), check_string))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	230f      	movs	r3, #15
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	015b      	lsls	r3, r3, #5
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	0018      	movs	r0, r3
 8003bea:	f001 feb7 	bl	800595c <_ZN21CHOSEN_STATE_TEXT_BOX14getCurrentTextEv>
 8003bee:	0002      	movs	r2, r0
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	f7ff ff3f 	bl	8003a78 <_ZN12_GLOBAL__N_112stringsEqualEPKcS1_>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x4a>
		{
			return true;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e007      	b.n	8003c12 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x5a>
	for(uint8_t i = 0; i < this->numSelectedStates; i++)
 8003c02:	210f      	movs	r1, #15
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	187b      	adds	r3, r7, r1
 8003c0a:	3201      	adds	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e7dc      	b.n	8003bca <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc+0x12>
		}
	}
	return false;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <_ZN17SELECTION_ENCODER6doStepEb>:

void SELECTION_ENCODER::doStep(bool up_not_down)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	000a      	movs	r2, r1
 8003c24:	1cfb      	adds	r3, r7, #3
 8003c26:	701a      	strb	r2, [r3, #0]
	bool validIndex = false;
 8003c28:	230f      	movs	r3, #15
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
	while(!validIndex)
 8003c30:	230f      	movs	r3, #15
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d13b      	bne.n	8003cb2 <_ZN17SELECTION_ENCODER6doStepEb+0x98>
	{
		if(up_not_down)
 8003c3a:	1cfb      	adds	r3, r7, #3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <_ZN17SELECTION_ENCODER6doStepEb+0x4e>
		{
			if(this->nameIndex == (this->outputTextLength - 1))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8b5b      	ldrh	r3, [r3, #26]
 8003c46:	001a      	movs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8b1b      	ldrh	r3, [r3, #24]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d103      	bne.n	8003c5a <_ZN17SELECTION_ENCODER6doStepEb+0x40>
			{
				this->nameIndex = 0;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	835a      	strh	r2, [r3, #26]
 8003c58:	e017      	b.n	8003c8a <_ZN17SELECTION_ENCODER6doStepEb+0x70>
			}else{
				this->nameIndex++;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8b5b      	ldrh	r3, [r3, #26]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	835a      	strh	r2, [r3, #26]
 8003c66:	e010      	b.n	8003c8a <_ZN17SELECTION_ENCODER6doStepEb+0x70>
			}
		}else{
			if(this->nameIndex == 0)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8b5b      	ldrh	r3, [r3, #26]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <_ZN17SELECTION_ENCODER6doStepEb+0x64>
			{
				this->nameIndex = this->outputTextLength - 1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8b1b      	ldrh	r3, [r3, #24]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	835a      	strh	r2, [r3, #26]
 8003c7c:	e005      	b.n	8003c8a <_ZN17SELECTION_ENCODER6doStepEb+0x70>
			}else{
				this->nameIndex--;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8b5b      	ldrh	r3, [r3, #26]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	835a      	strh	r2, [r3, #26]
			}
		}
		validIndex = !this->stringAlreadyPresent(this->outputTextArray[this->nameIndex]);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8b5b      	ldrh	r3, [r3, #26]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff ff8b 	bl	8003bb8 <_ZN17SELECTION_ENCODER20stringAlreadyPresentEPKc>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2201      	movs	r2, #1
 8003cac:	404a      	eors	r2, r1
 8003cae:	701a      	strb	r2, [r3, #0]
	while(!validIndex)
 8003cb0:	e7be      	b.n	8003c30 <_ZN17SELECTION_ENCODER6doStepEb+0x16>
	}
	displayBox->write(this->outputTextArray[this->nameIndex], this->fontColor, this->fontSize);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68d8      	ldr	r0, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8b5b      	ldrh	r3, [r3, #26]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	18d3      	adds	r3, r2, r3
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8a1a      	ldrh	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7c9b      	ldrb	r3, [r3, #18]
 8003ccc:	f001 fecf 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_ZN11SW_DEBOUNCE20startCriticalSectionEv>:

//Public Function Prototypes

//Private Function Definitions
inline void SW_DEBOUNCE::startCriticalSection(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	this->timerInstance->DIER &= ~TIM_DIER_UIE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	60da      	str	r2, [r3, #12]
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_ZN11SW_DEBOUNCE19stopCriticalSectionEv>:
inline void SW_DEBOUNCE::stopCriticalSection(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	this->timerInstance->DIER |= TIM_DIER_UIE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN11SW_DEBOUNCEC1EP12GPIO_TypeDeftmhP11TIM_TypeDef>:
//Public Function Definitions
SW_DEBOUNCE::SW_DEBOUNCE(GPIO_TypeDef* gpio_port, uint16_t gpio_pin, uint32_t timer_period_ms, uint8_t ms_for_valid_press, TIM_TypeDef* timer_instance):
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	801a      	strh	r2, [r3, #0]
gpioPort{gpio_port}, gpioPin{gpio_pin}, debouncedState{SWITCH_STATE::NO_PRESS},
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{static_cast<uint8_t>(1 << static_cast<uint8_t>(ms_for_valid_press/timer_period_ms))},
msHeldCounter{0}, timerPeriodMs{timer_period_ms}, msForValidPress{ms_for_valid_press} , timerInstance{timer_instance}
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1dba      	adds	r2, r7, #6
 8003d32:	8812      	ldrh	r2, [r2, #0]
 8003d34:	809a      	strh	r2, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	22ff      	movs	r2, #255	; 0xff
 8003d40:	731a      	strb	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
switchBitSequence{0xFF},stateMachineState{SW_STATE_MACHINE::SWITCH_OPEN}, validPressBitSequence{static_cast<uint8_t>(1 << static_cast<uint8_t>(ms_for_valid_press/timer_period_ms))},
 8003d48:	2418      	movs	r4, #24
 8003d4a:	2508      	movs	r5, #8
 8003d4c:	197b      	adds	r3, r7, r5
 8003d4e:	191b      	adds	r3, r3, r4
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7fc f9d7 	bl	8000108 <__udivsi3>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	001a      	movs	r2, r3
 8003d60:	2301      	movs	r3, #1
 8003d62:	4093      	lsls	r3, r2
msHeldCounter{0}, timerPeriodMs{timer_period_ms}, msForValidPress{ms_for_valid_press} , timerInstance{timer_instance}
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	751a      	strb	r2, [r3, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	61da      	str	r2, [r3, #28]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	197a      	adds	r2, r7, r5
 8003d7a:	1912      	adds	r2, r2, r4
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	545a      	strb	r2, [r3, r1]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
{}
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d94 <_ZN11SW_DEBOUNCE7processEv>:

void SW_DEBOUNCE::process(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	this->switchBitSequence = (this->switchBitSequence << 1) | ((this->gpioPort->IDR & this->gpioPin) != 0);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7b1b      	ldrb	r3, [r3, #12]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	b25a      	sxtb	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	8889      	ldrh	r1, [r1, #4]
 8003dae:	400b      	ands	r3, r1
 8003db0:	1e59      	subs	r1, r3, #1
 8003db2:	418b      	sbcs	r3, r1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	731a      	strb	r2, [r3, #12]
	if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_OPEN)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11b      	bne.n	8003e02 <_ZN11SW_DEBOUNCE7processEv+0x6e>
	{
		if((this->switchBitSequence & (this->validPressBitSequence | (this->validPressBitSequence - 1))) == this->validPressBitSequence)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7b1b      	ldrb	r3, [r3, #12]
 8003dce:	001a      	movs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7d1b      	ldrb	r3, [r3, #20]
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7d1b      	ldrb	r3, [r3, #20]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	4013      	ands	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	7d12      	ldrb	r2, [r2, #20]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d13a      	bne.n	8003e5e <_ZN11SW_DEBOUNCE7processEv+0xca>
		{
			this->stateMachineState = SW_STATE_MACHINE::VALID_PRESS_DETECTED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	611a      	str	r2, [r3, #16]
			this->msHeldCounter = this->msForValidPress;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	5c9b      	ldrb	r3, [r3, r2]
 8003df4:	001a      	movs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	619a      	str	r2, [r3, #24]
			//Reset the bit sequence to only count held time now
			this->switchBitSequence = 0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	731a      	strb	r2, [r3, #12]
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
		{
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
		}
	}
}
 8003e00:	e02d      	b.n	8003e5e <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::VALID_PRESS_DETECTED)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d11e      	bne.n	8003e48 <_ZN11SW_DEBOUNCE7processEv+0xb4>
		if(!this->switchBitSequence)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7b1b      	ldrb	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <_ZN11SW_DEBOUNCE7processEv+0x8e>
			this->msHeldCounter+= this->timerPeriodMs;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	18d2      	adds	r2, r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
}
 8003e20:	e01d      	b.n	8003e5e <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_RELEASED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	611a      	str	r2, [r3, #16]
			if(this->msHeldCounter >= static_cast<uint32_t>(SWITCH_STATE::THREE_SECOND_PRESS))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <_ZN11SW_DEBOUNCE7processEv+0xd4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d903      	bls.n	8003e3a <_ZN11SW_DEBOUNCE7processEv+0xa6>
				this->debouncedState = SWITCH_STATE::THREE_SECOND_PRESS;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <_ZN11SW_DEBOUNCE7processEv+0xd8>)
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	e002      	b.n	8003e40 <_ZN11SW_DEBOUNCE7processEv+0xac>
				this->debouncedState = SWITCH_STATE::SHORT_PRESS;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	609a      	str	r2, [r3, #8]
			this->msHeldCounter = 0;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]
}
 8003e46:	e00a      	b.n	8003e5e <_ZN11SW_DEBOUNCE7processEv+0xca>
	}else if(this->stateMachineState == SW_STATE_MACHINE::SWITCH_RELEASED)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d106      	bne.n	8003e5e <_ZN11SW_DEBOUNCE7processEv+0xca>
		if(this->switchBitSequence == SW_DEBOUNCE::SWITCH_OPEN_BIT_SEQUENCE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7b1b      	ldrb	r3, [r3, #12]
 8003e54:	2bff      	cmp	r3, #255	; 0xff
 8003e56:	d102      	bne.n	8003e5e <_ZN11SW_DEBOUNCE7processEv+0xca>
			this->stateMachineState = SW_STATE_MACHINE::SWITCH_OPEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b002      	add	sp, #8
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	00000bb7 	.word	0x00000bb7
 8003e6c:	00000bb8 	.word	0x00000bb8

08003e70 <_ZN11SW_DEBOUNCE15getCurrentStateEv>:

SWITCH_STATE SW_DEBOUNCE::getCurrentState(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	this->startCriticalSection();
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7ff ff2c 	bl	8003cd8 <_ZN11SW_DEBOUNCE20startCriticalSectionEv>
	SWITCH_STATE temp = this->debouncedState;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60fb      	str	r3, [r7, #12]
	this->debouncedState = SWITCH_STATE::NO_PRESS;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
	this->stopCriticalSection();
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7ff ff32 	bl	8003cf8 <_ZN11SW_DEBOUNCE19stopCriticalSectionEv>
	return temp;
 8003e94:	68fb      	ldr	r3, [r7, #12]
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZN7TFT_GFX11getWordSizeEPKc>:

//Public Function Prototypes

//Private Function Definitions
uint8_t TFT_GFX::getWordSize(const char* string)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
	while(*string != ' ' && *string != '\0')
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d00d      	beq.n	8003ed4 <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <_ZN7TFT_GFX11getWordSizeEPKc+0x36>
	{
		counter++;
 8003ec0:	210f      	movs	r1, #15
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	3201      	adds	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
		string++;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	603b      	str	r3, [r7, #0]
	while(*string != ' ' && *string != '\0')
 8003ed2:	e7ed      	b.n	8003eb0 <_ZN7TFT_GFX11getWordSizeEPKc+0x12>
	}
	return counter;
 8003ed4:	230f      	movs	r3, #15
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	781b      	ldrb	r3, [r3, #0]
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_ZN7TFT_GFX11getLineSizeEPKch>:

uint8_t TFT_GFX::getLineSize(const char* string, uint8_t max_chars_in_line)
{
 8003ee2:	b5b0      	push	{r4, r5, r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	1dfb      	adds	r3, r7, #7
 8003eee:	701a      	strb	r2, [r3, #0]
	uint8_t currCharsInLine = 0;
 8003ef0:	2317      	movs	r3, #23
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
	bool overFlowed = false;
 8003ef8:	2316      	movs	r3, #22
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
	while(*string && !overFlowed)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d03f      	beq.n	8003f88 <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
 8003f08:	2316      	movs	r3, #22
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d13a      	bne.n	8003f88 <_ZN7TFT_GFX11getLineSizeEPKch+0xa6>
	{
		uint8_t nextWordSize = this->getWordSize(string);
 8003f12:	2515      	movs	r5, #21
 8003f14:	197c      	adds	r4, r7, r5
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff ffbe 	bl	8003e9e <_ZN7TFT_GFX11getWordSizeEPKc>
 8003f22:	0003      	movs	r3, r0
 8003f24:	7023      	strb	r3, [r4, #0]
		//This is to account for spaces
		if(nextWordSize == 0)
 8003f26:	197b      	adds	r3, r7, r5
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <_ZN7TFT_GFX11getLineSizeEPKch+0x54>
		{
			nextWordSize = 1;
 8003f2e:	2315      	movs	r3, #21
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
		}
		//Check if we overflow
		if(currCharsInLine + nextWordSize > max_chars_in_line)
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	2315      	movs	r3, #21
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	18d2      	adds	r2, r2, r3
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	dd0e      	ble.n	8003f6a <_ZN7TFT_GFX11getLineSizeEPKch+0x88>
		{
			if(currCharsInLine == 0)
 8003f4c:	2317      	movs	r3, #23
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <_ZN7TFT_GFX11getLineSizeEPKch+0x7e>
			{
				currCharsInLine = max_chars_in_line;
 8003f56:	2317      	movs	r3, #23
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	1dfa      	adds	r2, r7, #7
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]
			}
			overFlowed = true;
 8003f60:	2316      	movs	r3, #22
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e7ca      	b.n	8003f00 <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}else{
			currCharsInLine += nextWordSize;
 8003f6a:	2217      	movs	r2, #23
 8003f6c:	18bb      	adds	r3, r7, r2
 8003f6e:	18b9      	adds	r1, r7, r2
 8003f70:	2015      	movs	r0, #21
 8003f72:	183a      	adds	r2, r7, r0
 8003f74:	7809      	ldrb	r1, [r1, #0]
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	188a      	adds	r2, r1, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
			string += nextWordSize;
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	18d3      	adds	r3, r2, r3
 8003f84:	60bb      	str	r3, [r7, #8]
	while(*string && !overFlowed)
 8003f86:	e7bb      	b.n	8003f00 <_ZN7TFT_GFX11getLineSizeEPKch+0x1e>
		}
	}
	return currCharsInLine;
 8003f88:	2317      	movs	r3, #23
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	781b      	ldrb	r3, [r3, #0]
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b006      	add	sp, #24
 8003f94:	bdb0      	pop	{r4, r5, r7, pc}

08003f96 <_ZN7TFT_GFX13getStringSizeEPKc>:

uint8_t TFT_GFX::getStringSize(const char* string)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
	uint8_t counter = 0;
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	603a      	str	r2, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	4193      	sbcs	r3, r2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <_ZN7TFT_GFX13getStringSizeEPKc+0x32>
	{
		counter++;
 8003fba:	210f      	movs	r1, #15
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	3201      	adds	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
	while(*(string++))
 8003fc6:	e7ef      	b.n	8003fa8 <_ZN7TFT_GFX13getStringSizeEPKc+0x12>
	}
	return counter;
 8003fc8:	230f      	movs	r3, #15
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	781b      	ldrb	r3, [r3, #0]
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_ZN7TFT_GFXC1EP11SPI_TypeDef>:
//Public Function Definitions
TFT_GFX::TFT_GFX(SPI_TypeDef *SPIx):
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
spiInstance{SPIx}, _width{ILI9341_TFTWIDTH}, _height{ILI9341_TFTHEIGHT}
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	22f0      	movs	r2, #240	; 0xf0
 8003fea:	809a      	strh	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	22a0      	movs	r2, #160	; 0xa0
 8003ff0:	0052      	lsls	r2, r2, #1
 8003ff2:	80da      	strh	r2, [r3, #6]
{}
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <_ZN7TFT_GFX13setAddrWindowEtttt>:

void TFT_GFX::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8003ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004000:	b087      	sub	sp, #28
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	000c      	movs	r4, r1
 8004008:	0010      	movs	r0, r2
 800400a:	0019      	movs	r1, r3
 800400c:	250a      	movs	r5, #10
 800400e:	197b      	adds	r3, r7, r5
 8004010:	1c22      	adds	r2, r4, #0
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	2608      	movs	r6, #8
 8004016:	19bb      	adds	r3, r7, r6
 8004018:	1c02      	adds	r2, r0, #0
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	1dbb      	adds	r3, r7, #6
 800401e:	1c0a      	adds	r2, r1, #0
 8004020:	801a      	strh	r2, [r3, #0]
    uint16_t x2 = (x1 + w - 1);
 8004022:	002c      	movs	r4, r5
 8004024:	193a      	adds	r2, r7, r4
 8004026:	1dbb      	adds	r3, r7, #6
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	b29a      	uxth	r2, r3
 8004030:	2316      	movs	r3, #22
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	3a01      	subs	r2, #1
 8004036:	801a      	strh	r2, [r3, #0]
    uint16_t y2 = (y1 + h - 1);
 8004038:	0035      	movs	r5, r6
 800403a:	197b      	adds	r3, r7, r5
 800403c:	2228      	movs	r2, #40	; 0x28
 800403e:	2108      	movs	r1, #8
 8004040:	1879      	adds	r1, r7, r1
 8004042:	1889      	adds	r1, r1, r2
 8004044:	881a      	ldrh	r2, [r3, #0]
 8004046:	880b      	ldrh	r3, [r1, #0]
 8004048:	18d3      	adds	r3, r2, r3
 800404a:	b29a      	uxth	r2, r3
 800404c:	2614      	movs	r6, #20
 800404e:	19bb      	adds	r3, r7, r6
 8004050:	3a01      	subs	r2, #1
 8004052:	801a      	strh	r2, [r3, #0]
	// Set column range.
	hspi_cmd(this->spiInstance, 0x2A);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	212a      	movs	r1, #42	; 0x2a
 800405a:	0018      	movs	r0, r3
 800405c:	f000 feb9 	bl	8004dd2 <hspi_cmd>
	hspi_w16(this->spiInstance, x1);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	193b      	adds	r3, r7, r4
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	0019      	movs	r1, r3
 800406a:	0010      	movs	r0, r2
 800406c:	f000 fe8e 	bl	8004d8c <hspi_w16>
	hspi_w16(this->spiInstance, x2);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2316      	movs	r3, #22
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	0019      	movs	r1, r3
 800407c:	0010      	movs	r0, r2
 800407e:	f000 fe85 	bl	8004d8c <hspi_w16>
	
	// Set row range.
	hspi_cmd(this->spiInstance, 0x2B);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	212b      	movs	r1, #43	; 0x2b
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fea2 	bl	8004dd2 <hspi_cmd>
	hspi_w16(this->spiInstance, y1);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	197b      	adds	r3, r7, r5
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	0019      	movs	r1, r3
 8004098:	0010      	movs	r0, r2
 800409a:	f000 fe77 	bl	8004d8c <hspi_w16>
	hspi_w16(this->spiInstance, y2);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	19bb      	adds	r3, r7, r6
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	0019      	movs	r1, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	f000 fe6f 	bl	8004d8c <hspi_w16>
	
	// Set 'write to RAM'
	hspi_cmd(this->spiInstance, 0x2C);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 fe8c 	bl	8004dd2 <hspi_cmd>
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b007      	add	sp, #28
 80040c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c2 <_ZN7TFT_GFX10writePixelEsst>:

void TFT_GFX::writePixel(int16_t x, int16_t y, uint16_t color) 
{
 80040c2:	b5b0      	push	{r4, r5, r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	000c      	movs	r4, r1
 80040cc:	0010      	movs	r0, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	250a      	movs	r5, #10
 80040d2:	197b      	adds	r3, r7, r5
 80040d4:	1c22      	adds	r2, r4, #0
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	2308      	movs	r3, #8
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	1c02      	adds	r2, r0, #0
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	1dbb      	adds	r3, r7, #6
 80040e2:	1c0a      	adds	r2, r1, #0
 80040e4:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && (y >= 0) && (y < this->_height)) 
 80040e6:	197b      	adds	r3, r7, r5
 80040e8:	2200      	movs	r2, #0
 80040ea:	5e9b      	ldrsh	r3, [r3, r2]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db29      	blt.n	8004144 <_ZN7TFT_GFX10writePixelEsst+0x82>
 80040f0:	230a      	movs	r3, #10
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2200      	movs	r2, #0
 80040f6:	5e9b      	ldrsh	r3, [r3, r2]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	8892      	ldrh	r2, [r2, #4]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	da21      	bge.n	8004144 <_ZN7TFT_GFX10writePixelEsst+0x82>
 8004100:	2308      	movs	r3, #8
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2200      	movs	r2, #0
 8004106:	5e9b      	ldrsh	r3, [r3, r2]
 8004108:	2b00      	cmp	r3, #0
 800410a:	db1b      	blt.n	8004144 <_ZN7TFT_GFX10writePixelEsst+0x82>
 800410c:	2308      	movs	r3, #8
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2200      	movs	r2, #0
 8004112:	5e9b      	ldrsh	r3, [r3, r2]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	88d2      	ldrh	r2, [r2, #6]
 8004118:	4293      	cmp	r3, r2
 800411a:	da13      	bge.n	8004144 <_ZN7TFT_GFX10writePixelEsst+0x82>
    {
        setAddrWindow(x, y, 1, 1);
 800411c:	230a      	movs	r3, #10
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	8819      	ldrh	r1, [r3, #0]
 8004122:	2308      	movs	r3, #8
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	881a      	ldrh	r2, [r3, #0]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	2301      	movs	r3, #1
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2301      	movs	r3, #1
 8004130:	f7ff ff65 	bl	8003ffe <_ZN7TFT_GFX13setAddrWindowEtttt>
        hspi_w16(this->spiInstance, color);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	1dbb      	adds	r3, r7, #6
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	0019      	movs	r1, r3
 800413e:	0010      	movs	r0, r2
 8004140:	f000 fe24 	bl	8004d8c <hspi_w16>
    }
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b004      	add	sp, #16
 800414a:	bdb0      	pop	{r4, r5, r7, pc}

0800414c <_ZN7TFT_GFX13writeFillRectEsssst>:

void TFT_GFX::writeFillRect(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	000c      	movs	r4, r1
 8004156:	0010      	movs	r0, r2
 8004158:	0019      	movs	r1, r3
 800415a:	230a      	movs	r3, #10
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	1c22      	adds	r2, r4, #0
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	2308      	movs	r3, #8
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	1c02      	adds	r2, r0, #0
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	1c0a      	adds	r2, r1, #0
 800416e:	801a      	strh	r2, [r3, #0]
    if(w && h) {                            // Nonzero width and height?
 8004170:	1dbb      	adds	r3, r7, #6
 8004172:	2200      	movs	r2, #0
 8004174:	5e9b      	ldrsh	r3, [r3, r2]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d100      	bne.n	800417c <_ZN7TFT_GFX13writeFillRectEsssst+0x30>
 800417a:	e0c8      	b.n	800430e <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
 800417c:	2328      	movs	r3, #40	; 0x28
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2200      	movs	r2, #0
 8004182:	5e9b      	ldrsh	r3, [r3, r2]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d100      	bne.n	800418a <_ZN7TFT_GFX13writeFillRectEsssst+0x3e>
 8004188:	e0c1      	b.n	800430e <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
        if(w < 0) {                         // If negative width...
 800418a:	1dbb      	adds	r3, r7, #6
 800418c:	2200      	movs	r2, #0
 800418e:	5e9b      	ldrsh	r3, [r3, r2]
 8004190:	2b00      	cmp	r3, #0
 8004192:	da10      	bge.n	80041b6 <_ZN7TFT_GFX13writeFillRectEsssst+0x6a>
            x +=  w + 1;                    //   Move X to left edge
 8004194:	1dbb      	adds	r3, r7, #6
 8004196:	881a      	ldrh	r2, [r3, #0]
 8004198:	210a      	movs	r1, #10
 800419a:	187b      	adds	r3, r7, r1
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	18d3      	adds	r3, r2, r3
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	801a      	strh	r2, [r3, #0]
            w  = -w;                        //   Use positive width
 80041aa:	1dbb      	adds	r3, r7, #6
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	425b      	negs	r3, r3
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	1dbb      	adds	r3, r7, #6
 80041b4:	801a      	strh	r2, [r3, #0]
        }
        if(x < this->_width) {                    // Not off right
 80041b6:	230a      	movs	r3, #10
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2200      	movs	r2, #0
 80041bc:	5e9b      	ldrsh	r3, [r3, r2]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	8892      	ldrh	r2, [r2, #4]
 80041c2:	4293      	cmp	r3, r2
 80041c4:	db00      	blt.n	80041c8 <_ZN7TFT_GFX13writeFillRectEsssst+0x7c>
 80041c6:	e0a2      	b.n	800430e <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
            if(h < 0) {                     // If negative height...
 80041c8:	2328      	movs	r3, #40	; 0x28
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2200      	movs	r2, #0
 80041ce:	5e9b      	ldrsh	r3, [r3, r2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da11      	bge.n	80041f8 <_ZN7TFT_GFX13writeFillRectEsssst+0xac>
                y +=  h + 1;                //   Move Y to top edge
 80041d4:	2128      	movs	r1, #40	; 0x28
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	2008      	movs	r0, #8
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	18d3      	adds	r3, r2, r3
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	183b      	adds	r3, r7, r0
 80041ea:	801a      	strh	r2, [r3, #0]
                h  = -h;                    //   Use positive height
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	425b      	negs	r3, r3
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	801a      	strh	r2, [r3, #0]
            }
            if(y < this->_height) {               // Not off bottom
 80041f8:	2308      	movs	r3, #8
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2200      	movs	r2, #0
 80041fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	88d2      	ldrh	r2, [r2, #6]
 8004204:	4293      	cmp	r3, r2
 8004206:	db00      	blt.n	800420a <_ZN7TFT_GFX13writeFillRectEsssst+0xbe>
 8004208:	e081      	b.n	800430e <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                int16_t x2 = x + w - 1;
 800420a:	230a      	movs	r3, #10
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	881a      	ldrh	r2, [r3, #0]
 8004210:	1dbb      	adds	r3, r7, #6
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	18d3      	adds	r3, r2, r3
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	2116      	movs	r1, #22
 800421e:	187b      	adds	r3, r7, r1
 8004220:	801a      	strh	r2, [r3, #0]
                if(x2 >= 0) {               // Not off left
 8004222:	187b      	adds	r3, r7, r1
 8004224:	2200      	movs	r2, #0
 8004226:	5e9b      	ldrsh	r3, [r3, r2]
 8004228:	2b00      	cmp	r3, #0
 800422a:	da00      	bge.n	800422e <_ZN7TFT_GFX13writeFillRectEsssst+0xe2>
 800422c:	e06f      	b.n	800430e <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                    int16_t y2 = y + h - 1;
 800422e:	2308      	movs	r3, #8
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	881a      	ldrh	r2, [r3, #0]
 8004234:	2328      	movs	r3, #40	; 0x28
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	18d3      	adds	r3, r2, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	2114      	movs	r1, #20
 8004244:	187b      	adds	r3, r7, r1
 8004246:	801a      	strh	r2, [r3, #0]
                    if(y2 >= 0) {           // Not off top
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2200      	movs	r2, #0
 800424c:	5e9b      	ldrsh	r3, [r3, r2]
 800424e:	2b00      	cmp	r3, #0
 8004250:	db5d      	blt.n	800430e <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                        // Rectangle partly or fully overlaps screen
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 8004252:	230a      	movs	r3, #10
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	2200      	movs	r2, #0
 8004258:	5e9b      	ldrsh	r3, [r3, r2]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0a      	bge.n	8004274 <_ZN7TFT_GFX13writeFillRectEsssst+0x128>
 800425e:	230a      	movs	r3, #10
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	2200      	movs	r2, #0
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	2316      	movs	r3, #22
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	1dbb      	adds	r3, r7, #6
 8004272:	801a      	strh	r2, [r3, #0]
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8004274:	2308      	movs	r3, #8
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	5e9b      	ldrsh	r3, [r3, r2]
 800427c:	2b00      	cmp	r3, #0
 800427e:	da0b      	bge.n	8004298 <_ZN7TFT_GFX13writeFillRectEsssst+0x14c>
 8004280:	2308      	movs	r3, #8
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2200      	movs	r2, #0
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	2314      	movs	r3, #20
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	2328      	movs	r3, #40	; 0x28
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	801a      	strh	r2, [r3, #0]
                        if(x2 >= this->_width)  { w = this->_width  - x;   } // Clip right
 8004298:	2316      	movs	r3, #22
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2200      	movs	r2, #0
 800429e:	5e9b      	ldrsh	r3, [r3, r2]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	8892      	ldrh	r2, [r2, #4]
 80042a4:	4293      	cmp	r3, r2
 80042a6:	db08      	blt.n	80042ba <_ZN7TFT_GFX13writeFillRectEsssst+0x16e>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	889a      	ldrh	r2, [r3, #4]
 80042ac:	230a      	movs	r3, #10
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	1dbb      	adds	r3, r7, #6
 80042b8:	801a      	strh	r2, [r3, #0]
                        if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 80042ba:	2314      	movs	r3, #20
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	2200      	movs	r2, #0
 80042c0:	5e9b      	ldrsh	r3, [r3, r2]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	88d2      	ldrh	r2, [r2, #6]
 80042c6:	4293      	cmp	r3, r2
 80042c8:	db09      	blt.n	80042de <_ZN7TFT_GFX13writeFillRectEsssst+0x192>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88da      	ldrh	r2, [r3, #6]
 80042ce:	2308      	movs	r3, #8
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	2328      	movs	r3, #40	; 0x28
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	801a      	strh	r2, [r3, #0]
                        writeFillRectPreclipped(x, y, w, h, color);
 80042de:	1dbb      	adds	r3, r7, #6
 80042e0:	2400      	movs	r4, #0
 80042e2:	5f1c      	ldrsh	r4, [r3, r4]
 80042e4:	2308      	movs	r3, #8
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	5e9a      	ldrsh	r2, [r3, r2]
 80042ec:	230a      	movs	r3, #10
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2100      	movs	r1, #0
 80042f2:	5e59      	ldrsh	r1, [r3, r1]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	232c      	movs	r3, #44	; 0x2c
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	2328      	movs	r3, #40	; 0x28
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	2500      	movs	r5, #0
 8004304:	5f5b      	ldrsh	r3, [r3, r5]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	0023      	movs	r3, r4
 800430a:	f000 f804 	bl	8004316 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
                    }
                }
            }
        }
    }
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bdb0      	pop	{r4, r5, r7, pc}

08004316 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>:

inline void TFT_GFX::writeFillRectPreclipped(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8004316:	b5b0      	push	{r4, r5, r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af02      	add	r7, sp, #8
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	000c      	movs	r4, r1
 8004320:	0010      	movs	r0, r2
 8004322:	0019      	movs	r1, r3
 8004324:	250a      	movs	r5, #10
 8004326:	197b      	adds	r3, r7, r5
 8004328:	1c22      	adds	r2, r4, #0
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	2408      	movs	r4, #8
 800432e:	193b      	adds	r3, r7, r4
 8004330:	1c02      	adds	r2, r0, #0
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	1dbb      	adds	r3, r7, #6
 8004336:	1c0a      	adds	r2, r1, #0
 8004338:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, w, h);
 800433a:	197b      	adds	r3, r7, r5
 800433c:	8819      	ldrh	r1, [r3, #0]
 800433e:	193b      	adds	r3, r7, r4
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	1dbb      	adds	r3, r7, #6
 8004344:	881c      	ldrh	r4, [r3, #0]
 8004346:	2520      	movs	r5, #32
 8004348:	197b      	adds	r3, r7, r5
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	0023      	movs	r3, r4
 8004352:	f7ff fe54 	bl	8003ffe <_ZN7TFT_GFX13setAddrWindowEtttt>
    writeColor(color, (uint32_t)w * h);
 8004356:	1dbb      	adds	r3, r7, #6
 8004358:	2200      	movs	r2, #0
 800435a:	5e9b      	ldrsh	r3, [r3, r2]
 800435c:	197a      	adds	r2, r7, r5
 800435e:	2100      	movs	r1, #0
 8004360:	5e52      	ldrsh	r2, [r2, r1]
 8004362:	435a      	muls	r2, r3
 8004364:	2324      	movs	r3, #36	; 0x24
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	8819      	ldrh	r1, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 f804 	bl	800437a <_ZN7TFT_GFX10writeColorEtm>
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b004      	add	sp, #16
 8004378:	bdb0      	pop	{r4, r5, r7, pc}

0800437a <_ZN7TFT_GFX10writeColorEtm>:

void TFT_GFX::writeColor(uint16_t color, uint32_t len){
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	230a      	movs	r3, #10
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	1c0a      	adds	r2, r1, #0
 800438a:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++){
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	d20c      	bcs.n	80043b2 <_ZN7TFT_GFX10writeColorEtm+0x38>
		hspi_w16(this->spiInstance, color);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	230a      	movs	r3, #10
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	0019      	movs	r1, r3
 80043a4:	0010      	movs	r0, r2
 80043a6:	f000 fcf1 	bl	8004d8c <hspi_w16>
	for(uint32_t i = 0; i < len; i++){
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3301      	adds	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e7ee      	b.n	8004390 <_ZN7TFT_GFX10writeColorEtm+0x16>
	}
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b006      	add	sp, #24
 80043b8:	bd80      	pop	{r7, pc}

080043ba <_ZN7TFT_GFX14writeFastVLineEssst>:

void inline TFT_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80043ba:	b5b0      	push	{r4, r5, r7, lr}
 80043bc:	b088      	sub	sp, #32
 80043be:	af02      	add	r7, sp, #8
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	000c      	movs	r4, r1
 80043c4:	0010      	movs	r0, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	250a      	movs	r5, #10
 80043ca:	197b      	adds	r3, r7, r5
 80043cc:	1c22      	adds	r2, r4, #0
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	2308      	movs	r3, #8
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	1c02      	adds	r2, r0, #0
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	1dbb      	adds	r3, r7, #6
 80043da:	1c0a      	adds	r2, r1, #0
 80043dc:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && h) { // X on screen, nonzero height
 80043de:	197b      	adds	r3, r7, r5
 80043e0:	2200      	movs	r2, #0
 80043e2:	5e9b      	ldrsh	r3, [r3, r2]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da00      	bge.n	80043ea <_ZN7TFT_GFX14writeFastVLineEssst+0x30>
 80043e8:	e072      	b.n	80044d0 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 80043ea:	230a      	movs	r3, #10
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	2200      	movs	r2, #0
 80043f0:	5e9b      	ldrsh	r3, [r3, r2]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	8892      	ldrh	r2, [r2, #4]
 80043f6:	4293      	cmp	r3, r2
 80043f8:	db00      	blt.n	80043fc <_ZN7TFT_GFX14writeFastVLineEssst+0x42>
 80043fa:	e069      	b.n	80044d0 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 80043fc:	1dbb      	adds	r3, r7, #6
 80043fe:	2200      	movs	r2, #0
 8004400:	5e9b      	ldrsh	r3, [r3, r2]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d064      	beq.n	80044d0 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
        if(h < 0) {                     // If negative height...
 8004406:	1dbb      	adds	r3, r7, #6
 8004408:	2200      	movs	r2, #0
 800440a:	5e9b      	ldrsh	r3, [r3, r2]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da10      	bge.n	8004432 <_ZN7TFT_GFX14writeFastVLineEssst+0x78>
            y +=  h + 1;                //   Move Y to top edge
 8004410:	1dbb      	adds	r3, r7, #6
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	2108      	movs	r1, #8
 8004416:	187b      	adds	r3, r7, r1
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	b29b      	uxth	r3, r3
 800441e:	3301      	adds	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	187b      	adds	r3, r7, r1
 8004424:	801a      	strh	r2, [r3, #0]
            h  = -h;                    //   Use positive height
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	425b      	negs	r3, r3
 800442c:	b29a      	uxth	r2, r3
 800442e:	1dbb      	adds	r3, r7, #6
 8004430:	801a      	strh	r2, [r3, #0]
        }
        if(y < this->_height) {               // Not off bottom
 8004432:	2308      	movs	r3, #8
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2200      	movs	r2, #0
 8004438:	5e9b      	ldrsh	r3, [r3, r2]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	88d2      	ldrh	r2, [r2, #6]
 800443e:	4293      	cmp	r3, r2
 8004440:	da46      	bge.n	80044d0 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
            int16_t y2 = y + h - 1;
 8004442:	2308      	movs	r3, #8
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	1dbb      	adds	r3, r7, #6
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	18d3      	adds	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	2116      	movs	r1, #22
 8004456:	187b      	adds	r3, r7, r1
 8004458:	801a      	strh	r2, [r3, #0]
            if(y2 >= 0) {               // Not off top
 800445a:	187b      	adds	r3, r7, r1
 800445c:	2200      	movs	r2, #0
 800445e:	5e9b      	ldrsh	r3, [r3, r2]
 8004460:	2b00      	cmp	r3, #0
 8004462:	db35      	blt.n	80044d0 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
                // Line partly or fully overlaps screen
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 8004464:	2308      	movs	r3, #8
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	2200      	movs	r2, #0
 800446a:	5e9b      	ldrsh	r3, [r3, r2]
 800446c:	2b00      	cmp	r3, #0
 800446e:	da0a      	bge.n	8004486 <_ZN7TFT_GFX14writeFastVLineEssst+0xcc>
 8004470:	2308      	movs	r3, #8
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2200      	movs	r2, #0
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	2316      	movs	r3, #22
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	1dbb      	adds	r3, r7, #6
 8004484:	801a      	strh	r2, [r3, #0]
                if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 8004486:	2316      	movs	r3, #22
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2200      	movs	r2, #0
 800448c:	5e9b      	ldrsh	r3, [r3, r2]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	88d2      	ldrh	r2, [r2, #6]
 8004492:	4293      	cmp	r3, r2
 8004494:	db08      	blt.n	80044a8 <_ZN7TFT_GFX14writeFastVLineEssst+0xee>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	88da      	ldrh	r2, [r3, #6]
 800449a:	2308      	movs	r3, #8
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	1dbb      	adds	r3, r7, #6
 80044a6:	801a      	strh	r2, [r3, #0]
                writeFillRectPreclipped(x, y, 1, h, color);
 80044a8:	2308      	movs	r3, #8
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2200      	movs	r2, #0
 80044ae:	5e9a      	ldrsh	r2, [r3, r2]
 80044b0:	230a      	movs	r3, #10
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2100      	movs	r1, #0
 80044b6:	5e59      	ldrsh	r1, [r3, r1]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	2328      	movs	r3, #40	; 0x28
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	1dbb      	adds	r3, r7, #6
 80044c4:	2400      	movs	r4, #0
 80044c6:	5f1b      	ldrsh	r3, [r3, r4]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2301      	movs	r3, #1
 80044cc:	f7ff ff23 	bl	8004316 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
            }
        }
    }
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b006      	add	sp, #24
 80044d6:	bdb0      	pop	{r4, r5, r7, pc}

080044d8 <_ZN7TFT_GFX8drawCharEsshtthh>:
        }
    }
}

void TFT_GFX::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) 
{
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b089      	sub	sp, #36	; 0x24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	000c      	movs	r4, r1
 80044e2:	0010      	movs	r0, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	250a      	movs	r5, #10
 80044e8:	197b      	adds	r3, r7, r5
 80044ea:	1c22      	adds	r2, r4, #0
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	2308      	movs	r3, #8
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	1c02      	adds	r2, r0, #0
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	1c0a      	adds	r2, r1, #0
 80044fa:	701a      	strb	r2, [r3, #0]
    if((x >= this->_width)            || // Clip right
 80044fc:	197b      	adds	r3, r7, r5
 80044fe:	2200      	movs	r2, #0
 8004500:	5e9b      	ldrsh	r3, [r3, r2]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	8892      	ldrh	r2, [r2, #4]
 8004506:	4293      	cmp	r3, r2
 8004508:	db00      	blt.n	800450c <_ZN7TFT_GFX8drawCharEsshtthh+0x34>
 800450a:	e1c2      	b.n	8004892 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        (y >= this->_height)           || // Clip bottom
 800450c:	2308      	movs	r3, #8
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2200      	movs	r2, #0
 8004512:	5e9b      	ldrsh	r3, [r3, r2]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	88d2      	ldrh	r2, [r2, #6]
    if((x >= this->_width)            || // Clip right
 8004518:	4293      	cmp	r3, r2
 800451a:	db00      	blt.n	800451e <_ZN7TFT_GFX8drawCharEsshtthh+0x46>
 800451c:	e1b9      	b.n	8004892 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 800451e:	230a      	movs	r3, #10
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2100      	movs	r1, #0
 8004524:	5e59      	ldrsh	r1, [r3, r1]
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	2208      	movs	r2, #8
 800452a:	4694      	mov	ip, r2
 800452c:	44bc      	add	ip, r7
 800452e:	4463      	add	r3, ip
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	0013      	movs	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	189b      	adds	r3, r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	18cb      	adds	r3, r1, r3
 800453c:	3b01      	subs	r3, #1
        (y >= this->_height)           || // Clip bottom
 800453e:	2b00      	cmp	r3, #0
 8004540:	da00      	bge.n	8004544 <_ZN7TFT_GFX8drawCharEsshtthh+0x6c>
 8004542:	e1a6      	b.n	8004892 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8004544:	2308      	movs	r3, #8
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2200      	movs	r2, #0
 800454a:	5e9a      	ldrsh	r2, [r3, r2]
 800454c:	2334      	movs	r3, #52	; 0x34
 800454e:	2108      	movs	r1, #8
 8004550:	468c      	mov	ip, r1
 8004552:	44bc      	add	ip, r7
 8004554:	4463      	add	r3, ip
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	18d3      	adds	r3, r2, r3
 800455c:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 800455e:	2b00      	cmp	r3, #0
 8004560:	da00      	bge.n	8004564 <_ZN7TFT_GFX8drawCharEsshtthh+0x8c>
 8004562:	e196      	b.n	8004892 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        return;

    if(c >= 176) c++; // Handle 'classic' charset behavior
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2baf      	cmp	r3, #175	; 0xaf
 800456a:	d904      	bls.n	8004576 <_ZN7TFT_GFX8drawCharEsshtthh+0x9e>
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	1dfb      	adds	r3, r7, #7
 8004572:	3201      	adds	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]

    //startWrite();
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8004576:	2317      	movs	r3, #23
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	2317      	movs	r3, #23
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b25b      	sxtb	r3, r3
 8004586:	2b04      	cmp	r3, #4
 8004588:	dd00      	ble.n	800458c <_ZN7TFT_GFX8drawCharEsshtthh+0xb4>
 800458a:	e11f      	b.n	80047cc <_ZN7TFT_GFX8drawCharEsshtthh+0x2f4>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 800458c:	1dfb      	adds	r3, r7, #7
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	0013      	movs	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	189a      	adds	r2, r3, r2
 8004596:	2317      	movs	r3, #23
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b25b      	sxtb	r3, r3
 800459e:	18d2      	adds	r2, r2, r3
 80045a0:	2316      	movs	r3, #22
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	49bd      	ldr	r1, [pc, #756]	; (800489c <_ZN7TFT_GFX8drawCharEsshtthh+0x3c4>)
 80045a6:	5c8a      	ldrb	r2, [r1, r2]
 80045a8:	701a      	strb	r2, [r3, #0]
        for(int8_t j=0; j<8; j++, line >>= 1) {
 80045aa:	2315      	movs	r3, #21
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	2315      	movs	r3, #21
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	2b07      	cmp	r3, #7
 80045bc:	dd00      	ble.n	80045c0 <_ZN7TFT_GFX8drawCharEsshtthh+0xe8>
 80045be:	e0fb      	b.n	80047b8 <_ZN7TFT_GFX8drawCharEsshtthh+0x2e0>
            if(line & 1) {
 80045c0:	2316      	movs	r3, #22
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	d06c      	beq.n	80046a6 <_ZN7TFT_GFX8drawCharEsshtthh+0x1ce>
                if(size_x == 1 && size_y == 1)
 80045cc:	2330      	movs	r3, #48	; 0x30
 80045ce:	2208      	movs	r2, #8
 80045d0:	4694      	mov	ip, r2
 80045d2:	44bc      	add	ip, r7
 80045d4:	4463      	add	r3, ip
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d127      	bne.n	800462c <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
 80045dc:	2334      	movs	r3, #52	; 0x34
 80045de:	2208      	movs	r2, #8
 80045e0:	4694      	mov	ip, r2
 80045e2:	44bc      	add	ip, r7
 80045e4:	4463      	add	r3, ip
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d11f      	bne.n	800462c <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
                    writePixel(x+i, y+j, color);
 80045ec:	2317      	movs	r3, #23
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	230a      	movs	r3, #10
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	b219      	sxth	r1, r3
 8004602:	2315      	movs	r3, #21
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b25b      	sxtb	r3, r3
 800460a:	b29a      	uxth	r2, r3
 800460c:	2308      	movs	r3, #8
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	18d3      	adds	r3, r2, r3
 8004614:	b29b      	uxth	r3, r3
 8004616:	b21a      	sxth	r2, r3
 8004618:	2328      	movs	r3, #40	; 0x28
 800461a:	2008      	movs	r0, #8
 800461c:	4684      	mov	ip, r0
 800461e:	44bc      	add	ip, r7
 8004620:	4463      	add	r3, ip
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fd4c 	bl	80040c2 <_ZN7TFT_GFX10writePixelEsst>
 800462a:	e0b5      	b.n	8004798 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 800462c:	2317      	movs	r3, #23
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b25b      	sxtb	r3, r3
 8004634:	b29b      	uxth	r3, r3
 8004636:	2030      	movs	r0, #48	; 0x30
 8004638:	2408      	movs	r4, #8
 800463a:	193a      	adds	r2, r7, r4
 800463c:	1812      	adds	r2, r2, r0
 800463e:	7812      	ldrb	r2, [r2, #0]
 8004640:	b292      	uxth	r2, r2
 8004642:	4353      	muls	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	230a      	movs	r3, #10
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	18d3      	adds	r3, r2, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	b219      	sxth	r1, r3
 8004652:	2315      	movs	r3, #21
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b25b      	sxtb	r3, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	2634      	movs	r6, #52	; 0x34
 800465e:	193a      	adds	r2, r7, r4
 8004660:	1992      	adds	r2, r2, r6
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	b292      	uxth	r2, r2
 8004666:	4353      	muls	r3, r2
 8004668:	b29a      	uxth	r2, r3
 800466a:	0023      	movs	r3, r4
 800466c:	001d      	movs	r5, r3
 800466e:	18fb      	adds	r3, r7, r3
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	18d3      	adds	r3, r2, r3
 8004674:	b29b      	uxth	r3, r3
 8004676:	b21c      	sxth	r4, r3
 8004678:	002a      	movs	r2, r5
 800467a:	18bb      	adds	r3, r7, r2
 800467c:	181b      	adds	r3, r3, r0
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	b21d      	sxth	r5, r3
 8004682:	18bb      	adds	r3, r7, r2
 8004684:	199b      	adds	r3, r3, r6
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b21b      	sxth	r3, r3
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	2228      	movs	r2, #40	; 0x28
 800468e:	2608      	movs	r6, #8
 8004690:	46b4      	mov	ip, r6
 8004692:	44bc      	add	ip, r7
 8004694:	4462      	add	r2, ip
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	9201      	str	r2, [sp, #4]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	002b      	movs	r3, r5
 800469e:	0022      	movs	r2, r4
 80046a0:	f7ff fd54 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
 80046a4:	e078      	b.n	8004798 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
            } else if(bg != color) {
 80046a6:	232c      	movs	r3, #44	; 0x2c
 80046a8:	2208      	movs	r2, #8
 80046aa:	4694      	mov	ip, r2
 80046ac:	44bc      	add	ip, r7
 80046ae:	4463      	add	r3, ip
 80046b0:	2228      	movs	r2, #40	; 0x28
 80046b2:	2108      	movs	r1, #8
 80046b4:	1879      	adds	r1, r7, r1
 80046b6:	1889      	adds	r1, r1, r2
 80046b8:	881a      	ldrh	r2, [r3, #0]
 80046ba:	880b      	ldrh	r3, [r1, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d06b      	beq.n	8004798 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                if(size_x == 1 && size_y == 1)
 80046c0:	2330      	movs	r3, #48	; 0x30
 80046c2:	2208      	movs	r2, #8
 80046c4:	4694      	mov	ip, r2
 80046c6:	44bc      	add	ip, r7
 80046c8:	4463      	add	r3, ip
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d127      	bne.n	8004720 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
 80046d0:	2334      	movs	r3, #52	; 0x34
 80046d2:	2208      	movs	r2, #8
 80046d4:	4694      	mov	ip, r2
 80046d6:	44bc      	add	ip, r7
 80046d8:	4463      	add	r3, ip
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d11f      	bne.n	8004720 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
                    writePixel(x+i, y+j, bg);
 80046e0:	2317      	movs	r3, #23
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	230a      	movs	r3, #10
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	18d3      	adds	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	b219      	sxth	r1, r3
 80046f6:	2315      	movs	r3, #21
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	b29a      	uxth	r2, r3
 8004700:	2308      	movs	r3, #8
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	18d3      	adds	r3, r2, r3
 8004708:	b29b      	uxth	r3, r3
 800470a:	b21a      	sxth	r2, r3
 800470c:	232c      	movs	r3, #44	; 0x2c
 800470e:	2008      	movs	r0, #8
 8004710:	4684      	mov	ip, r0
 8004712:	44bc      	add	ip, r7
 8004714:	4463      	add	r3, ip
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7ff fcd2 	bl	80040c2 <_ZN7TFT_GFX10writePixelEsst>
 800471e:	e03b      	b.n	8004798 <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 8004720:	2317      	movs	r3, #23
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b25b      	sxtb	r3, r3
 8004728:	b29b      	uxth	r3, r3
 800472a:	2030      	movs	r0, #48	; 0x30
 800472c:	2408      	movs	r4, #8
 800472e:	193a      	adds	r2, r7, r4
 8004730:	1812      	adds	r2, r2, r0
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	b292      	uxth	r2, r2
 8004736:	4353      	muls	r3, r2
 8004738:	b29a      	uxth	r2, r3
 800473a:	230a      	movs	r3, #10
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	18d3      	adds	r3, r2, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	b219      	sxth	r1, r3
 8004746:	2315      	movs	r3, #21
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b25b      	sxtb	r3, r3
 800474e:	b29b      	uxth	r3, r3
 8004750:	2634      	movs	r6, #52	; 0x34
 8004752:	193a      	adds	r2, r7, r4
 8004754:	1992      	adds	r2, r2, r6
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	b292      	uxth	r2, r2
 800475a:	4353      	muls	r3, r2
 800475c:	b29a      	uxth	r2, r3
 800475e:	0023      	movs	r3, r4
 8004760:	001d      	movs	r5, r3
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	18d3      	adds	r3, r2, r3
 8004768:	b29b      	uxth	r3, r3
 800476a:	b21c      	sxth	r4, r3
 800476c:	002a      	movs	r2, r5
 800476e:	18bb      	adds	r3, r7, r2
 8004770:	181b      	adds	r3, r3, r0
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b21d      	sxth	r5, r3
 8004776:	18bb      	adds	r3, r7, r2
 8004778:	199b      	adds	r3, r3, r6
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b21b      	sxth	r3, r3
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	222c      	movs	r2, #44	; 0x2c
 8004782:	2608      	movs	r6, #8
 8004784:	46b4      	mov	ip, r6
 8004786:	44bc      	add	ip, r7
 8004788:	4462      	add	r2, ip
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	9201      	str	r2, [sp, #4]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	002b      	movs	r3, r5
 8004792:	0022      	movs	r2, r4
 8004794:	f7ff fcda 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
        for(int8_t j=0; j<8; j++, line >>= 1) {
 8004798:	2115      	movs	r1, #21
 800479a:	187b      	adds	r3, r7, r1
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b25b      	sxtb	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	2116      	movs	r1, #22
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	105a      	asrs	r2, r3, #1
 80047b2:	187b      	adds	r3, r7, r1
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e6fc      	b.n	80045b2 <_ZN7TFT_GFX8drawCharEsshtthh+0xda>
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80047b8:	2117      	movs	r1, #23
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b25b      	sxtb	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e6d8      	b.n	800457e <_ZN7TFT_GFX8drawCharEsshtthh+0xa6>
            }
        }
    }
    if(bg != color) { // If opaque, draw vertical line for last column
 80047cc:	232c      	movs	r3, #44	; 0x2c
 80047ce:	2208      	movs	r2, #8
 80047d0:	4694      	mov	ip, r2
 80047d2:	44bc      	add	ip, r7
 80047d4:	4463      	add	r3, ip
 80047d6:	2228      	movs	r2, #40	; 0x28
 80047d8:	2108      	movs	r1, #8
 80047da:	1879      	adds	r1, r7, r1
 80047dc:	1889      	adds	r1, r1, r2
 80047de:	881a      	ldrh	r2, [r3, #0]
 80047e0:	880b      	ldrh	r3, [r1, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d056      	beq.n	8004894 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80047e6:	2330      	movs	r3, #48	; 0x30
 80047e8:	2208      	movs	r2, #8
 80047ea:	4694      	mov	ip, r2
 80047ec:	44bc      	add	ip, r7
 80047ee:	4463      	add	r3, ip
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d11d      	bne.n	8004832 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 80047f6:	2334      	movs	r3, #52	; 0x34
 80047f8:	2208      	movs	r2, #8
 80047fa:	4694      	mov	ip, r2
 80047fc:	44bc      	add	ip, r7
 80047fe:	4463      	add	r3, ip
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d115      	bne.n	8004832 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 8004806:	230a      	movs	r3, #10
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	3305      	adds	r3, #5
 800480e:	b29b      	uxth	r3, r3
 8004810:	b219      	sxth	r1, r3
 8004812:	2308      	movs	r3, #8
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2200      	movs	r2, #0
 8004818:	5e9a      	ldrsh	r2, [r3, r2]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	232c      	movs	r3, #44	; 0x2c
 800481e:	2408      	movs	r4, #8
 8004820:	46a4      	mov	ip, r4
 8004822:	44bc      	add	ip, r7
 8004824:	4463      	add	r3, ip
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2308      	movs	r3, #8
 800482c:	f7ff fdc5 	bl	80043ba <_ZN7TFT_GFX14writeFastVLineEssst>
 8004830:	e030      	b.n	8004894 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 8004832:	2030      	movs	r0, #48	; 0x30
 8004834:	2408      	movs	r4, #8
 8004836:	193b      	adds	r3, r7, r4
 8004838:	181b      	adds	r3, r3, r0
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	1c1a      	adds	r2, r3, #0
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	18d3      	adds	r3, r2, r3
 8004844:	b29a      	uxth	r2, r3
 8004846:	230a      	movs	r3, #10
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	18d3      	adds	r3, r2, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	b219      	sxth	r1, r3
 8004852:	193b      	adds	r3, r7, r4
 8004854:	181b      	adds	r3, r3, r0
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	b21d      	sxth	r5, r3
 800485a:	2334      	movs	r3, #52	; 0x34
 800485c:	2208      	movs	r2, #8
 800485e:	4694      	mov	ip, r2
 8004860:	44bc      	add	ip, r7
 8004862:	4463      	add	r3, ip
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	b29b      	uxth	r3, r3
 800486c:	b21b      	sxth	r3, r3
 800486e:	0022      	movs	r2, r4
 8004870:	18ba      	adds	r2, r7, r2
 8004872:	2400      	movs	r4, #0
 8004874:	5f14      	ldrsh	r4, [r2, r4]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	222c      	movs	r2, #44	; 0x2c
 800487a:	2608      	movs	r6, #8
 800487c:	46b4      	mov	ip, r6
 800487e:	44bc      	add	ip, r7
 8004880:	4462      	add	r2, ip
 8004882:	8812      	ldrh	r2, [r2, #0]
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	002b      	movs	r3, r5
 800488a:	0022      	movs	r2, r4
 800488c:	f7ff fc5e 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
 8004890:	e000      	b.n	8004894 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        return;
 8004892:	46c0      	nop			; (mov r8, r8)
    }
    //endWrite();
}
 8004894:	46bd      	mov	sp, r7
 8004896:	b007      	add	sp, #28
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	08006c84 	.word	0x08006c84

080048a0 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b002      	add	sp, #8
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff ffed 	bl	80048a0 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80048c6:	0003      	movs	r3, r0
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff ffe5 	bl	80048a0 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80048d6:	0003      	movs	r3, r0
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	805a      	strh	r2, [r3, #2]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b004      	add	sp, #16
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7ff ffd3 	bl	80048a0 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80048fa:	0004      	movs	r4, r0
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff ffce 	bl	80048a0 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8004904:	0002      	movs	r2, r0
 8004906:	250c      	movs	r5, #12
 8004908:	197b      	adds	r3, r7, r5
 800490a:	0021      	movs	r1, r4
 800490c:	0018      	movs	r0, r3
 800490e:	f7ff ffd0 	bl	80048b2 <_ZNSt4pairIttEC1IRtS2_Lb1EEEOT_OT0_>
 8004912:	2108      	movs	r1, #8
 8004914:	187b      	adds	r3, r7, r1
 8004916:	197a      	adds	r2, r7, r5
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	187a      	adds	r2, r7, r1
 800491e:	2300      	movs	r3, #0
 8004920:	8811      	ldrh	r1, [r2, #0]
 8004922:	0409      	lsls	r1, r1, #16
 8004924:	0c09      	lsrs	r1, r1, #16
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	430b      	orrs	r3, r1
 800492c:	8852      	ldrh	r2, [r2, #2]
 800492e:	0412      	lsls	r2, r2, #16
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	0c1b      	lsrs	r3, r3, #16
 8004934:	4313      	orrs	r3, r2
    }
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b004      	add	sp, #16
 800493c:	bdb0      	pop	{r4, r5, r7, pc}

0800493e <_ZN7TFT_GFX10drawStringEssPKctthhtb>:

std::pair<uint16_t, uint16_t> TFT_GFX::drawString(int16_t init_x, int16_t init_y, const char* s, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, uint16_t x_edge, bool do_center)
{
 800493e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004940:	46c6      	mov	lr, r8
 8004942:	b500      	push	{lr}
 8004944:	b08e      	sub	sp, #56	; 0x38
 8004946:	af04      	add	r7, sp, #16
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	0008      	movs	r0, r1
 800494c:	0011      	movs	r1, r2
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	230a      	movs	r3, #10
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	1c02      	adds	r2, r0, #0
 8004956:	801a      	strh	r2, [r3, #0]
 8004958:	2308      	movs	r3, #8
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	1c0a      	adds	r2, r1, #0
 800495e:	801a      	strh	r2, [r3, #0]
	uint8_t totalChars = this->getStringSize(s);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	0011      	movs	r1, r2
 8004966:	0018      	movs	r0, r3
 8004968:	f7ff fb15 	bl	8003f96 <_ZN7TFT_GFX13getStringSizeEPKc>
 800496c:	0003      	movs	r3, r0
 800496e:	001a      	movs	r2, r3
 8004970:	211b      	movs	r1, #27
 8004972:	187b      	adds	r3, r7, r1
 8004974:	701a      	strb	r2, [r3, #0]
	totalChars = (totalChars > TFT_GFX::MAX_STRING_LENGTH ? TFT_GFX::MAX_STRING_LENGTH : totalChars);
 8004976:	187b      	adds	r3, r7, r1
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d803      	bhi.n	8004986 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x48>
 800497e:	231b      	movs	r3, #27
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	e000      	b.n	8004988 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x4a>
 8004986:	2264      	movs	r2, #100	; 0x64
 8004988:	231b      	movs	r3, #27
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	701a      	strb	r2, [r3, #0]

	uint16_t currX = init_x;
 800498e:	2326      	movs	r3, #38	; 0x26
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	210a      	movs	r1, #10
 8004994:	187a      	adds	r2, r7, r1
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	801a      	strh	r2, [r3, #0]
	uint16_t currY = init_y;
 800499a:	2324      	movs	r3, #36	; 0x24
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2008      	movs	r0, #8
 80049a0:	183a      	adds	r2, r7, r0
 80049a2:	8812      	ldrh	r2, [r2, #0]
 80049a4:	801a      	strh	r2, [r3, #0]

	uint16_t maxX = init_x;
 80049a6:	187b      	adds	r3, r7, r1
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	2318      	movs	r3, #24
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	801a      	strh	r2, [r3, #0]
	uint16_t maxY = init_y + (size_y * 8);
 80049b0:	2344      	movs	r3, #68	; 0x44
 80049b2:	2208      	movs	r2, #8
 80049b4:	4694      	mov	ip, r2
 80049b6:	44bc      	add	ip, r7
 80049b8:	4463      	add	r3, ip
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	183b      	adds	r3, r7, r0
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	18d3      	adds	r3, r2, r3
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	2316      	movs	r3, #22
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	801a      	strh	r2, [r3, #0]

	const uint8_t maxCharsInLine = (x_edge - init_x)/(size_x * 6);
 80049d0:	2348      	movs	r3, #72	; 0x48
 80049d2:	2208      	movs	r2, #8
 80049d4:	4694      	mov	ip, r2
 80049d6:	44bc      	add	ip, r7
 80049d8:	4463      	add	r3, ip
 80049da:	881a      	ldrh	r2, [r3, #0]
 80049dc:	187b      	adds	r3, r7, r1
 80049de:	2100      	movs	r1, #0
 80049e0:	5e5b      	ldrsh	r3, [r3, r1]
 80049e2:	1ad0      	subs	r0, r2, r3
 80049e4:	2340      	movs	r3, #64	; 0x40
 80049e6:	2208      	movs	r2, #8
 80049e8:	4694      	mov	ip, r2
 80049ea:	44bc      	add	ip, r7
 80049ec:	4463      	add	r3, ip
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	0013      	movs	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	0019      	movs	r1, r3
 80049fa:	f7fb fc0f 	bl	800021c <__divsi3>
 80049fe:	0003      	movs	r3, r0
 8004a00:	001a      	movs	r2, r3
 8004a02:	2321      	movs	r3, #33	; 0x21
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	701a      	strb	r2, [r3, #0]
	while(*s)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d100      	bne.n	8004a12 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xd4>
 8004a10:	e0d9      	b.n	8004bc6 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x288>
	{
		uint8_t currLineSize = this->getLineSize(s, maxCharsInLine);
 8004a12:	2520      	movs	r5, #32
 8004a14:	197c      	adds	r4, r7, r5
 8004a16:	2321      	movs	r3, #33	; 0x21
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7ff fa5e 	bl	8003ee2 <_ZN7TFT_GFX11getLineSizeEPKch>
 8004a26:	0003      	movs	r3, r0
 8004a28:	7023      	strb	r3, [r4, #0]
		uint8_t functionalLineSize;
		if(s[currLineSize - 1] == ' ')
 8004a2a:	197b      	adds	r3, r7, r5
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d107      	bne.n	8004a4a <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x10c>
		{
			functionalLineSize = currLineSize - 1;
 8004a3a:	2323      	movs	r3, #35	; 0x23
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2220      	movs	r2, #32
 8004a40:	18ba      	adds	r2, r7, r2
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	3a01      	subs	r2, #1
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e005      	b.n	8004a56 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x118>
		}else{
			functionalLineSize = currLineSize;
 8004a4a:	2323      	movs	r3, #35	; 0x23
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2220      	movs	r2, #32
 8004a50:	18ba      	adds	r2, r7, r2
 8004a52:	7812      	ldrb	r2, [r2, #0]
 8004a54:	701a      	strb	r2, [r3, #0]
		}

		if(do_center)
 8004a56:	234c      	movs	r3, #76	; 0x4c
 8004a58:	2208      	movs	r2, #8
 8004a5a:	4694      	mov	ip, r2
 8004a5c:	44bc      	add	ip, r7
 8004a5e:	4463      	add	r3, ip
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d026      	beq.n	8004ab4 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x176>
		{
			currX = ((x_edge - init_x) - (functionalLineSize * size_x * 6))/2 + init_x;
 8004a66:	2348      	movs	r3, #72	; 0x48
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4694      	mov	ip, r2
 8004a6c:	44bc      	add	ip, r7
 8004a6e:	4463      	add	r3, ip
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	230a      	movs	r3, #10
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2100      	movs	r1, #0
 8004a78:	5e5b      	ldrsh	r3, [r3, r1]
 8004a7a:	1ad1      	subs	r1, r2, r3
 8004a7c:	2323      	movs	r3, #35	; 0x23
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	2008      	movs	r0, #8
 8004a86:	4684      	mov	ip, r0
 8004a88:	44bc      	add	ip, r7
 8004a8a:	4462      	add	r2, ip
 8004a8c:	7812      	ldrb	r2, [r2, #0]
 8004a8e:	435a      	muls	r2, r3
 8004a90:	0013      	movs	r3, r2
 8004a92:	0092      	lsls	r2, r2, #2
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	18cb      	adds	r3, r1, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da00      	bge.n	8004aa0 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x162>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	105b      	asrs	r3, r3, #1
 8004aa2:	b299      	uxth	r1, r3
 8004aa4:	230a      	movs	r3, #10
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	2326      	movs	r3, #38	; 0x26
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	188a      	adds	r2, r1, r2
 8004ab0:	801a      	strh	r2, [r3, #0]
 8004ab2:	e005      	b.n	8004ac0 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x182>
		}else{
			currX = init_x;
 8004ab4:	2326      	movs	r3, #38	; 0x26
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	220a      	movs	r2, #10
 8004aba:	18ba      	adds	r2, r7, r2
 8004abc:	8812      	ldrh	r2, [r2, #0]
 8004abe:	801a      	strh	r2, [r3, #0]
		}

		for(uint8_t i = 0; i < functionalLineSize; i++)
 8004ac0:	2322      	movs	r3, #34	; 0x22
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	2322      	movs	r3, #34	; 0x22
 8004aca:	18fa      	adds	r2, r7, r3
 8004acc:	2323      	movs	r3, #35	; 0x23
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d250      	bcs.n	8004b7a <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x23c>
		{
			drawChar(currX,currY,*(s++),color,bg,size_x,size_y);
 8004ad8:	2526      	movs	r5, #38	; 0x26
 8004ada:	197b      	adds	r3, r7, r5
 8004adc:	2100      	movs	r1, #0
 8004ade:	5e59      	ldrsh	r1, [r3, r1]
 8004ae0:	2324      	movs	r3, #36	; 0x24
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	2400      	movs	r4, #0
 8004ae6:	5f1c      	ldrsh	r4, [r3, r4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4698      	mov	r8, r3
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	2344      	movs	r3, #68	; 0x44
 8004af6:	2208      	movs	r2, #8
 8004af8:	4694      	mov	ip, r2
 8004afa:	44bc      	add	ip, r7
 8004afc:	4463      	add	r3, ip
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	9303      	str	r3, [sp, #12]
 8004b02:	2640      	movs	r6, #64	; 0x40
 8004b04:	2308      	movs	r3, #8
 8004b06:	18fa      	adds	r2, r7, r3
 8004b08:	1993      	adds	r3, r2, r6
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	233c      	movs	r3, #60	; 0x3c
 8004b10:	2208      	movs	r2, #8
 8004b12:	4694      	mov	ip, r2
 8004b14:	44bc      	add	ip, r7
 8004b16:	4463      	add	r3, ip
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	2338      	movs	r3, #56	; 0x38
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4694      	mov	ip, r2
 8004b22:	44bc      	add	ip, r7
 8004b24:	4463      	add	r3, ip
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4643      	mov	r3, r8
 8004b2c:	0022      	movs	r2, r4
 8004b2e:	f7ff fcd3 	bl	80044d8 <_ZN7TFT_GFX8drawCharEsshtthh>
			currX += size_x * 6;
 8004b32:	2308      	movs	r3, #8
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	199b      	adds	r3, r3, r6
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	1c1a      	adds	r2, r3, #0
 8004b3e:	1c13      	adds	r3, r2, #0
 8004b40:	18db      	adds	r3, r3, r3
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	18db      	adds	r3, r3, r3
 8004b46:	b299      	uxth	r1, r3
 8004b48:	197b      	adds	r3, r7, r5
 8004b4a:	197a      	adds	r2, r7, r5
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	188a      	adds	r2, r1, r2
 8004b50:	801a      	strh	r2, [r3, #0]
			if(currX > maxX)
 8004b52:	2318      	movs	r3, #24
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	197a      	adds	r2, r7, r5
 8004b5a:	8812      	ldrh	r2, [r2, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d905      	bls.n	8004b6c <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x22e>
			{
				maxX = currX;
 8004b60:	2318      	movs	r3, #24
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	2226      	movs	r2, #38	; 0x26
 8004b66:	18ba      	adds	r2, r7, r2
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < functionalLineSize; i++)
 8004b6c:	2122      	movs	r1, #34	; 0x22
 8004b6e:	187b      	adds	r3, r7, r1
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	3201      	adds	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e7a6      	b.n	8004ac8 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x18a>
			}
		}
		//Skip the space
		s += (functionalLineSize == currLineSize ? 0 : 1);
 8004b7a:	2323      	movs	r3, #35	; 0x23
 8004b7c:	18fa      	adds	r2, r7, r3
 8004b7e:	2320      	movs	r3, #32
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	1e5a      	subs	r2, r3, #1
 8004b8a:	4193      	sbcs	r3, r2
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	001a      	movs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	607b      	str	r3, [r7, #4]
		//Go to next row
		currY += size_y * 8;
 8004b96:	2344      	movs	r3, #68	; 0x44
 8004b98:	2208      	movs	r2, #8
 8004b9a:	4694      	mov	ip, r2
 8004b9c:	44bc      	add	ip, r7
 8004b9e:	4463      	add	r3, ip
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	b299      	uxth	r1, r3
 8004ba8:	2224      	movs	r2, #36	; 0x24
 8004baa:	18bb      	adds	r3, r7, r2
 8004bac:	18ba      	adds	r2, r7, r2
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	188a      	adds	r2, r1, r2
 8004bb2:	801a      	strh	r2, [r3, #0]
		//If the next line starts with a space lets just skip it
		if(*s == ' ')
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d000      	beq.n	8004bbe <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x280>
 8004bbc:	e724      	b.n	8004a08 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		{
			s++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	607b      	str	r3, [r7, #4]
	while(*s)
 8004bc4:	e720      	b.n	8004a08 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0xca>
		}
	}
	maxY = currY;
 8004bc6:	2316      	movs	r3, #22
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2224      	movs	r2, #36	; 0x24
 8004bcc:	18ba      	adds	r2, r7, r2
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	801a      	strh	r2, [r3, #0]
	if(maxX > this->_width)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	889a      	ldrh	r2, [r3, #4]
 8004bd6:	2318      	movs	r3, #24
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d204      	bcs.n	8004bea <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2ac>
	{
		maxX = this->_width;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	889a      	ldrh	r2, [r3, #4]
 8004be4:	2318      	movs	r3, #24
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	801a      	strh	r2, [r3, #0]
	}
	if(maxY > this->_height)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88da      	ldrh	r2, [r3, #6]
 8004bee:	2316      	movs	r3, #22
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d204      	bcs.n	8004c02 <_ZN7TFT_GFX10drawStringEssPKctthhtb+0x2c4>
	{
		maxY = this->_height;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88da      	ldrh	r2, [r3, #6]
 8004bfc:	2316      	movs	r3, #22
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	801a      	strh	r2, [r3, #0]
	}
	return std::make_pair(maxX, maxY);
 8004c02:	2316      	movs	r3, #22
 8004c04:	18fa      	adds	r2, r7, r3
 8004c06:	2318      	movs	r3, #24
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7ff fe6b 	bl	80048e8 <_ZSt9make_pairIRtS0_ESt4pairINSt17__decay_and_stripIT_E6__typeENS2_IT0_E6__typeEEOS3_OS6_>
 8004c12:	0003      	movs	r3, r0
 8004c14:	001a      	movs	r2, r3
 8004c16:	211c      	movs	r1, #28
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	187a      	adds	r2, r7, r1
 8004c1e:	2300      	movs	r3, #0
 8004c20:	8811      	ldrh	r1, [r2, #0]
 8004c22:	0409      	lsls	r1, r1, #16
 8004c24:	0c09      	lsrs	r1, r1, #16
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	8852      	ldrh	r2, [r2, #2]
 8004c2e:	0412      	lsls	r2, r2, #16
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	4313      	orrs	r3, r2
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b00a      	add	sp, #40	; 0x28
 8004c3c:	bc04      	pop	{r2}
 8004c3e:	4690      	mov	r8, r2
 8004c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c42 <_ZN7TFT_GFX11setRotationEh>:

void TFT_GFX::setRotation(uint8_t m)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	000a      	movs	r2, r1
 8004c4c:	1cfb      	adds	r3, r7, #3
 8004c4e:	701a      	strb	r2, [r3, #0]
	uint8_t rotation = m % 4; // can't be higher than 3
 8004c50:	1cfb      	adds	r3, r7, #3
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	200f      	movs	r0, #15
 8004c56:	183b      	adds	r3, r7, r0
 8004c58:	2103      	movs	r1, #3
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	701a      	strb	r2, [r3, #0]
	    switch (rotation) {
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d013      	beq.n	8004c8e <_ZN7TFT_GFX11setRotationEh+0x4c>
 8004c66:	dc02      	bgt.n	8004c6e <_ZN7TFT_GFX11setRotationEh+0x2c>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <_ZN7TFT_GFX11setRotationEh+0x36>
 8004c6c:	e030      	b.n	8004cd0 <_ZN7TFT_GFX11setRotationEh+0x8e>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d018      	beq.n	8004ca4 <_ZN7TFT_GFX11setRotationEh+0x62>
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d021      	beq.n	8004cba <_ZN7TFT_GFX11setRotationEh+0x78>
 8004c76:	e02b      	b.n	8004cd0 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 0:
	            m = (MADCTL_MX | MADCTL_BGR);
 8004c78:	1cfb      	adds	r3, r7, #3
 8004c7a:	2248      	movs	r2, #72	; 0x48
 8004c7c:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	22f0      	movs	r2, #240	; 0xf0
 8004c82:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	22a0      	movs	r2, #160	; 0xa0
 8004c88:	0052      	lsls	r2, r2, #1
 8004c8a:	80da      	strh	r2, [r3, #6]
	            break;
 8004c8c:	e020      	b.n	8004cd0 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 1:
	            m = (MADCTL_MV | MADCTL_BGR);
 8004c8e:	1cfb      	adds	r3, r7, #3
 8004c90:	2228      	movs	r2, #40	; 0x28
 8004c92:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	22a0      	movs	r2, #160	; 0xa0
 8004c98:	0052      	lsls	r2, r2, #1
 8004c9a:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	22f0      	movs	r2, #240	; 0xf0
 8004ca0:	80da      	strh	r2, [r3, #6]
	            break;
 8004ca2:	e015      	b.n	8004cd0 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 2:
	            m = (MADCTL_MY | MADCTL_BGR);
 8004ca4:	1cfb      	adds	r3, r7, #3
 8004ca6:	2288      	movs	r2, #136	; 0x88
 8004ca8:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	22f0      	movs	r2, #240	; 0xf0
 8004cae:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	22a0      	movs	r2, #160	; 0xa0
 8004cb4:	0052      	lsls	r2, r2, #1
 8004cb6:	80da      	strh	r2, [r3, #6]
	            break;
 8004cb8:	e00a      	b.n	8004cd0 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 3:
	            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8004cba:	1cfb      	adds	r3, r7, #3
 8004cbc:	22e8      	movs	r2, #232	; 0xe8
 8004cbe:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	22a0      	movs	r2, #160	; 0xa0
 8004cc4:	0052      	lsls	r2, r2, #1
 8004cc6:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	22f0      	movs	r2, #240	; 0xf0
 8004ccc:	80da      	strh	r2, [r3, #6]
	            break;
 8004cce:	46c0      	nop			; (mov r8, r8)
	    }
	    sendCommand(this->spiInstance, ILI9341_MADCTL, &m, 1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	1cfa      	adds	r2, r7, #3
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	2136      	movs	r1, #54	; 0x36
 8004cda:	f000 f8a8 	bl	8004e2e <sendCommand>
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_ZN7TFT_GFX5widthEv>:

uint16_t TFT_GFX::width(void)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
	return this->_width;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	889b      	ldrh	r3, [r3, #4]
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b002      	add	sp, #8
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <_ZN7TFT_GFX6heightEv>:

uint16_t TFT_GFX::height(void)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
	return this->_height;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	88db      	ldrh	r3, [r3, #6]
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b002      	add	sp, #8
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 8004d12:	2390      	movs	r3, #144	; 0x90
 8004d14:	05db      	lsls	r3, r3, #23
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	2390      	movs	r3, #144	; 0x90
 8004d1a:	05db      	lsls	r3, r3, #23
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	438a      	bics	r2, r1
 8004d20:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8004d22:	2096      	movs	r0, #150	; 0x96
 8004d24:	f7fc faee 	bl	8001304 <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 8004d28:	2390      	movs	r3, #144	; 0x90
 8004d2a:	05db      	lsls	r3, r3, #23
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	2390      	movs	r3, #144	; 0x90
 8004d30:	05db      	lsls	r3, r3, #23
 8004d32:	2110      	movs	r1, #16
 8004d34:	430a      	orrs	r2, r1
 8004d36:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8004d38:	2096      	movs	r0, #150	; 0x96
 8004d3a:	f7fc fae3 	bl	8001304 <HAL_Delay>
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <pullCSLow>:

void pullCSLow(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <pullCSLow+0x18>)
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <pullCSLow+0x18>)
 8004d4e:	2102      	movs	r1, #2
 8004d50:	438a      	bics	r2, r1
 8004d52:	615a      	str	r2, [r3, #20]
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	48000400 	.word	0x48000400

08004d60 <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	000a      	movs	r2, r1
 8004d6a:	1cfb      	adds	r3, r7, #3
 8004d6c:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2202      	movs	r2, #2
 8004d76:	4013      	ands	r3, r2
 8004d78:	d0fa      	beq.n	8004d70 <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	1cfa      	adds	r2, r7, #3
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	701a      	strb	r2, [r3, #0]
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <hspi_w16>:

void hspi_w16(SPI_TypeDef *SPIx, uint16_t dat) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	000a      	movs	r2, r1
 8004d96:	1cbb      	adds	r3, r7, #2
 8004d98:	801a      	strh	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2202      	movs	r2, #2
 8004da2:	4013      	ands	r3, r2
 8004da4:	d0fa      	beq.n	8004d9c <hspi_w16+0x10>
  // Send the data.
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
 8004da6:	1cbb      	adds	r3, r7, #2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	1cbb      	adds	r3, r7, #2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	b21a      	sxth	r2, r3
 8004dbc:	1cbb      	adds	r3, r7, #2
 8004dbe:	801a      	strh	r2, [r3, #0]
  *(uint16_t*)&(SPIx->DR) = dat;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	1cba      	adds	r2, r7, #2
 8004dc6:	8812      	ldrh	r2, [r2, #0]
 8004dc8:	801a      	strh	r2, [r3, #0]
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <hspi_cmd>:

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	000a      	movs	r2, r1
 8004ddc:	1cfb      	adds	r3, r7, #3
 8004dde:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8004de0:	46c0      	nop			; (mov r8, r8)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	4013      	ands	r3, r2
 8004dea:	d1fa      	bne.n	8004de2 <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 8004dec:	2390      	movs	r3, #144	; 0x90
 8004dee:	05db      	lsls	r3, r3, #23
 8004df0:	695a      	ldr	r2, [r3, #20]
 8004df2:	2390      	movs	r3, #144	; 0x90
 8004df4:	05db      	lsls	r3, r3, #23
 8004df6:	2120      	movs	r1, #32
 8004df8:	438a      	bics	r2, r1
 8004dfa:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 8004dfc:	1cfb      	adds	r3, r7, #3
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	0011      	movs	r1, r2
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7ff ffab 	bl	8004d60 <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2280      	movs	r2, #128	; 0x80
 8004e12:	4013      	ands	r3, r2
 8004e14:	d1fa      	bne.n	8004e0c <hspi_cmd+0x3a>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 8004e16:	2390      	movs	r3, #144	; 0x90
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	2390      	movs	r3, #144	; 0x90
 8004e1e:	05db      	lsls	r3, r3, #23
 8004e20:	2120      	movs	r1, #32
 8004e22:	430a      	orrs	r2, r1
 8004e24:	615a      	str	r2, [r3, #20]
}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b002      	add	sp, #8
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <sendCommand>:

void sendCommand(SPI_TypeDef *SPIx, uint8_t cmd, uint8_t* data, uint8_t length)
{
 8004e2e:	b590      	push	{r4, r7, lr}
 8004e30:	b087      	sub	sp, #28
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	0008      	movs	r0, r1
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	240b      	movs	r4, #11
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	1c02      	adds	r2, r0, #0
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	230a      	movs	r3, #10
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	1c0a      	adds	r2, r1, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
	hspi_cmd(SPIx,cmd);
 8004e4c:	193b      	adds	r3, r7, r4
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	0011      	movs	r1, r2
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7ff ffbc 	bl	8004dd2 <hspi_cmd>
	for(int i = 0; i < length; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e00b      	b.n	8004e78 <sendCommand+0x4a>
	{
		hspi_w8(SPIx, *(data++));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	0011      	movs	r1, r2
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff ff77 	bl	8004d60 <hspi_w8>
	for(int i = 0; i < length; i++)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	3301      	adds	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	230a      	movs	r3, #10
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	dbed      	blt.n	8004e60 <sendCommand+0x32>
	}
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b007      	add	sp, #28
 8004e8a:	bd90      	pop	{r4, r7, pc}

08004e8c <ili9341_hspi_init>:

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	21ef      	movs	r1, #239	; 0xef
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7ff ff9a 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2103      	movs	r1, #3
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7ff ff5c 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x80);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2180      	movs	r1, #128	; 0x80
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7ff ff57 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7ff ff52 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	21cf      	movs	r1, #207	; 0xcf
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7ff ff86 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7ff ff48 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	21c1      	movs	r1, #193	; 0xc1
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff ff43 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x30);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2130      	movs	r1, #48	; 0x30
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7ff ff3e 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	21ed      	movs	r1, #237	; 0xed
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7ff ff72 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2164      	movs	r1, #100	; 0x64
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7ff ff34 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2103      	movs	r1, #3
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7ff ff2f 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x12);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2112      	movs	r1, #18
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7ff ff2a 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x81);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2181      	movs	r1, #129	; 0x81
 8004f10:	0018      	movs	r0, r3
 8004f12:	f7ff ff25 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	21e8      	movs	r1, #232	; 0xe8
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7ff ff59 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2185      	movs	r1, #133	; 0x85
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7ff ff1b 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7ff ff16 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x78);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2178      	movs	r1, #120	; 0x78
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ff11 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	21cb      	movs	r1, #203	; 0xcb
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7ff ff45 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2139      	movs	r1, #57	; 0x39
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f7ff ff07 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	212c      	movs	r1, #44	; 0x2c
 8004f56:	0018      	movs	r0, r3
 8004f58:	f7ff ff02 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2100      	movs	r1, #0
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7ff fefd 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2134      	movs	r1, #52	; 0x34
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f7ff fef8 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2102      	movs	r1, #2
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7ff fef3 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	21f7      	movs	r1, #247	; 0xf7
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7ff ff27 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2120      	movs	r1, #32
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7ff fee9 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	21ea      	movs	r1, #234	; 0xea
 8004f92:	0018      	movs	r0, r3
 8004f94:	f7ff ff1d 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7ff fedf 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7ff feda 	bl	8004d60 <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	21c0      	movs	r1, #192	; 0xc0
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7ff ff0e 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2123      	movs	r1, #35	; 0x23
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7ff fed0 	bl	8004d60 <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	21c1      	movs	r1, #193	; 0xc1
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7ff ff04 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2110      	movs	r1, #16
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7ff fec6 	bl	8004d60 <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	21c5      	movs	r1, #197	; 0xc5
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7ff fefa 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	213e      	movs	r1, #62	; 0x3e
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7ff febc 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x28);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2128      	movs	r1, #40	; 0x28
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7ff feb7 	bl	8004d60 <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	21c7      	movs	r1, #199	; 0xc7
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7ff feeb 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2186      	movs	r1, #134	; 0x86
 8005000:	0018      	movs	r0, r3
 8005002:	f7ff fead 	bl	8004d60 <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2136      	movs	r1, #54	; 0x36
 800500a:	0018      	movs	r0, r3
 800500c:	f7ff fee1 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2148      	movs	r1, #72	; 0x48
 8005014:	0018      	movs	r0, r3
 8005016:	f7ff fea3 	bl	8004d60 <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2137      	movs	r1, #55	; 0x37
 800501e:	0018      	movs	r0, r3
 8005020:	f7ff fed7 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2100      	movs	r1, #0
 8005028:	0018      	movs	r0, r3
 800502a:	f7ff fe99 	bl	8004d60 <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	213a      	movs	r1, #58	; 0x3a
 8005032:	0018      	movs	r0, r3
 8005034:	f7ff fecd 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2155      	movs	r1, #85	; 0x55
 800503c:	0018      	movs	r0, r3
 800503e:	f7ff fe8f 	bl	8004d60 <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	21b1      	movs	r1, #177	; 0xb1
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff fec3 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2100      	movs	r1, #0
 8005050:	0018      	movs	r0, r3
 8005052:	f7ff fe85 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x18);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2118      	movs	r1, #24
 800505a:	0018      	movs	r0, r3
 800505c:	f7ff fe80 	bl	8004d60 <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	21b6      	movs	r1, #182	; 0xb6
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff feb4 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2108      	movs	r1, #8
 800506e:	0018      	movs	r0, r3
 8005070:	f7ff fe76 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x82);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2182      	movs	r1, #130	; 0x82
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff fe71 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x27);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2127      	movs	r1, #39	; 0x27
 8005082:	0018      	movs	r0, r3
 8005084:	f7ff fe6c 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	21f2      	movs	r1, #242	; 0xf2
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff fea0 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2100      	movs	r1, #0
 8005096:	0018      	movs	r0, r3
 8005098:	f7ff fe62 	bl	8004d60 <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2126      	movs	r1, #38	; 0x26
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7ff fe96 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2101      	movs	r1, #1
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7ff fe58 	bl	8004d60 <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	21e0      	movs	r1, #224	; 0xe0
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff fe8c 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	210f      	movs	r1, #15
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fe4e 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2131      	movs	r1, #49	; 0x31
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7ff fe49 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	212b      	movs	r1, #43	; 0x2b
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7ff fe44 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	210c      	movs	r1, #12
 80050dc:	0018      	movs	r0, r3
 80050de:	f7ff fe3f 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	210e      	movs	r1, #14
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7ff fe3a 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2108      	movs	r1, #8
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7ff fe35 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	214e      	movs	r1, #78	; 0x4e
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fe30 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	21f1      	movs	r1, #241	; 0xf1
 8005104:	0018      	movs	r0, r3
 8005106:	f7ff fe2b 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x37);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2137      	movs	r1, #55	; 0x37
 800510e:	0018      	movs	r0, r3
 8005110:	f7ff fe26 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2107      	movs	r1, #7
 8005118:	0018      	movs	r0, r3
 800511a:	f7ff fe21 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x10);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2110      	movs	r1, #16
 8005122:	0018      	movs	r0, r3
 8005124:	f7ff fe1c 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2103      	movs	r1, #3
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff fe17 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	210e      	movs	r1, #14
 8005136:	0018      	movs	r0, r3
 8005138:	f7ff fe12 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x09);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2109      	movs	r1, #9
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff fe0d 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2100      	movs	r1, #0
 800514a:	0018      	movs	r0, r3
 800514c:	f7ff fe08 	bl	8004d60 <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	21e1      	movs	r1, #225	; 0xe1
 8005154:	0018      	movs	r0, r3
 8005156:	f7ff fe3c 	bl	8004dd2 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2100      	movs	r1, #0
 800515e:	0018      	movs	r0, r3
 8005160:	f7ff fdfe 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	210e      	movs	r1, #14
 8005168:	0018      	movs	r0, r3
 800516a:	f7ff fdf9 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x14);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2114      	movs	r1, #20
 8005172:	0018      	movs	r0, r3
 8005174:	f7ff fdf4 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2103      	movs	r1, #3
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff fdef 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x11);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2111      	movs	r1, #17
 8005186:	0018      	movs	r0, r3
 8005188:	f7ff fdea 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2107      	movs	r1, #7
 8005190:	0018      	movs	r0, r3
 8005192:	f7ff fde5 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2131      	movs	r1, #49	; 0x31
 800519a:	0018      	movs	r0, r3
 800519c:	f7ff fde0 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	21c1      	movs	r1, #193	; 0xc1
 80051a4:	0018      	movs	r0, r3
 80051a6:	f7ff fddb 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x48);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2148      	movs	r1, #72	; 0x48
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7ff fdd6 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2108      	movs	r1, #8
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7ff fdd1 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	210f      	movs	r1, #15
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7ff fdcc 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	210c      	movs	r1, #12
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7ff fdc7 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2131      	movs	r1, #49	; 0x31
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7ff fdc2 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x36);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2136      	movs	r1, #54	; 0x36
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7ff fdbd 	bl	8004d60 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	210f      	movs	r1, #15
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7ff fdb8 	bl	8004d60 <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2111      	movs	r1, #17
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7ff fdec 	bl	8004dd2 <hspi_cmd>
  HAL_Delay(150);
 80051fa:	2096      	movs	r0, #150	; 0x96
 80051fc:	f7fc f882 	bl	8001304 <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2129      	movs	r1, #41	; 0x29
 8005204:	0018      	movs	r0, r3
 8005206:	f7ff fde4 	bl	8004dd2 <hspi_cmd>
	HAL_Delay(150);
 800520a:	2096      	movs	r0, #150	; 0x96
 800520c:	f7fc f87a 	bl	8001304 <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2113      	movs	r1, #19
 8005214:	0018      	movs	r0, r3
 8005216:	f7ff fddc 	bl	8004dd2 <hspi_cmd>
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b002      	add	sp, #8
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <_ZN6UI_API13enableEncoderEtt>:

//Public Function Definitions
namespace UI_API
{
	void enableEncoder(uint16_t encA_pin, uint16_t encb_pin)
	{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	0002      	movs	r2, r0
 800522c:	1dbb      	adds	r3, r7, #6
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	1c0a      	adds	r2, r1, #0
 8005234:	801a      	strh	r2, [r3, #0]
		EXTI->IMR |= encA_pin | encb_pin;
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <_ZN6UI_API13enableEncoderEtt+0x34>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	1db9      	adds	r1, r7, #6
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	8809      	ldrh	r1, [r1, #0]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	430b      	orrs	r3, r1
 8005244:	b29b      	uxth	r3, r3
 8005246:	0019      	movs	r1, r3
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <_ZN6UI_API13enableEncoderEtt+0x34>)
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
	}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	40010400 	.word	0x40010400

0800525c <_ZN6UI_API14disableEncoderEtt>:
	void disableEncoder(uint16_t encA_pin, uint16_t encb_pin)
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	0002      	movs	r2, r0
 8005264:	1dbb      	adds	r3, r7, #6
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	1c0a      	adds	r2, r1, #0
 800526c:	801a      	strh	r2, [r3, #0]
		EXTI->IMR &= ~(encA_pin | encb_pin);
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <_ZN6UI_API14disableEncoderEtt+0x34>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	1db9      	adds	r1, r7, #6
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	8809      	ldrh	r1, [r1, #0]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	430b      	orrs	r3, r1
 800527c:	b29b      	uxth	r3, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	0019      	movs	r1, r3
 8005282:	4b03      	ldr	r3, [pc, #12]	; (8005290 <_ZN6UI_API14disableEncoderEtt+0x34>)
 8005284:	400a      	ands	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
	}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	46bd      	mov	sp, r7
 800528c:	b002      	add	sp, #8
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40010400 	.word	0x40010400

08005294 <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER>:
namespace GUI_API
{
void resetSelectionGUI(TFT_GFX& tftDisplay, TFT_TEXT_BOX& instructionBox, TFT_TEXT_BOX& mainTitle, TFT_TEXT_BOX& stateSelector, CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES],
		const uint16_t backgroundColor,const uint16_t fontColor,const uint16_t lineColor,const uint16_t lineThickness,const uint8_t stateSelectorFontSize,
		uint8_t& statesSelected, SELECTION_ENCODER* encoder_ptr)
{
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
	//Clear the chosen states
	for(uint8_t i = 0; i < NUM_BOXES; i++)
 80052a2:	2317      	movs	r3, #23
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	2317      	movs	r3, #23
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d80e      	bhi.n	80052d2 <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER+0x3e>
	{
		chosenStates[i].clearCurrentText();
 80052b4:	2417      	movs	r4, #23
 80052b6:	193b      	adds	r3, r7, r4
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	015b      	lsls	r3, r3, #5
 80052bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052be:	18d3      	adds	r3, r2, r3
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fb55 	bl	8005970 <_ZN21CHOSEN_STATE_TEXT_BOX16clearCurrentTextEv>
	for(uint8_t i = 0; i < NUM_BOXES; i++)
 80052c6:	193b      	adds	r3, r7, r4
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	3201      	adds	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e7eb      	b.n	80052aa <_ZN7GUI_API17resetSelectionGUIER7TFT_GFXR12TFT_TEXT_BOXS3_S3_P21CHOSEN_STATE_TEXT_BOXtttthRhP17SELECTION_ENCODER+0x16>
	}
	encoder_ptr->setCurrentNameIndex(0);
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	2100      	movs	r1, #0
 80052d6:	0018      	movs	r0, r3
 80052d8:	f7fe fc50 	bl	8003b7c <_ZN17SELECTION_ENCODER19setCurrentNameIndexEt>
	statesSelected = 0;
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
	drawSelectionLines(tftDisplay, backgroundColor, fontColor, lineColor, lineThickness);
 80052e2:	2334      	movs	r3, #52	; 0x34
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	881c      	ldrh	r4, [r3, #0]
 80052e8:	2530      	movs	r5, #48	; 0x30
 80052ea:	197b      	adds	r3, r7, r5
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	232c      	movs	r3, #44	; 0x2c
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	8819      	ldrh	r1, [r3, #0]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	2338      	movs	r3, #56	; 0x38
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	0023      	movs	r3, r4
 8005300:	f000 f810 	bl	8005324 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>
	writeSelectionWords(instructionBox, mainTitle, stateSelector, fontColor, stateSelectorFontSize);
 8005304:	197b      	adds	r3, r7, r5
 8005306:	881c      	ldrh	r4, [r3, #0]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	68b8      	ldr	r0, [r7, #8]
 800530e:	233c      	movs	r3, #60	; 0x3c
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	0023      	movs	r3, r4
 8005318:	f000 f8c2 	bl	80054a0 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th>
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b006      	add	sp, #24
 8005322:	bdb0      	pop	{r4, r5, r7, pc}

08005324 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt>:

void drawSelectionLines(TFT_GFX& tftDisplay,const uint16_t backgroundColor,const uint16_t fontColor,const uint16_t lineColor,const uint16_t lineThickness)
{
 8005324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005326:	b089      	sub	sp, #36	; 0x24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	000c      	movs	r4, r1
 800532e:	0010      	movs	r0, r2
 8005330:	0019      	movs	r1, r3
 8005332:	230a      	movs	r3, #10
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	1c22      	adds	r2, r4, #0
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	2408      	movs	r4, #8
 800533c:	193b      	adds	r3, r7, r4
 800533e:	1c02      	adds	r2, r0, #0
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	1dbb      	adds	r3, r7, #6
 8005344:	1c0a      	adds	r2, r1, #0
 8005346:	801a      	strh	r2, [r3, #0]
	//Set background to correct color and add outline
	tftDisplay.writeFillRect(0, 0, tftDisplay.width(), tftDisplay.height(), lineColor);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0018      	movs	r0, r3
 800534c:	f7ff fccb 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8005350:	0003      	movs	r3, r0
 8005352:	b21c      	sxth	r4, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	0018      	movs	r0, r3
 8005358:	f7ff fccf 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 800535c:	0003      	movs	r3, r0
 800535e:	b21b      	sxth	r3, r3
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	1dba      	adds	r2, r7, #6
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	9201      	str	r2, [sp, #4]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	0023      	movs	r3, r4
 800536c:	2200      	movs	r2, #0
 800536e:	2100      	movs	r1, #0
 8005370:	f7fe feec 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width() - lineThickness * 2, tftDisplay.height() - lineThickness * 2, backgroundColor);
 8005374:	2630      	movs	r6, #48	; 0x30
 8005376:	19bb      	adds	r3, r7, r6
 8005378:	2100      	movs	r1, #0
 800537a:	5e5c      	ldrsh	r4, [r3, r1]
 800537c:	19bb      	adds	r3, r7, r6
 800537e:	2100      	movs	r1, #0
 8005380:	5e5d      	ldrsh	r5, [r3, r1]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0018      	movs	r0, r3
 8005386:	f7ff fcae 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 800538a:	0003      	movs	r3, r0
 800538c:	001a      	movs	r2, r3
 800538e:	19bb      	adds	r3, r7, r6
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	18db      	adds	r3, r3, r3
 8005394:	b29b      	uxth	r3, r3
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	b29b      	uxth	r3, r3
 800539a:	b21e      	sxth	r6, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f7ff fcab 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 80053a4:	0003      	movs	r3, r0
 80053a6:	001a      	movs	r2, r3
 80053a8:	2330      	movs	r3, #48	; 0x30
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	18db      	adds	r3, r3, r3
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	220a      	movs	r2, #10
 80053bc:	18ba      	adds	r2, r7, r2
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	9201      	str	r2, [sp, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	0033      	movs	r3, r6
 80053c6:	002a      	movs	r2, r5
 80053c8:	0021      	movs	r1, r4
 80053ca:	f7fe febf 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
	//Draw the GUI lines
	tftDisplay.writeFillRect(0,(tftDisplay.height()-lineThickness)/2, tftDisplay.width(), lineThickness, lineColor);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7ff fc92 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 80053d6:	0003      	movs	r3, r0
 80053d8:	001a      	movs	r2, r3
 80053da:	2630      	movs	r6, #48	; 0x30
 80053dc:	19bb      	adds	r3, r7, r6
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	d500      	bpl.n	80053e6 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt+0xc2>
 80053e4:	3301      	adds	r3, #1
 80053e6:	105b      	asrs	r3, r3, #1
 80053e8:	b21c      	sxth	r4, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7ff fc7a 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 80053f2:	0003      	movs	r3, r0
 80053f4:	b219      	sxth	r1, r3
 80053f6:	2330      	movs	r3, #48	; 0x30
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	2200      	movs	r2, #0
 80053fc:	5e9b      	ldrsh	r3, [r3, r2]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	1dba      	adds	r2, r7, #6
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	9201      	str	r2, [sp, #4]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	000b      	movs	r3, r1
 800540a:	0022      	movs	r2, r4
 800540c:	2100      	movs	r1, #0
 800540e:	f7fe fe9d 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
	for(uint16_t i = 1; i < NUM_BOXES; i++)
 8005412:	2316      	movs	r3, #22
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2201      	movs	r2, #1
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	2316      	movs	r3, #22
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d839      	bhi.n	8005498 <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt+0x174>
	{
	  tftDisplay.writeFillRect(0, tftDisplay.height()/2 + i*(tftDisplay.height()/(2 *NUM_BOXES)) - lineThickness/2, tftDisplay.width(), lineThickness, lineColor);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff fc67 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 800542c:	0003      	movs	r3, r0
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	b29c      	uxth	r4, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	0018      	movs	r0, r3
 8005436:	f7ff fc60 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 800543a:	0003      	movs	r3, r0
 800543c:	210a      	movs	r1, #10
 800543e:	0018      	movs	r0, r3
 8005440:	f7fa feec 	bl	800021c <__divsi3>
 8005444:	0003      	movs	r3, r0
 8005446:	b29b      	uxth	r3, r3
 8005448:	2516      	movs	r5, #22
 800544a:	197a      	adds	r2, r7, r5
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	4353      	muls	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	18e3      	adds	r3, r4, r3
 8005454:	b29a      	uxth	r2, r3
 8005456:	2630      	movs	r6, #48	; 0x30
 8005458:	19bb      	adds	r3, r7, r6
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	b21c      	sxth	r4, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0018      	movs	r0, r3
 800546a:	f7ff fc3c 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 800546e:	0003      	movs	r3, r0
 8005470:	b219      	sxth	r1, r3
 8005472:	19bb      	adds	r3, r7, r6
 8005474:	2200      	movs	r2, #0
 8005476:	5e9b      	ldrsh	r3, [r3, r2]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	1dba      	adds	r2, r7, #6
 800547c:	8812      	ldrh	r2, [r2, #0]
 800547e:	9201      	str	r2, [sp, #4]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	000b      	movs	r3, r1
 8005484:	0022      	movs	r2, r4
 8005486:	2100      	movs	r1, #0
 8005488:	f7fe fe60 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
	for(uint16_t i = 1; i < NUM_BOXES; i++)
 800548c:	197b      	adds	r3, r7, r5
 800548e:	881a      	ldrh	r2, [r3, #0]
 8005490:	197b      	adds	r3, r7, r5
 8005492:	3201      	adds	r2, #1
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e7c0      	b.n	800541a <_ZN7GUI_API18drawSelectionLinesER7TFT_GFXtttt+0xf6>
	}
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b007      	add	sp, #28
 800549e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054a0 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th>:

void writeSelectionWords(TFT_TEXT_BOX& instructionBox, TFT_TEXT_BOX& mainTitle, TFT_TEXT_BOX& stateSelector,const uint16_t fontColor,
		const uint8_t stateSelectorFontSize)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	001a      	movs	r2, r3
 80054ae:	1cbb      	adds	r3, r7, #2
 80054b0:	801a      	strh	r2, [r3, #0]
	instructionBox.write("*Hold OK button for 3 seconds to confirm selection.", fontColor, 1);
 80054b2:	1cbb      	adds	r3, r7, #2
 80054b4:	881a      	ldrh	r2, [r3, #0]
 80054b6:	490d      	ldr	r1, [pc, #52]	; (80054ec <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th+0x4c>)
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	2301      	movs	r3, #1
 80054bc:	f000 fad7 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
	mainTitle.write("State Selection: ", fontColor, 2);
 80054c0:	1cbb      	adds	r3, r7, #2
 80054c2:	881a      	ldrh	r2, [r3, #0]
 80054c4:	490a      	ldr	r1, [pc, #40]	; (80054f0 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th+0x50>)
 80054c6:	68b8      	ldr	r0, [r7, #8]
 80054c8:	2302      	movs	r3, #2
 80054ca:	f000 fad0 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
	stateSelector.write(stateNames[0], fontColor, stateSelectorFontSize);
 80054ce:	4909      	ldr	r1, [pc, #36]	; (80054f4 <_ZN7GUI_API19writeSelectionWordsER12TFT_TEXT_BOXS1_S1_th+0x54>)
 80054d0:	2320      	movs	r3, #32
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	781c      	ldrb	r4, [r3, #0]
 80054d6:	1cbb      	adds	r3, r7, #2
 80054d8:	881a      	ldrh	r2, [r3, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	0023      	movs	r3, r4
 80054de:	f000 fac6 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b005      	add	sp, #20
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	080069a4 	.word	0x080069a4
 80054f0:	080069d8 	.word	0x080069d8
 80054f4:	08006774 	.word	0x08006774

080054f8 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER>:

void printCurrentState(CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES], uint8_t& statesSelected,SELECTION_ENCODER* encoderPtr)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
	//Stay at the last state box
	if(statesSelected == NUM_BOXES)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b05      	cmp	r3, #5
 800550a:	d105      	bne.n	8005518 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER+0x20>
	{
	  statesSelected--;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	3b01      	subs	r3, #1
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	701a      	strb	r2, [r3, #0]
	}
	chosenStates[statesSelected++].printState(stateNames[encoderPtr->getCurrentNameIndex()]);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	b2d1      	uxtb	r1, r2
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	7011      	strb	r1, [r2, #0]
 8005524:	015b      	lsls	r3, r3, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	18d4      	adds	r4, r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	0018      	movs	r0, r3
 800552e:	f7fe fb1b 	bl	8003b68 <_ZN17SELECTION_ENCODER19getCurrentNameIndexEv>
 8005532:	0003      	movs	r3, r0
 8005534:	001a      	movs	r2, r3
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <_ZN7GUI_API17printCurrentStateEP21CHOSEN_STATE_TEXT_BOXRhP17SELECTION_ENCODER+0x5c>)
 8005538:	0092      	lsls	r2, r2, #2
 800553a:	58d3      	ldr	r3, [r2, r3]
 800553c:	0019      	movs	r1, r3
 800553e:	0020      	movs	r0, r4
 8005540:	f000 f9ec 	bl	800591c <_ZN21CHOSEN_STATE_TEXT_BOX10printStateEPKc>
	encoderPtr->printNextAvailableState();
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f7fe fb27 	bl	8003b9a <_ZN17SELECTION_ENCODER23printNextAvailableStateEv>
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b005      	add	sp, #20
 8005552:	bd90      	pop	{r4, r7, pc}
 8005554:	08007184 	.word	0x08007184

08005558 <_ZN7GUI_API17clearCurrentStateEP21CHOSEN_STATE_TEXT_BOXRh>:

void clearCurrentState(CHOSEN_STATE_TEXT_BOX chosenStates[NUM_BOXES], uint8_t& statesSelected)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
	if(statesSelected > 0)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d015      	beq.n	8005596 <_ZN7GUI_API17clearCurrentStateEP21CHOSEN_STATE_TEXT_BOXRh+0x3e>
	{
		chosenStates[--statesSelected].clear();
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	3b01      	subs	r3, #1
 8005570:	b2da      	uxtb	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	0018      	movs	r0, r3
 8005582:	f000 fab5 	bl	8005af0 <_ZN12TFT_TEXT_BOX5clearEv>
		chosenStates[statesSelected].clearCurrentText();
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	015b      	lsls	r3, r3, #5
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	0018      	movs	r0, r3
 8005592:	f000 f9ed 	bl	8005970 <_ZN21CHOSEN_STATE_TEXT_BOX16clearCurrentTextEv>
	}
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b002      	add	sp, #8
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt>:

void displayInProgress(TFT_GFX& tftDisplay, TFT_TEXT_BOX& instructionBox, const uint16_t lineThickness, const uint16_t lineColor, const uint16_t backgroundColor, const uint16_t fontColor)
{
 80055a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a2:	b08f      	sub	sp, #60	; 0x3c
 80055a4:	af04      	add	r7, sp, #16
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	0019      	movs	r1, r3
 80055ac:	1dbb      	adds	r3, r7, #6
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	1c0a      	adds	r2, r1, #0
 80055b4:	801a      	strh	r2, [r3, #0]
	tftDisplay.writeFillRect(0, 0, tftDisplay.width(), tftDisplay.height(), lineColor);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	0018      	movs	r0, r3
 80055ba:	f7ff fb94 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 80055be:	0003      	movs	r3, r0
 80055c0:	b21c      	sxth	r4, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7ff fb98 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 80055ca:	0003      	movs	r3, r0
 80055cc:	b21b      	sxth	r3, r3
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	1d3a      	adds	r2, r7, #4
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	9201      	str	r2, [sp, #4]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	0023      	movs	r3, r4
 80055da:	2200      	movs	r2, #0
 80055dc:	2100      	movs	r1, #0
 80055de:	f7fe fdb5 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
	tftDisplay.writeFillRect(lineThickness, lineThickness, tftDisplay.width() - lineThickness * 2, tftDisplay.height() - lineThickness * 2, backgroundColor);
 80055e2:	1dbb      	adds	r3, r7, #6
 80055e4:	2400      	movs	r4, #0
 80055e6:	5f1c      	ldrsh	r4, [r3, r4]
 80055e8:	1dbb      	adds	r3, r7, #6
 80055ea:	2500      	movs	r5, #0
 80055ec:	5f5d      	ldrsh	r5, [r3, r5]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff fb78 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 80055f6:	0003      	movs	r3, r0
 80055f8:	001a      	movs	r2, r3
 80055fa:	1dbb      	adds	r3, r7, #6
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	18db      	adds	r3, r3, r3
 8005600:	b29b      	uxth	r3, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	b29b      	uxth	r3, r3
 8005606:	b21e      	sxth	r6, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	0018      	movs	r0, r3
 800560c:	f7ff fb75 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 8005610:	0003      	movs	r3, r0
 8005612:	001a      	movs	r2, r3
 8005614:	1dbb      	adds	r3, r7, #6
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	18db      	adds	r3, r3, r3
 800561a:	b29b      	uxth	r3, r3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	b29b      	uxth	r3, r3
 8005620:	b21b      	sxth	r3, r3
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	2240      	movs	r2, #64	; 0x40
 8005626:	18ba      	adds	r2, r7, r2
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	9201      	str	r2, [sp, #4]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	0033      	movs	r3, r6
 8005630:	002a      	movs	r2, r5
 8005632:	0021      	movs	r1, r4
 8005634:	f7fe fd8a 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
	TFT_TEXT_BOX statusBox{&tftDisplay,backgroundColor, lineThickness, (uint16_t)(tftDisplay.height()/3.0f),(int16_t)(tftDisplay.width() - lineThickness),true};
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	0018      	movs	r0, r3
 800563c:	f7ff fb5d 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 8005640:	0003      	movs	r3, r0
 8005642:	0018      	movs	r0, r3
 8005644:	f7fb fcb0 	bl	8000fa8 <__aeabi_i2f>
 8005648:	1c03      	adds	r3, r0, #0
 800564a:	491c      	ldr	r1, [pc, #112]	; (80056bc <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt+0x11c>)
 800564c:	1c18      	adds	r0, r3, #0
 800564e:	f7fb f883 	bl	8000758 <__aeabi_fdiv>
 8005652:	1c03      	adds	r3, r0, #0
 8005654:	1c18      	adds	r0, r3, #0
 8005656:	f7fa fecd 	bl	80003f4 <__aeabi_f2uiz>
 800565a:	0003      	movs	r3, r0
 800565c:	b29c      	uxth	r4, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff fb40 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8005666:	0003      	movs	r3, r0
 8005668:	001a      	movs	r2, r3
 800566a:	1dbb      	adds	r3, r7, #6
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b29b      	uxth	r3, r3
 8005672:	b21b      	sxth	r3, r3
 8005674:	1dba      	adds	r2, r7, #6
 8005676:	8816      	ldrh	r6, [r2, #0]
 8005678:	2240      	movs	r2, #64	; 0x40
 800567a:	18ba      	adds	r2, r7, r2
 800567c:	8815      	ldrh	r5, [r2, #0]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	2214      	movs	r2, #20
 8005682:	18b8      	adds	r0, r7, r2
 8005684:	2201      	movs	r2, #1
 8005686:	9202      	str	r2, [sp, #8]
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	9400      	str	r4, [sp, #0]
 800568c:	0033      	movs	r3, r6
 800568e:	002a      	movs	r2, r5
 8005690:	f000 f979 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	statusBox.write("Scan in Progress!", fontColor, 4);
 8005694:	2444      	movs	r4, #68	; 0x44
 8005696:	193b      	adds	r3, r7, r4
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	4909      	ldr	r1, [pc, #36]	; (80056c0 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt+0x120>)
 800569c:	2314      	movs	r3, #20
 800569e:	18f8      	adds	r0, r7, r3
 80056a0:	2304      	movs	r3, #4
 80056a2:	f000 f9e4 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
	instructionBox.write("*Press cancel to quit the current operation and go back to selecting states.", fontColor, 1);
 80056a6:	193b      	adds	r3, r7, r4
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	4906      	ldr	r1, [pc, #24]	; (80056c4 <_ZN7GUI_API17displayInProgressER7TFT_GFXR12TFT_TEXT_BOXtttt+0x124>)
 80056ac:	68b8      	ldr	r0, [r7, #8]
 80056ae:	2301      	movs	r3, #1
 80056b0:	f000 f9dd 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b00b      	add	sp, #44	; 0x2c
 80056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056bc:	40400000 	.word	0x40400000
 80056c0:	080069ec 	.word	0x080069ec
 80056c4:	08006a00 	.word	0x08006a00

080056c8 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt>:

void addConfirmQuit(TFT_GFX& tftDisplay, const uint16_t lineThickness,const uint16_t fontColor,const uint16_t backgroundColor)
{
 80056c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ca:	b095      	sub	sp, #84	; 0x54
 80056cc:	af04      	add	r7, sp, #16
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	000c      	movs	r4, r1
 80056d2:	0010      	movs	r0, r2
 80056d4:	0019      	movs	r1, r3
 80056d6:	250a      	movs	r5, #10
 80056d8:	197b      	adds	r3, r7, r5
 80056da:	1c22      	adds	r2, r4, #0
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	2308      	movs	r3, #8
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	1c02      	adds	r2, r0, #0
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	1dbb      	adds	r3, r7, #6
 80056e8:	1c0a      	adds	r2, r1, #0
 80056ea:	801a      	strh	r2, [r3, #0]
	TFT_TEXT_BOX confirmQuit{&tftDisplay, backgroundColor, lineThickness + 8, (uint16_t)(3*tftDisplay.height()/5.0f),(int16_t)(tftDisplay.width() - lineThickness - 8), true};
 80056ec:	197b      	adds	r3, r7, r5
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	b29e      	uxth	r6, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7ff faff 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 80056fc:	0003      	movs	r3, r0
 80056fe:	001a      	movs	r2, r3
 8005700:	0013      	movs	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	189b      	adds	r3, r3, r2
 8005706:	0018      	movs	r0, r3
 8005708:	f7fb fc4e 	bl	8000fa8 <__aeabi_i2f>
 800570c:	1c03      	adds	r3, r0, #0
 800570e:	4931      	ldr	r1, [pc, #196]	; (80057d4 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt+0x10c>)
 8005710:	1c18      	adds	r0, r3, #0
 8005712:	f7fb f821 	bl	8000758 <__aeabi_fdiv>
 8005716:	1c03      	adds	r3, r0, #0
 8005718:	1c18      	adds	r0, r3, #0
 800571a:	f7fa fe6b 	bl	80003f4 <__aeabi_f2uiz>
 800571e:	0003      	movs	r3, r0
 8005720:	b29c      	uxth	r4, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff fade 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 800572a:	0003      	movs	r3, r0
 800572c:	001a      	movs	r2, r3
 800572e:	197b      	adds	r3, r7, r5
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b08      	subs	r3, #8
 8005738:	b29b      	uxth	r3, r3
 800573a:	b21b      	sxth	r3, r3
 800573c:	1dba      	adds	r2, r7, #6
 800573e:	8815      	ldrh	r5, [r2, #0]
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	2228      	movs	r2, #40	; 0x28
 8005744:	18b8      	adds	r0, r7, r2
 8005746:	2201      	movs	r2, #1
 8005748:	9202      	str	r2, [sp, #8]
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	9400      	str	r4, [sp, #0]
 800574e:	0033      	movs	r3, r6
 8005750:	002a      	movs	r2, r5
 8005752:	f000 f918 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	uint16_t bottomConfirmQuit = confirmQuit.write("*Are you sure you want to quit?*", fontColor, 2);
 8005756:	213e      	movs	r1, #62	; 0x3e
 8005758:	187c      	adds	r4, r7, r1
 800575a:	2308      	movs	r3, #8
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	491d      	ldr	r1, [pc, #116]	; (80057d8 <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt+0x110>)
 8005762:	2028      	movs	r0, #40	; 0x28
 8005764:	1838      	adds	r0, r7, r0
 8005766:	2302      	movs	r3, #2
 8005768:	f000 f981 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
 800576c:	0003      	movs	r3, r0
 800576e:	8023      	strh	r3, [r4, #0]
	TFT_TEXT_BOX confirmQuitInstructions{&tftDisplay, backgroundColor, lineThickness + 8, (uint16_t)(bottomConfirmQuit + 10),(int16_t)(tftDisplay.width() - lineThickness - 8), true};
 8005770:	250a      	movs	r5, #10
 8005772:	197b      	adds	r3, r7, r5
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	b29e      	uxth	r6, r3
 800577a:	213e      	movs	r1, #62	; 0x3e
 800577c:	187b      	adds	r3, r7, r1
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	330a      	adds	r3, #10
 8005782:	b29c      	uxth	r4, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff faad 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 800578c:	0003      	movs	r3, r0
 800578e:	001a      	movs	r2, r3
 8005790:	197b      	adds	r3, r7, r5
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b08      	subs	r3, #8
 800579a:	b29b      	uxth	r3, r3
 800579c:	b21b      	sxth	r3, r3
 800579e:	1dba      	adds	r2, r7, #6
 80057a0:	8815      	ldrh	r5, [r2, #0]
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	2214      	movs	r2, #20
 80057a6:	18b8      	adds	r0, r7, r2
 80057a8:	2201      	movs	r2, #1
 80057aa:	9202      	str	r2, [sp, #8]
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	9400      	str	r4, [sp, #0]
 80057b0:	0033      	movs	r3, r6
 80057b2:	002a      	movs	r2, r5
 80057b4:	f000 f8e7 	bl	8005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>
	confirmQuitInstructions.write("Hold cancel for 3 seconds to confirm quit, tap to cancel.", fontColor, 1);
 80057b8:	2308      	movs	r3, #8
 80057ba:	18fb      	adds	r3, r7, r3
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	4907      	ldr	r1, [pc, #28]	; (80057dc <_ZN7GUI_API14addConfirmQuitER7TFT_GFXttt+0x114>)
 80057c0:	2314      	movs	r3, #20
 80057c2:	18f8      	adds	r0, r7, r3
 80057c4:	2301      	movs	r3, #1
 80057c6:	f000 f952 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b011      	add	sp, #68	; 0x44
 80057d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	40a00000 	.word	0x40a00000
 80057d8:	08006a50 	.word	0x08006a50
 80057dc:	08006a74 	.word	0x08006a74

080057e0 <_ZN7GUI_API17removeConfirmQuitER7TFT_GFXtt>:

void removeConfirmQuit(TFT_GFX& tftDisplay, const uint16_t lineThickness, const uint16_t backgroundColor)
{
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	0008      	movs	r0, r1
 80057ea:	0011      	movs	r1, r2
 80057ec:	1cbb      	adds	r3, r7, #2
 80057ee:	1c02      	adds	r2, r0, #0
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	003b      	movs	r3, r7
 80057f4:	1c0a      	adds	r2, r1, #0
 80057f6:	801a      	strh	r2, [r3, #0]
	uint16_t yVal = (uint16_t)(3*tftDisplay.height()/5.0f);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f7ff fa7d 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 8005800:	0003      	movs	r3, r0
 8005802:	001a      	movs	r2, r3
 8005804:	0013      	movs	r3, r2
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	189b      	adds	r3, r3, r2
 800580a:	0018      	movs	r0, r3
 800580c:	f7fb fbcc 	bl	8000fa8 <__aeabi_i2f>
 8005810:	1c03      	adds	r3, r0, #0
 8005812:	491e      	ldr	r1, [pc, #120]	; (800588c <_ZN7GUI_API17removeConfirmQuitER7TFT_GFXtt+0xac>)
 8005814:	1c18      	adds	r0, r3, #0
 8005816:	f7fa ff9f 	bl	8000758 <__aeabi_fdiv>
 800581a:	1c03      	adds	r3, r0, #0
 800581c:	250e      	movs	r5, #14
 800581e:	197c      	adds	r4, r7, r5
 8005820:	1c18      	adds	r0, r3, #0
 8005822:	f7fa fde7 	bl	80003f4 <__aeabi_f2uiz>
 8005826:	0003      	movs	r3, r0
 8005828:	8023      	strh	r3, [r4, #0]
	tftDisplay.writeFillRect(lineThickness, yVal, tftDisplay.width() - (lineThickness * 2),tftDisplay.height() - lineThickness - yVal , backgroundColor);
 800582a:	1cbb      	adds	r3, r7, #2
 800582c:	2400      	movs	r4, #0
 800582e:	5f1c      	ldrsh	r4, [r3, r4]
 8005830:	197b      	adds	r3, r7, r5
 8005832:	2200      	movs	r2, #0
 8005834:	5e9d      	ldrsh	r5, [r3, r2]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0018      	movs	r0, r3
 800583a:	f7ff fa54 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 800583e:	0003      	movs	r3, r0
 8005840:	001a      	movs	r2, r3
 8005842:	1cbb      	adds	r3, r7, #2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	18db      	adds	r3, r3, r3
 8005848:	b29b      	uxth	r3, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	b29b      	uxth	r3, r3
 800584e:	b21e      	sxth	r6, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	0018      	movs	r0, r3
 8005854:	f7ff fa51 	bl	8004cfa <_ZN7TFT_GFX6heightEv>
 8005858:	0003      	movs	r3, r0
 800585a:	001a      	movs	r2, r3
 800585c:	1cbb      	adds	r3, r7, #2
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	b29a      	uxth	r2, r3
 8005864:	230e      	movs	r3, #14
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	b29b      	uxth	r3, r3
 800586e:	b21b      	sxth	r3, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	003a      	movs	r2, r7
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	9201      	str	r2, [sp, #4]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	0033      	movs	r3, r6
 800587c:	002a      	movs	r2, r5
 800587e:	0021      	movs	r1, r4
 8005880:	f7fe fc64 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
}
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b005      	add	sp, #20
 800588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588c:	40a00000 	.word	0x40a00000

08005890 <_ZN21CHOSEN_STATE_TEXT_BOXC1EhthRK12TFT_TEXT_BOX>:

}//namespace GUI_API

CHOSEN_STATE_TEXT_BOX::CHOSEN_STATE_TEXT_BOX(uint8_t text_box_number, uint16_t font_color,
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	000c      	movs	r4, r1
 800589a:	0010      	movs	r0, r2
 800589c:	0019      	movs	r1, r3
 800589e:	1cfb      	adds	r3, r7, #3
 80058a0:	1c22      	adds	r2, r4, #0
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	003b      	movs	r3, r7
 80058a6:	1c02      	adds	r2, r0, #0
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	1cbb      	adds	r3, r7, #2
 80058ac:	1c0a      	adds	r2, r1, #0
 80058ae:	701a      	strb	r2, [r3, #0]
		uint8_t font_size, const TFT_TEXT_BOX& general_text_box):
TFT_TEXT_BOX(general_text_box),currentText{nullptr}, textBoxNumber{text_box_number}, fontColor{font_color}, fontSize{font_size}
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058b6:	c313      	stmia	r3!, {r0, r1, r4}
 80058b8:	6811      	ldr	r1, [r2, #0]
 80058ba:	6019      	str	r1, [r3, #0]
 80058bc:	7912      	ldrb	r2, [r2, #4]
 80058be:	711a      	strb	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	615a      	str	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1cfa      	adds	r2, r7, #3
 80058ca:	7812      	ldrb	r2, [r2, #0]
 80058cc:	761a      	strb	r2, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	003a      	movs	r2, r7
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	835a      	strh	r2, [r3, #26]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	1cba      	adds	r2, r7, #2
 80058da:	7812      	ldrb	r2, [r2, #0]
 80058dc:	771a      	strb	r2, [r3, #28]
{}
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	0018      	movs	r0, r3
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b003      	add	sp, #12
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <_ZN21CHOSEN_STATE_TEXT_BOXC1Ev>:

CHOSEN_STATE_TEXT_BOX::CHOSEN_STATE_TEXT_BOX(void):
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
TFT_TEXT_BOX(),currentText{nullptr}, textBoxNumber{0}, fontColor{0}, fontSize{0}
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f000 f89a 	bl	8005a2c <_ZN12TFT_TEXT_BOXC1Ev>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	615a      	str	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	761a      	strb	r2, [r3, #24]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	835a      	strh	r2, [r3, #26]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
{}
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b002      	add	sp, #8
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <_ZN21CHOSEN_STATE_TEXT_BOX10printStateEPKc>:

void CHOSEN_STATE_TEXT_BOX::printState(const char* state_name)
{
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
	this->currentText = state_name;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	615a      	str	r2, [r3, #20]
	char outputString[STATE_MAX_CHARS + 3 + 1];
	sprintf(outputString, "%d: %s",this->textBoxNumber,state_name);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7e1b      	ldrb	r3, [r3, #24]
 8005930:	001a      	movs	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	4908      	ldr	r1, [pc, #32]	; (8005958 <_ZN21CHOSEN_STATE_TEXT_BOX10printStateEPKc+0x3c>)
 8005936:	240c      	movs	r4, #12
 8005938:	1938      	adds	r0, r7, r4
 800593a:	f000 f9c5 	bl	8005cc8 <siprintf>
	this->write(outputString, this->fontColor, this->fontSize);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8b5a      	ldrh	r2, [r3, #26]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	7f1b      	ldrb	r3, [r3, #28]
 8005948:	1939      	adds	r1, r7, r4
 800594a:	f000 f890 	bl	8005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b009      	add	sp, #36	; 0x24
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	08006ab0 	.word	0x08006ab0

0800595c <_ZN21CHOSEN_STATE_TEXT_BOX14getCurrentTextEv>:

const char* CHOSEN_STATE_TEXT_BOX::getCurrentText(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	return this->currentText;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b002      	add	sp, #8
 800596e:	bd80      	pop	{r7, pc}

08005970 <_ZN21CHOSEN_STATE_TEXT_BOX16clearCurrentTextEv>:

void CHOSEN_STATE_TEXT_BOX::clearCurrentText(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	this->currentText = nullptr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	615a      	str	r2, [r3, #20]
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}

08005986 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
TFT_TEXT_BOX::TFT_TEXT_BOX(TFT_GFX* display, uint16_t bg_color, uint16_t x_pos, uint16_t y_pos, int16_t x_edge, bool is_centered):
 8005986:	b590      	push	{r4, r7, lr}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	0019      	movs	r1, r3
 8005992:	1dbb      	adds	r3, r7, #6
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	1c0a      	adds	r2, r1, #0
 800599a:	801a      	strh	r2, [r3, #0]
main_display{display}, xPos{x_pos}, yPos{y_pos}, prevMaxX{x_pos}, prevMaxY{y_pos}, bgColor{bg_color}, isCentered{is_centered}
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1d3a      	adds	r2, r7, #4
 80059a6:	8812      	ldrh	r2, [r2, #0]
 80059a8:	809a      	strh	r2, [r3, #4]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2120      	movs	r1, #32
 80059ae:	187a      	adds	r2, r7, r1
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	80da      	strh	r2, [r3, #6]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	1d3a      	adds	r2, r7, #4
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	811a      	strh	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	187a      	adds	r2, r7, r1
 80059c0:	8812      	ldrh	r2, [r2, #0]
 80059c2:	815a      	strh	r2, [r3, #10]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1dba      	adds	r2, r7, #6
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	819a      	strh	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2228      	movs	r2, #40	; 0x28
 80059d0:	18ba      	adds	r2, r7, r2
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	741a      	strb	r2, [r3, #16]
{
	if(x_edge <= x_pos || x_edge > display->width())
 80059d6:	2324      	movs	r3, #36	; 0x24
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	2200      	movs	r2, #0
 80059dc:	5e9a      	ldrsh	r2, [r3, r2]
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	dd0a      	ble.n	80059fc <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x76>
 80059e6:	2324      	movs	r3, #36	; 0x24
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2400      	movs	r4, #0
 80059ec:	5f1c      	ldrsh	r4, [r3, r4]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7ff f978 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 80059f6:	0003      	movs	r3, r0
 80059f8:	429c      	cmp	r4, r3
 80059fa:	dd01      	ble.n	8005a00 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7a>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x7c>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x92>
	{
		this->wrapXEdge = display->width();
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f7ff f96c 	bl	8004ce6 <_ZN7TFT_GFX5widthEv>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	001a      	movs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	81da      	strh	r2, [r3, #14]
 8005a16:	e004      	b.n	8005a22 <_ZN12TFT_TEXT_BOXC1EP7TFT_GFXtttsb+0x9c>
	}else{
		this->wrapXEdge = x_edge;
 8005a18:	2324      	movs	r3, #36	; 0x24
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	881a      	ldrh	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	81da      	strh	r2, [r3, #14]
	}
}
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	0018      	movs	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b005      	add	sp, #20
 8005a2a:	bd90      	pop	{r4, r7, pc}

08005a2c <_ZN12TFT_TEXT_BOXC1Ev>:

TFT_TEXT_BOX::TFT_TEXT_BOX(void):
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
main_display{nullptr}, xPos{0}, yPos{0}, prevMaxX{0}, prevMaxY{0}, bgColor{0},wrapXEdge{0}, isCentered{0}
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	809a      	strh	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	80da      	strh	r2, [r3, #6]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	811a      	strh	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	815a      	strh	r2, [r3, #10]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	819a      	strh	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	81da      	strh	r2, [r3, #14]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	741a      	strb	r2, [r3, #16]
{}
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <_ZN12TFT_TEXT_BOX5writeEPKcth>:

uint16_t TFT_TEXT_BOX::write(const char* string, uint16_t font_color, uint8_t font_size)
{
 8005a6e:	b5b0      	push	{r4, r5, r7, lr}
 8005a70:	b08c      	sub	sp, #48	; 0x30
 8005a72:	af06      	add	r7, sp, #24
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	0019      	movs	r1, r3
 8005a7a:	1dbb      	adds	r3, r7, #6
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	1d7b      	adds	r3, r7, #5
 8005a80:	1c0a      	adds	r2, r1, #0
 8005a82:	701a      	strb	r2, [r3, #0]
    //First clear previous text
    this->clear();
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 f832 	bl	8005af0 <_ZN12TFT_TEXT_BOX5clearEv>
    //Then draw new text
	std::pair<uint16_t, uint16_t> drawStringRet = this->main_display->drawString(this->xPos, this->yPos, string, font_color, font_color, font_size, font_size, this->wrapXEdge, this->isCentered);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	889b      	ldrh	r3, [r3, #4]
 8005a94:	b219      	sxth	r1, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88db      	ldrh	r3, [r3, #6]
 8005a9a:	b21c      	sxth	r4, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	89db      	ldrh	r3, [r3, #14]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	7c12      	ldrb	r2, [r2, #16]
 8005aa4:	68bd      	ldr	r5, [r7, #8]
 8005aa6:	9205      	str	r2, [sp, #20]
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	1d7b      	adds	r3, r7, #5
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	1d7b      	adds	r3, r7, #5
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	9302      	str	r3, [sp, #8]
 8005ab6:	1dbb      	adds	r3, r7, #6
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	1dbb      	adds	r3, r7, #6
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	002b      	movs	r3, r5
 8005ac4:	0022      	movs	r2, r4
 8005ac6:	f7fe ff3a 	bl	800493e <_ZN7TFT_GFX10drawStringEssPKctthhtb>
 8005aca:	0003      	movs	r3, r0
 8005acc:	001a      	movs	r2, r3
 8005ace:	2114      	movs	r1, #20
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	601a      	str	r2, [r3, #0]
	this->prevMaxX = drawStringRet.first;
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	881a      	ldrh	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	811a      	strh	r2, [r3, #8]
	this->prevMaxY = drawStringRet.second;
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	885a      	ldrh	r2, [r3, #2]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	815a      	strh	r2, [r3, #10]
	return this->prevMaxY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	895b      	ldrh	r3, [r3, #10]
}
 8005ae8:	0018      	movs	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b006      	add	sp, #24
 8005aee:	bdb0      	pop	{r4, r5, r7, pc}

08005af0 <_ZN12TFT_TEXT_BOX5clearEv>:

void TFT_TEXT_BOX::clear(void)
{
 8005af0:	b5b0      	push	{r4, r5, r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
    this->main_display->writeFillRect(this->xPos, this->yPos, this->prevMaxX - this->xPos, this->prevMaxY - this->yPos, this->bgColor);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	889b      	ldrh	r3, [r3, #4]
 8005b00:	b219      	sxth	r1, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	88db      	ldrh	r3, [r3, #6]
 8005b06:	b21c      	sxth	r4, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	891a      	ldrh	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	889b      	ldrh	r3, [r3, #4]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	b21d      	sxth	r5, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	895a      	ldrh	r2, [r3, #10]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	88db      	ldrh	r3, [r3, #6]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	b21b      	sxth	r3, r3
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	8992      	ldrh	r2, [r2, #12]
 8005b28:	9201      	str	r2, [sp, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	002b      	movs	r3, r5
 8005b2e:	0022      	movs	r2, r4
 8005b30:	f7fe fb0c 	bl	800414c <_ZN7TFT_GFX13writeFillRectEsssst>
}
 8005b34:	46c0      	nop			; (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	b002      	add	sp, #8
 8005b3a:	bdb0      	pop	{r4, r5, r7, pc}

08005b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b3c:	480d      	ldr	r0, [pc, #52]	; (8005b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b40:	480d      	ldr	r0, [pc, #52]	; (8005b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b42:	490e      	ldr	r1, [pc, #56]	; (8005b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b44:	4a0e      	ldr	r2, [pc, #56]	; (8005b80 <LoopForever+0xe>)
  movs r3, #0
 8005b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b48:	e002      	b.n	8005b50 <LoopCopyDataInit>

08005b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b4e:	3304      	adds	r3, #4

08005b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b54:	d3f9      	bcc.n	8005b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b56:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b58:	4c0b      	ldr	r4, [pc, #44]	; (8005b88 <LoopForever+0x16>)
  movs r3, #0
 8005b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b5c:	e001      	b.n	8005b62 <LoopFillZerobss>

08005b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b60:	3204      	adds	r2, #4

08005b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b64:	d3fb      	bcc.n	8005b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005b66:	f7fd feaf 	bl	80038c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005b6a:	f000 f82d 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b6e:	f7fd f88d 	bl	8002c8c <main>

08005b72 <LoopForever>:

LoopForever:
    b LoopForever
 8005b72:	e7fe      	b.n	8005b72 <LoopForever>
  ldr   r0, =_estack
 8005b74:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b7c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8005b80:	08007288 	.word	0x08007288
  ldr r2, =_sbss
 8005b84:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8005b88:	2000014c 	.word	0x2000014c

08005b8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b8c:	e7fe      	b.n	8005b8c <ADC1_COMP_IRQHandler>

08005b8e <__cxa_pure_virtual>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	f000 f804 	bl	8005b9c <_ZSt9terminatev>

08005b94 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4780      	blx	r0
 8005b98:	f000 f808 	bl	8005bac <abort>

08005b9c <_ZSt9terminatev>:
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <_ZSt9terminatev+0xc>)
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f7ff fff7 	bl	8005b94 <_ZN10__cxxabiv111__terminateEPFvvE>
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	20000004 	.word	0x20000004

08005bac <abort>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	2006      	movs	r0, #6
 8005bb0:	f000 f86a 	bl	8005c88 <raise>
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f7fd fe4f 	bl	8003858 <_exit>
	...

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	20000008 	.word	0x20000008

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4d0c      	ldr	r5, [pc, #48]	; (8005c00 <__libc_init_array+0x38>)
 8005bce:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	2600      	movs	r6, #0
 8005bda:	f000 fc73 	bl	80064c4 <_init>
 8005bde:	4d0a      	ldr	r5, [pc, #40]	; (8005c08 <__libc_init_array+0x40>)
 8005be0:	4c0a      	ldr	r4, [pc, #40]	; (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	00b3      	lsls	r3, r6, #2
 8005bee:	58eb      	ldr	r3, [r5, r3]
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	00b3      	lsls	r3, r6, #2
 8005bf8:	58eb      	ldr	r3, [r5, r3]
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08007280 	.word	0x08007280
 8005c04:	08007280 	.word	0x08007280
 8005c08:	08007280 	.word	0x08007280
 8005c0c:	08007284 	.word	0x08007284

08005c10 <memcpy>:
 8005c10:	2300      	movs	r3, #0
 8005c12:	b510      	push	{r4, lr}
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d100      	bne.n	8005c1a <memcpy+0xa>
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	5ccc      	ldrb	r4, [r1, r3]
 8005c1c:	54c4      	strb	r4, [r0, r3]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	e7f8      	b.n	8005c14 <memcpy+0x4>

08005c22 <memset>:
 8005c22:	0003      	movs	r3, r0
 8005c24:	1812      	adds	r2, r2, r0
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d100      	bne.n	8005c2c <memset+0xa>
 8005c2a:	4770      	bx	lr
 8005c2c:	7019      	strb	r1, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	e7f9      	b.n	8005c26 <memset+0x4>

08005c32 <_raise_r>:
 8005c32:	b570      	push	{r4, r5, r6, lr}
 8005c34:	0004      	movs	r4, r0
 8005c36:	000d      	movs	r5, r1
 8005c38:	291f      	cmp	r1, #31
 8005c3a:	d904      	bls.n	8005c46 <_raise_r+0x14>
 8005c3c:	2316      	movs	r3, #22
 8005c3e:	6003      	str	r3, [r0, #0]
 8005c40:	2001      	movs	r0, #1
 8005c42:	4240      	negs	r0, r0
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <_raise_r+0x24>
 8005c4c:	008a      	lsls	r2, r1, #2
 8005c4e:	189b      	adds	r3, r3, r2
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	d108      	bne.n	8005c68 <_raise_r+0x36>
 8005c56:	0020      	movs	r0, r4
 8005c58:	f000 f832 	bl	8005cc0 <_getpid_r>
 8005c5c:	002a      	movs	r2, r5
 8005c5e:	0001      	movs	r1, r0
 8005c60:	0020      	movs	r0, r4
 8005c62:	f000 f81b 	bl	8005c9c <_kill_r>
 8005c66:	e7ed      	b.n	8005c44 <_raise_r+0x12>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	2a01      	cmp	r2, #1
 8005c6c:	d0ea      	beq.n	8005c44 <_raise_r+0x12>
 8005c6e:	1c51      	adds	r1, r2, #1
 8005c70:	d103      	bne.n	8005c7a <_raise_r+0x48>
 8005c72:	2316      	movs	r3, #22
 8005c74:	3001      	adds	r0, #1
 8005c76:	6023      	str	r3, [r4, #0]
 8005c78:	e7e4      	b.n	8005c44 <_raise_r+0x12>
 8005c7a:	2400      	movs	r4, #0
 8005c7c:	0028      	movs	r0, r5
 8005c7e:	601c      	str	r4, [r3, #0]
 8005c80:	4790      	blx	r2
 8005c82:	0020      	movs	r0, r4
 8005c84:	e7de      	b.n	8005c44 <_raise_r+0x12>
	...

08005c88 <raise>:
 8005c88:	b510      	push	{r4, lr}
 8005c8a:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <raise+0x10>)
 8005c8c:	0001      	movs	r1, r0
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	f7ff ffcf 	bl	8005c32 <_raise_r>
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	20000008 	.word	0x20000008

08005c9c <_kill_r>:
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	b570      	push	{r4, r5, r6, lr}
 8005ca0:	4c06      	ldr	r4, [pc, #24]	; (8005cbc <_kill_r+0x20>)
 8005ca2:	0005      	movs	r5, r0
 8005ca4:	0008      	movs	r0, r1
 8005ca6:	0011      	movs	r1, r2
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	f7fd fdc5 	bl	8003838 <_kill>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d103      	bne.n	8005cba <_kill_r+0x1e>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d000      	beq.n	8005cba <_kill_r+0x1e>
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	20000148 	.word	0x20000148

08005cc0 <_getpid_r>:
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	f7fd fdb3 	bl	800382c <_getpid>
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <siprintf>:
 8005cc8:	b40e      	push	{r1, r2, r3}
 8005cca:	b500      	push	{lr}
 8005ccc:	490b      	ldr	r1, [pc, #44]	; (8005cfc <siprintf+0x34>)
 8005cce:	b09c      	sub	sp, #112	; 0x70
 8005cd0:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd2:	9002      	str	r0, [sp, #8]
 8005cd4:	9006      	str	r0, [sp, #24]
 8005cd6:	9107      	str	r1, [sp, #28]
 8005cd8:	9104      	str	r1, [sp, #16]
 8005cda:	4809      	ldr	r0, [pc, #36]	; (8005d00 <siprintf+0x38>)
 8005cdc:	4909      	ldr	r1, [pc, #36]	; (8005d04 <siprintf+0x3c>)
 8005cde:	cb04      	ldmia	r3!, {r2}
 8005ce0:	9105      	str	r1, [sp, #20]
 8005ce2:	6800      	ldr	r0, [r0, #0]
 8005ce4:	a902      	add	r1, sp, #8
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	f000 f8ce 	bl	8005e88 <_svfiprintf_r>
 8005cec:	2300      	movs	r3, #0
 8005cee:	9a02      	ldr	r2, [sp, #8]
 8005cf0:	7013      	strb	r3, [r2, #0]
 8005cf2:	b01c      	add	sp, #112	; 0x70
 8005cf4:	bc08      	pop	{r3}
 8005cf6:	b003      	add	sp, #12
 8005cf8:	4718      	bx	r3
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	7fffffff 	.word	0x7fffffff
 8005d00:	20000008 	.word	0x20000008
 8005d04:	ffff0208 	.word	0xffff0208

08005d08 <_malloc_r>:
 8005d08:	2303      	movs	r3, #3
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	1ccd      	adds	r5, r1, #3
 8005d0e:	439d      	bics	r5, r3
 8005d10:	3508      	adds	r5, #8
 8005d12:	0006      	movs	r6, r0
 8005d14:	2d0c      	cmp	r5, #12
 8005d16:	d21e      	bcs.n	8005d56 <_malloc_r+0x4e>
 8005d18:	250c      	movs	r5, #12
 8005d1a:	42a9      	cmp	r1, r5
 8005d1c:	d81d      	bhi.n	8005d5a <_malloc_r+0x52>
 8005d1e:	0030      	movs	r0, r6
 8005d20:	f000 fb56 	bl	80063d0 <__malloc_lock>
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <_malloc_r+0xb4>)
 8005d26:	6814      	ldr	r4, [r2, #0]
 8005d28:	0021      	movs	r1, r4
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d119      	bne.n	8005d62 <_malloc_r+0x5a>
 8005d2e:	4c24      	ldr	r4, [pc, #144]	; (8005dc0 <_malloc_r+0xb8>)
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <_malloc_r+0x36>
 8005d36:	0030      	movs	r0, r6
 8005d38:	f000 fb1a 	bl	8006370 <_sbrk_r>
 8005d3c:	6020      	str	r0, [r4, #0]
 8005d3e:	0029      	movs	r1, r5
 8005d40:	0030      	movs	r0, r6
 8005d42:	f000 fb15 	bl	8006370 <_sbrk_r>
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	d12b      	bne.n	8005da2 <_malloc_r+0x9a>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	0030      	movs	r0, r6
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	f000 fb3f 	bl	80063d2 <__malloc_unlock>
 8005d54:	e003      	b.n	8005d5e <_malloc_r+0x56>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	dadf      	bge.n	8005d1a <_malloc_r+0x12>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	2000      	movs	r0, #0
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	680b      	ldr	r3, [r1, #0]
 8005d64:	1b5b      	subs	r3, r3, r5
 8005d66:	d419      	bmi.n	8005d9c <_malloc_r+0x94>
 8005d68:	2b0b      	cmp	r3, #11
 8005d6a:	d903      	bls.n	8005d74 <_malloc_r+0x6c>
 8005d6c:	600b      	str	r3, [r1, #0]
 8005d6e:	18cc      	adds	r4, r1, r3
 8005d70:	6025      	str	r5, [r4, #0]
 8005d72:	e003      	b.n	8005d7c <_malloc_r+0x74>
 8005d74:	684b      	ldr	r3, [r1, #4]
 8005d76:	428c      	cmp	r4, r1
 8005d78:	d10d      	bne.n	8005d96 <_malloc_r+0x8e>
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	0030      	movs	r0, r6
 8005d7e:	f000 fb28 	bl	80063d2 <__malloc_unlock>
 8005d82:	0020      	movs	r0, r4
 8005d84:	2207      	movs	r2, #7
 8005d86:	300b      	adds	r0, #11
 8005d88:	1d23      	adds	r3, r4, #4
 8005d8a:	4390      	bics	r0, r2
 8005d8c:	1ac3      	subs	r3, r0, r3
 8005d8e:	d0e7      	beq.n	8005d60 <_malloc_r+0x58>
 8005d90:	425a      	negs	r2, r3
 8005d92:	50e2      	str	r2, [r4, r3]
 8005d94:	e7e4      	b.n	8005d60 <_malloc_r+0x58>
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	000c      	movs	r4, r1
 8005d9a:	e7ef      	b.n	8005d7c <_malloc_r+0x74>
 8005d9c:	000c      	movs	r4, r1
 8005d9e:	6849      	ldr	r1, [r1, #4]
 8005da0:	e7c3      	b.n	8005d2a <_malloc_r+0x22>
 8005da2:	2303      	movs	r3, #3
 8005da4:	1cc4      	adds	r4, r0, #3
 8005da6:	439c      	bics	r4, r3
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d0e1      	beq.n	8005d70 <_malloc_r+0x68>
 8005dac:	1a21      	subs	r1, r4, r0
 8005dae:	0030      	movs	r0, r6
 8005db0:	f000 fade 	bl	8006370 <_sbrk_r>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d1db      	bne.n	8005d70 <_malloc_r+0x68>
 8005db8:	e7c7      	b.n	8005d4a <_malloc_r+0x42>
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	2000013c 	.word	0x2000013c
 8005dc0:	20000140 	.word	0x20000140

08005dc4 <__ssputs_r>:
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc6:	688e      	ldr	r6, [r1, #8]
 8005dc8:	b085      	sub	sp, #20
 8005dca:	0007      	movs	r7, r0
 8005dcc:	000c      	movs	r4, r1
 8005dce:	9203      	str	r2, [sp, #12]
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	429e      	cmp	r6, r3
 8005dd4:	d83c      	bhi.n	8005e50 <__ssputs_r+0x8c>
 8005dd6:	2390      	movs	r3, #144	; 0x90
 8005dd8:	898a      	ldrh	r2, [r1, #12]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	421a      	tst	r2, r3
 8005dde:	d034      	beq.n	8005e4a <__ssputs_r+0x86>
 8005de0:	2503      	movs	r5, #3
 8005de2:	6909      	ldr	r1, [r1, #16]
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	1a5b      	subs	r3, r3, r1
 8005de8:	9302      	str	r3, [sp, #8]
 8005dea:	6963      	ldr	r3, [r4, #20]
 8005dec:	9802      	ldr	r0, [sp, #8]
 8005dee:	435d      	muls	r5, r3
 8005df0:	0feb      	lsrs	r3, r5, #31
 8005df2:	195d      	adds	r5, r3, r5
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	106d      	asrs	r5, r5, #1
 8005df8:	3301      	adds	r3, #1
 8005dfa:	181b      	adds	r3, r3, r0
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	d900      	bls.n	8005e02 <__ssputs_r+0x3e>
 8005e00:	001d      	movs	r5, r3
 8005e02:	0553      	lsls	r3, r2, #21
 8005e04:	d532      	bpl.n	8005e6c <__ssputs_r+0xa8>
 8005e06:	0029      	movs	r1, r5
 8005e08:	0038      	movs	r0, r7
 8005e0a:	f7ff ff7d 	bl	8005d08 <_malloc_r>
 8005e0e:	1e06      	subs	r6, r0, #0
 8005e10:	d109      	bne.n	8005e26 <__ssputs_r+0x62>
 8005e12:	230c      	movs	r3, #12
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	2001      	movs	r0, #1
 8005e1a:	89a2      	ldrh	r2, [r4, #12]
 8005e1c:	4240      	negs	r0, r0
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	b005      	add	sp, #20
 8005e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e26:	9a02      	ldr	r2, [sp, #8]
 8005e28:	6921      	ldr	r1, [r4, #16]
 8005e2a:	f7ff fef1 	bl	8005c10 <memcpy>
 8005e2e:	89a3      	ldrh	r3, [r4, #12]
 8005e30:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <__ssputs_r+0xc0>)
 8005e32:	401a      	ands	r2, r3
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	4313      	orrs	r3, r2
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	9b02      	ldr	r3, [sp, #8]
 8005e3c:	6126      	str	r6, [r4, #16]
 8005e3e:	18f6      	adds	r6, r6, r3
 8005e40:	6026      	str	r6, [r4, #0]
 8005e42:	6165      	str	r5, [r4, #20]
 8005e44:	9e01      	ldr	r6, [sp, #4]
 8005e46:	1aed      	subs	r5, r5, r3
 8005e48:	60a5      	str	r5, [r4, #8]
 8005e4a:	9b01      	ldr	r3, [sp, #4]
 8005e4c:	429e      	cmp	r6, r3
 8005e4e:	d900      	bls.n	8005e52 <__ssputs_r+0x8e>
 8005e50:	9e01      	ldr	r6, [sp, #4]
 8005e52:	0032      	movs	r2, r6
 8005e54:	9903      	ldr	r1, [sp, #12]
 8005e56:	6820      	ldr	r0, [r4, #0]
 8005e58:	f000 faa7 	bl	80063aa <memmove>
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	2000      	movs	r0, #0
 8005e60:	1b9b      	subs	r3, r3, r6
 8005e62:	60a3      	str	r3, [r4, #8]
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	199e      	adds	r6, r3, r6
 8005e68:	6026      	str	r6, [r4, #0]
 8005e6a:	e7da      	b.n	8005e22 <__ssputs_r+0x5e>
 8005e6c:	002a      	movs	r2, r5
 8005e6e:	0038      	movs	r0, r7
 8005e70:	f000 fafa 	bl	8006468 <_realloc_r>
 8005e74:	1e06      	subs	r6, r0, #0
 8005e76:	d1e0      	bne.n	8005e3a <__ssputs_r+0x76>
 8005e78:	6921      	ldr	r1, [r4, #16]
 8005e7a:	0038      	movs	r0, r7
 8005e7c:	f000 faaa 	bl	80063d4 <_free_r>
 8005e80:	e7c7      	b.n	8005e12 <__ssputs_r+0x4e>
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	fffffb7f 	.word	0xfffffb7f

08005e88 <_svfiprintf_r>:
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	b0a1      	sub	sp, #132	; 0x84
 8005e8c:	9003      	str	r0, [sp, #12]
 8005e8e:	001d      	movs	r5, r3
 8005e90:	898b      	ldrh	r3, [r1, #12]
 8005e92:	000f      	movs	r7, r1
 8005e94:	0016      	movs	r6, r2
 8005e96:	061b      	lsls	r3, r3, #24
 8005e98:	d511      	bpl.n	8005ebe <_svfiprintf_r+0x36>
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10e      	bne.n	8005ebe <_svfiprintf_r+0x36>
 8005ea0:	2140      	movs	r1, #64	; 0x40
 8005ea2:	f7ff ff31 	bl	8005d08 <_malloc_r>
 8005ea6:	6038      	str	r0, [r7, #0]
 8005ea8:	6138      	str	r0, [r7, #16]
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d105      	bne.n	8005eba <_svfiprintf_r+0x32>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	9a03      	ldr	r2, [sp, #12]
 8005eb2:	3801      	subs	r0, #1
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	b021      	add	sp, #132	; 0x84
 8005eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eba:	2340      	movs	r3, #64	; 0x40
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	ac08      	add	r4, sp, #32
 8005ec2:	6163      	str	r3, [r4, #20]
 8005ec4:	3320      	adds	r3, #32
 8005ec6:	7663      	strb	r3, [r4, #25]
 8005ec8:	3310      	adds	r3, #16
 8005eca:	76a3      	strb	r3, [r4, #26]
 8005ecc:	9507      	str	r5, [sp, #28]
 8005ece:	0035      	movs	r5, r6
 8005ed0:	782b      	ldrb	r3, [r5, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <_svfiprintf_r+0x52>
 8005ed6:	2b25      	cmp	r3, #37	; 0x25
 8005ed8:	d146      	bne.n	8005f68 <_svfiprintf_r+0xe0>
 8005eda:	1bab      	subs	r3, r5, r6
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	d00c      	beq.n	8005efa <_svfiprintf_r+0x72>
 8005ee0:	0032      	movs	r2, r6
 8005ee2:	0039      	movs	r1, r7
 8005ee4:	9803      	ldr	r0, [sp, #12]
 8005ee6:	f7ff ff6d 	bl	8005dc4 <__ssputs_r>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d100      	bne.n	8005ef0 <_svfiprintf_r+0x68>
 8005eee:	e0ae      	b.n	800604e <_svfiprintf_r+0x1c6>
 8005ef0:	6962      	ldr	r2, [r4, #20]
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	4694      	mov	ip, r2
 8005ef6:	4463      	add	r3, ip
 8005ef8:	6163      	str	r3, [r4, #20]
 8005efa:	782b      	ldrb	r3, [r5, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d100      	bne.n	8005f02 <_svfiprintf_r+0x7a>
 8005f00:	e0a5      	b.n	800604e <_svfiprintf_r+0x1c6>
 8005f02:	2201      	movs	r2, #1
 8005f04:	2300      	movs	r3, #0
 8005f06:	4252      	negs	r2, r2
 8005f08:	6062      	str	r2, [r4, #4]
 8005f0a:	a904      	add	r1, sp, #16
 8005f0c:	3254      	adds	r2, #84	; 0x54
 8005f0e:	1852      	adds	r2, r2, r1
 8005f10:	1c6e      	adds	r6, r5, #1
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	60e3      	str	r3, [r4, #12]
 8005f16:	60a3      	str	r3, [r4, #8]
 8005f18:	7013      	strb	r3, [r2, #0]
 8005f1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f1c:	7831      	ldrb	r1, [r6, #0]
 8005f1e:	2205      	movs	r2, #5
 8005f20:	4853      	ldr	r0, [pc, #332]	; (8006070 <_svfiprintf_r+0x1e8>)
 8005f22:	f000 fa37 	bl	8006394 <memchr>
 8005f26:	1c75      	adds	r5, r6, #1
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d11f      	bne.n	8005f6c <_svfiprintf_r+0xe4>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	06d3      	lsls	r3, r2, #27
 8005f30:	d504      	bpl.n	8005f3c <_svfiprintf_r+0xb4>
 8005f32:	2353      	movs	r3, #83	; 0x53
 8005f34:	a904      	add	r1, sp, #16
 8005f36:	185b      	adds	r3, r3, r1
 8005f38:	2120      	movs	r1, #32
 8005f3a:	7019      	strb	r1, [r3, #0]
 8005f3c:	0713      	lsls	r3, r2, #28
 8005f3e:	d504      	bpl.n	8005f4a <_svfiprintf_r+0xc2>
 8005f40:	2353      	movs	r3, #83	; 0x53
 8005f42:	a904      	add	r1, sp, #16
 8005f44:	185b      	adds	r3, r3, r1
 8005f46:	212b      	movs	r1, #43	; 0x2b
 8005f48:	7019      	strb	r1, [r3, #0]
 8005f4a:	7833      	ldrb	r3, [r6, #0]
 8005f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4e:	d016      	beq.n	8005f7e <_svfiprintf_r+0xf6>
 8005f50:	0035      	movs	r5, r6
 8005f52:	2100      	movs	r1, #0
 8005f54:	200a      	movs	r0, #10
 8005f56:	68e3      	ldr	r3, [r4, #12]
 8005f58:	782a      	ldrb	r2, [r5, #0]
 8005f5a:	1c6e      	adds	r6, r5, #1
 8005f5c:	3a30      	subs	r2, #48	; 0x30
 8005f5e:	2a09      	cmp	r2, #9
 8005f60:	d94e      	bls.n	8006000 <_svfiprintf_r+0x178>
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d018      	beq.n	8005f98 <_svfiprintf_r+0x110>
 8005f66:	e010      	b.n	8005f8a <_svfiprintf_r+0x102>
 8005f68:	3501      	adds	r5, #1
 8005f6a:	e7b1      	b.n	8005ed0 <_svfiprintf_r+0x48>
 8005f6c:	4b40      	ldr	r3, [pc, #256]	; (8006070 <_svfiprintf_r+0x1e8>)
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	1ac0      	subs	r0, r0, r3
 8005f72:	2301      	movs	r3, #1
 8005f74:	4083      	lsls	r3, r0
 8005f76:	4313      	orrs	r3, r2
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	002e      	movs	r6, r5
 8005f7c:	e7ce      	b.n	8005f1c <_svfiprintf_r+0x94>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	1d19      	adds	r1, r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	9107      	str	r1, [sp, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	db01      	blt.n	8005f8e <_svfiprintf_r+0x106>
 8005f8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f8c:	e004      	b.n	8005f98 <_svfiprintf_r+0x110>
 8005f8e:	425b      	negs	r3, r3
 8005f90:	60e3      	str	r3, [r4, #12]
 8005f92:	2302      	movs	r3, #2
 8005f94:	4313      	orrs	r3, r2
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	782b      	ldrb	r3, [r5, #0]
 8005f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9c:	d10a      	bne.n	8005fb4 <_svfiprintf_r+0x12c>
 8005f9e:	786b      	ldrb	r3, [r5, #1]
 8005fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa2:	d135      	bne.n	8006010 <_svfiprintf_r+0x188>
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	3502      	adds	r5, #2
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	9207      	str	r2, [sp, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	db2b      	blt.n	800600a <_svfiprintf_r+0x182>
 8005fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb4:	4e2f      	ldr	r6, [pc, #188]	; (8006074 <_svfiprintf_r+0x1ec>)
 8005fb6:	7829      	ldrb	r1, [r5, #0]
 8005fb8:	2203      	movs	r2, #3
 8005fba:	0030      	movs	r0, r6
 8005fbc:	f000 f9ea 	bl	8006394 <memchr>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d006      	beq.n	8005fd2 <_svfiprintf_r+0x14a>
 8005fc4:	2340      	movs	r3, #64	; 0x40
 8005fc6:	1b80      	subs	r0, r0, r6
 8005fc8:	4083      	lsls	r3, r0
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	3501      	adds	r5, #1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	7829      	ldrb	r1, [r5, #0]
 8005fd4:	2206      	movs	r2, #6
 8005fd6:	4828      	ldr	r0, [pc, #160]	; (8006078 <_svfiprintf_r+0x1f0>)
 8005fd8:	1c6e      	adds	r6, r5, #1
 8005fda:	7621      	strb	r1, [r4, #24]
 8005fdc:	f000 f9da 	bl	8006394 <memchr>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d03c      	beq.n	800605e <_svfiprintf_r+0x1d6>
 8005fe4:	4b25      	ldr	r3, [pc, #148]	; (800607c <_svfiprintf_r+0x1f4>)
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d125      	bne.n	8006036 <_svfiprintf_r+0x1ae>
 8005fea:	2207      	movs	r2, #7
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	3307      	adds	r3, #7
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	9307      	str	r3, [sp, #28]
 8005ff6:	6963      	ldr	r3, [r4, #20]
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	6163      	str	r3, [r4, #20]
 8005ffe:	e766      	b.n	8005ece <_svfiprintf_r+0x46>
 8006000:	4343      	muls	r3, r0
 8006002:	2101      	movs	r1, #1
 8006004:	189b      	adds	r3, r3, r2
 8006006:	0035      	movs	r5, r6
 8006008:	e7a6      	b.n	8005f58 <_svfiprintf_r+0xd0>
 800600a:	2301      	movs	r3, #1
 800600c:	425b      	negs	r3, r3
 800600e:	e7d0      	b.n	8005fb2 <_svfiprintf_r+0x12a>
 8006010:	2300      	movs	r3, #0
 8006012:	200a      	movs	r0, #10
 8006014:	001a      	movs	r2, r3
 8006016:	3501      	adds	r5, #1
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	7829      	ldrb	r1, [r5, #0]
 800601c:	1c6e      	adds	r6, r5, #1
 800601e:	3930      	subs	r1, #48	; 0x30
 8006020:	2909      	cmp	r1, #9
 8006022:	d903      	bls.n	800602c <_svfiprintf_r+0x1a4>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0c5      	beq.n	8005fb4 <_svfiprintf_r+0x12c>
 8006028:	9209      	str	r2, [sp, #36]	; 0x24
 800602a:	e7c3      	b.n	8005fb4 <_svfiprintf_r+0x12c>
 800602c:	4342      	muls	r2, r0
 800602e:	2301      	movs	r3, #1
 8006030:	1852      	adds	r2, r2, r1
 8006032:	0035      	movs	r5, r6
 8006034:	e7f1      	b.n	800601a <_svfiprintf_r+0x192>
 8006036:	ab07      	add	r3, sp, #28
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	003a      	movs	r2, r7
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <_svfiprintf_r+0x1f8>)
 800603e:	0021      	movs	r1, r4
 8006040:	9803      	ldr	r0, [sp, #12]
 8006042:	e000      	b.n	8006046 <_svfiprintf_r+0x1be>
 8006044:	bf00      	nop
 8006046:	9004      	str	r0, [sp, #16]
 8006048:	9b04      	ldr	r3, [sp, #16]
 800604a:	3301      	adds	r3, #1
 800604c:	d1d3      	bne.n	8005ff6 <_svfiprintf_r+0x16e>
 800604e:	89bb      	ldrh	r3, [r7, #12]
 8006050:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006052:	065b      	lsls	r3, r3, #25
 8006054:	d400      	bmi.n	8006058 <_svfiprintf_r+0x1d0>
 8006056:	e72e      	b.n	8005eb6 <_svfiprintf_r+0x2e>
 8006058:	2001      	movs	r0, #1
 800605a:	4240      	negs	r0, r0
 800605c:	e72b      	b.n	8005eb6 <_svfiprintf_r+0x2e>
 800605e:	ab07      	add	r3, sp, #28
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	003a      	movs	r2, r7
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <_svfiprintf_r+0x1f8>)
 8006066:	0021      	movs	r1, r4
 8006068:	9803      	ldr	r0, [sp, #12]
 800606a:	f000 f879 	bl	8006160 <_printf_i>
 800606e:	e7ea      	b.n	8006046 <_svfiprintf_r+0x1be>
 8006070:	0800724c 	.word	0x0800724c
 8006074:	08007252 	.word	0x08007252
 8006078:	08007256 	.word	0x08007256
 800607c:	00000000 	.word	0x00000000
 8006080:	08005dc5 	.word	0x08005dc5

08006084 <_printf_common>:
 8006084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006086:	0015      	movs	r5, r2
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	688a      	ldr	r2, [r1, #8]
 800608c:	690b      	ldr	r3, [r1, #16]
 800608e:	9000      	str	r0, [sp, #0]
 8006090:	000c      	movs	r4, r1
 8006092:	4293      	cmp	r3, r2
 8006094:	da00      	bge.n	8006098 <_printf_common+0x14>
 8006096:	0013      	movs	r3, r2
 8006098:	0022      	movs	r2, r4
 800609a:	602b      	str	r3, [r5, #0]
 800609c:	3243      	adds	r2, #67	; 0x43
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d001      	beq.n	80060a8 <_printf_common+0x24>
 80060a4:	3301      	adds	r3, #1
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	069b      	lsls	r3, r3, #26
 80060ac:	d502      	bpl.n	80060b4 <_printf_common+0x30>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	3302      	adds	r3, #2
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	2706      	movs	r7, #6
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	401f      	ands	r7, r3
 80060ba:	d027      	beq.n	800610c <_printf_common+0x88>
 80060bc:	0023      	movs	r3, r4
 80060be:	3343      	adds	r3, #67	; 0x43
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	1e5a      	subs	r2, r3, #1
 80060c4:	4193      	sbcs	r3, r2
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	0692      	lsls	r2, r2, #26
 80060ca:	d430      	bmi.n	800612e <_printf_common+0xaa>
 80060cc:	0022      	movs	r2, r4
 80060ce:	9901      	ldr	r1, [sp, #4]
 80060d0:	3243      	adds	r2, #67	; 0x43
 80060d2:	9800      	ldr	r0, [sp, #0]
 80060d4:	9e08      	ldr	r6, [sp, #32]
 80060d6:	47b0      	blx	r6
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d025      	beq.n	8006128 <_printf_common+0xa4>
 80060dc:	2306      	movs	r3, #6
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	682a      	ldr	r2, [r5, #0]
 80060e2:	68e1      	ldr	r1, [r4, #12]
 80060e4:	4003      	ands	r3, r0
 80060e6:	2500      	movs	r5, #0
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d103      	bne.n	80060f4 <_printf_common+0x70>
 80060ec:	1a8d      	subs	r5, r1, r2
 80060ee:	43eb      	mvns	r3, r5
 80060f0:	17db      	asrs	r3, r3, #31
 80060f2:	401d      	ands	r5, r3
 80060f4:	68a3      	ldr	r3, [r4, #8]
 80060f6:	6922      	ldr	r2, [r4, #16]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	dd01      	ble.n	8006100 <_printf_common+0x7c>
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	18ed      	adds	r5, r5, r3
 8006100:	2700      	movs	r7, #0
 8006102:	42bd      	cmp	r5, r7
 8006104:	d120      	bne.n	8006148 <_printf_common+0xc4>
 8006106:	2000      	movs	r0, #0
 8006108:	e010      	b.n	800612c <_printf_common+0xa8>
 800610a:	3701      	adds	r7, #1
 800610c:	68e3      	ldr	r3, [r4, #12]
 800610e:	682a      	ldr	r2, [r5, #0]
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	42bb      	cmp	r3, r7
 8006114:	ddd2      	ble.n	80060bc <_printf_common+0x38>
 8006116:	0022      	movs	r2, r4
 8006118:	2301      	movs	r3, #1
 800611a:	3219      	adds	r2, #25
 800611c:	9901      	ldr	r1, [sp, #4]
 800611e:	9800      	ldr	r0, [sp, #0]
 8006120:	9e08      	ldr	r6, [sp, #32]
 8006122:	47b0      	blx	r6
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d1f0      	bne.n	800610a <_printf_common+0x86>
 8006128:	2001      	movs	r0, #1
 800612a:	4240      	negs	r0, r0
 800612c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800612e:	2030      	movs	r0, #48	; 0x30
 8006130:	18e1      	adds	r1, r4, r3
 8006132:	3143      	adds	r1, #67	; 0x43
 8006134:	7008      	strb	r0, [r1, #0]
 8006136:	0021      	movs	r1, r4
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	3145      	adds	r1, #69	; 0x45
 800613c:	7809      	ldrb	r1, [r1, #0]
 800613e:	18a2      	adds	r2, r4, r2
 8006140:	3243      	adds	r2, #67	; 0x43
 8006142:	3302      	adds	r3, #2
 8006144:	7011      	strb	r1, [r2, #0]
 8006146:	e7c1      	b.n	80060cc <_printf_common+0x48>
 8006148:	0022      	movs	r2, r4
 800614a:	2301      	movs	r3, #1
 800614c:	321a      	adds	r2, #26
 800614e:	9901      	ldr	r1, [sp, #4]
 8006150:	9800      	ldr	r0, [sp, #0]
 8006152:	9e08      	ldr	r6, [sp, #32]
 8006154:	47b0      	blx	r6
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	d0e6      	beq.n	8006128 <_printf_common+0xa4>
 800615a:	3701      	adds	r7, #1
 800615c:	e7d1      	b.n	8006102 <_printf_common+0x7e>
	...

08006160 <_printf_i>:
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	b089      	sub	sp, #36	; 0x24
 8006164:	9204      	str	r2, [sp, #16]
 8006166:	000a      	movs	r2, r1
 8006168:	3243      	adds	r2, #67	; 0x43
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	9003      	str	r0, [sp, #12]
 800616e:	9202      	str	r2, [sp, #8]
 8006170:	7e0a      	ldrb	r2, [r1, #24]
 8006172:	000c      	movs	r4, r1
 8006174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006176:	2a6e      	cmp	r2, #110	; 0x6e
 8006178:	d100      	bne.n	800617c <_printf_i+0x1c>
 800617a:	e086      	b.n	800628a <_printf_i+0x12a>
 800617c:	d81f      	bhi.n	80061be <_printf_i+0x5e>
 800617e:	2a63      	cmp	r2, #99	; 0x63
 8006180:	d033      	beq.n	80061ea <_printf_i+0x8a>
 8006182:	d808      	bhi.n	8006196 <_printf_i+0x36>
 8006184:	2a00      	cmp	r2, #0
 8006186:	d100      	bne.n	800618a <_printf_i+0x2a>
 8006188:	e08c      	b.n	80062a4 <_printf_i+0x144>
 800618a:	2a58      	cmp	r2, #88	; 0x58
 800618c:	d04d      	beq.n	800622a <_printf_i+0xca>
 800618e:	0025      	movs	r5, r4
 8006190:	3542      	adds	r5, #66	; 0x42
 8006192:	702a      	strb	r2, [r5, #0]
 8006194:	e030      	b.n	80061f8 <_printf_i+0x98>
 8006196:	2a64      	cmp	r2, #100	; 0x64
 8006198:	d001      	beq.n	800619e <_printf_i+0x3e>
 800619a:	2a69      	cmp	r2, #105	; 0x69
 800619c:	d1f7      	bne.n	800618e <_printf_i+0x2e>
 800619e:	6819      	ldr	r1, [r3, #0]
 80061a0:	6825      	ldr	r5, [r4, #0]
 80061a2:	1d0a      	adds	r2, r1, #4
 80061a4:	0628      	lsls	r0, r5, #24
 80061a6:	d529      	bpl.n	80061fc <_printf_i+0x9c>
 80061a8:	6808      	ldr	r0, [r1, #0]
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	2800      	cmp	r0, #0
 80061ae:	da03      	bge.n	80061b8 <_printf_i+0x58>
 80061b0:	232d      	movs	r3, #45	; 0x2d
 80061b2:	9a02      	ldr	r2, [sp, #8]
 80061b4:	4240      	negs	r0, r0
 80061b6:	7013      	strb	r3, [r2, #0]
 80061b8:	4e6b      	ldr	r6, [pc, #428]	; (8006368 <_printf_i+0x208>)
 80061ba:	270a      	movs	r7, #10
 80061bc:	e04f      	b.n	800625e <_printf_i+0xfe>
 80061be:	2a73      	cmp	r2, #115	; 0x73
 80061c0:	d074      	beq.n	80062ac <_printf_i+0x14c>
 80061c2:	d808      	bhi.n	80061d6 <_printf_i+0x76>
 80061c4:	2a6f      	cmp	r2, #111	; 0x6f
 80061c6:	d01f      	beq.n	8006208 <_printf_i+0xa8>
 80061c8:	2a70      	cmp	r2, #112	; 0x70
 80061ca:	d1e0      	bne.n	800618e <_printf_i+0x2e>
 80061cc:	2220      	movs	r2, #32
 80061ce:	6809      	ldr	r1, [r1, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	e003      	b.n	80061de <_printf_i+0x7e>
 80061d6:	2a75      	cmp	r2, #117	; 0x75
 80061d8:	d016      	beq.n	8006208 <_printf_i+0xa8>
 80061da:	2a78      	cmp	r2, #120	; 0x78
 80061dc:	d1d7      	bne.n	800618e <_printf_i+0x2e>
 80061de:	0022      	movs	r2, r4
 80061e0:	2178      	movs	r1, #120	; 0x78
 80061e2:	3245      	adds	r2, #69	; 0x45
 80061e4:	7011      	strb	r1, [r2, #0]
 80061e6:	4e61      	ldr	r6, [pc, #388]	; (800636c <_printf_i+0x20c>)
 80061e8:	e022      	b.n	8006230 <_printf_i+0xd0>
 80061ea:	0025      	movs	r5, r4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	3542      	adds	r5, #66	; 0x42
 80061f0:	1d11      	adds	r1, r2, #4
 80061f2:	6019      	str	r1, [r3, #0]
 80061f4:	6813      	ldr	r3, [r2, #0]
 80061f6:	702b      	strb	r3, [r5, #0]
 80061f8:	2301      	movs	r3, #1
 80061fa:	e065      	b.n	80062c8 <_printf_i+0x168>
 80061fc:	6808      	ldr	r0, [r1, #0]
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	0669      	lsls	r1, r5, #25
 8006202:	d5d3      	bpl.n	80061ac <_printf_i+0x4c>
 8006204:	b200      	sxth	r0, r0
 8006206:	e7d1      	b.n	80061ac <_printf_i+0x4c>
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	1d08      	adds	r0, r1, #4
 800620e:	6018      	str	r0, [r3, #0]
 8006210:	6808      	ldr	r0, [r1, #0]
 8006212:	062e      	lsls	r6, r5, #24
 8006214:	d505      	bpl.n	8006222 <_printf_i+0xc2>
 8006216:	4e54      	ldr	r6, [pc, #336]	; (8006368 <_printf_i+0x208>)
 8006218:	2708      	movs	r7, #8
 800621a:	2a6f      	cmp	r2, #111	; 0x6f
 800621c:	d01b      	beq.n	8006256 <_printf_i+0xf6>
 800621e:	270a      	movs	r7, #10
 8006220:	e019      	b.n	8006256 <_printf_i+0xf6>
 8006222:	066d      	lsls	r5, r5, #25
 8006224:	d5f7      	bpl.n	8006216 <_printf_i+0xb6>
 8006226:	b280      	uxth	r0, r0
 8006228:	e7f5      	b.n	8006216 <_printf_i+0xb6>
 800622a:	3145      	adds	r1, #69	; 0x45
 800622c:	4e4e      	ldr	r6, [pc, #312]	; (8006368 <_printf_i+0x208>)
 800622e:	700a      	strb	r2, [r1, #0]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	1d01      	adds	r1, r0, #4
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	6019      	str	r1, [r3, #0]
 800623a:	0615      	lsls	r5, r2, #24
 800623c:	d521      	bpl.n	8006282 <_printf_i+0x122>
 800623e:	07d3      	lsls	r3, r2, #31
 8006240:	d502      	bpl.n	8006248 <_printf_i+0xe8>
 8006242:	2320      	movs	r3, #32
 8006244:	431a      	orrs	r2, r3
 8006246:	6022      	str	r2, [r4, #0]
 8006248:	2710      	movs	r7, #16
 800624a:	2800      	cmp	r0, #0
 800624c:	d103      	bne.n	8006256 <_printf_i+0xf6>
 800624e:	2320      	movs	r3, #32
 8006250:	6822      	ldr	r2, [r4, #0]
 8006252:	439a      	bics	r2, r3
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	0023      	movs	r3, r4
 8006258:	2200      	movs	r2, #0
 800625a:	3343      	adds	r3, #67	; 0x43
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	60a3      	str	r3, [r4, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	db58      	blt.n	8006318 <_printf_i+0x1b8>
 8006266:	2204      	movs	r2, #4
 8006268:	6821      	ldr	r1, [r4, #0]
 800626a:	4391      	bics	r1, r2
 800626c:	6021      	str	r1, [r4, #0]
 800626e:	2800      	cmp	r0, #0
 8006270:	d154      	bne.n	800631c <_printf_i+0x1bc>
 8006272:	9d02      	ldr	r5, [sp, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d05a      	beq.n	800632e <_printf_i+0x1ce>
 8006278:	0025      	movs	r5, r4
 800627a:	7833      	ldrb	r3, [r6, #0]
 800627c:	3542      	adds	r5, #66	; 0x42
 800627e:	702b      	strb	r3, [r5, #0]
 8006280:	e055      	b.n	800632e <_printf_i+0x1ce>
 8006282:	0655      	lsls	r5, r2, #25
 8006284:	d5db      	bpl.n	800623e <_printf_i+0xde>
 8006286:	b280      	uxth	r0, r0
 8006288:	e7d9      	b.n	800623e <_printf_i+0xde>
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	680d      	ldr	r5, [r1, #0]
 800628e:	1d10      	adds	r0, r2, #4
 8006290:	6949      	ldr	r1, [r1, #20]
 8006292:	6018      	str	r0, [r3, #0]
 8006294:	6813      	ldr	r3, [r2, #0]
 8006296:	062e      	lsls	r6, r5, #24
 8006298:	d501      	bpl.n	800629e <_printf_i+0x13e>
 800629a:	6019      	str	r1, [r3, #0]
 800629c:	e002      	b.n	80062a4 <_printf_i+0x144>
 800629e:	066d      	lsls	r5, r5, #25
 80062a0:	d5fb      	bpl.n	800629a <_printf_i+0x13a>
 80062a2:	8019      	strh	r1, [r3, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	9d02      	ldr	r5, [sp, #8]
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	e04f      	b.n	800634c <_printf_i+0x1ec>
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	1d11      	adds	r1, r2, #4
 80062b0:	6019      	str	r1, [r3, #0]
 80062b2:	6815      	ldr	r5, [r2, #0]
 80062b4:	2100      	movs	r1, #0
 80062b6:	6862      	ldr	r2, [r4, #4]
 80062b8:	0028      	movs	r0, r5
 80062ba:	f000 f86b 	bl	8006394 <memchr>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d001      	beq.n	80062c6 <_printf_i+0x166>
 80062c2:	1b40      	subs	r0, r0, r5
 80062c4:	6060      	str	r0, [r4, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9a02      	ldr	r2, [sp, #8]
 80062ce:	7013      	strb	r3, [r2, #0]
 80062d0:	e03c      	b.n	800634c <_printf_i+0x1ec>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	002a      	movs	r2, r5
 80062d6:	9904      	ldr	r1, [sp, #16]
 80062d8:	9803      	ldr	r0, [sp, #12]
 80062da:	9d05      	ldr	r5, [sp, #20]
 80062dc:	47a8      	blx	r5
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d03e      	beq.n	8006360 <_printf_i+0x200>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	079b      	lsls	r3, r3, #30
 80062e6:	d415      	bmi.n	8006314 <_printf_i+0x1b4>
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	68e0      	ldr	r0, [r4, #12]
 80062ec:	4298      	cmp	r0, r3
 80062ee:	da39      	bge.n	8006364 <_printf_i+0x204>
 80062f0:	0018      	movs	r0, r3
 80062f2:	e037      	b.n	8006364 <_printf_i+0x204>
 80062f4:	0022      	movs	r2, r4
 80062f6:	2301      	movs	r3, #1
 80062f8:	3219      	adds	r2, #25
 80062fa:	9904      	ldr	r1, [sp, #16]
 80062fc:	9803      	ldr	r0, [sp, #12]
 80062fe:	9e05      	ldr	r6, [sp, #20]
 8006300:	47b0      	blx	r6
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d02c      	beq.n	8006360 <_printf_i+0x200>
 8006306:	3501      	adds	r5, #1
 8006308:	68e3      	ldr	r3, [r4, #12]
 800630a:	9a07      	ldr	r2, [sp, #28]
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	42ab      	cmp	r3, r5
 8006310:	dcf0      	bgt.n	80062f4 <_printf_i+0x194>
 8006312:	e7e9      	b.n	80062e8 <_printf_i+0x188>
 8006314:	2500      	movs	r5, #0
 8006316:	e7f7      	b.n	8006308 <_printf_i+0x1a8>
 8006318:	2800      	cmp	r0, #0
 800631a:	d0ad      	beq.n	8006278 <_printf_i+0x118>
 800631c:	9d02      	ldr	r5, [sp, #8]
 800631e:	0039      	movs	r1, r7
 8006320:	f7f9 ff78 	bl	8000214 <__aeabi_uidivmod>
 8006324:	5c73      	ldrb	r3, [r6, r1]
 8006326:	3d01      	subs	r5, #1
 8006328:	702b      	strb	r3, [r5, #0]
 800632a:	2800      	cmp	r0, #0
 800632c:	d1f7      	bne.n	800631e <_printf_i+0x1be>
 800632e:	2f08      	cmp	r7, #8
 8006330:	d109      	bne.n	8006346 <_printf_i+0x1e6>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	07db      	lsls	r3, r3, #31
 8006336:	d506      	bpl.n	8006346 <_printf_i+0x1e6>
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	6922      	ldr	r2, [r4, #16]
 800633c:	4293      	cmp	r3, r2
 800633e:	dc02      	bgt.n	8006346 <_printf_i+0x1e6>
 8006340:	2330      	movs	r3, #48	; 0x30
 8006342:	3d01      	subs	r5, #1
 8006344:	702b      	strb	r3, [r5, #0]
 8006346:	9b02      	ldr	r3, [sp, #8]
 8006348:	1b5b      	subs	r3, r3, r5
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	9b05      	ldr	r3, [sp, #20]
 800634e:	aa07      	add	r2, sp, #28
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	0021      	movs	r1, r4
 8006354:	9b04      	ldr	r3, [sp, #16]
 8006356:	9803      	ldr	r0, [sp, #12]
 8006358:	f7ff fe94 	bl	8006084 <_printf_common>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d1b8      	bne.n	80062d2 <_printf_i+0x172>
 8006360:	2001      	movs	r0, #1
 8006362:	4240      	negs	r0, r0
 8006364:	b009      	add	sp, #36	; 0x24
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006368:	0800725d 	.word	0x0800725d
 800636c:	0800726e 	.word	0x0800726e

08006370 <_sbrk_r>:
 8006370:	2300      	movs	r3, #0
 8006372:	b570      	push	{r4, r5, r6, lr}
 8006374:	4c06      	ldr	r4, [pc, #24]	; (8006390 <_sbrk_r+0x20>)
 8006376:	0005      	movs	r5, r0
 8006378:	0008      	movs	r0, r1
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	f7fd fa78 	bl	8003870 <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d103      	bne.n	800638c <_sbrk_r+0x1c>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d000      	beq.n	800638c <_sbrk_r+0x1c>
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	bd70      	pop	{r4, r5, r6, pc}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	20000148 	.word	0x20000148

08006394 <memchr>:
 8006394:	b2c9      	uxtb	r1, r1
 8006396:	1882      	adds	r2, r0, r2
 8006398:	4290      	cmp	r0, r2
 800639a:	d101      	bne.n	80063a0 <memchr+0xc>
 800639c:	2000      	movs	r0, #0
 800639e:	4770      	bx	lr
 80063a0:	7803      	ldrb	r3, [r0, #0]
 80063a2:	428b      	cmp	r3, r1
 80063a4:	d0fb      	beq.n	800639e <memchr+0xa>
 80063a6:	3001      	adds	r0, #1
 80063a8:	e7f6      	b.n	8006398 <memchr+0x4>

080063aa <memmove>:
 80063aa:	b510      	push	{r4, lr}
 80063ac:	4288      	cmp	r0, r1
 80063ae:	d902      	bls.n	80063b6 <memmove+0xc>
 80063b0:	188b      	adds	r3, r1, r2
 80063b2:	4298      	cmp	r0, r3
 80063b4:	d303      	bcc.n	80063be <memmove+0x14>
 80063b6:	2300      	movs	r3, #0
 80063b8:	e007      	b.n	80063ca <memmove+0x20>
 80063ba:	5c8b      	ldrb	r3, [r1, r2]
 80063bc:	5483      	strb	r3, [r0, r2]
 80063be:	3a01      	subs	r2, #1
 80063c0:	d2fb      	bcs.n	80063ba <memmove+0x10>
 80063c2:	bd10      	pop	{r4, pc}
 80063c4:	5ccc      	ldrb	r4, [r1, r3]
 80063c6:	54c4      	strb	r4, [r0, r3]
 80063c8:	3301      	adds	r3, #1
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1fa      	bne.n	80063c4 <memmove+0x1a>
 80063ce:	e7f8      	b.n	80063c2 <memmove+0x18>

080063d0 <__malloc_lock>:
 80063d0:	4770      	bx	lr

080063d2 <__malloc_unlock>:
 80063d2:	4770      	bx	lr

080063d4 <_free_r>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	0005      	movs	r5, r0
 80063d8:	2900      	cmp	r1, #0
 80063da:	d010      	beq.n	80063fe <_free_r+0x2a>
 80063dc:	1f0c      	subs	r4, r1, #4
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	da00      	bge.n	80063e6 <_free_r+0x12>
 80063e4:	18e4      	adds	r4, r4, r3
 80063e6:	0028      	movs	r0, r5
 80063e8:	f7ff fff2 	bl	80063d0 <__malloc_lock>
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <_free_r+0x90>)
 80063ee:	6813      	ldr	r3, [r2, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <_free_r+0x2c>
 80063f4:	6063      	str	r3, [r4, #4]
 80063f6:	6014      	str	r4, [r2, #0]
 80063f8:	0028      	movs	r0, r5
 80063fa:	f7ff ffea 	bl	80063d2 <__malloc_unlock>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	42a3      	cmp	r3, r4
 8006402:	d909      	bls.n	8006418 <_free_r+0x44>
 8006404:	6821      	ldr	r1, [r4, #0]
 8006406:	1860      	adds	r0, r4, r1
 8006408:	4283      	cmp	r3, r0
 800640a:	d1f3      	bne.n	80063f4 <_free_r+0x20>
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	1841      	adds	r1, r0, r1
 8006412:	6021      	str	r1, [r4, #0]
 8006414:	e7ee      	b.n	80063f4 <_free_r+0x20>
 8006416:	0013      	movs	r3, r2
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	2a00      	cmp	r2, #0
 800641c:	d001      	beq.n	8006422 <_free_r+0x4e>
 800641e:	42a2      	cmp	r2, r4
 8006420:	d9f9      	bls.n	8006416 <_free_r+0x42>
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	1858      	adds	r0, r3, r1
 8006426:	42a0      	cmp	r0, r4
 8006428:	d10b      	bne.n	8006442 <_free_r+0x6e>
 800642a:	6820      	ldr	r0, [r4, #0]
 800642c:	1809      	adds	r1, r1, r0
 800642e:	1858      	adds	r0, r3, r1
 8006430:	6019      	str	r1, [r3, #0]
 8006432:	4282      	cmp	r2, r0
 8006434:	d1e0      	bne.n	80063f8 <_free_r+0x24>
 8006436:	6810      	ldr	r0, [r2, #0]
 8006438:	6852      	ldr	r2, [r2, #4]
 800643a:	1841      	adds	r1, r0, r1
 800643c:	6019      	str	r1, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	e7da      	b.n	80063f8 <_free_r+0x24>
 8006442:	42a0      	cmp	r0, r4
 8006444:	d902      	bls.n	800644c <_free_r+0x78>
 8006446:	230c      	movs	r3, #12
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	e7d5      	b.n	80063f8 <_free_r+0x24>
 800644c:	6821      	ldr	r1, [r4, #0]
 800644e:	1860      	adds	r0, r4, r1
 8006450:	4282      	cmp	r2, r0
 8006452:	d103      	bne.n	800645c <_free_r+0x88>
 8006454:	6810      	ldr	r0, [r2, #0]
 8006456:	6852      	ldr	r2, [r2, #4]
 8006458:	1841      	adds	r1, r0, r1
 800645a:	6021      	str	r1, [r4, #0]
 800645c:	6062      	str	r2, [r4, #4]
 800645e:	605c      	str	r4, [r3, #4]
 8006460:	e7ca      	b.n	80063f8 <_free_r+0x24>
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	2000013c 	.word	0x2000013c

08006468 <_realloc_r>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	0007      	movs	r7, r0
 800646c:	000d      	movs	r5, r1
 800646e:	0016      	movs	r6, r2
 8006470:	2900      	cmp	r1, #0
 8006472:	d105      	bne.n	8006480 <_realloc_r+0x18>
 8006474:	0011      	movs	r1, r2
 8006476:	f7ff fc47 	bl	8005d08 <_malloc_r>
 800647a:	0004      	movs	r4, r0
 800647c:	0020      	movs	r0, r4
 800647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006480:	2a00      	cmp	r2, #0
 8006482:	d103      	bne.n	800648c <_realloc_r+0x24>
 8006484:	f7ff ffa6 	bl	80063d4 <_free_r>
 8006488:	0034      	movs	r4, r6
 800648a:	e7f7      	b.n	800647c <_realloc_r+0x14>
 800648c:	f000 f812 	bl	80064b4 <_malloc_usable_size_r>
 8006490:	002c      	movs	r4, r5
 8006492:	42b0      	cmp	r0, r6
 8006494:	d2f2      	bcs.n	800647c <_realloc_r+0x14>
 8006496:	0031      	movs	r1, r6
 8006498:	0038      	movs	r0, r7
 800649a:	f7ff fc35 	bl	8005d08 <_malloc_r>
 800649e:	1e04      	subs	r4, r0, #0
 80064a0:	d0ec      	beq.n	800647c <_realloc_r+0x14>
 80064a2:	0029      	movs	r1, r5
 80064a4:	0032      	movs	r2, r6
 80064a6:	f7ff fbb3 	bl	8005c10 <memcpy>
 80064aa:	0029      	movs	r1, r5
 80064ac:	0038      	movs	r0, r7
 80064ae:	f7ff ff91 	bl	80063d4 <_free_r>
 80064b2:	e7e3      	b.n	800647c <_realloc_r+0x14>

080064b4 <_malloc_usable_size_r>:
 80064b4:	1f0b      	subs	r3, r1, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	1f18      	subs	r0, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da01      	bge.n	80064c2 <_malloc_usable_size_r+0xe>
 80064be:	580b      	ldr	r3, [r1, r0]
 80064c0:	18c0      	adds	r0, r0, r3
 80064c2:	4770      	bx	lr

080064c4 <_init>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr

080064d0 <_fini>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr
