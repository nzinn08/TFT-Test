
TFT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005710  08005710  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08005710  08005710  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005710  08005710  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08005718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000004  0800571c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800571c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e140  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f3a  00000000  00000000  0002e16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  000300a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  00030900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001839c  00000000  00000000  00031080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d0d  00000000  00000000  0004941c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000789b2  00000000  00000000  00052129  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caadb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e64  00000000  00000000  000cab58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005180 	.word	0x08005180

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08005180 	.word	0x08005180

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fa21 	bl	8001670 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 f977 	bl	8001528 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fe28 	bl	8000e98 <__aeabi_dsub>
 8000248:	f001 f96e 	bl	8001528 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dadd>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	000c      	movs	r4, r1
 8000266:	0309      	lsls	r1, r1, #12
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0a49      	lsrs	r1, r1, #9
 800026c:	0f47      	lsrs	r7, r0, #29
 800026e:	005e      	lsls	r6, r3, #1
 8000270:	4339      	orrs	r1, r7
 8000272:	031f      	lsls	r7, r3, #12
 8000274:	0fdb      	lsrs	r3, r3, #31
 8000276:	469c      	mov	ip, r3
 8000278:	0065      	lsls	r5, r4, #1
 800027a:	0a7b      	lsrs	r3, r7, #9
 800027c:	0f57      	lsrs	r7, r2, #29
 800027e:	431f      	orrs	r7, r3
 8000280:	0d6d      	lsrs	r5, r5, #21
 8000282:	0fe4      	lsrs	r4, r4, #31
 8000284:	0d76      	lsrs	r6, r6, #21
 8000286:	46a1      	mov	r9, r4
 8000288:	00c0      	lsls	r0, r0, #3
 800028a:	46b8      	mov	r8, r7
 800028c:	00d2      	lsls	r2, r2, #3
 800028e:	1bab      	subs	r3, r5, r6
 8000290:	4564      	cmp	r4, ip
 8000292:	d07b      	beq.n	800038c <__aeabi_dadd+0x130>
 8000294:	2b00      	cmp	r3, #0
 8000296:	dd5f      	ble.n	8000358 <__aeabi_dadd+0xfc>
 8000298:	2e00      	cmp	r6, #0
 800029a:	d000      	beq.n	800029e <__aeabi_dadd+0x42>
 800029c:	e0a4      	b.n	80003e8 <__aeabi_dadd+0x18c>
 800029e:	003e      	movs	r6, r7
 80002a0:	4316      	orrs	r6, r2
 80002a2:	d100      	bne.n	80002a6 <__aeabi_dadd+0x4a>
 80002a4:	e112      	b.n	80004cc <__aeabi_dadd+0x270>
 80002a6:	1e5e      	subs	r6, r3, #1
 80002a8:	2e00      	cmp	r6, #0
 80002aa:	d000      	beq.n	80002ae <__aeabi_dadd+0x52>
 80002ac:	e19e      	b.n	80005ec <__aeabi_dadd+0x390>
 80002ae:	1a87      	subs	r7, r0, r2
 80002b0:	4643      	mov	r3, r8
 80002b2:	42b8      	cmp	r0, r7
 80002b4:	4180      	sbcs	r0, r0
 80002b6:	2501      	movs	r5, #1
 80002b8:	1ac9      	subs	r1, r1, r3
 80002ba:	4240      	negs	r0, r0
 80002bc:	1a09      	subs	r1, r1, r0
 80002be:	020b      	lsls	r3, r1, #8
 80002c0:	d400      	bmi.n	80002c4 <__aeabi_dadd+0x68>
 80002c2:	e131      	b.n	8000528 <__aeabi_dadd+0x2cc>
 80002c4:	0249      	lsls	r1, r1, #9
 80002c6:	0a4e      	lsrs	r6, r1, #9
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_dadd+0x72>
 80002cc:	e16e      	b.n	80005ac <__aeabi_dadd+0x350>
 80002ce:	0030      	movs	r0, r6
 80002d0:	f001 f9d8 	bl	8001684 <__clzsi2>
 80002d4:	0003      	movs	r3, r0
 80002d6:	3b08      	subs	r3, #8
 80002d8:	2b1f      	cmp	r3, #31
 80002da:	dd00      	ble.n	80002de <__aeabi_dadd+0x82>
 80002dc:	e161      	b.n	80005a2 <__aeabi_dadd+0x346>
 80002de:	2220      	movs	r2, #32
 80002e0:	0039      	movs	r1, r7
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	409e      	lsls	r6, r3
 80002e6:	40d1      	lsrs	r1, r2
 80002e8:	409f      	lsls	r7, r3
 80002ea:	430e      	orrs	r6, r1
 80002ec:	429d      	cmp	r5, r3
 80002ee:	dd00      	ble.n	80002f2 <__aeabi_dadd+0x96>
 80002f0:	e151      	b.n	8000596 <__aeabi_dadd+0x33a>
 80002f2:	1b5d      	subs	r5, r3, r5
 80002f4:	1c6b      	adds	r3, r5, #1
 80002f6:	2b1f      	cmp	r3, #31
 80002f8:	dd00      	ble.n	80002fc <__aeabi_dadd+0xa0>
 80002fa:	e17c      	b.n	80005f6 <__aeabi_dadd+0x39a>
 80002fc:	2120      	movs	r1, #32
 80002fe:	1ac9      	subs	r1, r1, r3
 8000300:	003d      	movs	r5, r7
 8000302:	0030      	movs	r0, r6
 8000304:	408f      	lsls	r7, r1
 8000306:	4088      	lsls	r0, r1
 8000308:	40dd      	lsrs	r5, r3
 800030a:	1e79      	subs	r1, r7, #1
 800030c:	418f      	sbcs	r7, r1
 800030e:	0031      	movs	r1, r6
 8000310:	2207      	movs	r2, #7
 8000312:	4328      	orrs	r0, r5
 8000314:	40d9      	lsrs	r1, r3
 8000316:	2500      	movs	r5, #0
 8000318:	4307      	orrs	r7, r0
 800031a:	403a      	ands	r2, r7
 800031c:	2a00      	cmp	r2, #0
 800031e:	d009      	beq.n	8000334 <__aeabi_dadd+0xd8>
 8000320:	230f      	movs	r3, #15
 8000322:	403b      	ands	r3, r7
 8000324:	2b04      	cmp	r3, #4
 8000326:	d005      	beq.n	8000334 <__aeabi_dadd+0xd8>
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	42bb      	cmp	r3, r7
 800032c:	41bf      	sbcs	r7, r7
 800032e:	427f      	negs	r7, r7
 8000330:	19c9      	adds	r1, r1, r7
 8000332:	001f      	movs	r7, r3
 8000334:	020b      	lsls	r3, r1, #8
 8000336:	d400      	bmi.n	800033a <__aeabi_dadd+0xde>
 8000338:	e226      	b.n	8000788 <__aeabi_dadd+0x52c>
 800033a:	1c6a      	adds	r2, r5, #1
 800033c:	4bc6      	ldr	r3, [pc, #792]	; (8000658 <__aeabi_dadd+0x3fc>)
 800033e:	0555      	lsls	r5, r2, #21
 8000340:	0d6d      	lsrs	r5, r5, #21
 8000342:	429a      	cmp	r2, r3
 8000344:	d100      	bne.n	8000348 <__aeabi_dadd+0xec>
 8000346:	e106      	b.n	8000556 <__aeabi_dadd+0x2fa>
 8000348:	4ac4      	ldr	r2, [pc, #784]	; (800065c <__aeabi_dadd+0x400>)
 800034a:	08ff      	lsrs	r7, r7, #3
 800034c:	400a      	ands	r2, r1
 800034e:	0753      	lsls	r3, r2, #29
 8000350:	0252      	lsls	r2, r2, #9
 8000352:	433b      	orrs	r3, r7
 8000354:	0b12      	lsrs	r2, r2, #12
 8000356:	e08e      	b.n	8000476 <__aeabi_dadd+0x21a>
 8000358:	2b00      	cmp	r3, #0
 800035a:	d000      	beq.n	800035e <__aeabi_dadd+0x102>
 800035c:	e0b8      	b.n	80004d0 <__aeabi_dadd+0x274>
 800035e:	1c6b      	adds	r3, r5, #1
 8000360:	055b      	lsls	r3, r3, #21
 8000362:	0d5b      	lsrs	r3, r3, #21
 8000364:	2b01      	cmp	r3, #1
 8000366:	dc00      	bgt.n	800036a <__aeabi_dadd+0x10e>
 8000368:	e130      	b.n	80005cc <__aeabi_dadd+0x370>
 800036a:	1a87      	subs	r7, r0, r2
 800036c:	4643      	mov	r3, r8
 800036e:	42b8      	cmp	r0, r7
 8000370:	41b6      	sbcs	r6, r6
 8000372:	1acb      	subs	r3, r1, r3
 8000374:	4276      	negs	r6, r6
 8000376:	1b9e      	subs	r6, r3, r6
 8000378:	0233      	lsls	r3, r6, #8
 800037a:	d500      	bpl.n	800037e <__aeabi_dadd+0x122>
 800037c:	e14c      	b.n	8000618 <__aeabi_dadd+0x3bc>
 800037e:	003b      	movs	r3, r7
 8000380:	4333      	orrs	r3, r6
 8000382:	d1a1      	bne.n	80002c8 <__aeabi_dadd+0x6c>
 8000384:	2200      	movs	r2, #0
 8000386:	2400      	movs	r4, #0
 8000388:	2500      	movs	r5, #0
 800038a:	e070      	b.n	800046e <__aeabi_dadd+0x212>
 800038c:	2b00      	cmp	r3, #0
 800038e:	dc00      	bgt.n	8000392 <__aeabi_dadd+0x136>
 8000390:	e0e5      	b.n	800055e <__aeabi_dadd+0x302>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_dadd+0x13c>
 8000396:	e083      	b.n	80004a0 <__aeabi_dadd+0x244>
 8000398:	4eaf      	ldr	r6, [pc, #700]	; (8000658 <__aeabi_dadd+0x3fc>)
 800039a:	42b5      	cmp	r5, r6
 800039c:	d060      	beq.n	8000460 <__aeabi_dadd+0x204>
 800039e:	2680      	movs	r6, #128	; 0x80
 80003a0:	0436      	lsls	r6, r6, #16
 80003a2:	4337      	orrs	r7, r6
 80003a4:	46b8      	mov	r8, r7
 80003a6:	2b38      	cmp	r3, #56	; 0x38
 80003a8:	dc00      	bgt.n	80003ac <__aeabi_dadd+0x150>
 80003aa:	e13e      	b.n	800062a <__aeabi_dadd+0x3ce>
 80003ac:	4643      	mov	r3, r8
 80003ae:	4313      	orrs	r3, r2
 80003b0:	001f      	movs	r7, r3
 80003b2:	1e7a      	subs	r2, r7, #1
 80003b4:	4197      	sbcs	r7, r2
 80003b6:	183f      	adds	r7, r7, r0
 80003b8:	4287      	cmp	r7, r0
 80003ba:	4180      	sbcs	r0, r0
 80003bc:	4240      	negs	r0, r0
 80003be:	1809      	adds	r1, r1, r0
 80003c0:	020b      	lsls	r3, r1, #8
 80003c2:	d400      	bmi.n	80003c6 <__aeabi_dadd+0x16a>
 80003c4:	e0b0      	b.n	8000528 <__aeabi_dadd+0x2cc>
 80003c6:	4ba4      	ldr	r3, [pc, #656]	; (8000658 <__aeabi_dadd+0x3fc>)
 80003c8:	3501      	adds	r5, #1
 80003ca:	429d      	cmp	r5, r3
 80003cc:	d100      	bne.n	80003d0 <__aeabi_dadd+0x174>
 80003ce:	e0c3      	b.n	8000558 <__aeabi_dadd+0x2fc>
 80003d0:	4aa2      	ldr	r2, [pc, #648]	; (800065c <__aeabi_dadd+0x400>)
 80003d2:	087b      	lsrs	r3, r7, #1
 80003d4:	400a      	ands	r2, r1
 80003d6:	2101      	movs	r1, #1
 80003d8:	400f      	ands	r7, r1
 80003da:	431f      	orrs	r7, r3
 80003dc:	0851      	lsrs	r1, r2, #1
 80003de:	07d3      	lsls	r3, r2, #31
 80003e0:	2207      	movs	r2, #7
 80003e2:	431f      	orrs	r7, r3
 80003e4:	403a      	ands	r2, r7
 80003e6:	e799      	b.n	800031c <__aeabi_dadd+0xc0>
 80003e8:	4e9b      	ldr	r6, [pc, #620]	; (8000658 <__aeabi_dadd+0x3fc>)
 80003ea:	42b5      	cmp	r5, r6
 80003ec:	d038      	beq.n	8000460 <__aeabi_dadd+0x204>
 80003ee:	2680      	movs	r6, #128	; 0x80
 80003f0:	0436      	lsls	r6, r6, #16
 80003f2:	4337      	orrs	r7, r6
 80003f4:	46b8      	mov	r8, r7
 80003f6:	2b38      	cmp	r3, #56	; 0x38
 80003f8:	dd00      	ble.n	80003fc <__aeabi_dadd+0x1a0>
 80003fa:	e0dc      	b.n	80005b6 <__aeabi_dadd+0x35a>
 80003fc:	2b1f      	cmp	r3, #31
 80003fe:	dc00      	bgt.n	8000402 <__aeabi_dadd+0x1a6>
 8000400:	e130      	b.n	8000664 <__aeabi_dadd+0x408>
 8000402:	001e      	movs	r6, r3
 8000404:	4647      	mov	r7, r8
 8000406:	3e20      	subs	r6, #32
 8000408:	40f7      	lsrs	r7, r6
 800040a:	46bc      	mov	ip, r7
 800040c:	2b20      	cmp	r3, #32
 800040e:	d004      	beq.n	800041a <__aeabi_dadd+0x1be>
 8000410:	2640      	movs	r6, #64	; 0x40
 8000412:	1af3      	subs	r3, r6, r3
 8000414:	4646      	mov	r6, r8
 8000416:	409e      	lsls	r6, r3
 8000418:	4332      	orrs	r2, r6
 800041a:	0017      	movs	r7, r2
 800041c:	4663      	mov	r3, ip
 800041e:	1e7a      	subs	r2, r7, #1
 8000420:	4197      	sbcs	r7, r2
 8000422:	431f      	orrs	r7, r3
 8000424:	e0cc      	b.n	80005c0 <__aeabi_dadd+0x364>
 8000426:	2b00      	cmp	r3, #0
 8000428:	d100      	bne.n	800042c <__aeabi_dadd+0x1d0>
 800042a:	e204      	b.n	8000836 <__aeabi_dadd+0x5da>
 800042c:	4643      	mov	r3, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	d100      	bne.n	8000434 <__aeabi_dadd+0x1d8>
 8000432:	e159      	b.n	80006e8 <__aeabi_dadd+0x48c>
 8000434:	074b      	lsls	r3, r1, #29
 8000436:	08c0      	lsrs	r0, r0, #3
 8000438:	4318      	orrs	r0, r3
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	08c9      	lsrs	r1, r1, #3
 800043e:	031b      	lsls	r3, r3, #12
 8000440:	4219      	tst	r1, r3
 8000442:	d008      	beq.n	8000456 <__aeabi_dadd+0x1fa>
 8000444:	4645      	mov	r5, r8
 8000446:	08ed      	lsrs	r5, r5, #3
 8000448:	421d      	tst	r5, r3
 800044a:	d104      	bne.n	8000456 <__aeabi_dadd+0x1fa>
 800044c:	4643      	mov	r3, r8
 800044e:	08d0      	lsrs	r0, r2, #3
 8000450:	0759      	lsls	r1, r3, #29
 8000452:	4308      	orrs	r0, r1
 8000454:	0029      	movs	r1, r5
 8000456:	0f42      	lsrs	r2, r0, #29
 8000458:	00c9      	lsls	r1, r1, #3
 800045a:	4d7f      	ldr	r5, [pc, #508]	; (8000658 <__aeabi_dadd+0x3fc>)
 800045c:	4311      	orrs	r1, r2
 800045e:	00c0      	lsls	r0, r0, #3
 8000460:	074b      	lsls	r3, r1, #29
 8000462:	08ca      	lsrs	r2, r1, #3
 8000464:	497c      	ldr	r1, [pc, #496]	; (8000658 <__aeabi_dadd+0x3fc>)
 8000466:	08c0      	lsrs	r0, r0, #3
 8000468:	4303      	orrs	r3, r0
 800046a:	428d      	cmp	r5, r1
 800046c:	d068      	beq.n	8000540 <__aeabi_dadd+0x2e4>
 800046e:	0312      	lsls	r2, r2, #12
 8000470:	056d      	lsls	r5, r5, #21
 8000472:	0b12      	lsrs	r2, r2, #12
 8000474:	0d6d      	lsrs	r5, r5, #21
 8000476:	2100      	movs	r1, #0
 8000478:	0312      	lsls	r2, r2, #12
 800047a:	0018      	movs	r0, r3
 800047c:	0b13      	lsrs	r3, r2, #12
 800047e:	0d0a      	lsrs	r2, r1, #20
 8000480:	0512      	lsls	r2, r2, #20
 8000482:	431a      	orrs	r2, r3
 8000484:	4b76      	ldr	r3, [pc, #472]	; (8000660 <__aeabi_dadd+0x404>)
 8000486:	052d      	lsls	r5, r5, #20
 8000488:	4013      	ands	r3, r2
 800048a:	432b      	orrs	r3, r5
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	07e4      	lsls	r4, r4, #31
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	4323      	orrs	r3, r4
 8000494:	0019      	movs	r1, r3
 8000496:	bc1c      	pop	{r2, r3, r4}
 8000498:	4690      	mov	r8, r2
 800049a:	4699      	mov	r9, r3
 800049c:	46a2      	mov	sl, r4
 800049e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a0:	003e      	movs	r6, r7
 80004a2:	4316      	orrs	r6, r2
 80004a4:	d012      	beq.n	80004cc <__aeabi_dadd+0x270>
 80004a6:	1e5e      	subs	r6, r3, #1
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d000      	beq.n	80004ae <__aeabi_dadd+0x252>
 80004ac:	e100      	b.n	80006b0 <__aeabi_dadd+0x454>
 80004ae:	1887      	adds	r7, r0, r2
 80004b0:	4287      	cmp	r7, r0
 80004b2:	4180      	sbcs	r0, r0
 80004b4:	4441      	add	r1, r8
 80004b6:	4240      	negs	r0, r0
 80004b8:	1809      	adds	r1, r1, r0
 80004ba:	2501      	movs	r5, #1
 80004bc:	020b      	lsls	r3, r1, #8
 80004be:	d533      	bpl.n	8000528 <__aeabi_dadd+0x2cc>
 80004c0:	2502      	movs	r5, #2
 80004c2:	e785      	b.n	80003d0 <__aeabi_dadd+0x174>
 80004c4:	4664      	mov	r4, ip
 80004c6:	0033      	movs	r3, r6
 80004c8:	4641      	mov	r1, r8
 80004ca:	0010      	movs	r0, r2
 80004cc:	001d      	movs	r5, r3
 80004ce:	e7c7      	b.n	8000460 <__aeabi_dadd+0x204>
 80004d0:	2d00      	cmp	r5, #0
 80004d2:	d000      	beq.n	80004d6 <__aeabi_dadd+0x27a>
 80004d4:	e0da      	b.n	800068c <__aeabi_dadd+0x430>
 80004d6:	000c      	movs	r4, r1
 80004d8:	4304      	orrs	r4, r0
 80004da:	d0f3      	beq.n	80004c4 <__aeabi_dadd+0x268>
 80004dc:	1c5c      	adds	r4, r3, #1
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x286>
 80004e0:	e19f      	b.n	8000822 <__aeabi_dadd+0x5c6>
 80004e2:	4c5d      	ldr	r4, [pc, #372]	; (8000658 <__aeabi_dadd+0x3fc>)
 80004e4:	42a6      	cmp	r6, r4
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0x28e>
 80004e8:	e12f      	b.n	800074a <__aeabi_dadd+0x4ee>
 80004ea:	43db      	mvns	r3, r3
 80004ec:	2b38      	cmp	r3, #56	; 0x38
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x296>
 80004f0:	e166      	b.n	80007c0 <__aeabi_dadd+0x564>
 80004f2:	2b1f      	cmp	r3, #31
 80004f4:	dd00      	ble.n	80004f8 <__aeabi_dadd+0x29c>
 80004f6:	e183      	b.n	8000800 <__aeabi_dadd+0x5a4>
 80004f8:	2420      	movs	r4, #32
 80004fa:	0005      	movs	r5, r0
 80004fc:	1ae4      	subs	r4, r4, r3
 80004fe:	000f      	movs	r7, r1
 8000500:	40dd      	lsrs	r5, r3
 8000502:	40d9      	lsrs	r1, r3
 8000504:	40a0      	lsls	r0, r4
 8000506:	4643      	mov	r3, r8
 8000508:	40a7      	lsls	r7, r4
 800050a:	1a5b      	subs	r3, r3, r1
 800050c:	1e44      	subs	r4, r0, #1
 800050e:	41a0      	sbcs	r0, r4
 8000510:	4698      	mov	r8, r3
 8000512:	432f      	orrs	r7, r5
 8000514:	4338      	orrs	r0, r7
 8000516:	1a17      	subs	r7, r2, r0
 8000518:	42ba      	cmp	r2, r7
 800051a:	4192      	sbcs	r2, r2
 800051c:	4643      	mov	r3, r8
 800051e:	4252      	negs	r2, r2
 8000520:	1a99      	subs	r1, r3, r2
 8000522:	4664      	mov	r4, ip
 8000524:	0035      	movs	r5, r6
 8000526:	e6ca      	b.n	80002be <__aeabi_dadd+0x62>
 8000528:	2207      	movs	r2, #7
 800052a:	403a      	ands	r2, r7
 800052c:	2a00      	cmp	r2, #0
 800052e:	d000      	beq.n	8000532 <__aeabi_dadd+0x2d6>
 8000530:	e6f6      	b.n	8000320 <__aeabi_dadd+0xc4>
 8000532:	074b      	lsls	r3, r1, #29
 8000534:	08ca      	lsrs	r2, r1, #3
 8000536:	4948      	ldr	r1, [pc, #288]	; (8000658 <__aeabi_dadd+0x3fc>)
 8000538:	08ff      	lsrs	r7, r7, #3
 800053a:	433b      	orrs	r3, r7
 800053c:	428d      	cmp	r5, r1
 800053e:	d196      	bne.n	800046e <__aeabi_dadd+0x212>
 8000540:	0019      	movs	r1, r3
 8000542:	4311      	orrs	r1, r2
 8000544:	d100      	bne.n	8000548 <__aeabi_dadd+0x2ec>
 8000546:	e19e      	b.n	8000886 <__aeabi_dadd+0x62a>
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0309      	lsls	r1, r1, #12
 800054c:	430a      	orrs	r2, r1
 800054e:	0312      	lsls	r2, r2, #12
 8000550:	0b12      	lsrs	r2, r2, #12
 8000552:	4d41      	ldr	r5, [pc, #260]	; (8000658 <__aeabi_dadd+0x3fc>)
 8000554:	e78f      	b.n	8000476 <__aeabi_dadd+0x21a>
 8000556:	0015      	movs	r5, r2
 8000558:	2200      	movs	r2, #0
 800055a:	2300      	movs	r3, #0
 800055c:	e78b      	b.n	8000476 <__aeabi_dadd+0x21a>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d000      	beq.n	8000564 <__aeabi_dadd+0x308>
 8000562:	e0c7      	b.n	80006f4 <__aeabi_dadd+0x498>
 8000564:	1c6b      	adds	r3, r5, #1
 8000566:	055f      	lsls	r7, r3, #21
 8000568:	0d7f      	lsrs	r7, r7, #21
 800056a:	2f01      	cmp	r7, #1
 800056c:	dc00      	bgt.n	8000570 <__aeabi_dadd+0x314>
 800056e:	e0f1      	b.n	8000754 <__aeabi_dadd+0x4f8>
 8000570:	4d39      	ldr	r5, [pc, #228]	; (8000658 <__aeabi_dadd+0x3fc>)
 8000572:	42ab      	cmp	r3, r5
 8000574:	d100      	bne.n	8000578 <__aeabi_dadd+0x31c>
 8000576:	e0b9      	b.n	80006ec <__aeabi_dadd+0x490>
 8000578:	1885      	adds	r5, r0, r2
 800057a:	000a      	movs	r2, r1
 800057c:	4285      	cmp	r5, r0
 800057e:	4189      	sbcs	r1, r1
 8000580:	4442      	add	r2, r8
 8000582:	4249      	negs	r1, r1
 8000584:	1851      	adds	r1, r2, r1
 8000586:	2207      	movs	r2, #7
 8000588:	07cf      	lsls	r7, r1, #31
 800058a:	086d      	lsrs	r5, r5, #1
 800058c:	432f      	orrs	r7, r5
 800058e:	0849      	lsrs	r1, r1, #1
 8000590:	403a      	ands	r2, r7
 8000592:	001d      	movs	r5, r3
 8000594:	e6c2      	b.n	800031c <__aeabi_dadd+0xc0>
 8000596:	2207      	movs	r2, #7
 8000598:	4930      	ldr	r1, [pc, #192]	; (800065c <__aeabi_dadd+0x400>)
 800059a:	1aed      	subs	r5, r5, r3
 800059c:	4031      	ands	r1, r6
 800059e:	403a      	ands	r2, r7
 80005a0:	e6bc      	b.n	800031c <__aeabi_dadd+0xc0>
 80005a2:	003e      	movs	r6, r7
 80005a4:	3828      	subs	r0, #40	; 0x28
 80005a6:	4086      	lsls	r6, r0
 80005a8:	2700      	movs	r7, #0
 80005aa:	e69f      	b.n	80002ec <__aeabi_dadd+0x90>
 80005ac:	0038      	movs	r0, r7
 80005ae:	f001 f869 	bl	8001684 <__clzsi2>
 80005b2:	3020      	adds	r0, #32
 80005b4:	e68e      	b.n	80002d4 <__aeabi_dadd+0x78>
 80005b6:	4643      	mov	r3, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	001f      	movs	r7, r3
 80005bc:	1e7a      	subs	r2, r7, #1
 80005be:	4197      	sbcs	r7, r2
 80005c0:	1bc7      	subs	r7, r0, r7
 80005c2:	42b8      	cmp	r0, r7
 80005c4:	4180      	sbcs	r0, r0
 80005c6:	4240      	negs	r0, r0
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	e678      	b.n	80002be <__aeabi_dadd+0x62>
 80005cc:	000e      	movs	r6, r1
 80005ce:	003b      	movs	r3, r7
 80005d0:	4306      	orrs	r6, r0
 80005d2:	4313      	orrs	r3, r2
 80005d4:	2d00      	cmp	r5, #0
 80005d6:	d161      	bne.n	800069c <__aeabi_dadd+0x440>
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d000      	beq.n	80005de <__aeabi_dadd+0x382>
 80005dc:	e0f4      	b.n	80007c8 <__aeabi_dadd+0x56c>
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x388>
 80005e2:	e11b      	b.n	800081c <__aeabi_dadd+0x5c0>
 80005e4:	4664      	mov	r4, ip
 80005e6:	0039      	movs	r1, r7
 80005e8:	0010      	movs	r0, r2
 80005ea:	e739      	b.n	8000460 <__aeabi_dadd+0x204>
 80005ec:	4f1a      	ldr	r7, [pc, #104]	; (8000658 <__aeabi_dadd+0x3fc>)
 80005ee:	42bb      	cmp	r3, r7
 80005f0:	d07a      	beq.n	80006e8 <__aeabi_dadd+0x48c>
 80005f2:	0033      	movs	r3, r6
 80005f4:	e6ff      	b.n	80003f6 <__aeabi_dadd+0x19a>
 80005f6:	0030      	movs	r0, r6
 80005f8:	3d1f      	subs	r5, #31
 80005fa:	40e8      	lsrs	r0, r5
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	d003      	beq.n	8000608 <__aeabi_dadd+0x3ac>
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	1acb      	subs	r3, r1, r3
 8000604:	409e      	lsls	r6, r3
 8000606:	4337      	orrs	r7, r6
 8000608:	1e7b      	subs	r3, r7, #1
 800060a:	419f      	sbcs	r7, r3
 800060c:	2207      	movs	r2, #7
 800060e:	4307      	orrs	r7, r0
 8000610:	403a      	ands	r2, r7
 8000612:	2100      	movs	r1, #0
 8000614:	2500      	movs	r5, #0
 8000616:	e789      	b.n	800052c <__aeabi_dadd+0x2d0>
 8000618:	1a17      	subs	r7, r2, r0
 800061a:	4643      	mov	r3, r8
 800061c:	42ba      	cmp	r2, r7
 800061e:	41b6      	sbcs	r6, r6
 8000620:	1a59      	subs	r1, r3, r1
 8000622:	4276      	negs	r6, r6
 8000624:	1b8e      	subs	r6, r1, r6
 8000626:	4664      	mov	r4, ip
 8000628:	e64e      	b.n	80002c8 <__aeabi_dadd+0x6c>
 800062a:	2b1f      	cmp	r3, #31
 800062c:	dd00      	ble.n	8000630 <__aeabi_dadd+0x3d4>
 800062e:	e0ad      	b.n	800078c <__aeabi_dadd+0x530>
 8000630:	2620      	movs	r6, #32
 8000632:	4647      	mov	r7, r8
 8000634:	1af6      	subs	r6, r6, r3
 8000636:	40b7      	lsls	r7, r6
 8000638:	46b9      	mov	r9, r7
 800063a:	0017      	movs	r7, r2
 800063c:	46b2      	mov	sl, r6
 800063e:	40df      	lsrs	r7, r3
 8000640:	464e      	mov	r6, r9
 8000642:	433e      	orrs	r6, r7
 8000644:	0037      	movs	r7, r6
 8000646:	4656      	mov	r6, sl
 8000648:	40b2      	lsls	r2, r6
 800064a:	1e56      	subs	r6, r2, #1
 800064c:	41b2      	sbcs	r2, r6
 800064e:	4317      	orrs	r7, r2
 8000650:	4642      	mov	r2, r8
 8000652:	40da      	lsrs	r2, r3
 8000654:	1889      	adds	r1, r1, r2
 8000656:	e6ae      	b.n	80003b6 <__aeabi_dadd+0x15a>
 8000658:	000007ff 	.word	0x000007ff
 800065c:	ff7fffff 	.word	0xff7fffff
 8000660:	800fffff 	.word	0x800fffff
 8000664:	2620      	movs	r6, #32
 8000666:	4647      	mov	r7, r8
 8000668:	1af6      	subs	r6, r6, r3
 800066a:	40b7      	lsls	r7, r6
 800066c:	46b9      	mov	r9, r7
 800066e:	0017      	movs	r7, r2
 8000670:	46b2      	mov	sl, r6
 8000672:	40df      	lsrs	r7, r3
 8000674:	464e      	mov	r6, r9
 8000676:	433e      	orrs	r6, r7
 8000678:	0037      	movs	r7, r6
 800067a:	4656      	mov	r6, sl
 800067c:	40b2      	lsls	r2, r6
 800067e:	1e56      	subs	r6, r2, #1
 8000680:	41b2      	sbcs	r2, r6
 8000682:	4317      	orrs	r7, r2
 8000684:	4642      	mov	r2, r8
 8000686:	40da      	lsrs	r2, r3
 8000688:	1a89      	subs	r1, r1, r2
 800068a:	e799      	b.n	80005c0 <__aeabi_dadd+0x364>
 800068c:	4c7f      	ldr	r4, [pc, #508]	; (800088c <__aeabi_dadd+0x630>)
 800068e:	42a6      	cmp	r6, r4
 8000690:	d05b      	beq.n	800074a <__aeabi_dadd+0x4ee>
 8000692:	2480      	movs	r4, #128	; 0x80
 8000694:	0424      	lsls	r4, r4, #16
 8000696:	425b      	negs	r3, r3
 8000698:	4321      	orrs	r1, r4
 800069a:	e727      	b.n	80004ec <__aeabi_dadd+0x290>
 800069c:	2e00      	cmp	r6, #0
 800069e:	d10c      	bne.n	80006ba <__aeabi_dadd+0x45e>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x44a>
 80006a4:	e0cb      	b.n	800083e <__aeabi_dadd+0x5e2>
 80006a6:	4664      	mov	r4, ip
 80006a8:	0039      	movs	r1, r7
 80006aa:	0010      	movs	r0, r2
 80006ac:	4d77      	ldr	r5, [pc, #476]	; (800088c <__aeabi_dadd+0x630>)
 80006ae:	e6d7      	b.n	8000460 <__aeabi_dadd+0x204>
 80006b0:	4f76      	ldr	r7, [pc, #472]	; (800088c <__aeabi_dadd+0x630>)
 80006b2:	42bb      	cmp	r3, r7
 80006b4:	d018      	beq.n	80006e8 <__aeabi_dadd+0x48c>
 80006b6:	0033      	movs	r3, r6
 80006b8:	e675      	b.n	80003a6 <__aeabi_dadd+0x14a>
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d014      	beq.n	80006e8 <__aeabi_dadd+0x48c>
 80006be:	074b      	lsls	r3, r1, #29
 80006c0:	08c0      	lsrs	r0, r0, #3
 80006c2:	4318      	orrs	r0, r3
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	08c9      	lsrs	r1, r1, #3
 80006c8:	031b      	lsls	r3, r3, #12
 80006ca:	4219      	tst	r1, r3
 80006cc:	d007      	beq.n	80006de <__aeabi_dadd+0x482>
 80006ce:	08fc      	lsrs	r4, r7, #3
 80006d0:	421c      	tst	r4, r3
 80006d2:	d104      	bne.n	80006de <__aeabi_dadd+0x482>
 80006d4:	0779      	lsls	r1, r7, #29
 80006d6:	08d0      	lsrs	r0, r2, #3
 80006d8:	4308      	orrs	r0, r1
 80006da:	46e1      	mov	r9, ip
 80006dc:	0021      	movs	r1, r4
 80006de:	464c      	mov	r4, r9
 80006e0:	0f42      	lsrs	r2, r0, #29
 80006e2:	00c9      	lsls	r1, r1, #3
 80006e4:	4311      	orrs	r1, r2
 80006e6:	00c0      	lsls	r0, r0, #3
 80006e8:	4d68      	ldr	r5, [pc, #416]	; (800088c <__aeabi_dadd+0x630>)
 80006ea:	e6b9      	b.n	8000460 <__aeabi_dadd+0x204>
 80006ec:	001d      	movs	r5, r3
 80006ee:	2200      	movs	r2, #0
 80006f0:	2300      	movs	r3, #0
 80006f2:	e6c0      	b.n	8000476 <__aeabi_dadd+0x21a>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d15b      	bne.n	80007b0 <__aeabi_dadd+0x554>
 80006f8:	000d      	movs	r5, r1
 80006fa:	4305      	orrs	r5, r0
 80006fc:	d100      	bne.n	8000700 <__aeabi_dadd+0x4a4>
 80006fe:	e6e2      	b.n	80004c6 <__aeabi_dadd+0x26a>
 8000700:	1c5d      	adds	r5, r3, #1
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x4aa>
 8000704:	e0b0      	b.n	8000868 <__aeabi_dadd+0x60c>
 8000706:	4d61      	ldr	r5, [pc, #388]	; (800088c <__aeabi_dadd+0x630>)
 8000708:	42ae      	cmp	r6, r5
 800070a:	d01f      	beq.n	800074c <__aeabi_dadd+0x4f0>
 800070c:	43db      	mvns	r3, r3
 800070e:	2b38      	cmp	r3, #56	; 0x38
 8000710:	dc71      	bgt.n	80007f6 <__aeabi_dadd+0x59a>
 8000712:	2b1f      	cmp	r3, #31
 8000714:	dd00      	ble.n	8000718 <__aeabi_dadd+0x4bc>
 8000716:	e096      	b.n	8000846 <__aeabi_dadd+0x5ea>
 8000718:	2520      	movs	r5, #32
 800071a:	000f      	movs	r7, r1
 800071c:	1aed      	subs	r5, r5, r3
 800071e:	40af      	lsls	r7, r5
 8000720:	46b9      	mov	r9, r7
 8000722:	0007      	movs	r7, r0
 8000724:	46aa      	mov	sl, r5
 8000726:	40df      	lsrs	r7, r3
 8000728:	464d      	mov	r5, r9
 800072a:	433d      	orrs	r5, r7
 800072c:	002f      	movs	r7, r5
 800072e:	4655      	mov	r5, sl
 8000730:	40a8      	lsls	r0, r5
 8000732:	40d9      	lsrs	r1, r3
 8000734:	1e45      	subs	r5, r0, #1
 8000736:	41a8      	sbcs	r0, r5
 8000738:	4488      	add	r8, r1
 800073a:	4307      	orrs	r7, r0
 800073c:	18bf      	adds	r7, r7, r2
 800073e:	4297      	cmp	r7, r2
 8000740:	4192      	sbcs	r2, r2
 8000742:	4251      	negs	r1, r2
 8000744:	4441      	add	r1, r8
 8000746:	0035      	movs	r5, r6
 8000748:	e63a      	b.n	80003c0 <__aeabi_dadd+0x164>
 800074a:	4664      	mov	r4, ip
 800074c:	0035      	movs	r5, r6
 800074e:	4641      	mov	r1, r8
 8000750:	0010      	movs	r0, r2
 8000752:	e685      	b.n	8000460 <__aeabi_dadd+0x204>
 8000754:	000b      	movs	r3, r1
 8000756:	4303      	orrs	r3, r0
 8000758:	2d00      	cmp	r5, #0
 800075a:	d000      	beq.n	800075e <__aeabi_dadd+0x502>
 800075c:	e663      	b.n	8000426 <__aeabi_dadd+0x1ca>
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0f5      	beq.n	800074e <__aeabi_dadd+0x4f2>
 8000762:	4643      	mov	r3, r8
 8000764:	4313      	orrs	r3, r2
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0x50e>
 8000768:	e67a      	b.n	8000460 <__aeabi_dadd+0x204>
 800076a:	1887      	adds	r7, r0, r2
 800076c:	4287      	cmp	r7, r0
 800076e:	4180      	sbcs	r0, r0
 8000770:	2207      	movs	r2, #7
 8000772:	4441      	add	r1, r8
 8000774:	4240      	negs	r0, r0
 8000776:	1809      	adds	r1, r1, r0
 8000778:	403a      	ands	r2, r7
 800077a:	020b      	lsls	r3, r1, #8
 800077c:	d400      	bmi.n	8000780 <__aeabi_dadd+0x524>
 800077e:	e6d5      	b.n	800052c <__aeabi_dadd+0x2d0>
 8000780:	4b43      	ldr	r3, [pc, #268]	; (8000890 <__aeabi_dadd+0x634>)
 8000782:	3501      	adds	r5, #1
 8000784:	4019      	ands	r1, r3
 8000786:	e5c9      	b.n	800031c <__aeabi_dadd+0xc0>
 8000788:	0038      	movs	r0, r7
 800078a:	e669      	b.n	8000460 <__aeabi_dadd+0x204>
 800078c:	001e      	movs	r6, r3
 800078e:	4647      	mov	r7, r8
 8000790:	3e20      	subs	r6, #32
 8000792:	40f7      	lsrs	r7, r6
 8000794:	46bc      	mov	ip, r7
 8000796:	2b20      	cmp	r3, #32
 8000798:	d004      	beq.n	80007a4 <__aeabi_dadd+0x548>
 800079a:	2640      	movs	r6, #64	; 0x40
 800079c:	1af3      	subs	r3, r6, r3
 800079e:	4646      	mov	r6, r8
 80007a0:	409e      	lsls	r6, r3
 80007a2:	4332      	orrs	r2, r6
 80007a4:	0017      	movs	r7, r2
 80007a6:	4663      	mov	r3, ip
 80007a8:	1e7a      	subs	r2, r7, #1
 80007aa:	4197      	sbcs	r7, r2
 80007ac:	431f      	orrs	r7, r3
 80007ae:	e602      	b.n	80003b6 <__aeabi_dadd+0x15a>
 80007b0:	4d36      	ldr	r5, [pc, #216]	; (800088c <__aeabi_dadd+0x630>)
 80007b2:	42ae      	cmp	r6, r5
 80007b4:	d0ca      	beq.n	800074c <__aeabi_dadd+0x4f0>
 80007b6:	2580      	movs	r5, #128	; 0x80
 80007b8:	042d      	lsls	r5, r5, #16
 80007ba:	425b      	negs	r3, r3
 80007bc:	4329      	orrs	r1, r5
 80007be:	e7a6      	b.n	800070e <__aeabi_dadd+0x4b2>
 80007c0:	4308      	orrs	r0, r1
 80007c2:	1e41      	subs	r1, r0, #1
 80007c4:	4188      	sbcs	r0, r1
 80007c6:	e6a6      	b.n	8000516 <__aeabi_dadd+0x2ba>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x572>
 80007cc:	e648      	b.n	8000460 <__aeabi_dadd+0x204>
 80007ce:	1a87      	subs	r7, r0, r2
 80007d0:	4643      	mov	r3, r8
 80007d2:	42b8      	cmp	r0, r7
 80007d4:	41b6      	sbcs	r6, r6
 80007d6:	1acb      	subs	r3, r1, r3
 80007d8:	4276      	negs	r6, r6
 80007da:	1b9e      	subs	r6, r3, r6
 80007dc:	0233      	lsls	r3, r6, #8
 80007de:	d54b      	bpl.n	8000878 <__aeabi_dadd+0x61c>
 80007e0:	1a17      	subs	r7, r2, r0
 80007e2:	4643      	mov	r3, r8
 80007e4:	42ba      	cmp	r2, r7
 80007e6:	4192      	sbcs	r2, r2
 80007e8:	1a59      	subs	r1, r3, r1
 80007ea:	4252      	negs	r2, r2
 80007ec:	1a89      	subs	r1, r1, r2
 80007ee:	2207      	movs	r2, #7
 80007f0:	4664      	mov	r4, ip
 80007f2:	403a      	ands	r2, r7
 80007f4:	e592      	b.n	800031c <__aeabi_dadd+0xc0>
 80007f6:	4301      	orrs	r1, r0
 80007f8:	000f      	movs	r7, r1
 80007fa:	1e79      	subs	r1, r7, #1
 80007fc:	418f      	sbcs	r7, r1
 80007fe:	e79d      	b.n	800073c <__aeabi_dadd+0x4e0>
 8000800:	001c      	movs	r4, r3
 8000802:	000f      	movs	r7, r1
 8000804:	3c20      	subs	r4, #32
 8000806:	40e7      	lsrs	r7, r4
 8000808:	2b20      	cmp	r3, #32
 800080a:	d003      	beq.n	8000814 <__aeabi_dadd+0x5b8>
 800080c:	2440      	movs	r4, #64	; 0x40
 800080e:	1ae3      	subs	r3, r4, r3
 8000810:	4099      	lsls	r1, r3
 8000812:	4308      	orrs	r0, r1
 8000814:	1e41      	subs	r1, r0, #1
 8000816:	4188      	sbcs	r0, r1
 8000818:	4338      	orrs	r0, r7
 800081a:	e67c      	b.n	8000516 <__aeabi_dadd+0x2ba>
 800081c:	2200      	movs	r2, #0
 800081e:	2400      	movs	r4, #0
 8000820:	e625      	b.n	800046e <__aeabi_dadd+0x212>
 8000822:	1a17      	subs	r7, r2, r0
 8000824:	4643      	mov	r3, r8
 8000826:	42ba      	cmp	r2, r7
 8000828:	4192      	sbcs	r2, r2
 800082a:	1a59      	subs	r1, r3, r1
 800082c:	4252      	negs	r2, r2
 800082e:	1a89      	subs	r1, r1, r2
 8000830:	4664      	mov	r4, ip
 8000832:	0035      	movs	r5, r6
 8000834:	e543      	b.n	80002be <__aeabi_dadd+0x62>
 8000836:	4641      	mov	r1, r8
 8000838:	0010      	movs	r0, r2
 800083a:	4d14      	ldr	r5, [pc, #80]	; (800088c <__aeabi_dadd+0x630>)
 800083c:	e610      	b.n	8000460 <__aeabi_dadd+0x204>
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	2400      	movs	r4, #0
 8000842:	0312      	lsls	r2, r2, #12
 8000844:	e680      	b.n	8000548 <__aeabi_dadd+0x2ec>
 8000846:	001d      	movs	r5, r3
 8000848:	000f      	movs	r7, r1
 800084a:	3d20      	subs	r5, #32
 800084c:	40ef      	lsrs	r7, r5
 800084e:	46bc      	mov	ip, r7
 8000850:	2b20      	cmp	r3, #32
 8000852:	d003      	beq.n	800085c <__aeabi_dadd+0x600>
 8000854:	2540      	movs	r5, #64	; 0x40
 8000856:	1aeb      	subs	r3, r5, r3
 8000858:	4099      	lsls	r1, r3
 800085a:	4308      	orrs	r0, r1
 800085c:	0007      	movs	r7, r0
 800085e:	4663      	mov	r3, ip
 8000860:	1e78      	subs	r0, r7, #1
 8000862:	4187      	sbcs	r7, r0
 8000864:	431f      	orrs	r7, r3
 8000866:	e769      	b.n	800073c <__aeabi_dadd+0x4e0>
 8000868:	1887      	adds	r7, r0, r2
 800086a:	4297      	cmp	r7, r2
 800086c:	419b      	sbcs	r3, r3
 800086e:	4441      	add	r1, r8
 8000870:	425b      	negs	r3, r3
 8000872:	18c9      	adds	r1, r1, r3
 8000874:	0035      	movs	r5, r6
 8000876:	e5a3      	b.n	80003c0 <__aeabi_dadd+0x164>
 8000878:	003b      	movs	r3, r7
 800087a:	4333      	orrs	r3, r6
 800087c:	d0ce      	beq.n	800081c <__aeabi_dadd+0x5c0>
 800087e:	2207      	movs	r2, #7
 8000880:	0031      	movs	r1, r6
 8000882:	403a      	ands	r2, r7
 8000884:	e652      	b.n	800052c <__aeabi_dadd+0x2d0>
 8000886:	2300      	movs	r3, #0
 8000888:	001a      	movs	r2, r3
 800088a:	e5f4      	b.n	8000476 <__aeabi_dadd+0x21a>
 800088c:	000007ff 	.word	0x000007ff
 8000890:	ff7fffff 	.word	0xff7fffff

08000894 <__aeabi_ddiv>:
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	4657      	mov	r7, sl
 8000898:	46de      	mov	lr, fp
 800089a:	464e      	mov	r6, r9
 800089c:	4645      	mov	r5, r8
 800089e:	b5e0      	push	{r5, r6, r7, lr}
 80008a0:	4683      	mov	fp, r0
 80008a2:	0007      	movs	r7, r0
 80008a4:	030e      	lsls	r6, r1, #12
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	b085      	sub	sp, #20
 80008aa:	4692      	mov	sl, r2
 80008ac:	001c      	movs	r4, r3
 80008ae:	0b36      	lsrs	r6, r6, #12
 80008b0:	0d40      	lsrs	r0, r0, #21
 80008b2:	0fcd      	lsrs	r5, r1, #31
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_ddiv+0x26>
 80008b8:	e09d      	b.n	80009f6 <__aeabi_ddiv+0x162>
 80008ba:	4b95      	ldr	r3, [pc, #596]	; (8000b10 <__aeabi_ddiv+0x27c>)
 80008bc:	4298      	cmp	r0, r3
 80008be:	d039      	beq.n	8000934 <__aeabi_ddiv+0xa0>
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	00f6      	lsls	r6, r6, #3
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	431e      	orrs	r6, r3
 80008c8:	4a92      	ldr	r2, [pc, #584]	; (8000b14 <__aeabi_ddiv+0x280>)
 80008ca:	0f7b      	lsrs	r3, r7, #29
 80008cc:	4333      	orrs	r3, r6
 80008ce:	4699      	mov	r9, r3
 80008d0:	4694      	mov	ip, r2
 80008d2:	0003      	movs	r3, r0
 80008d4:	4463      	add	r3, ip
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2300      	movs	r3, #0
 80008da:	2600      	movs	r6, #0
 80008dc:	00ff      	lsls	r7, r7, #3
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	0323      	lsls	r3, r4, #12
 80008e2:	0b1b      	lsrs	r3, r3, #12
 80008e4:	4698      	mov	r8, r3
 80008e6:	0063      	lsls	r3, r4, #1
 80008e8:	0fe4      	lsrs	r4, r4, #31
 80008ea:	4652      	mov	r2, sl
 80008ec:	0d5b      	lsrs	r3, r3, #21
 80008ee:	9401      	str	r4, [sp, #4]
 80008f0:	d100      	bne.n	80008f4 <__aeabi_ddiv+0x60>
 80008f2:	e0b3      	b.n	8000a5c <__aeabi_ddiv+0x1c8>
 80008f4:	4986      	ldr	r1, [pc, #536]	; (8000b10 <__aeabi_ddiv+0x27c>)
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d100      	bne.n	80008fc <__aeabi_ddiv+0x68>
 80008fa:	e09e      	b.n	8000a3a <__aeabi_ddiv+0x1a6>
 80008fc:	4642      	mov	r2, r8
 80008fe:	00d1      	lsls	r1, r2, #3
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	0412      	lsls	r2, r2, #16
 8000904:	430a      	orrs	r2, r1
 8000906:	4651      	mov	r1, sl
 8000908:	0f49      	lsrs	r1, r1, #29
 800090a:	4311      	orrs	r1, r2
 800090c:	468b      	mov	fp, r1
 800090e:	4981      	ldr	r1, [pc, #516]	; (8000b14 <__aeabi_ddiv+0x280>)
 8000910:	4652      	mov	r2, sl
 8000912:	468c      	mov	ip, r1
 8000914:	9900      	ldr	r1, [sp, #0]
 8000916:	4463      	add	r3, ip
 8000918:	1acb      	subs	r3, r1, r3
 800091a:	2100      	movs	r1, #0
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	002b      	movs	r3, r5
 8000922:	4063      	eors	r3, r4
 8000924:	469a      	mov	sl, r3
 8000926:	2e0f      	cmp	r6, #15
 8000928:	d900      	bls.n	800092c <__aeabi_ddiv+0x98>
 800092a:	e105      	b.n	8000b38 <__aeabi_ddiv+0x2a4>
 800092c:	4b7a      	ldr	r3, [pc, #488]	; (8000b18 <__aeabi_ddiv+0x284>)
 800092e:	00b6      	lsls	r6, r6, #2
 8000930:	599b      	ldr	r3, [r3, r6]
 8000932:	469f      	mov	pc, r3
 8000934:	465b      	mov	r3, fp
 8000936:	4333      	orrs	r3, r6
 8000938:	4699      	mov	r9, r3
 800093a:	d000      	beq.n	800093e <__aeabi_ddiv+0xaa>
 800093c:	e0b8      	b.n	8000ab0 <__aeabi_ddiv+0x21c>
 800093e:	2302      	movs	r3, #2
 8000940:	2608      	movs	r6, #8
 8000942:	2700      	movs	r7, #0
 8000944:	9000      	str	r0, [sp, #0]
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	e7ca      	b.n	80008e0 <__aeabi_ddiv+0x4c>
 800094a:	46cb      	mov	fp, r9
 800094c:	003a      	movs	r2, r7
 800094e:	9902      	ldr	r1, [sp, #8]
 8000950:	9501      	str	r5, [sp, #4]
 8000952:	9b01      	ldr	r3, [sp, #4]
 8000954:	469a      	mov	sl, r3
 8000956:	2902      	cmp	r1, #2
 8000958:	d027      	beq.n	80009aa <__aeabi_ddiv+0x116>
 800095a:	2903      	cmp	r1, #3
 800095c:	d100      	bne.n	8000960 <__aeabi_ddiv+0xcc>
 800095e:	e280      	b.n	8000e62 <__aeabi_ddiv+0x5ce>
 8000960:	2901      	cmp	r1, #1
 8000962:	d044      	beq.n	80009ee <__aeabi_ddiv+0x15a>
 8000964:	496d      	ldr	r1, [pc, #436]	; (8000b1c <__aeabi_ddiv+0x288>)
 8000966:	9b00      	ldr	r3, [sp, #0]
 8000968:	468c      	mov	ip, r1
 800096a:	4463      	add	r3, ip
 800096c:	001c      	movs	r4, r3
 800096e:	2c00      	cmp	r4, #0
 8000970:	dd38      	ble.n	80009e4 <__aeabi_ddiv+0x150>
 8000972:	0753      	lsls	r3, r2, #29
 8000974:	d000      	beq.n	8000978 <__aeabi_ddiv+0xe4>
 8000976:	e213      	b.n	8000da0 <__aeabi_ddiv+0x50c>
 8000978:	08d2      	lsrs	r2, r2, #3
 800097a:	465b      	mov	r3, fp
 800097c:	01db      	lsls	r3, r3, #7
 800097e:	d509      	bpl.n	8000994 <__aeabi_ddiv+0x100>
 8000980:	4659      	mov	r1, fp
 8000982:	4b67      	ldr	r3, [pc, #412]	; (8000b20 <__aeabi_ddiv+0x28c>)
 8000984:	4019      	ands	r1, r3
 8000986:	468b      	mov	fp, r1
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	00c9      	lsls	r1, r1, #3
 800098c:	468c      	mov	ip, r1
 800098e:	9b00      	ldr	r3, [sp, #0]
 8000990:	4463      	add	r3, ip
 8000992:	001c      	movs	r4, r3
 8000994:	4b63      	ldr	r3, [pc, #396]	; (8000b24 <__aeabi_ddiv+0x290>)
 8000996:	429c      	cmp	r4, r3
 8000998:	dc07      	bgt.n	80009aa <__aeabi_ddiv+0x116>
 800099a:	465b      	mov	r3, fp
 800099c:	0564      	lsls	r4, r4, #21
 800099e:	075f      	lsls	r7, r3, #29
 80009a0:	025b      	lsls	r3, r3, #9
 80009a2:	4317      	orrs	r7, r2
 80009a4:	0b1b      	lsrs	r3, r3, #12
 80009a6:	0d62      	lsrs	r2, r4, #21
 80009a8:	e002      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2700      	movs	r7, #0
 80009ae:	4a58      	ldr	r2, [pc, #352]	; (8000b10 <__aeabi_ddiv+0x27c>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	031b      	lsls	r3, r3, #12
 80009b4:	0b1c      	lsrs	r4, r3, #12
 80009b6:	0d0b      	lsrs	r3, r1, #20
 80009b8:	051b      	lsls	r3, r3, #20
 80009ba:	4323      	orrs	r3, r4
 80009bc:	0514      	lsls	r4, r2, #20
 80009be:	4a5a      	ldr	r2, [pc, #360]	; (8000b28 <__aeabi_ddiv+0x294>)
 80009c0:	0038      	movs	r0, r7
 80009c2:	4013      	ands	r3, r2
 80009c4:	431c      	orrs	r4, r3
 80009c6:	4653      	mov	r3, sl
 80009c8:	0064      	lsls	r4, r4, #1
 80009ca:	07db      	lsls	r3, r3, #31
 80009cc:	0864      	lsrs	r4, r4, #1
 80009ce:	431c      	orrs	r4, r3
 80009d0:	0021      	movs	r1, r4
 80009d2:	b005      	add	sp, #20
 80009d4:	bc3c      	pop	{r2, r3, r4, r5}
 80009d6:	4690      	mov	r8, r2
 80009d8:	4699      	mov	r9, r3
 80009da:	46a2      	mov	sl, r4
 80009dc:	46ab      	mov	fp, r5
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e0:	2201      	movs	r2, #1
 80009e2:	4252      	negs	r2, r2
 80009e4:	2301      	movs	r3, #1
 80009e6:	1b1b      	subs	r3, r3, r4
 80009e8:	2b38      	cmp	r3, #56	; 0x38
 80009ea:	dc00      	bgt.n	80009ee <__aeabi_ddiv+0x15a>
 80009ec:	e1ad      	b.n	8000d4a <__aeabi_ddiv+0x4b6>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2300      	movs	r3, #0
 80009f2:	2700      	movs	r7, #0
 80009f4:	e7dc      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 80009f6:	465b      	mov	r3, fp
 80009f8:	4333      	orrs	r3, r6
 80009fa:	4699      	mov	r9, r3
 80009fc:	d05e      	beq.n	8000abc <__aeabi_ddiv+0x228>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x170>
 8000a02:	e18a      	b.n	8000d1a <__aeabi_ddiv+0x486>
 8000a04:	0030      	movs	r0, r6
 8000a06:	f000 fe3d 	bl	8001684 <__clzsi2>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	3b0b      	subs	r3, #11
 8000a0e:	2b1c      	cmp	r3, #28
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_ddiv+0x180>
 8000a12:	e17b      	b.n	8000d0c <__aeabi_ddiv+0x478>
 8000a14:	221d      	movs	r2, #29
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	465a      	mov	r2, fp
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	40da      	lsrs	r2, r3
 8000a1e:	3908      	subs	r1, #8
 8000a20:	408e      	lsls	r6, r1
 8000a22:	0013      	movs	r3, r2
 8000a24:	465f      	mov	r7, fp
 8000a26:	4333      	orrs	r3, r6
 8000a28:	4699      	mov	r9, r3
 8000a2a:	408f      	lsls	r7, r1
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	; (8000b2c <__aeabi_ddiv+0x298>)
 8000a2e:	2600      	movs	r6, #0
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2300      	movs	r3, #0
 8000a36:	9302      	str	r3, [sp, #8]
 8000a38:	e752      	b.n	80008e0 <__aeabi_ddiv+0x4c>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	493b      	ldr	r1, [pc, #236]	; (8000b30 <__aeabi_ddiv+0x29c>)
 8000a42:	469b      	mov	fp, r3
 8000a44:	468c      	mov	ip, r1
 8000a46:	9b00      	ldr	r3, [sp, #0]
 8000a48:	4463      	add	r3, ip
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	465b      	mov	r3, fp
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d13b      	bne.n	8000aca <__aeabi_ddiv+0x236>
 8000a52:	2302      	movs	r3, #2
 8000a54:	2200      	movs	r2, #0
 8000a56:	431e      	orrs	r6, r3
 8000a58:	2102      	movs	r1, #2
 8000a5a:	e761      	b.n	8000920 <__aeabi_ddiv+0x8c>
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	469b      	mov	fp, r3
 8000a62:	d037      	beq.n	8000ad4 <__aeabi_ddiv+0x240>
 8000a64:	4643      	mov	r3, r8
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_ddiv+0x1d8>
 8000a6a:	e162      	b.n	8000d32 <__aeabi_ddiv+0x49e>
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	f000 fe09 	bl	8001684 <__clzsi2>
 8000a72:	0003      	movs	r3, r0
 8000a74:	3b0b      	subs	r3, #11
 8000a76:	2b1c      	cmp	r3, #28
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_ddiv+0x1e8>
 8000a7a:	e153      	b.n	8000d24 <__aeabi_ddiv+0x490>
 8000a7c:	0002      	movs	r2, r0
 8000a7e:	4641      	mov	r1, r8
 8000a80:	3a08      	subs	r2, #8
 8000a82:	4091      	lsls	r1, r2
 8000a84:	4688      	mov	r8, r1
 8000a86:	211d      	movs	r1, #29
 8000a88:	1acb      	subs	r3, r1, r3
 8000a8a:	4651      	mov	r1, sl
 8000a8c:	40d9      	lsrs	r1, r3
 8000a8e:	000b      	movs	r3, r1
 8000a90:	4641      	mov	r1, r8
 8000a92:	430b      	orrs	r3, r1
 8000a94:	469b      	mov	fp, r3
 8000a96:	4653      	mov	r3, sl
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	9b00      	ldr	r3, [sp, #0]
 8000a9e:	4925      	ldr	r1, [pc, #148]	; (8000b34 <__aeabi_ddiv+0x2a0>)
 8000aa0:	469c      	mov	ip, r3
 8000aa2:	4460      	add	r0, ip
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4463      	add	r3, ip
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e737      	b.n	8000920 <__aeabi_ddiv+0x8c>
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	46b1      	mov	r9, r6
 8000ab4:	9000      	str	r0, [sp, #0]
 8000ab6:	260c      	movs	r6, #12
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	e711      	b.n	80008e0 <__aeabi_ddiv+0x4c>
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	2604      	movs	r6, #4
 8000ac4:	2700      	movs	r7, #0
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	e70a      	b.n	80008e0 <__aeabi_ddiv+0x4c>
 8000aca:	2303      	movs	r3, #3
 8000acc:	46c3      	mov	fp, r8
 8000ace:	431e      	orrs	r6, r3
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	e725      	b.n	8000920 <__aeabi_ddiv+0x8c>
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	431e      	orrs	r6, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2101      	movs	r1, #1
 8000adc:	e720      	b.n	8000920 <__aeabi_ddiv+0x8c>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	031b      	lsls	r3, r3, #12
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <__aeabi_ddiv+0x27c>)
 8000aea:	e761      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	4649      	mov	r1, r9
 8000af0:	031b      	lsls	r3, r3, #12
 8000af2:	4219      	tst	r1, r3
 8000af4:	d100      	bne.n	8000af8 <__aeabi_ddiv+0x264>
 8000af6:	e0e2      	b.n	8000cbe <__aeabi_ddiv+0x42a>
 8000af8:	4659      	mov	r1, fp
 8000afa:	4219      	tst	r1, r3
 8000afc:	d000      	beq.n	8000b00 <__aeabi_ddiv+0x26c>
 8000afe:	e0de      	b.n	8000cbe <__aeabi_ddiv+0x42a>
 8000b00:	430b      	orrs	r3, r1
 8000b02:	031b      	lsls	r3, r3, #12
 8000b04:	0017      	movs	r7, r2
 8000b06:	0b1b      	lsrs	r3, r3, #12
 8000b08:	46a2      	mov	sl, r4
 8000b0a:	4a01      	ldr	r2, [pc, #4]	; (8000b10 <__aeabi_ddiv+0x27c>)
 8000b0c:	e750      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	000007ff 	.word	0x000007ff
 8000b14:	fffffc01 	.word	0xfffffc01
 8000b18:	080051b8 	.word	0x080051b8
 8000b1c:	000003ff 	.word	0x000003ff
 8000b20:	feffffff 	.word	0xfeffffff
 8000b24:	000007fe 	.word	0x000007fe
 8000b28:	800fffff 	.word	0x800fffff
 8000b2c:	fffffc0d 	.word	0xfffffc0d
 8000b30:	fffff801 	.word	0xfffff801
 8000b34:	000003f3 	.word	0x000003f3
 8000b38:	45d9      	cmp	r9, fp
 8000b3a:	d900      	bls.n	8000b3e <__aeabi_ddiv+0x2aa>
 8000b3c:	e0cb      	b.n	8000cd6 <__aeabi_ddiv+0x442>
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x2ae>
 8000b40:	e0c6      	b.n	8000cd0 <__aeabi_ddiv+0x43c>
 8000b42:	003c      	movs	r4, r7
 8000b44:	4648      	mov	r0, r9
 8000b46:	2700      	movs	r7, #0
 8000b48:	9b00      	ldr	r3, [sp, #0]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	465b      	mov	r3, fp
 8000b50:	0e16      	lsrs	r6, r2, #24
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	431e      	orrs	r6, r3
 8000b56:	0213      	lsls	r3, r2, #8
 8000b58:	4698      	mov	r8, r3
 8000b5a:	0433      	lsls	r3, r6, #16
 8000b5c:	0c1b      	lsrs	r3, r3, #16
 8000b5e:	4699      	mov	r9, r3
 8000b60:	0c31      	lsrs	r1, r6, #16
 8000b62:	9101      	str	r1, [sp, #4]
 8000b64:	f7ff fb56 	bl	8000214 <__aeabi_uidivmod>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	4342      	muls	r2, r0
 8000b6c:	040b      	lsls	r3, r1, #16
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	0005      	movs	r5, r0
 8000b72:	4319      	orrs	r1, r3
 8000b74:	428a      	cmp	r2, r1
 8000b76:	d907      	bls.n	8000b88 <__aeabi_ddiv+0x2f4>
 8000b78:	1989      	adds	r1, r1, r6
 8000b7a:	3d01      	subs	r5, #1
 8000b7c:	428e      	cmp	r6, r1
 8000b7e:	d803      	bhi.n	8000b88 <__aeabi_ddiv+0x2f4>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	d901      	bls.n	8000b88 <__aeabi_ddiv+0x2f4>
 8000b84:	1e85      	subs	r5, r0, #2
 8000b86:	1989      	adds	r1, r1, r6
 8000b88:	1a88      	subs	r0, r1, r2
 8000b8a:	9901      	ldr	r1, [sp, #4]
 8000b8c:	f7ff fb42 	bl	8000214 <__aeabi_uidivmod>
 8000b90:	0409      	lsls	r1, r1, #16
 8000b92:	468c      	mov	ip, r1
 8000b94:	464a      	mov	r2, r9
 8000b96:	0421      	lsls	r1, r4, #16
 8000b98:	4664      	mov	r4, ip
 8000b9a:	4342      	muls	r2, r0
 8000b9c:	0c09      	lsrs	r1, r1, #16
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	4321      	orrs	r1, r4
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	d904      	bls.n	8000bb0 <__aeabi_ddiv+0x31c>
 8000ba6:	1989      	adds	r1, r1, r6
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	428e      	cmp	r6, r1
 8000bac:	d800      	bhi.n	8000bb0 <__aeabi_ddiv+0x31c>
 8000bae:	e0f1      	b.n	8000d94 <__aeabi_ddiv+0x500>
 8000bb0:	042d      	lsls	r5, r5, #16
 8000bb2:	431d      	orrs	r5, r3
 8000bb4:	46ab      	mov	fp, r5
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a89      	subs	r1, r1, r2
 8000bba:	4642      	mov	r2, r8
 8000bbc:	0c28      	lsrs	r0, r5, #16
 8000bbe:	0412      	lsls	r2, r2, #16
 8000bc0:	0c1d      	lsrs	r5, r3, #16
 8000bc2:	465b      	mov	r3, fp
 8000bc4:	0c14      	lsrs	r4, r2, #16
 8000bc6:	0022      	movs	r2, r4
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	0c1b      	lsrs	r3, r3, #16
 8000bcc:	435a      	muls	r2, r3
 8000bce:	9403      	str	r4, [sp, #12]
 8000bd0:	436b      	muls	r3, r5
 8000bd2:	4344      	muls	r4, r0
 8000bd4:	9502      	str	r5, [sp, #8]
 8000bd6:	4368      	muls	r0, r5
 8000bd8:	191b      	adds	r3, r3, r4
 8000bda:	0c15      	lsrs	r5, r2, #16
 8000bdc:	18eb      	adds	r3, r5, r3
 8000bde:	429c      	cmp	r4, r3
 8000be0:	d903      	bls.n	8000bea <__aeabi_ddiv+0x356>
 8000be2:	2480      	movs	r4, #128	; 0x80
 8000be4:	0264      	lsls	r4, r4, #9
 8000be6:	46a4      	mov	ip, r4
 8000be8:	4460      	add	r0, ip
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	0415      	lsls	r5, r2, #16
 8000bee:	041b      	lsls	r3, r3, #16
 8000bf0:	0c2d      	lsrs	r5, r5, #16
 8000bf2:	1820      	adds	r0, r4, r0
 8000bf4:	195d      	adds	r5, r3, r5
 8000bf6:	4281      	cmp	r1, r0
 8000bf8:	d377      	bcc.n	8000cea <__aeabi_ddiv+0x456>
 8000bfa:	d073      	beq.n	8000ce4 <__aeabi_ddiv+0x450>
 8000bfc:	1a0c      	subs	r4, r1, r0
 8000bfe:	4aa2      	ldr	r2, [pc, #648]	; (8000e88 <__aeabi_ddiv+0x5f4>)
 8000c00:	1b7d      	subs	r5, r7, r5
 8000c02:	42af      	cmp	r7, r5
 8000c04:	41bf      	sbcs	r7, r7
 8000c06:	4694      	mov	ip, r2
 8000c08:	9b00      	ldr	r3, [sp, #0]
 8000c0a:	427f      	negs	r7, r7
 8000c0c:	4463      	add	r3, ip
 8000c0e:	1be0      	subs	r0, r4, r7
 8000c10:	001c      	movs	r4, r3
 8000c12:	4286      	cmp	r6, r0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_ddiv+0x384>
 8000c16:	e0db      	b.n	8000dd0 <__aeabi_ddiv+0x53c>
 8000c18:	9901      	ldr	r1, [sp, #4]
 8000c1a:	f7ff fafb 	bl	8000214 <__aeabi_uidivmod>
 8000c1e:	464a      	mov	r2, r9
 8000c20:	4342      	muls	r2, r0
 8000c22:	040b      	lsls	r3, r1, #16
 8000c24:	0c29      	lsrs	r1, r5, #16
 8000c26:	0007      	movs	r7, r0
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	d907      	bls.n	8000c3e <__aeabi_ddiv+0x3aa>
 8000c2e:	1989      	adds	r1, r1, r6
 8000c30:	3f01      	subs	r7, #1
 8000c32:	428e      	cmp	r6, r1
 8000c34:	d803      	bhi.n	8000c3e <__aeabi_ddiv+0x3aa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	d901      	bls.n	8000c3e <__aeabi_ddiv+0x3aa>
 8000c3a:	1e87      	subs	r7, r0, #2
 8000c3c:	1989      	adds	r1, r1, r6
 8000c3e:	1a88      	subs	r0, r1, r2
 8000c40:	9901      	ldr	r1, [sp, #4]
 8000c42:	f7ff fae7 	bl	8000214 <__aeabi_uidivmod>
 8000c46:	0409      	lsls	r1, r1, #16
 8000c48:	464a      	mov	r2, r9
 8000c4a:	4689      	mov	r9, r1
 8000c4c:	0429      	lsls	r1, r5, #16
 8000c4e:	464d      	mov	r5, r9
 8000c50:	4342      	muls	r2, r0
 8000c52:	0c09      	lsrs	r1, r1, #16
 8000c54:	0003      	movs	r3, r0
 8000c56:	4329      	orrs	r1, r5
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	d907      	bls.n	8000c6c <__aeabi_ddiv+0x3d8>
 8000c5c:	1989      	adds	r1, r1, r6
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	428e      	cmp	r6, r1
 8000c62:	d803      	bhi.n	8000c6c <__aeabi_ddiv+0x3d8>
 8000c64:	428a      	cmp	r2, r1
 8000c66:	d901      	bls.n	8000c6c <__aeabi_ddiv+0x3d8>
 8000c68:	1e83      	subs	r3, r0, #2
 8000c6a:	1989      	adds	r1, r1, r6
 8000c6c:	043f      	lsls	r7, r7, #16
 8000c6e:	1a89      	subs	r1, r1, r2
 8000c70:	003a      	movs	r2, r7
 8000c72:	9f03      	ldr	r7, [sp, #12]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	0038      	movs	r0, r7
 8000c78:	0413      	lsls	r3, r2, #16
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	4358      	muls	r0, r3
 8000c7e:	4681      	mov	r9, r0
 8000c80:	9802      	ldr	r0, [sp, #8]
 8000c82:	0c15      	lsrs	r5, r2, #16
 8000c84:	436f      	muls	r7, r5
 8000c86:	4343      	muls	r3, r0
 8000c88:	4345      	muls	r5, r0
 8000c8a:	4648      	mov	r0, r9
 8000c8c:	0c00      	lsrs	r0, r0, #16
 8000c8e:	4684      	mov	ip, r0
 8000c90:	19db      	adds	r3, r3, r7
 8000c92:	4463      	add	r3, ip
 8000c94:	429f      	cmp	r7, r3
 8000c96:	d903      	bls.n	8000ca0 <__aeabi_ddiv+0x40c>
 8000c98:	2080      	movs	r0, #128	; 0x80
 8000c9a:	0240      	lsls	r0, r0, #9
 8000c9c:	4684      	mov	ip, r0
 8000c9e:	4465      	add	r5, ip
 8000ca0:	4648      	mov	r0, r9
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	0400      	lsls	r0, r0, #16
 8000ca6:	041b      	lsls	r3, r3, #16
 8000ca8:	0c00      	lsrs	r0, r0, #16
 8000caa:	197d      	adds	r5, r7, r5
 8000cac:	1818      	adds	r0, r3, r0
 8000cae:	42a9      	cmp	r1, r5
 8000cb0:	d200      	bcs.n	8000cb4 <__aeabi_ddiv+0x420>
 8000cb2:	e084      	b.n	8000dbe <__aeabi_ddiv+0x52a>
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_ddiv+0x424>
 8000cb6:	e07f      	b.n	8000db8 <__aeabi_ddiv+0x524>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	e657      	b.n	800096e <__aeabi_ddiv+0xda>
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	031b      	lsls	r3, r3, #12
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	031b      	lsls	r3, r3, #12
 8000cc8:	0b1b      	lsrs	r3, r3, #12
 8000cca:	46aa      	mov	sl, r5
 8000ccc:	4a6f      	ldr	r2, [pc, #444]	; (8000e8c <__aeabi_ddiv+0x5f8>)
 8000cce:	e66f      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 8000cd0:	42ba      	cmp	r2, r7
 8000cd2:	d900      	bls.n	8000cd6 <__aeabi_ddiv+0x442>
 8000cd4:	e735      	b.n	8000b42 <__aeabi_ddiv+0x2ae>
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	07dc      	lsls	r4, r3, #31
 8000cda:	0858      	lsrs	r0, r3, #1
 8000cdc:	087b      	lsrs	r3, r7, #1
 8000cde:	431c      	orrs	r4, r3
 8000ce0:	07ff      	lsls	r7, r7, #31
 8000ce2:	e734      	b.n	8000b4e <__aeabi_ddiv+0x2ba>
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	42af      	cmp	r7, r5
 8000ce8:	d289      	bcs.n	8000bfe <__aeabi_ddiv+0x36a>
 8000cea:	4447      	add	r7, r8
 8000cec:	4547      	cmp	r7, r8
 8000cee:	41a4      	sbcs	r4, r4
 8000cf0:	465b      	mov	r3, fp
 8000cf2:	4264      	negs	r4, r4
 8000cf4:	19a4      	adds	r4, r4, r6
 8000cf6:	1864      	adds	r4, r4, r1
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	42a6      	cmp	r6, r4
 8000cfc:	d21e      	bcs.n	8000d3c <__aeabi_ddiv+0x4a8>
 8000cfe:	42a0      	cmp	r0, r4
 8000d00:	d86d      	bhi.n	8000dde <__aeabi_ddiv+0x54a>
 8000d02:	d100      	bne.n	8000d06 <__aeabi_ddiv+0x472>
 8000d04:	e0b6      	b.n	8000e74 <__aeabi_ddiv+0x5e0>
 8000d06:	1a24      	subs	r4, r4, r0
 8000d08:	469b      	mov	fp, r3
 8000d0a:	e778      	b.n	8000bfe <__aeabi_ddiv+0x36a>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	465a      	mov	r2, fp
 8000d10:	3b28      	subs	r3, #40	; 0x28
 8000d12:	409a      	lsls	r2, r3
 8000d14:	2700      	movs	r7, #0
 8000d16:	4691      	mov	r9, r2
 8000d18:	e688      	b.n	8000a2c <__aeabi_ddiv+0x198>
 8000d1a:	4658      	mov	r0, fp
 8000d1c:	f000 fcb2 	bl	8001684 <__clzsi2>
 8000d20:	3020      	adds	r0, #32
 8000d22:	e672      	b.n	8000a0a <__aeabi_ddiv+0x176>
 8000d24:	0003      	movs	r3, r0
 8000d26:	4652      	mov	r2, sl
 8000d28:	3b28      	subs	r3, #40	; 0x28
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	4693      	mov	fp, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	e6b4      	b.n	8000a9c <__aeabi_ddiv+0x208>
 8000d32:	4650      	mov	r0, sl
 8000d34:	f000 fca6 	bl	8001684 <__clzsi2>
 8000d38:	3020      	adds	r0, #32
 8000d3a:	e69a      	b.n	8000a72 <__aeabi_ddiv+0x1de>
 8000d3c:	42a6      	cmp	r6, r4
 8000d3e:	d1e2      	bne.n	8000d06 <__aeabi_ddiv+0x472>
 8000d40:	45b8      	cmp	r8, r7
 8000d42:	d9dc      	bls.n	8000cfe <__aeabi_ddiv+0x46a>
 8000d44:	1a34      	subs	r4, r6, r0
 8000d46:	469b      	mov	fp, r3
 8000d48:	e759      	b.n	8000bfe <__aeabi_ddiv+0x36a>
 8000d4a:	2b1f      	cmp	r3, #31
 8000d4c:	dc65      	bgt.n	8000e1a <__aeabi_ddiv+0x586>
 8000d4e:	4c50      	ldr	r4, [pc, #320]	; (8000e90 <__aeabi_ddiv+0x5fc>)
 8000d50:	9900      	ldr	r1, [sp, #0]
 8000d52:	46a4      	mov	ip, r4
 8000d54:	465c      	mov	r4, fp
 8000d56:	4461      	add	r1, ip
 8000d58:	0008      	movs	r0, r1
 8000d5a:	408c      	lsls	r4, r1
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	4082      	lsls	r2, r0
 8000d60:	40d9      	lsrs	r1, r3
 8000d62:	1e50      	subs	r0, r2, #1
 8000d64:	4182      	sbcs	r2, r0
 8000d66:	430c      	orrs	r4, r1
 8000d68:	4314      	orrs	r4, r2
 8000d6a:	465a      	mov	r2, fp
 8000d6c:	40da      	lsrs	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	0762      	lsls	r2, r4, #29
 8000d72:	d009      	beq.n	8000d88 <__aeabi_ddiv+0x4f4>
 8000d74:	220f      	movs	r2, #15
 8000d76:	4022      	ands	r2, r4
 8000d78:	2a04      	cmp	r2, #4
 8000d7a:	d005      	beq.n	8000d88 <__aeabi_ddiv+0x4f4>
 8000d7c:	0022      	movs	r2, r4
 8000d7e:	1d14      	adds	r4, r2, #4
 8000d80:	4294      	cmp	r4, r2
 8000d82:	4189      	sbcs	r1, r1
 8000d84:	4249      	negs	r1, r1
 8000d86:	185b      	adds	r3, r3, r1
 8000d88:	021a      	lsls	r2, r3, #8
 8000d8a:	d562      	bpl.n	8000e52 <__aeabi_ddiv+0x5be>
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2700      	movs	r7, #0
 8000d92:	e60d      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	d800      	bhi.n	8000d9a <__aeabi_ddiv+0x506>
 8000d98:	e70a      	b.n	8000bb0 <__aeabi_ddiv+0x31c>
 8000d9a:	1e83      	subs	r3, r0, #2
 8000d9c:	1989      	adds	r1, r1, r6
 8000d9e:	e707      	b.n	8000bb0 <__aeabi_ddiv+0x31c>
 8000da0:	230f      	movs	r3, #15
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0x516>
 8000da8:	e5e6      	b.n	8000978 <__aeabi_ddiv+0xe4>
 8000daa:	1d17      	adds	r7, r2, #4
 8000dac:	4297      	cmp	r7, r2
 8000dae:	4192      	sbcs	r2, r2
 8000db0:	4253      	negs	r3, r2
 8000db2:	449b      	add	fp, r3
 8000db4:	08fa      	lsrs	r2, r7, #3
 8000db6:	e5e0      	b.n	800097a <__aeabi_ddiv+0xe6>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0x52a>
 8000dbc:	e5d7      	b.n	800096e <__aeabi_ddiv+0xda>
 8000dbe:	1871      	adds	r1, r6, r1
 8000dc0:	1e53      	subs	r3, r2, #1
 8000dc2:	42b1      	cmp	r1, r6
 8000dc4:	d327      	bcc.n	8000e16 <__aeabi_ddiv+0x582>
 8000dc6:	42a9      	cmp	r1, r5
 8000dc8:	d315      	bcc.n	8000df6 <__aeabi_ddiv+0x562>
 8000dca:	d058      	beq.n	8000e7e <__aeabi_ddiv+0x5ea>
 8000dcc:	001a      	movs	r2, r3
 8000dce:	e773      	b.n	8000cb8 <__aeabi_ddiv+0x424>
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dc00      	bgt.n	8000dd6 <__aeabi_ddiv+0x542>
 8000dd4:	e604      	b.n	80009e0 <__aeabi_ddiv+0x14c>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	449b      	add	fp, r3
 8000ddc:	e5cd      	b.n	800097a <__aeabi_ddiv+0xe6>
 8000dde:	2302      	movs	r3, #2
 8000de0:	4447      	add	r7, r8
 8000de2:	4547      	cmp	r7, r8
 8000de4:	4189      	sbcs	r1, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	469c      	mov	ip, r3
 8000dea:	4249      	negs	r1, r1
 8000dec:	1989      	adds	r1, r1, r6
 8000dee:	190c      	adds	r4, r1, r4
 8000df0:	44e3      	add	fp, ip
 8000df2:	1a24      	subs	r4, r4, r0
 8000df4:	e703      	b.n	8000bfe <__aeabi_ddiv+0x36a>
 8000df6:	4643      	mov	r3, r8
 8000df8:	005f      	lsls	r7, r3, #1
 8000dfa:	4547      	cmp	r7, r8
 8000dfc:	419b      	sbcs	r3, r3
 8000dfe:	46b8      	mov	r8, r7
 8000e00:	425b      	negs	r3, r3
 8000e02:	199e      	adds	r6, r3, r6
 8000e04:	3a02      	subs	r2, #2
 8000e06:	1989      	adds	r1, r1, r6
 8000e08:	42a9      	cmp	r1, r5
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_ddiv+0x57a>
 8000e0c:	e754      	b.n	8000cb8 <__aeabi_ddiv+0x424>
 8000e0e:	4540      	cmp	r0, r8
 8000e10:	d000      	beq.n	8000e14 <__aeabi_ddiv+0x580>
 8000e12:	e751      	b.n	8000cb8 <__aeabi_ddiv+0x424>
 8000e14:	e5ab      	b.n	800096e <__aeabi_ddiv+0xda>
 8000e16:	001a      	movs	r2, r3
 8000e18:	e7f6      	b.n	8000e08 <__aeabi_ddiv+0x574>
 8000e1a:	211f      	movs	r1, #31
 8000e1c:	465f      	mov	r7, fp
 8000e1e:	4249      	negs	r1, r1
 8000e20:	1b0c      	subs	r4, r1, r4
 8000e22:	40e7      	lsrs	r7, r4
 8000e24:	2b20      	cmp	r3, #32
 8000e26:	d007      	beq.n	8000e38 <__aeabi_ddiv+0x5a4>
 8000e28:	491a      	ldr	r1, [pc, #104]	; (8000e94 <__aeabi_ddiv+0x600>)
 8000e2a:	9b00      	ldr	r3, [sp, #0]
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	4463      	add	r3, ip
 8000e30:	0018      	movs	r0, r3
 8000e32:	465b      	mov	r3, fp
 8000e34:	4083      	lsls	r3, r0
 8000e36:	431a      	orrs	r2, r3
 8000e38:	1e50      	subs	r0, r2, #1
 8000e3a:	4182      	sbcs	r2, r0
 8000e3c:	433a      	orrs	r2, r7
 8000e3e:	2707      	movs	r7, #7
 8000e40:	2300      	movs	r3, #0
 8000e42:	4017      	ands	r7, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_ddiv+0x5c6>
 8000e46:	210f      	movs	r1, #15
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4011      	ands	r1, r2
 8000e4c:	0014      	movs	r4, r2
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d195      	bne.n	8000d7e <__aeabi_ddiv+0x4ea>
 8000e52:	0022      	movs	r2, r4
 8000e54:	075f      	lsls	r7, r3, #29
 8000e56:	025b      	lsls	r3, r3, #9
 8000e58:	0b1b      	lsrs	r3, r3, #12
 8000e5a:	08d2      	lsrs	r2, r2, #3
 8000e5c:	4317      	orrs	r7, r2
 8000e5e:	2200      	movs	r2, #0
 8000e60:	e5a6      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	4659      	mov	r1, fp
 8000e66:	031b      	lsls	r3, r3, #12
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	031b      	lsls	r3, r3, #12
 8000e6c:	0017      	movs	r7, r2
 8000e6e:	0b1b      	lsrs	r3, r3, #12
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <__aeabi_ddiv+0x5f8>)
 8000e72:	e59d      	b.n	80009b0 <__aeabi_ddiv+0x11c>
 8000e74:	42bd      	cmp	r5, r7
 8000e76:	d8b2      	bhi.n	8000dde <__aeabi_ddiv+0x54a>
 8000e78:	469b      	mov	fp, r3
 8000e7a:	2400      	movs	r4, #0
 8000e7c:	e6bf      	b.n	8000bfe <__aeabi_ddiv+0x36a>
 8000e7e:	4580      	cmp	r8, r0
 8000e80:	d3b9      	bcc.n	8000df6 <__aeabi_ddiv+0x562>
 8000e82:	001a      	movs	r2, r3
 8000e84:	e7c3      	b.n	8000e0e <__aeabi_ddiv+0x57a>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	000003ff 	.word	0x000003ff
 8000e8c:	000007ff 	.word	0x000007ff
 8000e90:	0000041e 	.word	0x0000041e
 8000e94:	0000043e 	.word	0x0000043e

08000e98 <__aeabi_dsub>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	4657      	mov	r7, sl
 8000e9c:	464e      	mov	r6, r9
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	46de      	mov	lr, fp
 8000ea2:	000c      	movs	r4, r1
 8000ea4:	0309      	lsls	r1, r1, #12
 8000ea6:	b5e0      	push	{r5, r6, r7, lr}
 8000ea8:	0a49      	lsrs	r1, r1, #9
 8000eaa:	0f46      	lsrs	r6, r0, #29
 8000eac:	005f      	lsls	r7, r3, #1
 8000eae:	4331      	orrs	r1, r6
 8000eb0:	031e      	lsls	r6, r3, #12
 8000eb2:	0fdb      	lsrs	r3, r3, #31
 8000eb4:	0a76      	lsrs	r6, r6, #9
 8000eb6:	469b      	mov	fp, r3
 8000eb8:	0f53      	lsrs	r3, r2, #29
 8000eba:	4333      	orrs	r3, r6
 8000ebc:	4ec8      	ldr	r6, [pc, #800]	; (80011e0 <__aeabi_dsub+0x348>)
 8000ebe:	0065      	lsls	r5, r4, #1
 8000ec0:	00c0      	lsls	r0, r0, #3
 8000ec2:	0fe4      	lsrs	r4, r4, #31
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	0d6d      	lsrs	r5, r5, #21
 8000ec8:	46a2      	mov	sl, r4
 8000eca:	4681      	mov	r9, r0
 8000ecc:	0d7f      	lsrs	r7, r7, #21
 8000ece:	469c      	mov	ip, r3
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	42b7      	cmp	r7, r6
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dsub+0x40>
 8000ed6:	e0b9      	b.n	800104c <__aeabi_dsub+0x1b4>
 8000ed8:	465b      	mov	r3, fp
 8000eda:	2601      	movs	r6, #1
 8000edc:	4073      	eors	r3, r6
 8000ede:	469b      	mov	fp, r3
 8000ee0:	1bee      	subs	r6, r5, r7
 8000ee2:	45a3      	cmp	fp, r4
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dsub+0x50>
 8000ee6:	e083      	b.n	8000ff0 <__aeabi_dsub+0x158>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	dd63      	ble.n	8000fb4 <__aeabi_dsub+0x11c>
 8000eec:	2f00      	cmp	r7, #0
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dsub+0x5a>
 8000ef0:	e0b1      	b.n	8001056 <__aeabi_dsub+0x1be>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dsub+0x62>
 8000ef8:	e123      	b.n	8001142 <__aeabi_dsub+0x2aa>
 8000efa:	1e73      	subs	r3, r6, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d000      	beq.n	8000f02 <__aeabi_dsub+0x6a>
 8000f00:	e1ba      	b.n	8001278 <__aeabi_dsub+0x3e0>
 8000f02:	1a86      	subs	r6, r0, r2
 8000f04:	4663      	mov	r3, ip
 8000f06:	42b0      	cmp	r0, r6
 8000f08:	4180      	sbcs	r0, r0
 8000f0a:	2501      	movs	r5, #1
 8000f0c:	1ac9      	subs	r1, r1, r3
 8000f0e:	4240      	negs	r0, r0
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	020b      	lsls	r3, r1, #8
 8000f14:	d400      	bmi.n	8000f18 <__aeabi_dsub+0x80>
 8000f16:	e147      	b.n	80011a8 <__aeabi_dsub+0x310>
 8000f18:	0249      	lsls	r1, r1, #9
 8000f1a:	0a4b      	lsrs	r3, r1, #9
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	4643      	mov	r3, r8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dsub+0x8e>
 8000f24:	e189      	b.n	800123a <__aeabi_dsub+0x3a2>
 8000f26:	4640      	mov	r0, r8
 8000f28:	f000 fbac 	bl	8001684 <__clzsi2>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	3b08      	subs	r3, #8
 8000f30:	2b1f      	cmp	r3, #31
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_dsub+0x9e>
 8000f34:	e17c      	b.n	8001230 <__aeabi_dsub+0x398>
 8000f36:	2220      	movs	r2, #32
 8000f38:	0030      	movs	r0, r6
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	40d0      	lsrs	r0, r2
 8000f40:	4099      	lsls	r1, r3
 8000f42:	0002      	movs	r2, r0
 8000f44:	409e      	lsls	r6, r3
 8000f46:	430a      	orrs	r2, r1
 8000f48:	429d      	cmp	r5, r3
 8000f4a:	dd00      	ble.n	8000f4e <__aeabi_dsub+0xb6>
 8000f4c:	e16a      	b.n	8001224 <__aeabi_dsub+0x38c>
 8000f4e:	1b5d      	subs	r5, r3, r5
 8000f50:	1c6b      	adds	r3, r5, #1
 8000f52:	2b1f      	cmp	r3, #31
 8000f54:	dd00      	ble.n	8000f58 <__aeabi_dsub+0xc0>
 8000f56:	e194      	b.n	8001282 <__aeabi_dsub+0x3ea>
 8000f58:	2120      	movs	r1, #32
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	0035      	movs	r5, r6
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	408e      	lsls	r6, r1
 8000f62:	40da      	lsrs	r2, r3
 8000f64:	4088      	lsls	r0, r1
 8000f66:	40dd      	lsrs	r5, r3
 8000f68:	1e71      	subs	r1, r6, #1
 8000f6a:	418e      	sbcs	r6, r1
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	2207      	movs	r2, #7
 8000f70:	4328      	orrs	r0, r5
 8000f72:	2500      	movs	r5, #0
 8000f74:	4306      	orrs	r6, r0
 8000f76:	4032      	ands	r2, r6
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d009      	beq.n	8000f90 <__aeabi_dsub+0xf8>
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	4033      	ands	r3, r6
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d005      	beq.n	8000f90 <__aeabi_dsub+0xf8>
 8000f84:	1d33      	adds	r3, r6, #4
 8000f86:	42b3      	cmp	r3, r6
 8000f88:	41b6      	sbcs	r6, r6
 8000f8a:	4276      	negs	r6, r6
 8000f8c:	1989      	adds	r1, r1, r6
 8000f8e:	001e      	movs	r6, r3
 8000f90:	020b      	lsls	r3, r1, #8
 8000f92:	d400      	bmi.n	8000f96 <__aeabi_dsub+0xfe>
 8000f94:	e23d      	b.n	8001412 <__aeabi_dsub+0x57a>
 8000f96:	1c6a      	adds	r2, r5, #1
 8000f98:	4b91      	ldr	r3, [pc, #580]	; (80011e0 <__aeabi_dsub+0x348>)
 8000f9a:	0555      	lsls	r5, r2, #21
 8000f9c:	0d6d      	lsrs	r5, r5, #21
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x10c>
 8000fa2:	e119      	b.n	80011d8 <__aeabi_dsub+0x340>
 8000fa4:	4a8f      	ldr	r2, [pc, #572]	; (80011e4 <__aeabi_dsub+0x34c>)
 8000fa6:	08f6      	lsrs	r6, r6, #3
 8000fa8:	400a      	ands	r2, r1
 8000faa:	0757      	lsls	r7, r2, #29
 8000fac:	0252      	lsls	r2, r2, #9
 8000fae:	4337      	orrs	r7, r6
 8000fb0:	0b12      	lsrs	r2, r2, #12
 8000fb2:	e09b      	b.n	80010ec <__aeabi_dsub+0x254>
 8000fb4:	2e00      	cmp	r6, #0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_dsub+0x122>
 8000fb8:	e0c5      	b.n	8001146 <__aeabi_dsub+0x2ae>
 8000fba:	1c6e      	adds	r6, r5, #1
 8000fbc:	0576      	lsls	r6, r6, #21
 8000fbe:	0d76      	lsrs	r6, r6, #21
 8000fc0:	2e01      	cmp	r6, #1
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_dsub+0x12e>
 8000fc4:	e148      	b.n	8001258 <__aeabi_dsub+0x3c0>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	1a86      	subs	r6, r0, r2
 8000fca:	1bcb      	subs	r3, r1, r7
 8000fcc:	42b0      	cmp	r0, r6
 8000fce:	41bf      	sbcs	r7, r7
 8000fd0:	427f      	negs	r7, r7
 8000fd2:	46b8      	mov	r8, r7
 8000fd4:	001f      	movs	r7, r3
 8000fd6:	4643      	mov	r3, r8
 8000fd8:	1aff      	subs	r7, r7, r3
 8000fda:	003b      	movs	r3, r7
 8000fdc:	46b8      	mov	r8, r7
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	d500      	bpl.n	8000fe4 <__aeabi_dsub+0x14c>
 8000fe2:	e15f      	b.n	80012a4 <__aeabi_dsub+0x40c>
 8000fe4:	4337      	orrs	r7, r6
 8000fe6:	d19a      	bne.n	8000f1e <__aeabi_dsub+0x86>
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2400      	movs	r4, #0
 8000fec:	2500      	movs	r5, #0
 8000fee:	e079      	b.n	80010e4 <__aeabi_dsub+0x24c>
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_dsub+0x15e>
 8000ff4:	e0fa      	b.n	80011ec <__aeabi_dsub+0x354>
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dsub+0x164>
 8000ffa:	e08d      	b.n	8001118 <__aeabi_dsub+0x280>
 8000ffc:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <__aeabi_dsub+0x348>)
 8000ffe:	429d      	cmp	r5, r3
 8001000:	d067      	beq.n	80010d2 <__aeabi_dsub+0x23a>
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	4667      	mov	r7, ip
 8001006:	041b      	lsls	r3, r3, #16
 8001008:	431f      	orrs	r7, r3
 800100a:	46bc      	mov	ip, r7
 800100c:	2e38      	cmp	r6, #56	; 0x38
 800100e:	dc00      	bgt.n	8001012 <__aeabi_dsub+0x17a>
 8001010:	e152      	b.n	80012b8 <__aeabi_dsub+0x420>
 8001012:	4663      	mov	r3, ip
 8001014:	4313      	orrs	r3, r2
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	4193      	sbcs	r3, r2
 800101a:	181e      	adds	r6, r3, r0
 800101c:	4286      	cmp	r6, r0
 800101e:	4180      	sbcs	r0, r0
 8001020:	4240      	negs	r0, r0
 8001022:	1809      	adds	r1, r1, r0
 8001024:	020b      	lsls	r3, r1, #8
 8001026:	d400      	bmi.n	800102a <__aeabi_dsub+0x192>
 8001028:	e0be      	b.n	80011a8 <__aeabi_dsub+0x310>
 800102a:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <__aeabi_dsub+0x348>)
 800102c:	3501      	adds	r5, #1
 800102e:	429d      	cmp	r5, r3
 8001030:	d100      	bne.n	8001034 <__aeabi_dsub+0x19c>
 8001032:	e0d2      	b.n	80011da <__aeabi_dsub+0x342>
 8001034:	4a6b      	ldr	r2, [pc, #428]	; (80011e4 <__aeabi_dsub+0x34c>)
 8001036:	0873      	lsrs	r3, r6, #1
 8001038:	400a      	ands	r2, r1
 800103a:	2101      	movs	r1, #1
 800103c:	400e      	ands	r6, r1
 800103e:	431e      	orrs	r6, r3
 8001040:	0851      	lsrs	r1, r2, #1
 8001042:	07d3      	lsls	r3, r2, #31
 8001044:	2207      	movs	r2, #7
 8001046:	431e      	orrs	r6, r3
 8001048:	4032      	ands	r2, r6
 800104a:	e795      	b.n	8000f78 <__aeabi_dsub+0xe0>
 800104c:	001e      	movs	r6, r3
 800104e:	4316      	orrs	r6, r2
 8001050:	d000      	beq.n	8001054 <__aeabi_dsub+0x1bc>
 8001052:	e745      	b.n	8000ee0 <__aeabi_dsub+0x48>
 8001054:	e740      	b.n	8000ed8 <__aeabi_dsub+0x40>
 8001056:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <__aeabi_dsub+0x348>)
 8001058:	429d      	cmp	r5, r3
 800105a:	d03a      	beq.n	80010d2 <__aeabi_dsub+0x23a>
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	4667      	mov	r7, ip
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	431f      	orrs	r7, r3
 8001064:	46bc      	mov	ip, r7
 8001066:	2e38      	cmp	r6, #56	; 0x38
 8001068:	dd00      	ble.n	800106c <__aeabi_dsub+0x1d4>
 800106a:	e0eb      	b.n	8001244 <__aeabi_dsub+0x3ac>
 800106c:	2e1f      	cmp	r6, #31
 800106e:	dc00      	bgt.n	8001072 <__aeabi_dsub+0x1da>
 8001070:	e13a      	b.n	80012e8 <__aeabi_dsub+0x450>
 8001072:	0033      	movs	r3, r6
 8001074:	4667      	mov	r7, ip
 8001076:	3b20      	subs	r3, #32
 8001078:	40df      	lsrs	r7, r3
 800107a:	003b      	movs	r3, r7
 800107c:	2e20      	cmp	r6, #32
 800107e:	d005      	beq.n	800108c <__aeabi_dsub+0x1f4>
 8001080:	2740      	movs	r7, #64	; 0x40
 8001082:	1bbf      	subs	r7, r7, r6
 8001084:	4666      	mov	r6, ip
 8001086:	40be      	lsls	r6, r7
 8001088:	4332      	orrs	r2, r6
 800108a:	4690      	mov	r8, r2
 800108c:	4646      	mov	r6, r8
 800108e:	1e72      	subs	r2, r6, #1
 8001090:	4196      	sbcs	r6, r2
 8001092:	4333      	orrs	r3, r6
 8001094:	e0da      	b.n	800124c <__aeabi_dsub+0x3b4>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <__aeabi_dsub+0x204>
 800109a:	e214      	b.n	80014c6 <__aeabi_dsub+0x62e>
 800109c:	4663      	mov	r3, ip
 800109e:	4313      	orrs	r3, r2
 80010a0:	d100      	bne.n	80010a4 <__aeabi_dsub+0x20c>
 80010a2:	e168      	b.n	8001376 <__aeabi_dsub+0x4de>
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	074e      	lsls	r6, r1, #29
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	08c9      	lsrs	r1, r1, #3
 80010ac:	031b      	lsls	r3, r3, #12
 80010ae:	4306      	orrs	r6, r0
 80010b0:	4219      	tst	r1, r3
 80010b2:	d008      	beq.n	80010c6 <__aeabi_dsub+0x22e>
 80010b4:	4660      	mov	r0, ip
 80010b6:	08c0      	lsrs	r0, r0, #3
 80010b8:	4218      	tst	r0, r3
 80010ba:	d104      	bne.n	80010c6 <__aeabi_dsub+0x22e>
 80010bc:	4663      	mov	r3, ip
 80010be:	0001      	movs	r1, r0
 80010c0:	08d2      	lsrs	r2, r2, #3
 80010c2:	075e      	lsls	r6, r3, #29
 80010c4:	4316      	orrs	r6, r2
 80010c6:	00f3      	lsls	r3, r6, #3
 80010c8:	4699      	mov	r9, r3
 80010ca:	00c9      	lsls	r1, r1, #3
 80010cc:	0f72      	lsrs	r2, r6, #29
 80010ce:	4d44      	ldr	r5, [pc, #272]	; (80011e0 <__aeabi_dsub+0x348>)
 80010d0:	4311      	orrs	r1, r2
 80010d2:	464b      	mov	r3, r9
 80010d4:	08de      	lsrs	r6, r3, #3
 80010d6:	4b42      	ldr	r3, [pc, #264]	; (80011e0 <__aeabi_dsub+0x348>)
 80010d8:	074f      	lsls	r7, r1, #29
 80010da:	4337      	orrs	r7, r6
 80010dc:	08ca      	lsrs	r2, r1, #3
 80010de:	429d      	cmp	r5, r3
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x24c>
 80010e2:	e06e      	b.n	80011c2 <__aeabi_dsub+0x32a>
 80010e4:	0312      	lsls	r2, r2, #12
 80010e6:	056d      	lsls	r5, r5, #21
 80010e8:	0b12      	lsrs	r2, r2, #12
 80010ea:	0d6d      	lsrs	r5, r5, #21
 80010ec:	2100      	movs	r1, #0
 80010ee:	0312      	lsls	r2, r2, #12
 80010f0:	0b13      	lsrs	r3, r2, #12
 80010f2:	0d0a      	lsrs	r2, r1, #20
 80010f4:	0512      	lsls	r2, r2, #20
 80010f6:	431a      	orrs	r2, r3
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <__aeabi_dsub+0x350>)
 80010fa:	052d      	lsls	r5, r5, #20
 80010fc:	4013      	ands	r3, r2
 80010fe:	432b      	orrs	r3, r5
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	07e4      	lsls	r4, r4, #31
 8001104:	085b      	lsrs	r3, r3, #1
 8001106:	4323      	orrs	r3, r4
 8001108:	0038      	movs	r0, r7
 800110a:	0019      	movs	r1, r3
 800110c:	bc3c      	pop	{r2, r3, r4, r5}
 800110e:	4690      	mov	r8, r2
 8001110:	4699      	mov	r9, r3
 8001112:	46a2      	mov	sl, r4
 8001114:	46ab      	mov	fp, r5
 8001116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001118:	4663      	mov	r3, ip
 800111a:	4313      	orrs	r3, r2
 800111c:	d011      	beq.n	8001142 <__aeabi_dsub+0x2aa>
 800111e:	1e73      	subs	r3, r6, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d000      	beq.n	8001126 <__aeabi_dsub+0x28e>
 8001124:	e107      	b.n	8001336 <__aeabi_dsub+0x49e>
 8001126:	1886      	adds	r6, r0, r2
 8001128:	4286      	cmp	r6, r0
 800112a:	4180      	sbcs	r0, r0
 800112c:	4461      	add	r1, ip
 800112e:	4240      	negs	r0, r0
 8001130:	1809      	adds	r1, r1, r0
 8001132:	2501      	movs	r5, #1
 8001134:	020b      	lsls	r3, r1, #8
 8001136:	d537      	bpl.n	80011a8 <__aeabi_dsub+0x310>
 8001138:	2502      	movs	r5, #2
 800113a:	e77b      	b.n	8001034 <__aeabi_dsub+0x19c>
 800113c:	003e      	movs	r6, r7
 800113e:	4661      	mov	r1, ip
 8001140:	4691      	mov	r9, r2
 8001142:	0035      	movs	r5, r6
 8001144:	e7c5      	b.n	80010d2 <__aeabi_dsub+0x23a>
 8001146:	465c      	mov	r4, fp
 8001148:	2d00      	cmp	r5, #0
 800114a:	d000      	beq.n	800114e <__aeabi_dsub+0x2b6>
 800114c:	e0e1      	b.n	8001312 <__aeabi_dsub+0x47a>
 800114e:	000b      	movs	r3, r1
 8001150:	4303      	orrs	r3, r0
 8001152:	d0f3      	beq.n	800113c <__aeabi_dsub+0x2a4>
 8001154:	1c73      	adds	r3, r6, #1
 8001156:	d100      	bne.n	800115a <__aeabi_dsub+0x2c2>
 8001158:	e1ac      	b.n	80014b4 <__aeabi_dsub+0x61c>
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <__aeabi_dsub+0x348>)
 800115c:	429f      	cmp	r7, r3
 800115e:	d100      	bne.n	8001162 <__aeabi_dsub+0x2ca>
 8001160:	e13a      	b.n	80013d8 <__aeabi_dsub+0x540>
 8001162:	43f3      	mvns	r3, r6
 8001164:	2b38      	cmp	r3, #56	; 0x38
 8001166:	dd00      	ble.n	800116a <__aeabi_dsub+0x2d2>
 8001168:	e16f      	b.n	800144a <__aeabi_dsub+0x5b2>
 800116a:	2b1f      	cmp	r3, #31
 800116c:	dd00      	ble.n	8001170 <__aeabi_dsub+0x2d8>
 800116e:	e18c      	b.n	800148a <__aeabi_dsub+0x5f2>
 8001170:	2520      	movs	r5, #32
 8001172:	000e      	movs	r6, r1
 8001174:	1aed      	subs	r5, r5, r3
 8001176:	40ae      	lsls	r6, r5
 8001178:	46b0      	mov	r8, r6
 800117a:	0006      	movs	r6, r0
 800117c:	46aa      	mov	sl, r5
 800117e:	40de      	lsrs	r6, r3
 8001180:	4645      	mov	r5, r8
 8001182:	4335      	orrs	r5, r6
 8001184:	002e      	movs	r6, r5
 8001186:	4655      	mov	r5, sl
 8001188:	40d9      	lsrs	r1, r3
 800118a:	40a8      	lsls	r0, r5
 800118c:	4663      	mov	r3, ip
 800118e:	1e45      	subs	r5, r0, #1
 8001190:	41a8      	sbcs	r0, r5
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	469c      	mov	ip, r3
 8001196:	4330      	orrs	r0, r6
 8001198:	1a16      	subs	r6, r2, r0
 800119a:	42b2      	cmp	r2, r6
 800119c:	4192      	sbcs	r2, r2
 800119e:	4663      	mov	r3, ip
 80011a0:	4252      	negs	r2, r2
 80011a2:	1a99      	subs	r1, r3, r2
 80011a4:	003d      	movs	r5, r7
 80011a6:	e6b4      	b.n	8000f12 <__aeabi_dsub+0x7a>
 80011a8:	2207      	movs	r2, #7
 80011aa:	4032      	ands	r2, r6
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dsub+0x31a>
 80011b0:	e6e4      	b.n	8000f7c <__aeabi_dsub+0xe4>
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <__aeabi_dsub+0x348>)
 80011b4:	08f6      	lsrs	r6, r6, #3
 80011b6:	074f      	lsls	r7, r1, #29
 80011b8:	4337      	orrs	r7, r6
 80011ba:	08ca      	lsrs	r2, r1, #3
 80011bc:	429d      	cmp	r5, r3
 80011be:	d000      	beq.n	80011c2 <__aeabi_dsub+0x32a>
 80011c0:	e790      	b.n	80010e4 <__aeabi_dsub+0x24c>
 80011c2:	003b      	movs	r3, r7
 80011c4:	4313      	orrs	r3, r2
 80011c6:	d100      	bne.n	80011ca <__aeabi_dsub+0x332>
 80011c8:	e1a6      	b.n	8001518 <__aeabi_dsub+0x680>
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	031b      	lsls	r3, r3, #12
 80011ce:	431a      	orrs	r2, r3
 80011d0:	0312      	lsls	r2, r2, #12
 80011d2:	0b12      	lsrs	r2, r2, #12
 80011d4:	4d02      	ldr	r5, [pc, #8]	; (80011e0 <__aeabi_dsub+0x348>)
 80011d6:	e789      	b.n	80010ec <__aeabi_dsub+0x254>
 80011d8:	0015      	movs	r5, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	2700      	movs	r7, #0
 80011de:	e785      	b.n	80010ec <__aeabi_dsub+0x254>
 80011e0:	000007ff 	.word	0x000007ff
 80011e4:	ff7fffff 	.word	0xff7fffff
 80011e8:	800fffff 	.word	0x800fffff
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d000      	beq.n	80011f2 <__aeabi_dsub+0x35a>
 80011f0:	e0c7      	b.n	8001382 <__aeabi_dsub+0x4ea>
 80011f2:	1c6b      	adds	r3, r5, #1
 80011f4:	055e      	lsls	r6, r3, #21
 80011f6:	0d76      	lsrs	r6, r6, #21
 80011f8:	2e01      	cmp	r6, #1
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_dsub+0x366>
 80011fc:	e0f0      	b.n	80013e0 <__aeabi_dsub+0x548>
 80011fe:	4dc8      	ldr	r5, [pc, #800]	; (8001520 <__aeabi_dsub+0x688>)
 8001200:	42ab      	cmp	r3, r5
 8001202:	d100      	bne.n	8001206 <__aeabi_dsub+0x36e>
 8001204:	e0b9      	b.n	800137a <__aeabi_dsub+0x4e2>
 8001206:	1885      	adds	r5, r0, r2
 8001208:	000a      	movs	r2, r1
 800120a:	4285      	cmp	r5, r0
 800120c:	4189      	sbcs	r1, r1
 800120e:	4462      	add	r2, ip
 8001210:	4249      	negs	r1, r1
 8001212:	1851      	adds	r1, r2, r1
 8001214:	2207      	movs	r2, #7
 8001216:	07ce      	lsls	r6, r1, #31
 8001218:	086d      	lsrs	r5, r5, #1
 800121a:	432e      	orrs	r6, r5
 800121c:	0849      	lsrs	r1, r1, #1
 800121e:	4032      	ands	r2, r6
 8001220:	001d      	movs	r5, r3
 8001222:	e6a9      	b.n	8000f78 <__aeabi_dsub+0xe0>
 8001224:	49bf      	ldr	r1, [pc, #764]	; (8001524 <__aeabi_dsub+0x68c>)
 8001226:	1aed      	subs	r5, r5, r3
 8001228:	4011      	ands	r1, r2
 800122a:	2207      	movs	r2, #7
 800122c:	4032      	ands	r2, r6
 800122e:	e6a3      	b.n	8000f78 <__aeabi_dsub+0xe0>
 8001230:	0032      	movs	r2, r6
 8001232:	3828      	subs	r0, #40	; 0x28
 8001234:	4082      	lsls	r2, r0
 8001236:	2600      	movs	r6, #0
 8001238:	e686      	b.n	8000f48 <__aeabi_dsub+0xb0>
 800123a:	0030      	movs	r0, r6
 800123c:	f000 fa22 	bl	8001684 <__clzsi2>
 8001240:	3020      	adds	r0, #32
 8001242:	e673      	b.n	8000f2c <__aeabi_dsub+0x94>
 8001244:	4663      	mov	r3, ip
 8001246:	4313      	orrs	r3, r2
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	4193      	sbcs	r3, r2
 800124c:	1ac6      	subs	r6, r0, r3
 800124e:	42b0      	cmp	r0, r6
 8001250:	4180      	sbcs	r0, r0
 8001252:	4240      	negs	r0, r0
 8001254:	1a09      	subs	r1, r1, r0
 8001256:	e65c      	b.n	8000f12 <__aeabi_dsub+0x7a>
 8001258:	000e      	movs	r6, r1
 800125a:	4667      	mov	r7, ip
 800125c:	4306      	orrs	r6, r0
 800125e:	4317      	orrs	r7, r2
 8001260:	2d00      	cmp	r5, #0
 8001262:	d15e      	bne.n	8001322 <__aeabi_dsub+0x48a>
 8001264:	2e00      	cmp	r6, #0
 8001266:	d000      	beq.n	800126a <__aeabi_dsub+0x3d2>
 8001268:	e0f3      	b.n	8001452 <__aeabi_dsub+0x5ba>
 800126a:	2f00      	cmp	r7, #0
 800126c:	d100      	bne.n	8001270 <__aeabi_dsub+0x3d8>
 800126e:	e11e      	b.n	80014ae <__aeabi_dsub+0x616>
 8001270:	465c      	mov	r4, fp
 8001272:	4661      	mov	r1, ip
 8001274:	4691      	mov	r9, r2
 8001276:	e72c      	b.n	80010d2 <__aeabi_dsub+0x23a>
 8001278:	4fa9      	ldr	r7, [pc, #676]	; (8001520 <__aeabi_dsub+0x688>)
 800127a:	42be      	cmp	r6, r7
 800127c:	d07b      	beq.n	8001376 <__aeabi_dsub+0x4de>
 800127e:	001e      	movs	r6, r3
 8001280:	e6f1      	b.n	8001066 <__aeabi_dsub+0x1ce>
 8001282:	0010      	movs	r0, r2
 8001284:	3d1f      	subs	r5, #31
 8001286:	40e8      	lsrs	r0, r5
 8001288:	2b20      	cmp	r3, #32
 800128a:	d003      	beq.n	8001294 <__aeabi_dsub+0x3fc>
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	1acb      	subs	r3, r1, r3
 8001290:	409a      	lsls	r2, r3
 8001292:	4316      	orrs	r6, r2
 8001294:	1e73      	subs	r3, r6, #1
 8001296:	419e      	sbcs	r6, r3
 8001298:	2207      	movs	r2, #7
 800129a:	4306      	orrs	r6, r0
 800129c:	4032      	ands	r2, r6
 800129e:	2100      	movs	r1, #0
 80012a0:	2500      	movs	r5, #0
 80012a2:	e783      	b.n	80011ac <__aeabi_dsub+0x314>
 80012a4:	1a16      	subs	r6, r2, r0
 80012a6:	4663      	mov	r3, ip
 80012a8:	42b2      	cmp	r2, r6
 80012aa:	4180      	sbcs	r0, r0
 80012ac:	1a59      	subs	r1, r3, r1
 80012ae:	4240      	negs	r0, r0
 80012b0:	1a0b      	subs	r3, r1, r0
 80012b2:	4698      	mov	r8, r3
 80012b4:	465c      	mov	r4, fp
 80012b6:	e632      	b.n	8000f1e <__aeabi_dsub+0x86>
 80012b8:	2e1f      	cmp	r6, #31
 80012ba:	dd00      	ble.n	80012be <__aeabi_dsub+0x426>
 80012bc:	e0ab      	b.n	8001416 <__aeabi_dsub+0x57e>
 80012be:	2720      	movs	r7, #32
 80012c0:	1bbb      	subs	r3, r7, r6
 80012c2:	469a      	mov	sl, r3
 80012c4:	4663      	mov	r3, ip
 80012c6:	4657      	mov	r7, sl
 80012c8:	40bb      	lsls	r3, r7
 80012ca:	4699      	mov	r9, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	464f      	mov	r7, r9
 80012d0:	40f3      	lsrs	r3, r6
 80012d2:	431f      	orrs	r7, r3
 80012d4:	003b      	movs	r3, r7
 80012d6:	4657      	mov	r7, sl
 80012d8:	40ba      	lsls	r2, r7
 80012da:	1e57      	subs	r7, r2, #1
 80012dc:	41ba      	sbcs	r2, r7
 80012de:	4313      	orrs	r3, r2
 80012e0:	4662      	mov	r2, ip
 80012e2:	40f2      	lsrs	r2, r6
 80012e4:	1889      	adds	r1, r1, r2
 80012e6:	e698      	b.n	800101a <__aeabi_dsub+0x182>
 80012e8:	2720      	movs	r7, #32
 80012ea:	1bbb      	subs	r3, r7, r6
 80012ec:	469a      	mov	sl, r3
 80012ee:	4663      	mov	r3, ip
 80012f0:	4657      	mov	r7, sl
 80012f2:	40bb      	lsls	r3, r7
 80012f4:	4699      	mov	r9, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	464f      	mov	r7, r9
 80012fa:	40f3      	lsrs	r3, r6
 80012fc:	431f      	orrs	r7, r3
 80012fe:	003b      	movs	r3, r7
 8001300:	4657      	mov	r7, sl
 8001302:	40ba      	lsls	r2, r7
 8001304:	1e57      	subs	r7, r2, #1
 8001306:	41ba      	sbcs	r2, r7
 8001308:	4313      	orrs	r3, r2
 800130a:	4662      	mov	r2, ip
 800130c:	40f2      	lsrs	r2, r6
 800130e:	1a89      	subs	r1, r1, r2
 8001310:	e79c      	b.n	800124c <__aeabi_dsub+0x3b4>
 8001312:	4b83      	ldr	r3, [pc, #524]	; (8001520 <__aeabi_dsub+0x688>)
 8001314:	429f      	cmp	r7, r3
 8001316:	d05f      	beq.n	80013d8 <__aeabi_dsub+0x540>
 8001318:	2580      	movs	r5, #128	; 0x80
 800131a:	042d      	lsls	r5, r5, #16
 800131c:	4273      	negs	r3, r6
 800131e:	4329      	orrs	r1, r5
 8001320:	e720      	b.n	8001164 <__aeabi_dsub+0x2cc>
 8001322:	2e00      	cmp	r6, #0
 8001324:	d10c      	bne.n	8001340 <__aeabi_dsub+0x4a8>
 8001326:	2f00      	cmp	r7, #0
 8001328:	d100      	bne.n	800132c <__aeabi_dsub+0x494>
 800132a:	e0d0      	b.n	80014ce <__aeabi_dsub+0x636>
 800132c:	465c      	mov	r4, fp
 800132e:	4661      	mov	r1, ip
 8001330:	4691      	mov	r9, r2
 8001332:	4d7b      	ldr	r5, [pc, #492]	; (8001520 <__aeabi_dsub+0x688>)
 8001334:	e6cd      	b.n	80010d2 <__aeabi_dsub+0x23a>
 8001336:	4f7a      	ldr	r7, [pc, #488]	; (8001520 <__aeabi_dsub+0x688>)
 8001338:	42be      	cmp	r6, r7
 800133a:	d01c      	beq.n	8001376 <__aeabi_dsub+0x4de>
 800133c:	001e      	movs	r6, r3
 800133e:	e665      	b.n	800100c <__aeabi_dsub+0x174>
 8001340:	2f00      	cmp	r7, #0
 8001342:	d018      	beq.n	8001376 <__aeabi_dsub+0x4de>
 8001344:	08c0      	lsrs	r0, r0, #3
 8001346:	074e      	lsls	r6, r1, #29
 8001348:	4306      	orrs	r6, r0
 800134a:	2080      	movs	r0, #128	; 0x80
 800134c:	08c9      	lsrs	r1, r1, #3
 800134e:	0300      	lsls	r0, r0, #12
 8001350:	4201      	tst	r1, r0
 8001352:	d008      	beq.n	8001366 <__aeabi_dsub+0x4ce>
 8001354:	4663      	mov	r3, ip
 8001356:	08dc      	lsrs	r4, r3, #3
 8001358:	4204      	tst	r4, r0
 800135a:	d104      	bne.n	8001366 <__aeabi_dsub+0x4ce>
 800135c:	0021      	movs	r1, r4
 800135e:	46da      	mov	sl, fp
 8001360:	08d2      	lsrs	r2, r2, #3
 8001362:	075e      	lsls	r6, r3, #29
 8001364:	4316      	orrs	r6, r2
 8001366:	00f3      	lsls	r3, r6, #3
 8001368:	4699      	mov	r9, r3
 800136a:	2401      	movs	r4, #1
 800136c:	4653      	mov	r3, sl
 800136e:	00c9      	lsls	r1, r1, #3
 8001370:	0f72      	lsrs	r2, r6, #29
 8001372:	4311      	orrs	r1, r2
 8001374:	401c      	ands	r4, r3
 8001376:	4d6a      	ldr	r5, [pc, #424]	; (8001520 <__aeabi_dsub+0x688>)
 8001378:	e6ab      	b.n	80010d2 <__aeabi_dsub+0x23a>
 800137a:	001d      	movs	r5, r3
 800137c:	2200      	movs	r2, #0
 800137e:	2700      	movs	r7, #0
 8001380:	e6b4      	b.n	80010ec <__aeabi_dsub+0x254>
 8001382:	2d00      	cmp	r5, #0
 8001384:	d159      	bne.n	800143a <__aeabi_dsub+0x5a2>
 8001386:	000b      	movs	r3, r1
 8001388:	4303      	orrs	r3, r0
 800138a:	d100      	bne.n	800138e <__aeabi_dsub+0x4f6>
 800138c:	e6d6      	b.n	800113c <__aeabi_dsub+0x2a4>
 800138e:	1c73      	adds	r3, r6, #1
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x4fc>
 8001392:	e0b2      	b.n	80014fa <__aeabi_dsub+0x662>
 8001394:	4b62      	ldr	r3, [pc, #392]	; (8001520 <__aeabi_dsub+0x688>)
 8001396:	429f      	cmp	r7, r3
 8001398:	d01e      	beq.n	80013d8 <__aeabi_dsub+0x540>
 800139a:	43f3      	mvns	r3, r6
 800139c:	2b38      	cmp	r3, #56	; 0x38
 800139e:	dc6f      	bgt.n	8001480 <__aeabi_dsub+0x5e8>
 80013a0:	2b1f      	cmp	r3, #31
 80013a2:	dd00      	ble.n	80013a6 <__aeabi_dsub+0x50e>
 80013a4:	e097      	b.n	80014d6 <__aeabi_dsub+0x63e>
 80013a6:	2520      	movs	r5, #32
 80013a8:	000e      	movs	r6, r1
 80013aa:	1aed      	subs	r5, r5, r3
 80013ac:	40ae      	lsls	r6, r5
 80013ae:	46b0      	mov	r8, r6
 80013b0:	0006      	movs	r6, r0
 80013b2:	46aa      	mov	sl, r5
 80013b4:	40de      	lsrs	r6, r3
 80013b6:	4645      	mov	r5, r8
 80013b8:	4335      	orrs	r5, r6
 80013ba:	002e      	movs	r6, r5
 80013bc:	4655      	mov	r5, sl
 80013be:	40a8      	lsls	r0, r5
 80013c0:	40d9      	lsrs	r1, r3
 80013c2:	1e45      	subs	r5, r0, #1
 80013c4:	41a8      	sbcs	r0, r5
 80013c6:	448c      	add	ip, r1
 80013c8:	4306      	orrs	r6, r0
 80013ca:	18b6      	adds	r6, r6, r2
 80013cc:	4296      	cmp	r6, r2
 80013ce:	4192      	sbcs	r2, r2
 80013d0:	4251      	negs	r1, r2
 80013d2:	4461      	add	r1, ip
 80013d4:	003d      	movs	r5, r7
 80013d6:	e625      	b.n	8001024 <__aeabi_dsub+0x18c>
 80013d8:	003d      	movs	r5, r7
 80013da:	4661      	mov	r1, ip
 80013dc:	4691      	mov	r9, r2
 80013de:	e678      	b.n	80010d2 <__aeabi_dsub+0x23a>
 80013e0:	000b      	movs	r3, r1
 80013e2:	4303      	orrs	r3, r0
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d000      	beq.n	80013ea <__aeabi_dsub+0x552>
 80013e8:	e655      	b.n	8001096 <__aeabi_dsub+0x1fe>
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f5      	beq.n	80013da <__aeabi_dsub+0x542>
 80013ee:	4663      	mov	r3, ip
 80013f0:	4313      	orrs	r3, r2
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dsub+0x55e>
 80013f4:	e66d      	b.n	80010d2 <__aeabi_dsub+0x23a>
 80013f6:	1886      	adds	r6, r0, r2
 80013f8:	4286      	cmp	r6, r0
 80013fa:	4180      	sbcs	r0, r0
 80013fc:	4461      	add	r1, ip
 80013fe:	4240      	negs	r0, r0
 8001400:	1809      	adds	r1, r1, r0
 8001402:	2200      	movs	r2, #0
 8001404:	020b      	lsls	r3, r1, #8
 8001406:	d400      	bmi.n	800140a <__aeabi_dsub+0x572>
 8001408:	e6d0      	b.n	80011ac <__aeabi_dsub+0x314>
 800140a:	4b46      	ldr	r3, [pc, #280]	; (8001524 <__aeabi_dsub+0x68c>)
 800140c:	3501      	adds	r5, #1
 800140e:	4019      	ands	r1, r3
 8001410:	e5b2      	b.n	8000f78 <__aeabi_dsub+0xe0>
 8001412:	46b1      	mov	r9, r6
 8001414:	e65d      	b.n	80010d2 <__aeabi_dsub+0x23a>
 8001416:	0033      	movs	r3, r6
 8001418:	4667      	mov	r7, ip
 800141a:	3b20      	subs	r3, #32
 800141c:	40df      	lsrs	r7, r3
 800141e:	003b      	movs	r3, r7
 8001420:	2e20      	cmp	r6, #32
 8001422:	d005      	beq.n	8001430 <__aeabi_dsub+0x598>
 8001424:	2740      	movs	r7, #64	; 0x40
 8001426:	1bbf      	subs	r7, r7, r6
 8001428:	4666      	mov	r6, ip
 800142a:	40be      	lsls	r6, r7
 800142c:	4332      	orrs	r2, r6
 800142e:	4690      	mov	r8, r2
 8001430:	4646      	mov	r6, r8
 8001432:	1e72      	subs	r2, r6, #1
 8001434:	4196      	sbcs	r6, r2
 8001436:	4333      	orrs	r3, r6
 8001438:	e5ef      	b.n	800101a <__aeabi_dsub+0x182>
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <__aeabi_dsub+0x688>)
 800143c:	429f      	cmp	r7, r3
 800143e:	d0cb      	beq.n	80013d8 <__aeabi_dsub+0x540>
 8001440:	2580      	movs	r5, #128	; 0x80
 8001442:	042d      	lsls	r5, r5, #16
 8001444:	4273      	negs	r3, r6
 8001446:	4329      	orrs	r1, r5
 8001448:	e7a8      	b.n	800139c <__aeabi_dsub+0x504>
 800144a:	4308      	orrs	r0, r1
 800144c:	1e41      	subs	r1, r0, #1
 800144e:	4188      	sbcs	r0, r1
 8001450:	e6a2      	b.n	8001198 <__aeabi_dsub+0x300>
 8001452:	2f00      	cmp	r7, #0
 8001454:	d100      	bne.n	8001458 <__aeabi_dsub+0x5c0>
 8001456:	e63c      	b.n	80010d2 <__aeabi_dsub+0x23a>
 8001458:	4663      	mov	r3, ip
 800145a:	1a86      	subs	r6, r0, r2
 800145c:	1acf      	subs	r7, r1, r3
 800145e:	42b0      	cmp	r0, r6
 8001460:	419b      	sbcs	r3, r3
 8001462:	425b      	negs	r3, r3
 8001464:	1afb      	subs	r3, r7, r3
 8001466:	4698      	mov	r8, r3
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	d54e      	bpl.n	800150a <__aeabi_dsub+0x672>
 800146c:	1a16      	subs	r6, r2, r0
 800146e:	4663      	mov	r3, ip
 8001470:	42b2      	cmp	r2, r6
 8001472:	4192      	sbcs	r2, r2
 8001474:	1a59      	subs	r1, r3, r1
 8001476:	4252      	negs	r2, r2
 8001478:	1a89      	subs	r1, r1, r2
 800147a:	465c      	mov	r4, fp
 800147c:	2200      	movs	r2, #0
 800147e:	e57b      	b.n	8000f78 <__aeabi_dsub+0xe0>
 8001480:	4301      	orrs	r1, r0
 8001482:	000e      	movs	r6, r1
 8001484:	1e71      	subs	r1, r6, #1
 8001486:	418e      	sbcs	r6, r1
 8001488:	e79f      	b.n	80013ca <__aeabi_dsub+0x532>
 800148a:	001d      	movs	r5, r3
 800148c:	000e      	movs	r6, r1
 800148e:	3d20      	subs	r5, #32
 8001490:	40ee      	lsrs	r6, r5
 8001492:	46b0      	mov	r8, r6
 8001494:	2b20      	cmp	r3, #32
 8001496:	d004      	beq.n	80014a2 <__aeabi_dsub+0x60a>
 8001498:	2540      	movs	r5, #64	; 0x40
 800149a:	1aeb      	subs	r3, r5, r3
 800149c:	4099      	lsls	r1, r3
 800149e:	4308      	orrs	r0, r1
 80014a0:	4681      	mov	r9, r0
 80014a2:	4648      	mov	r0, r9
 80014a4:	4643      	mov	r3, r8
 80014a6:	1e41      	subs	r1, r0, #1
 80014a8:	4188      	sbcs	r0, r1
 80014aa:	4318      	orrs	r0, r3
 80014ac:	e674      	b.n	8001198 <__aeabi_dsub+0x300>
 80014ae:	2200      	movs	r2, #0
 80014b0:	2400      	movs	r4, #0
 80014b2:	e617      	b.n	80010e4 <__aeabi_dsub+0x24c>
 80014b4:	1a16      	subs	r6, r2, r0
 80014b6:	4663      	mov	r3, ip
 80014b8:	42b2      	cmp	r2, r6
 80014ba:	4192      	sbcs	r2, r2
 80014bc:	1a59      	subs	r1, r3, r1
 80014be:	4252      	negs	r2, r2
 80014c0:	1a89      	subs	r1, r1, r2
 80014c2:	003d      	movs	r5, r7
 80014c4:	e525      	b.n	8000f12 <__aeabi_dsub+0x7a>
 80014c6:	4661      	mov	r1, ip
 80014c8:	4691      	mov	r9, r2
 80014ca:	4d15      	ldr	r5, [pc, #84]	; (8001520 <__aeabi_dsub+0x688>)
 80014cc:	e601      	b.n	80010d2 <__aeabi_dsub+0x23a>
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	2400      	movs	r4, #0
 80014d2:	0312      	lsls	r2, r2, #12
 80014d4:	e679      	b.n	80011ca <__aeabi_dsub+0x332>
 80014d6:	001d      	movs	r5, r3
 80014d8:	000e      	movs	r6, r1
 80014da:	3d20      	subs	r5, #32
 80014dc:	40ee      	lsrs	r6, r5
 80014de:	46b0      	mov	r8, r6
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d004      	beq.n	80014ee <__aeabi_dsub+0x656>
 80014e4:	2540      	movs	r5, #64	; 0x40
 80014e6:	1aeb      	subs	r3, r5, r3
 80014e8:	4099      	lsls	r1, r3
 80014ea:	4308      	orrs	r0, r1
 80014ec:	4681      	mov	r9, r0
 80014ee:	464e      	mov	r6, r9
 80014f0:	4643      	mov	r3, r8
 80014f2:	1e71      	subs	r1, r6, #1
 80014f4:	418e      	sbcs	r6, r1
 80014f6:	431e      	orrs	r6, r3
 80014f8:	e767      	b.n	80013ca <__aeabi_dsub+0x532>
 80014fa:	1886      	adds	r6, r0, r2
 80014fc:	4296      	cmp	r6, r2
 80014fe:	419b      	sbcs	r3, r3
 8001500:	4461      	add	r1, ip
 8001502:	425b      	negs	r3, r3
 8001504:	18c9      	adds	r1, r1, r3
 8001506:	003d      	movs	r5, r7
 8001508:	e58c      	b.n	8001024 <__aeabi_dsub+0x18c>
 800150a:	4647      	mov	r7, r8
 800150c:	4337      	orrs	r7, r6
 800150e:	d0ce      	beq.n	80014ae <__aeabi_dsub+0x616>
 8001510:	2207      	movs	r2, #7
 8001512:	4641      	mov	r1, r8
 8001514:	4032      	ands	r2, r6
 8001516:	e649      	b.n	80011ac <__aeabi_dsub+0x314>
 8001518:	2700      	movs	r7, #0
 800151a:	003a      	movs	r2, r7
 800151c:	e5e6      	b.n	80010ec <__aeabi_dsub+0x254>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	000007ff 	.word	0x000007ff
 8001524:	ff7fffff 	.word	0xff7fffff

08001528 <__aeabi_d2iz>:
 8001528:	b530      	push	{r4, r5, lr}
 800152a:	4d14      	ldr	r5, [pc, #80]	; (800157c <__aeabi_d2iz+0x54>)
 800152c:	030a      	lsls	r2, r1, #12
 800152e:	004b      	lsls	r3, r1, #1
 8001530:	0b12      	lsrs	r2, r2, #12
 8001532:	0d5b      	lsrs	r3, r3, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	2400      	movs	r4, #0
 8001538:	42ab      	cmp	r3, r5
 800153a:	dd11      	ble.n	8001560 <__aeabi_d2iz+0x38>
 800153c:	4c10      	ldr	r4, [pc, #64]	; (8001580 <__aeabi_d2iz+0x58>)
 800153e:	42a3      	cmp	r3, r4
 8001540:	dc10      	bgt.n	8001564 <__aeabi_d2iz+0x3c>
 8001542:	2480      	movs	r4, #128	; 0x80
 8001544:	0364      	lsls	r4, r4, #13
 8001546:	4322      	orrs	r2, r4
 8001548:	4c0e      	ldr	r4, [pc, #56]	; (8001584 <__aeabi_d2iz+0x5c>)
 800154a:	1ae4      	subs	r4, r4, r3
 800154c:	2c1f      	cmp	r4, #31
 800154e:	dd0c      	ble.n	800156a <__aeabi_d2iz+0x42>
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <__aeabi_d2iz+0x60>)
 8001552:	1ac3      	subs	r3, r0, r3
 8001554:	40da      	lsrs	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	425c      	negs	r4, r3
 800155a:	2900      	cmp	r1, #0
 800155c:	d100      	bne.n	8001560 <__aeabi_d2iz+0x38>
 800155e:	001c      	movs	r4, r3
 8001560:	0020      	movs	r0, r4
 8001562:	bd30      	pop	{r4, r5, pc}
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <__aeabi_d2iz+0x64>)
 8001566:	18cc      	adds	r4, r1, r3
 8001568:	e7fa      	b.n	8001560 <__aeabi_d2iz+0x38>
 800156a:	4d09      	ldr	r5, [pc, #36]	; (8001590 <__aeabi_d2iz+0x68>)
 800156c:	40e0      	lsrs	r0, r4
 800156e:	46ac      	mov	ip, r5
 8001570:	4463      	add	r3, ip
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	4303      	orrs	r3, r0
 8001578:	e7ee      	b.n	8001558 <__aeabi_d2iz+0x30>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	000003fe 	.word	0x000003fe
 8001580:	0000041d 	.word	0x0000041d
 8001584:	00000433 	.word	0x00000433
 8001588:	00000413 	.word	0x00000413
 800158c:	7fffffff 	.word	0x7fffffff
 8001590:	fffffbed 	.word	0xfffffbed

08001594 <__aeabi_i2d>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	2800      	cmp	r0, #0
 8001598:	d02d      	beq.n	80015f6 <__aeabi_i2d+0x62>
 800159a:	17c3      	asrs	r3, r0, #31
 800159c:	18c5      	adds	r5, r0, r3
 800159e:	405d      	eors	r5, r3
 80015a0:	0fc4      	lsrs	r4, r0, #31
 80015a2:	0028      	movs	r0, r5
 80015a4:	f000 f86e 	bl	8001684 <__clzsi2>
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <__aeabi_i2d+0x6c>)
 80015aa:	1a1b      	subs	r3, r3, r0
 80015ac:	055b      	lsls	r3, r3, #21
 80015ae:	0d5b      	lsrs	r3, r3, #21
 80015b0:	280a      	cmp	r0, #10
 80015b2:	dd15      	ble.n	80015e0 <__aeabi_i2d+0x4c>
 80015b4:	380b      	subs	r0, #11
 80015b6:	4085      	lsls	r5, r0
 80015b8:	2200      	movs	r2, #0
 80015ba:	032d      	lsls	r5, r5, #12
 80015bc:	0b2d      	lsrs	r5, r5, #12
 80015be:	2100      	movs	r1, #0
 80015c0:	0010      	movs	r0, r2
 80015c2:	032d      	lsls	r5, r5, #12
 80015c4:	0d0a      	lsrs	r2, r1, #20
 80015c6:	0b2d      	lsrs	r5, r5, #12
 80015c8:	0512      	lsls	r2, r2, #20
 80015ca:	432a      	orrs	r2, r5
 80015cc:	4d0d      	ldr	r5, [pc, #52]	; (8001604 <__aeabi_i2d+0x70>)
 80015ce:	051b      	lsls	r3, r3, #20
 80015d0:	402a      	ands	r2, r5
 80015d2:	4313      	orrs	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	07e4      	lsls	r4, r4, #31
 80015d8:	085b      	lsrs	r3, r3, #1
 80015da:	4323      	orrs	r3, r4
 80015dc:	0019      	movs	r1, r3
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	0002      	movs	r2, r0
 80015e2:	0029      	movs	r1, r5
 80015e4:	3215      	adds	r2, #21
 80015e6:	4091      	lsls	r1, r2
 80015e8:	000a      	movs	r2, r1
 80015ea:	210b      	movs	r1, #11
 80015ec:	1a08      	subs	r0, r1, r0
 80015ee:	40c5      	lsrs	r5, r0
 80015f0:	032d      	lsls	r5, r5, #12
 80015f2:	0b2d      	lsrs	r5, r5, #12
 80015f4:	e7e3      	b.n	80015be <__aeabi_i2d+0x2a>
 80015f6:	2400      	movs	r4, #0
 80015f8:	2300      	movs	r3, #0
 80015fa:	2500      	movs	r5, #0
 80015fc:	2200      	movs	r2, #0
 80015fe:	e7de      	b.n	80015be <__aeabi_i2d+0x2a>
 8001600:	0000041e 	.word	0x0000041e
 8001604:	800fffff 	.word	0x800fffff

08001608 <__aeabi_cdrcmple>:
 8001608:	4684      	mov	ip, r0
 800160a:	1c10      	adds	r0, r2, #0
 800160c:	4662      	mov	r2, ip
 800160e:	468c      	mov	ip, r1
 8001610:	1c19      	adds	r1, r3, #0
 8001612:	4663      	mov	r3, ip
 8001614:	e000      	b.n	8001618 <__aeabi_cdcmpeq>
 8001616:	46c0      	nop			; (mov r8, r8)

08001618 <__aeabi_cdcmpeq>:
 8001618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800161a:	f000 f8f1 	bl	8001800 <__ledf2>
 800161e:	2800      	cmp	r0, #0
 8001620:	d401      	bmi.n	8001626 <__aeabi_cdcmpeq+0xe>
 8001622:	2100      	movs	r1, #0
 8001624:	42c8      	cmn	r0, r1
 8001626:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001628 <__aeabi_dcmpeq>:
 8001628:	b510      	push	{r4, lr}
 800162a:	f000 f849 	bl	80016c0 <__eqdf2>
 800162e:	4240      	negs	r0, r0
 8001630:	3001      	adds	r0, #1
 8001632:	bd10      	pop	{r4, pc}

08001634 <__aeabi_dcmplt>:
 8001634:	b510      	push	{r4, lr}
 8001636:	f000 f8e3 	bl	8001800 <__ledf2>
 800163a:	2800      	cmp	r0, #0
 800163c:	db01      	blt.n	8001642 <__aeabi_dcmplt+0xe>
 800163e:	2000      	movs	r0, #0
 8001640:	bd10      	pop	{r4, pc}
 8001642:	2001      	movs	r0, #1
 8001644:	bd10      	pop	{r4, pc}
 8001646:	46c0      	nop			; (mov r8, r8)

08001648 <__aeabi_dcmple>:
 8001648:	b510      	push	{r4, lr}
 800164a:	f000 f8d9 	bl	8001800 <__ledf2>
 800164e:	2800      	cmp	r0, #0
 8001650:	dd01      	ble.n	8001656 <__aeabi_dcmple+0xe>
 8001652:	2000      	movs	r0, #0
 8001654:	bd10      	pop	{r4, pc}
 8001656:	2001      	movs	r0, #1
 8001658:	bd10      	pop	{r4, pc}
 800165a:	46c0      	nop			; (mov r8, r8)

0800165c <__aeabi_dcmpgt>:
 800165c:	b510      	push	{r4, lr}
 800165e:	f000 f86b 	bl	8001738 <__gedf2>
 8001662:	2800      	cmp	r0, #0
 8001664:	dc01      	bgt.n	800166a <__aeabi_dcmpgt+0xe>
 8001666:	2000      	movs	r0, #0
 8001668:	bd10      	pop	{r4, pc}
 800166a:	2001      	movs	r0, #1
 800166c:	bd10      	pop	{r4, pc}
 800166e:	46c0      	nop			; (mov r8, r8)

08001670 <__aeabi_dcmpge>:
 8001670:	b510      	push	{r4, lr}
 8001672:	f000 f861 	bl	8001738 <__gedf2>
 8001676:	2800      	cmp	r0, #0
 8001678:	da01      	bge.n	800167e <__aeabi_dcmpge+0xe>
 800167a:	2000      	movs	r0, #0
 800167c:	bd10      	pop	{r4, pc}
 800167e:	2001      	movs	r0, #1
 8001680:	bd10      	pop	{r4, pc}
 8001682:	46c0      	nop			; (mov r8, r8)

08001684 <__clzsi2>:
 8001684:	211c      	movs	r1, #28
 8001686:	2301      	movs	r3, #1
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	4298      	cmp	r0, r3
 800168c:	d301      	bcc.n	8001692 <__clzsi2+0xe>
 800168e:	0c00      	lsrs	r0, r0, #16
 8001690:	3910      	subs	r1, #16
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	4298      	cmp	r0, r3
 8001696:	d301      	bcc.n	800169c <__clzsi2+0x18>
 8001698:	0a00      	lsrs	r0, r0, #8
 800169a:	3908      	subs	r1, #8
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	4298      	cmp	r0, r3
 80016a0:	d301      	bcc.n	80016a6 <__clzsi2+0x22>
 80016a2:	0900      	lsrs	r0, r0, #4
 80016a4:	3904      	subs	r1, #4
 80016a6:	a202      	add	r2, pc, #8	; (adr r2, 80016b0 <__clzsi2+0x2c>)
 80016a8:	5c10      	ldrb	r0, [r2, r0]
 80016aa:	1840      	adds	r0, r0, r1
 80016ac:	4770      	bx	lr
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	02020304 	.word	0x02020304
 80016b4:	01010101 	.word	0x01010101
	...

080016c0 <__eqdf2>:
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	464f      	mov	r7, r9
 80016c4:	4646      	mov	r6, r8
 80016c6:	46d6      	mov	lr, sl
 80016c8:	4684      	mov	ip, r0
 80016ca:	b5c0      	push	{r6, r7, lr}
 80016cc:	4680      	mov	r8, r0
 80016ce:	4e19      	ldr	r6, [pc, #100]	; (8001734 <__eqdf2+0x74>)
 80016d0:	0318      	lsls	r0, r3, #12
 80016d2:	030f      	lsls	r7, r1, #12
 80016d4:	004d      	lsls	r5, r1, #1
 80016d6:	0b00      	lsrs	r0, r0, #12
 80016d8:	005c      	lsls	r4, r3, #1
 80016da:	4682      	mov	sl, r0
 80016dc:	0b3f      	lsrs	r7, r7, #12
 80016de:	0d6d      	lsrs	r5, r5, #21
 80016e0:	0fc9      	lsrs	r1, r1, #31
 80016e2:	4691      	mov	r9, r2
 80016e4:	0d64      	lsrs	r4, r4, #21
 80016e6:	0fdb      	lsrs	r3, r3, #31
 80016e8:	2001      	movs	r0, #1
 80016ea:	42b5      	cmp	r5, r6
 80016ec:	d00a      	beq.n	8001704 <__eqdf2+0x44>
 80016ee:	42b4      	cmp	r4, r6
 80016f0:	d003      	beq.n	80016fa <__eqdf2+0x3a>
 80016f2:	42a5      	cmp	r5, r4
 80016f4:	d101      	bne.n	80016fa <__eqdf2+0x3a>
 80016f6:	4557      	cmp	r7, sl
 80016f8:	d00c      	beq.n	8001714 <__eqdf2+0x54>
 80016fa:	bc1c      	pop	{r2, r3, r4}
 80016fc:	4690      	mov	r8, r2
 80016fe:	4699      	mov	r9, r3
 8001700:	46a2      	mov	sl, r4
 8001702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001704:	4666      	mov	r6, ip
 8001706:	433e      	orrs	r6, r7
 8001708:	d1f7      	bne.n	80016fa <__eqdf2+0x3a>
 800170a:	42ac      	cmp	r4, r5
 800170c:	d1f5      	bne.n	80016fa <__eqdf2+0x3a>
 800170e:	4654      	mov	r4, sl
 8001710:	4314      	orrs	r4, r2
 8001712:	d1f2      	bne.n	80016fa <__eqdf2+0x3a>
 8001714:	2001      	movs	r0, #1
 8001716:	45c8      	cmp	r8, r9
 8001718:	d1ef      	bne.n	80016fa <__eqdf2+0x3a>
 800171a:	4299      	cmp	r1, r3
 800171c:	d007      	beq.n	800172e <__eqdf2+0x6e>
 800171e:	2d00      	cmp	r5, #0
 8001720:	d1eb      	bne.n	80016fa <__eqdf2+0x3a>
 8001722:	4663      	mov	r3, ip
 8001724:	431f      	orrs	r7, r3
 8001726:	0038      	movs	r0, r7
 8001728:	1e47      	subs	r7, r0, #1
 800172a:	41b8      	sbcs	r0, r7
 800172c:	e7e5      	b.n	80016fa <__eqdf2+0x3a>
 800172e:	2000      	movs	r0, #0
 8001730:	e7e3      	b.n	80016fa <__eqdf2+0x3a>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	000007ff 	.word	0x000007ff

08001738 <__gedf2>:
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	464f      	mov	r7, r9
 800173c:	4646      	mov	r6, r8
 800173e:	46d6      	mov	lr, sl
 8001740:	004d      	lsls	r5, r1, #1
 8001742:	b5c0      	push	{r6, r7, lr}
 8001744:	030e      	lsls	r6, r1, #12
 8001746:	0fc9      	lsrs	r1, r1, #31
 8001748:	468a      	mov	sl, r1
 800174a:	492c      	ldr	r1, [pc, #176]	; (80017fc <__gedf2+0xc4>)
 800174c:	031f      	lsls	r7, r3, #12
 800174e:	005c      	lsls	r4, r3, #1
 8001750:	4680      	mov	r8, r0
 8001752:	0b36      	lsrs	r6, r6, #12
 8001754:	0d6d      	lsrs	r5, r5, #21
 8001756:	4691      	mov	r9, r2
 8001758:	0b3f      	lsrs	r7, r7, #12
 800175a:	0d64      	lsrs	r4, r4, #21
 800175c:	0fdb      	lsrs	r3, r3, #31
 800175e:	428d      	cmp	r5, r1
 8001760:	d01e      	beq.n	80017a0 <__gedf2+0x68>
 8001762:	428c      	cmp	r4, r1
 8001764:	d016      	beq.n	8001794 <__gedf2+0x5c>
 8001766:	2d00      	cmp	r5, #0
 8001768:	d11e      	bne.n	80017a8 <__gedf2+0x70>
 800176a:	4330      	orrs	r0, r6
 800176c:	4684      	mov	ip, r0
 800176e:	2c00      	cmp	r4, #0
 8001770:	d101      	bne.n	8001776 <__gedf2+0x3e>
 8001772:	433a      	orrs	r2, r7
 8001774:	d023      	beq.n	80017be <__gedf2+0x86>
 8001776:	4662      	mov	r2, ip
 8001778:	2a00      	cmp	r2, #0
 800177a:	d01a      	beq.n	80017b2 <__gedf2+0x7a>
 800177c:	459a      	cmp	sl, r3
 800177e:	d029      	beq.n	80017d4 <__gedf2+0x9c>
 8001780:	4651      	mov	r1, sl
 8001782:	2002      	movs	r0, #2
 8001784:	3901      	subs	r1, #1
 8001786:	4008      	ands	r0, r1
 8001788:	3801      	subs	r0, #1
 800178a:	bc1c      	pop	{r2, r3, r4}
 800178c:	4690      	mov	r8, r2
 800178e:	4699      	mov	r9, r3
 8001790:	46a2      	mov	sl, r4
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	0039      	movs	r1, r7
 8001796:	4311      	orrs	r1, r2
 8001798:	d0e5      	beq.n	8001766 <__gedf2+0x2e>
 800179a:	2002      	movs	r0, #2
 800179c:	4240      	negs	r0, r0
 800179e:	e7f4      	b.n	800178a <__gedf2+0x52>
 80017a0:	4330      	orrs	r0, r6
 80017a2:	d1fa      	bne.n	800179a <__gedf2+0x62>
 80017a4:	42ac      	cmp	r4, r5
 80017a6:	d00f      	beq.n	80017c8 <__gedf2+0x90>
 80017a8:	2c00      	cmp	r4, #0
 80017aa:	d10f      	bne.n	80017cc <__gedf2+0x94>
 80017ac:	433a      	orrs	r2, r7
 80017ae:	d0e7      	beq.n	8001780 <__gedf2+0x48>
 80017b0:	e00c      	b.n	80017cc <__gedf2+0x94>
 80017b2:	2201      	movs	r2, #1
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4393      	bics	r3, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	3001      	adds	r0, #1
 80017bc:	e7e5      	b.n	800178a <__gedf2+0x52>
 80017be:	4663      	mov	r3, ip
 80017c0:	2000      	movs	r0, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0e1      	beq.n	800178a <__gedf2+0x52>
 80017c6:	e7db      	b.n	8001780 <__gedf2+0x48>
 80017c8:	433a      	orrs	r2, r7
 80017ca:	d1e6      	bne.n	800179a <__gedf2+0x62>
 80017cc:	459a      	cmp	sl, r3
 80017ce:	d1d7      	bne.n	8001780 <__gedf2+0x48>
 80017d0:	42a5      	cmp	r5, r4
 80017d2:	dcd5      	bgt.n	8001780 <__gedf2+0x48>
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	db05      	blt.n	80017e4 <__gedf2+0xac>
 80017d8:	42be      	cmp	r6, r7
 80017da:	d8d1      	bhi.n	8001780 <__gedf2+0x48>
 80017dc:	d008      	beq.n	80017f0 <__gedf2+0xb8>
 80017de:	2000      	movs	r0, #0
 80017e0:	42be      	cmp	r6, r7
 80017e2:	d2d2      	bcs.n	800178a <__gedf2+0x52>
 80017e4:	4650      	mov	r0, sl
 80017e6:	2301      	movs	r3, #1
 80017e8:	3801      	subs	r0, #1
 80017ea:	4398      	bics	r0, r3
 80017ec:	3001      	adds	r0, #1
 80017ee:	e7cc      	b.n	800178a <__gedf2+0x52>
 80017f0:	45c8      	cmp	r8, r9
 80017f2:	d8c5      	bhi.n	8001780 <__gedf2+0x48>
 80017f4:	2000      	movs	r0, #0
 80017f6:	45c8      	cmp	r8, r9
 80017f8:	d3f4      	bcc.n	80017e4 <__gedf2+0xac>
 80017fa:	e7c6      	b.n	800178a <__gedf2+0x52>
 80017fc:	000007ff 	.word	0x000007ff

08001800 <__ledf2>:
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	464f      	mov	r7, r9
 8001804:	4646      	mov	r6, r8
 8001806:	46d6      	mov	lr, sl
 8001808:	004d      	lsls	r5, r1, #1
 800180a:	b5c0      	push	{r6, r7, lr}
 800180c:	030e      	lsls	r6, r1, #12
 800180e:	0fc9      	lsrs	r1, r1, #31
 8001810:	468a      	mov	sl, r1
 8001812:	492e      	ldr	r1, [pc, #184]	; (80018cc <__ledf2+0xcc>)
 8001814:	031f      	lsls	r7, r3, #12
 8001816:	005c      	lsls	r4, r3, #1
 8001818:	4680      	mov	r8, r0
 800181a:	0b36      	lsrs	r6, r6, #12
 800181c:	0d6d      	lsrs	r5, r5, #21
 800181e:	4691      	mov	r9, r2
 8001820:	0b3f      	lsrs	r7, r7, #12
 8001822:	0d64      	lsrs	r4, r4, #21
 8001824:	0fdb      	lsrs	r3, r3, #31
 8001826:	428d      	cmp	r5, r1
 8001828:	d018      	beq.n	800185c <__ledf2+0x5c>
 800182a:	428c      	cmp	r4, r1
 800182c:	d011      	beq.n	8001852 <__ledf2+0x52>
 800182e:	2d00      	cmp	r5, #0
 8001830:	d118      	bne.n	8001864 <__ledf2+0x64>
 8001832:	4330      	orrs	r0, r6
 8001834:	4684      	mov	ip, r0
 8001836:	2c00      	cmp	r4, #0
 8001838:	d11e      	bne.n	8001878 <__ledf2+0x78>
 800183a:	433a      	orrs	r2, r7
 800183c:	d11c      	bne.n	8001878 <__ledf2+0x78>
 800183e:	4663      	mov	r3, ip
 8001840:	2000      	movs	r0, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d030      	beq.n	80018a8 <__ledf2+0xa8>
 8001846:	4651      	mov	r1, sl
 8001848:	2002      	movs	r0, #2
 800184a:	3901      	subs	r1, #1
 800184c:	4008      	ands	r0, r1
 800184e:	3801      	subs	r0, #1
 8001850:	e02a      	b.n	80018a8 <__ledf2+0xa8>
 8001852:	0039      	movs	r1, r7
 8001854:	4311      	orrs	r1, r2
 8001856:	d0ea      	beq.n	800182e <__ledf2+0x2e>
 8001858:	2002      	movs	r0, #2
 800185a:	e025      	b.n	80018a8 <__ledf2+0xa8>
 800185c:	4330      	orrs	r0, r6
 800185e:	d1fb      	bne.n	8001858 <__ledf2+0x58>
 8001860:	42ac      	cmp	r4, r5
 8001862:	d026      	beq.n	80018b2 <__ledf2+0xb2>
 8001864:	2c00      	cmp	r4, #0
 8001866:	d126      	bne.n	80018b6 <__ledf2+0xb6>
 8001868:	433a      	orrs	r2, r7
 800186a:	d124      	bne.n	80018b6 <__ledf2+0xb6>
 800186c:	4651      	mov	r1, sl
 800186e:	2002      	movs	r0, #2
 8001870:	3901      	subs	r1, #1
 8001872:	4008      	ands	r0, r1
 8001874:	3801      	subs	r0, #1
 8001876:	e017      	b.n	80018a8 <__ledf2+0xa8>
 8001878:	4662      	mov	r2, ip
 800187a:	2a00      	cmp	r2, #0
 800187c:	d00f      	beq.n	800189e <__ledf2+0x9e>
 800187e:	459a      	cmp	sl, r3
 8001880:	d1e1      	bne.n	8001846 <__ledf2+0x46>
 8001882:	42a5      	cmp	r5, r4
 8001884:	db05      	blt.n	8001892 <__ledf2+0x92>
 8001886:	42be      	cmp	r6, r7
 8001888:	d8dd      	bhi.n	8001846 <__ledf2+0x46>
 800188a:	d019      	beq.n	80018c0 <__ledf2+0xc0>
 800188c:	2000      	movs	r0, #0
 800188e:	42be      	cmp	r6, r7
 8001890:	d20a      	bcs.n	80018a8 <__ledf2+0xa8>
 8001892:	4650      	mov	r0, sl
 8001894:	2301      	movs	r3, #1
 8001896:	3801      	subs	r0, #1
 8001898:	4398      	bics	r0, r3
 800189a:	3001      	adds	r0, #1
 800189c:	e004      	b.n	80018a8 <__ledf2+0xa8>
 800189e:	2201      	movs	r2, #1
 80018a0:	3b01      	subs	r3, #1
 80018a2:	4393      	bics	r3, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	3001      	adds	r0, #1
 80018a8:	bc1c      	pop	{r2, r3, r4}
 80018aa:	4690      	mov	r8, r2
 80018ac:	4699      	mov	r9, r3
 80018ae:	46a2      	mov	sl, r4
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b2:	433a      	orrs	r2, r7
 80018b4:	d1d0      	bne.n	8001858 <__ledf2+0x58>
 80018b6:	459a      	cmp	sl, r3
 80018b8:	d1c5      	bne.n	8001846 <__ledf2+0x46>
 80018ba:	42a5      	cmp	r5, r4
 80018bc:	dcc3      	bgt.n	8001846 <__ledf2+0x46>
 80018be:	e7e0      	b.n	8001882 <__ledf2+0x82>
 80018c0:	45c8      	cmp	r8, r9
 80018c2:	d8c0      	bhi.n	8001846 <__ledf2+0x46>
 80018c4:	2000      	movs	r0, #0
 80018c6:	45c8      	cmp	r8, r9
 80018c8:	d3e3      	bcc.n	8001892 <__ledf2+0x92>
 80018ca:	e7ed      	b.n	80018a8 <__ledf2+0xa8>
 80018cc:	000007ff 	.word	0x000007ff

080018d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_Init+0x24>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_Init+0x24>)
 80018da:	2110      	movs	r1, #16
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 f809 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e6:	f002 fb5b 	bl	8003fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001900:	f000 ff80 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8001904:	0002      	movs	r2, r0
 8001906:	23fa      	movs	r3, #250	; 0xfa
 8001908:	0099      	lsls	r1, r3, #2
 800190a:	0010      	movs	r0, r2
 800190c:	f7fe fbfc 	bl	8000108 <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f8e7 	bl	8001ae6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	2301      	movs	r3, #1
 800191c:	425b      	negs	r3, r3
 800191e:	2200      	movs	r2, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f8cb 	bl	8001abc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  uwTick++;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_IncTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_IncTick+0x14>)
 800193c:	601a      	str	r2, [r3, #0]
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200000f4 	.word	0x200000f4

08001948 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	200000f4 	.word	0x200000f4

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	d002      	beq.n	800197c <HAL_Delay+0x20>
  {
     wait++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3301      	adds	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	f7ff ffe3 	bl	8001948 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	429a      	cmp	r2, r3
 800198c:	d8f7      	bhi.n	800197e <HAL_Delay+0x22>
  {
  }
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80019a6:	1dfb      	adds	r3, r7, #7
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b7f      	cmp	r3, #127	; 0x7f
 80019ac:	d932      	bls.n	8001a14 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ae:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <NVIC_SetPriority+0xd4>)
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	0019      	movs	r1, r3
 80019b6:	230f      	movs	r3, #15
 80019b8:	400b      	ands	r3, r1
 80019ba:	3b08      	subs	r3, #8
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3306      	adds	r3, #6
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	18d3      	adds	r3, r2, r3
 80019c4:	3304      	adds	r3, #4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	1dfa      	adds	r2, r7, #7
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	0011      	movs	r1, r2
 80019ce:	2203      	movs	r2, #3
 80019d0:	400a      	ands	r2, r1
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	21ff      	movs	r1, #255	; 0xff
 80019d6:	4091      	lsls	r1, r2
 80019d8:	000a      	movs	r2, r1
 80019da:	43d2      	mvns	r2, r2
 80019dc:	401a      	ands	r2, r3
 80019de:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	22ff      	movs	r2, #255	; 0xff
 80019e6:	401a      	ands	r2, r3
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	0018      	movs	r0, r3
 80019ee:	2303      	movs	r3, #3
 80019f0:	4003      	ands	r3, r0
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f6:	481d      	ldr	r0, [pc, #116]	; (8001a6c <NVIC_SetPriority+0xd4>)
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	001c      	movs	r4, r3
 80019fe:	230f      	movs	r3, #15
 8001a00:	4023      	ands	r3, r4
 8001a02:	3b08      	subs	r3, #8
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	430a      	orrs	r2, r1
 8001a08:	3306      	adds	r3, #6
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	18c3      	adds	r3, r0, r3
 8001a0e:	3304      	adds	r3, #4
 8001a10:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a12:	e027      	b.n	8001a64 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a14:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <NVIC_SetPriority+0xd8>)
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	33c0      	adds	r3, #192	; 0xc0
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	589b      	ldr	r3, [r3, r2]
 8001a24:	1dfa      	adds	r2, r7, #7
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	0011      	movs	r1, r2
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	00d2      	lsls	r2, r2, #3
 8001a30:	21ff      	movs	r1, #255	; 0xff
 8001a32:	4091      	lsls	r1, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	43d2      	mvns	r2, r2
 8001a38:	401a      	ands	r2, r3
 8001a3a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	401a      	ands	r2, r3
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	4003      	ands	r3, r0
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <NVIC_SetPriority+0xd8>)
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	33c0      	adds	r3, #192	; 0xc0
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	501a      	str	r2, [r3, r0]
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b003      	add	sp, #12
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <SysTick_Config+0x40>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e010      	b.n	8001aac <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <SysTick_Config+0x44>)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	3a01      	subs	r2, #1
 8001a90:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	2301      	movs	r3, #1
 8001a94:	425b      	negs	r3, r3
 8001a96:	2103      	movs	r1, #3
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff7d 	bl	8001998 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SysTick_Config+0x44>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x44>)
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00ffffff 	.word	0x00ffffff
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	1c02      	adds	r2, r0, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <NVIC_SetPriority>
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff ffbf 	bl	8001a74 <SysTick_Config>
 8001af6:	0003      	movs	r3, r0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b16:	e155      	b.n	8001dc4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4091      	lsls	r1, r2
 8001b22:	000a      	movs	r2, r1
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d100      	bne.n	8001b30 <HAL_GPIO_Init+0x30>
 8001b2e:	e146      	b.n	8001dbe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x40>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b12      	cmp	r3, #18
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	58d3      	ldr	r3, [r2, r3]
 8001b4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2207      	movs	r2, #7
 8001b52:	4013      	ands	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	409a      	lsls	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	6939      	ldr	r1, [r7, #16]
 8001b86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	409a      	lsls	r2, r3
 8001b96:	0013      	movs	r3, r2
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	409a      	lsls	r2, r3
 8001bae:	0013      	movs	r3, r2
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00b      	beq.n	8001bdc <HAL_GPIO_Init+0xdc>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd0:	2b11      	cmp	r3, #17
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	409a      	lsls	r2, r3
 8001bea:	0013      	movs	r3, r2
 8001bec:	43da      	mvns	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	2201      	movs	r2, #1
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	055b      	lsls	r3, r3, #21
 8001c76:	4013      	ands	r3, r2
 8001c78:	d100      	bne.n	8001c7c <HAL_GPIO_Init+0x17c>
 8001c7a:	e0a0      	b.n	8001dbe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7c:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_GPIO_Init+0x2dc>)
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <HAL_GPIO_Init+0x2dc>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	619a      	str	r2, [r3, #24]
 8001c88:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_GPIO_Init+0x2dc>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_GPIO_Init+0x2e0>)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	589b      	ldr	r3, [r3, r2]
 8001ca0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	2390      	movs	r3, #144	; 0x90
 8001cbc:	05db      	lsls	r3, r3, #23
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x1f6>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <HAL_GPIO_Init+0x2e4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x1f2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a46      	ldr	r2, [pc, #280]	; (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a45      	ldr	r2, [pc, #276]	; (8001dec <HAL_GPIO_Init+0x2ec>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x1ea>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a44      	ldr	r2, [pc, #272]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x1e6>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x1f8>
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x1f8>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x1f8>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x1f8>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x1f8>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x2e0>)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	025b      	lsls	r3, r3, #9
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	029b      	lsls	r3, r3, #10
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43da      	mvns	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	035b      	lsls	r3, r3, #13
 8001d82:	4013      	ands	r3, r2
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	039b      	lsls	r3, r3, #14
 8001dac:	4013      	ands	r3, r2
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	40da      	lsrs	r2, r3
 8001dcc:	1e13      	subs	r3, r2, #0
 8001dce:	d000      	beq.n	8001dd2 <HAL_GPIO_Init+0x2d2>
 8001dd0:	e6a2      	b.n	8001b18 <HAL_GPIO_Init+0x18>
  } 
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b006      	add	sp, #24
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000
 8001de4:	48000400 	.word	0x48000400
 8001de8:	48000800 	.word	0x48000800
 8001dec:	48000c00 	.word	0x48000c00
 8001df0:	48001000 	.word	0x48001000
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	0008      	movs	r0, r1
 8001e02:	0011      	movs	r1, r2
 8001e04:	1cbb      	adds	r3, r7, #2
 8001e06:	1c02      	adds	r2, r0, #0
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	1c7b      	adds	r3, r7, #1
 8001e0c:	1c0a      	adds	r2, r1, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e10:	1c7b      	adds	r3, r7, #1
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e18:	1cbb      	adds	r3, r7, #2
 8001e1a:	881a      	ldrh	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e20:	e003      	b.n	8001e2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e22:	1cbb      	adds	r3, r7, #2
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	4013      	ands	r3, r2
 8001e48:	d100      	bne.n	8001e4c <HAL_RCC_OscConfig+0x18>
 8001e4a:	e08d      	b.n	8001f68 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e4c:	4bc5      	ldr	r3, [pc, #788]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	220c      	movs	r2, #12
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00e      	beq.n	8001e76 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e58:	4bc2      	ldr	r3, [pc, #776]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	220c      	movs	r2, #12
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d116      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
 8001e64:	4bbf      	ldr	r3, [pc, #764]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	025b      	lsls	r3, r3, #9
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d10d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e76:	4bbb      	ldr	r3, [pc, #748]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d100      	bne.n	8001e84 <HAL_RCC_OscConfig+0x50>
 8001e82:	e070      	b.n	8001f66 <HAL_RCC_OscConfig+0x132>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d000      	beq.n	8001e8e <HAL_RCC_OscConfig+0x5a>
 8001e8c:	e06b      	b.n	8001f66 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e329      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_OscConfig+0x76>
 8001e9a:	4bb2      	ldr	r3, [pc, #712]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4bb1      	ldr	r3, [pc, #708]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0249      	lsls	r1, r1, #9
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e02f      	b.n	8001f0a <HAL_RCC_OscConfig+0xd6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x98>
 8001eb2:	4bac      	ldr	r3, [pc, #688]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4bab      	ldr	r3, [pc, #684]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	49ab      	ldr	r1, [pc, #684]	; (8002168 <HAL_RCC_OscConfig+0x334>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	4ba9      	ldr	r3, [pc, #676]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4ba8      	ldr	r3, [pc, #672]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ec4:	49a9      	ldr	r1, [pc, #676]	; (800216c <HAL_RCC_OscConfig+0x338>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e01e      	b.n	8001f0a <HAL_RCC_OscConfig+0xd6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d10e      	bne.n	8001ef2 <HAL_RCC_OscConfig+0xbe>
 8001ed4:	4ba3      	ldr	r3, [pc, #652]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4ba2      	ldr	r3, [pc, #648]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	02c9      	lsls	r1, r1, #11
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b9f      	ldr	r3, [pc, #636]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	0249      	lsls	r1, r1, #9
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0xd6>
 8001ef2:	4b9c      	ldr	r3, [pc, #624]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b9b      	ldr	r3, [pc, #620]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	499b      	ldr	r1, [pc, #620]	; (8002168 <HAL_RCC_OscConfig+0x334>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	4b99      	ldr	r3, [pc, #612]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b98      	ldr	r3, [pc, #608]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f04:	4999      	ldr	r1, [pc, #612]	; (800216c <HAL_RCC_OscConfig+0x338>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d014      	beq.n	8001f3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fd19 	bl	8001948 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fd14 	bl	8001948 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e2db      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe8>
 8001f3a:	e015      	b.n	8001f68 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fd04 	bl	8001948 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f46:	f7ff fcff 	bl	8001948 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e2c6      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f58:	4b82      	ldr	r3, [pc, #520]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x112>
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d100      	bne.n	8001f74 <HAL_RCC_OscConfig+0x140>
 8001f72:	e06c      	b.n	800204e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f74:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	220c      	movs	r2, #12
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f7e:	4b79      	ldr	r3, [pc, #484]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	220c      	movs	r2, #12
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11f      	bne.n	8001fca <HAL_RCC_OscConfig+0x196>
 8001f8a:	4b76      	ldr	r3, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	025b      	lsls	r3, r3, #9
 8001f92:	401a      	ands	r2, r3
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d116      	bne.n	8001fca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9c:	4b71      	ldr	r3, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x17e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e299      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	22f8      	movs	r2, #248	; 0xf8
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	00da      	lsls	r2, r3, #3
 8001fc2:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc8:	e041      	b.n	800204e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d024      	beq.n	800201c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd2:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fcb3 	bl	8001948 <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fcae 	bl	8001948 <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e275      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2202      	movs	r2, #2
 8002000:	4013      	ands	r3, r2
 8002002:	d0f1      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22f8      	movs	r2, #248	; 0xf8
 800200a:	4393      	bics	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e018      	b.n	800204e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002022:	2101      	movs	r1, #1
 8002024:	438a      	bics	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fc8e 	bl	8001948 <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002032:	f7ff fc89 	bl	8001948 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e250      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d1f1      	bne.n	8002032 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2208      	movs	r2, #8
 8002054:	4013      	ands	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d019      	beq.n	8002094 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002060:	4b40      	ldr	r3, [pc, #256]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002066:	2101      	movs	r1, #1
 8002068:	430a      	orrs	r2, r1
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fc6c 	bl	8001948 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002076:	f7ff fc67 	bl	8001948 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e22e      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d0f1      	beq.n	8002076 <HAL_RCC_OscConfig+0x242>
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 800209a:	2101      	movs	r1, #1
 800209c:	438a      	bics	r2, r1
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff fc52 	bl	8001948 <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020aa:	f7ff fc4d 	bl	8001948 <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e214      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2202      	movs	r2, #2
 80020c2:	4013      	ands	r3, r2
 80020c4:	d1f1      	bne.n	80020aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2204      	movs	r2, #4
 80020cc:	4013      	ands	r3, r2
 80020ce:	d100      	bne.n	80020d2 <HAL_RCC_OscConfig+0x29e>
 80020d0:	e0b6      	b.n	8002240 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2317      	movs	r3, #23
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	4013      	ands	r3, r2
 80020e4:	d111      	bne.n	800210a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	0549      	lsls	r1, r1, #21
 80020f0:	430a      	orrs	r2, r1
 80020f2:	61da      	str	r2, [r3, #28]
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002102:	2317      	movs	r3, #23
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_OscConfig+0x33c>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4013      	ands	r3, r2
 8002114:	d11a      	bne.n	800214c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_OscConfig+0x33c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_RCC_OscConfig+0x33c>)
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0049      	lsls	r1, r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002124:	f7ff fc10 	bl	8001948 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff fc0b 	bl	8001948 <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1d2      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_OscConfig+0x33c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4013      	ands	r3, r2
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10f      	bne.n	8002174 <HAL_RCC_OscConfig+0x340>
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 800215a:	2101      	movs	r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
 8002160:	e036      	b.n	80021d0 <HAL_RCC_OscConfig+0x39c>
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	40021000 	.word	0x40021000
 8002168:	fffeffff 	.word	0xfffeffff
 800216c:	fffbffff 	.word	0xfffbffff
 8002170:	40007000 	.word	0x40007000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x362>
 800217c:	4bca      	ldr	r3, [pc, #808]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4bc9      	ldr	r3, [pc, #804]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	621a      	str	r2, [r3, #32]
 8002188:	4bc7      	ldr	r3, [pc, #796]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	4bc6      	ldr	r3, [pc, #792]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800218e:	2104      	movs	r1, #4
 8002190:	438a      	bics	r2, r1
 8002192:	621a      	str	r2, [r3, #32]
 8002194:	e01c      	b.n	80021d0 <HAL_RCC_OscConfig+0x39c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x384>
 800219e:	4bc2      	ldr	r3, [pc, #776]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021a0:	6a1a      	ldr	r2, [r3, #32]
 80021a2:	4bc1      	ldr	r3, [pc, #772]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021a4:	2104      	movs	r1, #4
 80021a6:	430a      	orrs	r2, r1
 80021a8:	621a      	str	r2, [r3, #32]
 80021aa:	4bbf      	ldr	r3, [pc, #764]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	4bbe      	ldr	r3, [pc, #760]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	621a      	str	r2, [r3, #32]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0x39c>
 80021b8:	4bbb      	ldr	r3, [pc, #748]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	4bba      	ldr	r3, [pc, #744]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021be:	2101      	movs	r1, #1
 80021c0:	438a      	bics	r2, r1
 80021c2:	621a      	str	r2, [r3, #32]
 80021c4:	4bb8      	ldr	r3, [pc, #736]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	4bb7      	ldr	r3, [pc, #732]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021ca:	2104      	movs	r1, #4
 80021cc:	438a      	bics	r2, r1
 80021ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d014      	beq.n	8002202 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7ff fbb6 	bl	8001948 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e009      	b.n	80021f6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fbb1 	bl	8001948 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	4aaf      	ldr	r2, [pc, #700]	; (80024ac <HAL_RCC_OscConfig+0x678>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e177      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f6:	4bac      	ldr	r3, [pc, #688]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3ae>
 8002200:	e013      	b.n	800222a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff fba1 	bl	8001948 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220a:	e009      	b.n	8002220 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7ff fb9c 	bl	8001948 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	4aa5      	ldr	r2, [pc, #660]	; (80024ac <HAL_RCC_OscConfig+0x678>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e162      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4ba1      	ldr	r3, [pc, #644]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800222a:	2317      	movs	r3, #23
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b9c      	ldr	r3, [pc, #624]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	4b9b      	ldr	r3, [pc, #620]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800223a:	499d      	ldr	r1, [pc, #628]	; (80024b0 <HAL_RCC_OscConfig+0x67c>)
 800223c:	400a      	ands	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	4013      	ands	r3, r2
 8002248:	d063      	beq.n	8002312 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d12a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002252:	4b95      	ldr	r3, [pc, #596]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002256:	4b94      	ldr	r3, [pc, #592]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002258:	2104      	movs	r1, #4
 800225a:	430a      	orrs	r2, r1
 800225c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800225e:	4b92      	ldr	r3, [pc, #584]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002262:	4b91      	ldr	r3, [pc, #580]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002264:	2101      	movs	r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff fb6d 	bl	8001948 <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002274:	f7ff fb68 	bl	8001948 <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e12f      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002286:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d0f1      	beq.n	8002274 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002290:	4b85      	ldr	r3, [pc, #532]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	22f8      	movs	r2, #248	; 0xf8
 8002296:	4393      	bics	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	00da      	lsls	r2, r3, #3
 80022a0:	4b81      	ldr	r3, [pc, #516]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34
 80022a6:	e034      	b.n	8002312 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	3305      	adds	r3, #5
 80022ae:	d111      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022b0:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b4:	4b7c      	ldr	r3, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022b6:	2104      	movs	r1, #4
 80022b8:	438a      	bics	r2, r1
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022bc:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	22f8      	movs	r2, #248	; 0xf8
 80022c2:	4393      	bics	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	00da      	lsls	r2, r3, #3
 80022cc:	4b76      	ldr	r3, [pc, #472]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022ce:	430a      	orrs	r2, r1
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34
 80022d2:	e01e      	b.n	8002312 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022d4:	4b74      	ldr	r3, [pc, #464]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022da:	2104      	movs	r1, #4
 80022dc:	430a      	orrs	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022e0:	4b71      	ldr	r3, [pc, #452]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e4:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	438a      	bics	r2, r1
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fb2c 	bl	8001948 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022f6:	f7ff fb27 	bl	8001948 <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0ee      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002308:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	d05c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800231c:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	220c      	movs	r2, #12
 8002322:	4013      	ands	r3, r2
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d00e      	beq.n	8002346 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002328:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	220c      	movs	r2, #12
 800232e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002330:	2b08      	cmp	r3, #8
 8002332:	d114      	bne.n	800235e <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002334:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	23c0      	movs	r3, #192	; 0xc0
 800233a:	025b      	lsls	r3, r3, #9
 800233c:	401a      	ands	r2, r3
 800233e:	23c0      	movs	r3, #192	; 0xc0
 8002340:	025b      	lsls	r3, r3, #9
 8002342:	429a      	cmp	r2, r3
 8002344:	d10b      	bne.n	800235e <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	4013      	ands	r3, r2
 8002350:	d040      	beq.n	80023d4 <HAL_RCC_OscConfig+0x5a0>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d03c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0c3      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01b      	beq.n	800239e <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	0249      	lsls	r1, r1, #9
 8002370:	430a      	orrs	r2, r1
 8002372:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fae8 	bl	8001948 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800237e:	f7ff fae3 	bl	8001948 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0aa      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002390:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	025b      	lsls	r3, r3, #9
 8002398:	4013      	ands	r3, r2
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x54a>
 800239c:	e01b      	b.n	80023d6 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800239e:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80023a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80023a4:	4943      	ldr	r1, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x680>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff facd 	bl	8001948 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b4:	f7ff fac8 	bl	8001948 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e08f      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80023c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x580>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d100      	bne.n	80023e0 <HAL_RCC_OscConfig+0x5ac>
 80023de:	e081      	b.n	80024e4 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	220c      	movs	r2, #12
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d100      	bne.n	80023ee <HAL_RCC_OscConfig+0x5ba>
 80023ec:	e078      	b.n	80024e0 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d14c      	bne.n	8002490 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 80023fc:	492e      	ldr	r1, [pc, #184]	; (80024b8 <HAL_RCC_OscConfig+0x684>)
 80023fe:	400a      	ands	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7ff faa1 	bl	8001948 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff fa9c 	bl	8001948 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e063      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	049b      	lsls	r3, r3, #18
 8002426:	4013      	ands	r3, r2
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	220f      	movs	r2, #15
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800243a:	430a      	orrs	r2, r1
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_RCC_OscConfig+0x688>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	431a      	orrs	r2, r3
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0449      	lsls	r1, r1, #17
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff fa6f 	bl	8001948 <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff fa6a 	bl	8001948 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e031      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	049b      	lsls	r3, r3, #18
 800248a:	4013      	ands	r3, r2
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x63c>
 800248e:	e029      	b.n	80024e4 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_RCC_OscConfig+0x674>)
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <HAL_RCC_OscConfig+0x684>)
 8002498:	400a      	ands	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fa54 	bl	8001948 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x69e>
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000
 80024ac:	00001388 	.word	0x00001388
 80024b0:	efffffff 	.word	0xefffffff
 80024b4:	fffeffff 	.word	0xfffeffff
 80024b8:	feffffff 	.word	0xfeffffff
 80024bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff fa42 	bl	8001948 <HAL_GetTick>
 80024c4:	0002      	movs	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_RCC_OscConfig+0x6bc>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	049b      	lsls	r3, r3, #18
 80024da:	4013      	ands	r3, r2
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x68c>
 80024de:	e001      	b.n	80024e4 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b006      	add	sp, #24
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002502:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d911      	bls.n	8002534 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002510:	4b77      	ldr	r3, [pc, #476]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4393      	bics	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0d8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2202      	movs	r2, #2
 800253a:	4013      	ands	r3, r2
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253e:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	22f0      	movs	r2, #240	; 0xf0
 8002544:	4393      	bics	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2201      	movs	r2, #1
 8002558:	4013      	ands	r3, r2
 800255a:	d100      	bne.n	800255e <HAL_RCC_ClockConfig+0x6a>
 800255c:	e089      	b.n	8002672 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	029b      	lsls	r3, r3, #10
 800256e:	4013      	ands	r3, r2
 8002570:	d120      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0b7      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	049b      	lsls	r3, r3, #18
 8002586:	4013      	ands	r3, r2
 8002588:	d114      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0ab      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002596:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 8002598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	025b      	lsls	r3, r3, #9
 800259e:	4013      	ands	r3, r2
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e09f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e098      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7ff f9be 	bl	8001948 <HAL_GetTick>
 80025cc:	0003      	movs	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d111      	bne.n	80025fc <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d8:	e009      	b.n	80025ee <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025da:	f7ff f9b5 	bl	8001948 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a44      	ldr	r2, [pc, #272]	; (80026f8 <HAL_RCC_ClockConfig+0x204>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e07b      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	220c      	movs	r2, #12
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d1ef      	bne.n	80025da <HAL_RCC_ClockConfig+0xe6>
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d111      	bne.n	8002628 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	e009      	b.n	800261a <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002606:	f7ff f99f 	bl	8001948 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <HAL_RCC_ClockConfig+0x204>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e065      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	220c      	movs	r2, #12
 8002620:	4013      	ands	r3, r2
 8002622:	2b08      	cmp	r3, #8
 8002624:	d1ef      	bne.n	8002606 <HAL_RCC_ClockConfig+0x112>
 8002626:	e024      	b.n	8002672 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d11b      	bne.n	8002668 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002630:	e009      	b.n	8002646 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7ff f989 	bl	8001948 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a2e      	ldr	r2, [pc, #184]	; (80026f8 <HAL_RCC_ClockConfig+0x204>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e04f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002646:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	220c      	movs	r2, #12
 800264c:	4013      	ands	r3, r2
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_ClockConfig+0x13e>
 8002652:	e00e      	b.n	8002672 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7ff f978 	bl	8001948 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_RCC_ClockConfig+0x204>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e03e      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	220c      	movs	r2, #12
 800266e:	4013      	ands	r3, r2
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	4013      	ands	r3, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d211      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e020      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2204      	movs	r2, #4
 80026aa:	4013      	ands	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_RCC_ClockConfig+0x208>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c2:	f000 f821 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c6:	0001      	movs	r1, r0
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	220f      	movs	r2, #15
 80026d0:	4013      	ands	r3, r2
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_RCC_ClockConfig+0x20c>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	000a      	movs	r2, r1
 80026d8:	40da      	lsrs	r2, r3
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_ClockConfig+0x210>)
 80026dc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff f90a 	bl	80018f8 <HAL_InitTick>
  
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	00001388 	.word	0x00001388
 80026fc:	fffff8ff 	.word	0xfffff8ff
 8002700:	080051f8 	.word	0x080051f8
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b08f      	sub	sp, #60	; 0x3c
 800270c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800270e:	2314      	movs	r3, #20
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	4a37      	ldr	r2, [pc, #220]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002714:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002716:	c313      	stmia	r3!, {r0, r1, r4}
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	4a35      	ldr	r2, [pc, #212]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002720:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002722:	c313      	stmia	r3!, {r0, r1, r4}
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272c:	2300      	movs	r3, #0
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	220c      	movs	r2, #12
 8002746:	4013      	ands	r3, r2
 8002748:	2b08      	cmp	r3, #8
 800274a:	d006      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x52>
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d043      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0xd0>
 8002750:	2b04      	cmp	r3, #4
 8002752:	d144      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002756:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002758:	e044      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	220f      	movs	r2, #15
 8002760:	4013      	ands	r3, r2
 8002762:	2214      	movs	r2, #20
 8002764:	18ba      	adds	r2, r7, r2
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	220f      	movs	r2, #15
 8002770:	4013      	ands	r3, r2
 8002772:	1d3a      	adds	r2, r7, #4
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277a:	23c0      	movs	r3, #192	; 0xc0
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	401a      	ands	r2, r3
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	025b      	lsls	r3, r3, #9
 8002784:	429a      	cmp	r2, r3
 8002786:	d109      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800278a:	481c      	ldr	r0, [pc, #112]	; (80027fc <HAL_RCC_GetSysClockFreq+0xf4>)
 800278c:	f7fd fcbc 	bl	8000108 <__udivsi3>
 8002790:	0003      	movs	r3, r0
 8002792:	001a      	movs	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	4353      	muls	r3, r2
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
 800279a:	e01a      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800279c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279e:	23c0      	movs	r3, #192	; 0xc0
 80027a0:	025b      	lsls	r3, r3, #9
 80027a2:	401a      	ands	r2, r3
 80027a4:	23c0      	movs	r3, #192	; 0xc0
 80027a6:	025b      	lsls	r3, r3, #9
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d109      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80027ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ae:	4814      	ldr	r0, [pc, #80]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b0:	f7fd fcaa 	bl	8000108 <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	001a      	movs	r2, r3
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	4353      	muls	r3, r2
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
 80027be:	e008      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80027c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c2:	480e      	ldr	r0, [pc, #56]	; (80027fc <HAL_RCC_GetSysClockFreq+0xf4>)
 80027c4:	f7fd fca0 	bl	8000108 <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	001a      	movs	r2, r3
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	4353      	muls	r3, r2
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027d6:	e005      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027dc:	e002      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <HAL_RCC_GetSysClockFreq+0xf4>)
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b00f      	add	sp, #60	; 0x3c
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	08005198 	.word	0x08005198
 80027f4:	080051a8 	.word	0x080051a8
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	02dc6c00 	.word	0x02dc6c00

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <HAL_RCC_GetHCLKFreq+0x10>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800281c:	f7ff fff2 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002820:	0001      	movs	r1, r0
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	2207      	movs	r2, #7
 800282a:	4013      	ands	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	40d9      	lsrs	r1, r3
 8002832:	000b      	movs	r3, r1
}    
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	40021000 	.word	0x40021000
 8002840:	08005208 	.word	0x08005208

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	025b      	lsls	r3, r3, #9
 800285c:	4013      	ands	r3, r2
 800285e:	d100      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002860:	e08f      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2317      	movs	r3, #23
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	055b      	lsls	r3, r3, #21
 8002872:	4013      	ands	r3, r2
 8002874:	d111      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b6c      	ldr	r3, [pc, #432]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0549      	lsls	r1, r1, #21
 8002880:	430a      	orrs	r2, r1
 8002882:	61da      	str	r2, [r3, #28]
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	055b      	lsls	r3, r3, #21
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2317      	movs	r3, #23
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d11a      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0049      	lsls	r1, r1, #1
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b4:	f7ff f848 	bl	8001948 <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7ff f843 	bl	8001948 <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0a6      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	d0f0      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028de:	6a1a      	ldr	r2, [r3, #32]
 80028e0:	23c0      	movs	r3, #192	; 0xc0
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d034      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	23c0      	movs	r3, #192	; 0xc0
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4013      	ands	r3, r2
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d02c      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a4b      	ldr	r2, [pc, #300]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	0249      	lsls	r1, r1, #9
 8002912:	430a      	orrs	r2, r1
 8002914:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800291c:	4945      	ldr	r1, [pc, #276]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800291e:	400a      	ands	r2, r1
 8002920:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff f80a 	bl	8001948 <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	e009      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7ff f805 	bl	8001948 <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e067      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	2202      	movs	r2, #2
 8002954:	4013      	ands	r3, r2
 8002956:	d0f0      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002968:	430a      	orrs	r2, r1
 800296a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800296c:	2317      	movs	r3, #23
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800297c:	492f      	ldr	r1, [pc, #188]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297e:	400a      	ands	r2, r1
 8002980:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	4013      	ands	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	2203      	movs	r2, #3
 8002992:	4393      	bics	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800299c:	430a      	orrs	r2, r1
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2220      	movs	r2, #32
 80029c4:	4013      	ands	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	2210      	movs	r2, #16
 80029ce:	4393      	bics	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029d8:	430a      	orrs	r2, r1
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	4013      	ands	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	4393      	bics	r3, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4013      	ands	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	2240      	movs	r2, #64	; 0x40
 8002a0e:	4393      	bics	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b006      	add	sp, #24
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	fffffcff 	.word	0xfffffcff
 8002a34:	fffeffff 	.word	0xfffeffff
 8002a38:	00001388 	.word	0x00001388
 8002a3c:	efffffff 	.word	0xefffffff
 8002a40:	fffcffff 	.word	0xfffcffff

08002a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e08a      	b.n	8002b6c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	225d      	movs	r2, #93	; 0x5d
 8002a60:	5c9b      	ldrb	r3, [r3, r2]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	225c      	movs	r2, #92	; 0x5c
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 fab8 	bl	8003fe8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	225d      	movs	r2, #93	; 0x5d
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2140      	movs	r1, #64	; 0x40
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	23e0      	movs	r3, #224	; 0xe0
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d902      	bls.n	8002aa2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e002      	b.n	8002aa8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	015b      	lsls	r3, r3, #5
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	23f0      	movs	r3, #240	; 0xf0
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d008      	beq.n	8002ac6 <HAL_SPI_Init+0x82>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	23e0      	movs	r3, #224	; 0xe0
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d002      	beq.n	8002ac6 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	23e0      	movs	r3, #224	; 0xe0
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d903      	bls.n	8002ae2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae0:	e002      	b.n	8002ae8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	400b      	ands	r3, r1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	0011      	movs	r1, r2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	0011      	movs	r1, r2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4907      	ldr	r1, [pc, #28]	; (8002b74 <HAL_SPI_Init+0x130>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	225d      	movs	r2, #93	; 0x5d
 8002b66:	2101      	movs	r1, #1
 8002b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b004      	add	sp, #16
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	fffff7ff 	.word	0xfffff7ff

08002b78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	1dbb      	adds	r3, r7, #6
 8002b86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	225c      	movs	r2, #92	; 0x5c
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_SPI_Transmit+0x2a>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e14f      	b.n	8002e42 <HAL_SPI_Transmit+0x2ca>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	225c      	movs	r2, #92	; 0x5c
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002baa:	f7fe fecd 	bl	8001948 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	225d      	movs	r2, #93	; 0x5d
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d004      	beq.n	8002bc8 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8002bbe:	231f      	movs	r3, #31
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bc6:	e131      	b.n	8002e2c <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_SPI_Transmit+0x5e>
 8002bce:	1dbb      	adds	r3, r7, #6
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d104      	bne.n	8002be0 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8002bd6:	231f      	movs	r3, #31
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bde:	e125      	b.n	8002e2c <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	225d      	movs	r2, #93	; 0x5d
 8002be4:	2103      	movs	r1, #3
 8002be6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1dba      	adds	r2, r7, #6
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1dba      	adds	r2, r7, #6
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2244      	movs	r2, #68	; 0x44
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2246      	movs	r2, #70	; 0x46
 8002c16:	2100      	movs	r1, #0
 8002c18:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d108      	bne.n	8002c44 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	01c9      	lsls	r1, r1, #7
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d007      	beq.n	8002c62 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	23e0      	movs	r3, #224	; 0xe0
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d948      	bls.n	8002d00 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_SPI_Transmit+0x108>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d139      	bne.n	8002cf4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c9e:	e029      	b.n	8002cf4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d10f      	bne.n	8002cce <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3302      	adds	r3, #2
 8002cbc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ccc:	e012      	b.n	8002cf4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_SPI_Transmit+0x172>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_SPI_Transmit+0x17c>
 8002cda:	f7fe fe35 	bl	8001948 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d804      	bhi.n	8002cf4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002cea:	231f      	movs	r3, #31
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
          goto error;
 8002cf2:	e09b      	b.n	8002e2c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1d0      	bne.n	8002ca0 <HAL_SPI_Transmit+0x128>
 8002cfe:	e071      	b.n	8002de4 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_SPI_Transmit+0x19a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d163      	bne.n	8002dda <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d90f      	bls.n	8002d3c <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	881a      	ldrh	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b02      	subs	r3, #2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d3a:	e04e      	b.n	8002dda <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	60ba      	str	r2, [r7, #8]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	320c      	adds	r2, #12
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d5a:	e03e      	b.n	8002dda <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2202      	movs	r2, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d124      	bne.n	8002db4 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d90f      	bls.n	8002d94 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	3302      	adds	r3, #2
 8002d82:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b02      	subs	r3, #2
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d92:	e022      	b.n	8002dda <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	60ba      	str	r2, [r7, #8]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	320c      	adds	r2, #12
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002db2:	e012      	b.n	8002dda <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_SPI_Transmit+0x258>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	d00c      	beq.n	8002dda <HAL_SPI_Transmit+0x262>
 8002dc0:	f7fe fdc2 	bl	8001948 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d804      	bhi.n	8002dda <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	701a      	strb	r2, [r3, #0]
          goto error;
 8002dd8:	e028      	b.n	8002e2c <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1bb      	bne.n	8002d5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	6839      	ldr	r1, [r7, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f916 	bl	800301c <SPI_EndRxTxTransaction>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8002e20:	231f      	movs	r3, #31
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e000      	b.n	8002e2c <HAL_SPI_Transmit+0x2b4>
  }

error:
 8002e2a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	225d      	movs	r2, #93	; 0x5d
 8002e30:	2101      	movs	r1, #1
 8002e32:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	225c      	movs	r2, #92	; 0x5c
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e3c:	231f      	movs	r3, #31
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b008      	add	sp, #32
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e5a:	e050      	b.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	d04d      	beq.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002e68:	f7fe fd6e 	bl	8001948 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d842      	bhi.n	8002efe <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	21e0      	movs	r1, #224	; 0xe0
 8002e84:	438a      	bics	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	2382      	movs	r3, #130	; 0x82
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d113      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x70>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	438a      	bics	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	019b      	lsls	r3, r3, #6
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d110      	bne.n	8002eea <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4914      	ldr	r1, [pc, #80]	; (8002f24 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	0189      	lsls	r1, r1, #6
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	225d      	movs	r2, #93	; 0x5d
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	225c      	movs	r2, #92	; 0x5c
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e00e      	b.n	8002f1c <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	4013      	ands	r3, r2
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d101      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002f12:	2300      	movs	r3, #0
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d1a0      	bne.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b004      	add	sp, #16
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	ffffdfff 	.word	0xffffdfff

08002f28 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002f36:	e062      	b.n	8002ffe <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10c      	bne.n	8002f5c <SPI_WaitFifoStateUntilTimeout+0x34>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	2117      	movs	r1, #23
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	d04d      	beq.n	8002ffe <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <SPI_WaitFifoStateUntilTimeout+0x50>
 8002f68:	f7fe fcee 	bl	8001948 <HAL_GetTick>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d842      	bhi.n	8002ffe <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	21e0      	movs	r1, #224	; 0xe0
 8002f84:	438a      	bics	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2382      	movs	r3, #130	; 0x82
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d113      	bne.n	8002fbc <SPI_WaitFifoStateUntilTimeout+0x94>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d005      	beq.n	8002fac <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	019b      	lsls	r3, r3, #6
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d110      	bne.n	8002fea <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4911      	ldr	r1, [pc, #68]	; (8003018 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0189      	lsls	r1, r1, #6
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	225d      	movs	r2, #93	; 0x5d
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	225c      	movs	r2, #92	; 0x5c
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e008      	b.n	8003010 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d194      	bne.n	8002f38 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b006      	add	sp, #24
 8003016:	bd80      	pop	{r7, pc}
 8003018:	ffffdfff 	.word	0xffffdfff

0800301c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	23c0      	movs	r3, #192	; 0xc0
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	0013      	movs	r3, r2
 8003036:	2200      	movs	r2, #0
 8003038:	f7ff ff76 	bl	8002f28 <SPI_WaitFifoStateUntilTimeout>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d007      	beq.n	8003050 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	2220      	movs	r2, #32
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e027      	b.n	80030a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0013      	movs	r3, r2
 800305a:	2200      	movs	r2, #0
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	f7ff fef5 	bl	8002e4c <SPI_WaitFlagStateUntilTimeout>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d007      	beq.n	8003076 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	2220      	movs	r2, #32
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e014      	b.n	80030a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	23c0      	movs	r3, #192	; 0xc0
 800307a:	00d9      	lsls	r1, r3, #3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	0013      	movs	r3, r2
 8003084:	2200      	movs	r2, #0
 8003086:	f7ff ff4f 	bl	8002f28 <SPI_WaitFifoStateUntilTimeout>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d007      	beq.n	800309e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	2220      	movs	r2, #32
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e000      	b.n	80030a0 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e047      	b.n	800314a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2269      	movs	r2, #105	; 0x69
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2268      	movs	r2, #104	; 0x68
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 ffff 	bl	80040d4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2269      	movs	r2, #105	; 0x69
 80030da:	2124      	movs	r1, #36	; 0x24
 80030dc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	438a      	bics	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 f831 	bl	8003158 <UART_SetConfig>
 80030f6:	0003      	movs	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e024      	b.n	800314a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f9e0 	bl	80034d0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	490e      	ldr	r1, [pc, #56]	; (8003154 <HAL_UART_Init+0xac>)
 800311c:	400a      	ands	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	212a      	movs	r1, #42	; 0x2a
 800312c:	438a      	bics	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2101      	movs	r1, #1
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fa78 	bl	8003638 <UART_CheckIdleState>
 8003148:	0003      	movs	r3, r0
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	ffffb7ff 	.word	0xffffb7ff

08003158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003164:	2317      	movs	r3, #23
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2210      	movs	r2, #16
 800316a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800316c:	230a      	movs	r3, #10
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2200      	movs	r2, #0
 8003172:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8003174:	2314      	movs	r3, #20
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2200      	movs	r2, #0
 800317a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800317c:	2313      	movs	r3, #19
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4ac1      	ldr	r2, [pc, #772]	; (80034a8 <UART_SetConfig+0x350>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4abc      	ldr	r2, [pc, #752]	; (80034ac <UART_SetConfig+0x354>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4ab4      	ldr	r2, [pc, #720]	; (80034b0 <UART_SetConfig+0x358>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4ab0      	ldr	r2, [pc, #704]	; (80034b4 <UART_SetConfig+0x35c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d125      	bne.n	8003242 <UART_SetConfig+0xea>
 80031f6:	4bb0      	ldr	r3, [pc, #704]	; (80034b8 <UART_SetConfig+0x360>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	2203      	movs	r2, #3
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d00f      	beq.n	8003222 <UART_SetConfig+0xca>
 8003202:	d304      	bcc.n	800320e <UART_SetConfig+0xb6>
 8003204:	2b02      	cmp	r3, #2
 8003206:	d011      	beq.n	800322c <UART_SetConfig+0xd4>
 8003208:	2b03      	cmp	r3, #3
 800320a:	d005      	beq.n	8003218 <UART_SetConfig+0xc0>
 800320c:	e013      	b.n	8003236 <UART_SetConfig+0xde>
 800320e:	2317      	movs	r3, #23
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	e064      	b.n	80032e2 <UART_SetConfig+0x18a>
 8003218:	2317      	movs	r3, #23
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e05f      	b.n	80032e2 <UART_SetConfig+0x18a>
 8003222:	2317      	movs	r3, #23
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2204      	movs	r2, #4
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e05a      	b.n	80032e2 <UART_SetConfig+0x18a>
 800322c:	2317      	movs	r3, #23
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2208      	movs	r2, #8
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e055      	b.n	80032e2 <UART_SetConfig+0x18a>
 8003236:	2317      	movs	r3, #23
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2210      	movs	r2, #16
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	e04f      	b.n	80032e2 <UART_SetConfig+0x18a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a9d      	ldr	r2, [pc, #628]	; (80034bc <UART_SetConfig+0x364>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d132      	bne.n	80032b2 <UART_SetConfig+0x15a>
 800324c:	4b9a      	ldr	r3, [pc, #616]	; (80034b8 <UART_SetConfig+0x360>)
 800324e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003250:	23c0      	movs	r3, #192	; 0xc0
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	4013      	ands	r3, r2
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	0252      	lsls	r2, r2, #9
 800325a:	4293      	cmp	r3, r2
 800325c:	d019      	beq.n	8003292 <UART_SetConfig+0x13a>
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	0252      	lsls	r2, r2, #9
 8003262:	4293      	cmp	r3, r2
 8003264:	d802      	bhi.n	800326c <UART_SetConfig+0x114>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <UART_SetConfig+0x126>
 800326a:	e01c      	b.n	80032a6 <UART_SetConfig+0x14e>
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	0292      	lsls	r2, r2, #10
 8003270:	4293      	cmp	r3, r2
 8003272:	d013      	beq.n	800329c <UART_SetConfig+0x144>
 8003274:	22c0      	movs	r2, #192	; 0xc0
 8003276:	0292      	lsls	r2, r2, #10
 8003278:	4293      	cmp	r3, r2
 800327a:	d005      	beq.n	8003288 <UART_SetConfig+0x130>
 800327c:	e013      	b.n	80032a6 <UART_SetConfig+0x14e>
 800327e:	2317      	movs	r3, #23
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e02c      	b.n	80032e2 <UART_SetConfig+0x18a>
 8003288:	2317      	movs	r3, #23
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e027      	b.n	80032e2 <UART_SetConfig+0x18a>
 8003292:	2317      	movs	r3, #23
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2204      	movs	r2, #4
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e022      	b.n	80032e2 <UART_SetConfig+0x18a>
 800329c:	2317      	movs	r3, #23
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2208      	movs	r2, #8
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e01d      	b.n	80032e2 <UART_SetConfig+0x18a>
 80032a6:	2317      	movs	r3, #23
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2210      	movs	r2, #16
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	e017      	b.n	80032e2 <UART_SetConfig+0x18a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a82      	ldr	r2, [pc, #520]	; (80034c0 <UART_SetConfig+0x368>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d104      	bne.n	80032c6 <UART_SetConfig+0x16e>
 80032bc:	2317      	movs	r3, #23
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e00d      	b.n	80032e2 <UART_SetConfig+0x18a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <UART_SetConfig+0x36c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d104      	bne.n	80032da <UART_SetConfig+0x182>
 80032d0:	2317      	movs	r3, #23
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e003      	b.n	80032e2 <UART_SetConfig+0x18a>
 80032da:	2317      	movs	r3, #23
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2210      	movs	r2, #16
 80032e0:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d000      	beq.n	80032f0 <UART_SetConfig+0x198>
 80032ee:	e077      	b.n	80033e0 <UART_SetConfig+0x288>
  {
    switch (clocksource)
 80032f0:	2317      	movs	r3, #23
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d01c      	beq.n	8003334 <UART_SetConfig+0x1dc>
 80032fa:	dc02      	bgt.n	8003302 <UART_SetConfig+0x1aa>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0x1b4>
 8003300:	e04f      	b.n	80033a2 <UART_SetConfig+0x24a>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d027      	beq.n	8003356 <UART_SetConfig+0x1fe>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d039      	beq.n	800337e <UART_SetConfig+0x226>
 800330a:	e04a      	b.n	80033a2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800330c:	f7ff fa84 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8003310:	0003      	movs	r3, r0
 8003312:	005a      	lsls	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	18d2      	adds	r2, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0019      	movs	r1, r3
 8003322:	0010      	movs	r0, r2
 8003324:	f7fc fef0 	bl	8000108 <__udivsi3>
 8003328:	0003      	movs	r3, r0
 800332a:	001a      	movs	r2, r3
 800332c:	2314      	movs	r3, #20
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	801a      	strh	r2, [r3, #0]
        break;
 8003332:	e03b      	b.n	80033ac <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	4a63      	ldr	r2, [pc, #396]	; (80034c8 <UART_SetConfig+0x370>)
 800333c:	189a      	adds	r2, r3, r2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0019      	movs	r1, r3
 8003344:	0010      	movs	r0, r2
 8003346:	f7fc fedf 	bl	8000108 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	001a      	movs	r2, r3
 800334e:	2314      	movs	r3, #20
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	801a      	strh	r2, [r3, #0]
        break;
 8003354:	e02a      	b.n	80033ac <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003356:	f7ff f9d7 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 800335a:	0003      	movs	r3, r0
 800335c:	005a      	lsls	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	18d2      	adds	r2, r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0019      	movs	r1, r3
 800336c:	0010      	movs	r0, r2
 800336e:	f7fc fecb 	bl	8000108 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	001a      	movs	r2, r3
 8003376:	2314      	movs	r3, #20
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	801a      	strh	r2, [r3, #0]
        break;
 800337c:	e016      	b.n	80033ac <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	0252      	lsls	r2, r2, #9
 8003388:	189a      	adds	r2, r3, r2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0019      	movs	r1, r3
 8003390:	0010      	movs	r0, r2
 8003392:	f7fc feb9 	bl	8000108 <__udivsi3>
 8003396:	0003      	movs	r3, r0
 8003398:	001a      	movs	r2, r3
 800339a:	2314      	movs	r3, #20
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	801a      	strh	r2, [r3, #0]
        break;
 80033a0:	e004      	b.n	80033ac <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80033a2:	2313      	movs	r3, #19
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
        break;
 80033aa:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 80033ac:	200a      	movs	r0, #10
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	2414      	movs	r4, #20
 80033b2:	193a      	adds	r2, r7, r4
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	210f      	movs	r1, #15
 80033b8:	438a      	bics	r2, r1
 80033ba:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033bc:	193b      	adds	r3, r7, r4
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	105b      	asrs	r3, r3, #1
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2207      	movs	r2, #7
 80033c6:	4013      	ands	r3, r2
 80033c8:	b299      	uxth	r1, r3
 80033ca:	183b      	adds	r3, r7, r0
 80033cc:	183a      	adds	r2, r7, r0
 80033ce:	8812      	ldrh	r2, [r2, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	183a      	adds	r2, r7, r0
 80033da:	8812      	ldrh	r2, [r2, #0]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	e05b      	b.n	8003498 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 80033e0:	2317      	movs	r3, #23
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d01b      	beq.n	8003422 <UART_SetConfig+0x2ca>
 80033ea:	dc02      	bgt.n	80033f2 <UART_SetConfig+0x29a>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <UART_SetConfig+0x2a4>
 80033f0:	e04d      	b.n	800348e <UART_SetConfig+0x336>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d026      	beq.n	8003444 <UART_SetConfig+0x2ec>
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d037      	beq.n	800346a <UART_SetConfig+0x312>
 80033fa:	e048      	b.n	800348e <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033fc:	f7ff fa0c 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8003400:	0002      	movs	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	18d2      	adds	r2, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0019      	movs	r1, r3
 8003410:	0010      	movs	r0, r2
 8003412:	f7fc fe79 	bl	8000108 <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	b29a      	uxth	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60da      	str	r2, [r3, #12]
        break;
 8003420:	e03a      	b.n	8003498 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <UART_SetConfig+0x374>)
 800342a:	189a      	adds	r2, r3, r2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0019      	movs	r1, r3
 8003432:	0010      	movs	r0, r2
 8003434:	f7fc fe68 	bl	8000108 <__udivsi3>
 8003438:	0003      	movs	r3, r0
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
        break;
 8003442:	e029      	b.n	8003498 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003444:	f7ff f960 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 8003448:	0002      	movs	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	18d2      	adds	r2, r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0019      	movs	r1, r3
 8003458:	0010      	movs	r0, r2
 800345a:	f7fc fe55 	bl	8000108 <__udivsi3>
 800345e:	0003      	movs	r3, r0
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
        break;
 8003468:	e016      	b.n	8003498 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	0212      	lsls	r2, r2, #8
 8003474:	189a      	adds	r2, r3, r2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	0019      	movs	r1, r3
 800347c:	0010      	movs	r0, r2
 800347e:	f7fc fe43 	bl	8000108 <__udivsi3>
 8003482:	0003      	movs	r3, r0
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
        break;
 800348c:	e004      	b.n	8003498 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800348e:	2313      	movs	r3, #19
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
        break;
 8003496:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8003498:	2313      	movs	r3, #19
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]

}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b007      	add	sp, #28
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	efff69f3 	.word	0xefff69f3
 80034ac:	ffffcfff 	.word	0xffffcfff
 80034b0:	fffff4ff 	.word	0xfffff4ff
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40004800 	.word	0x40004800
 80034c4:	40004c00 	.word	0x40004c00
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2201      	movs	r2, #1
 80034de:	4013      	ands	r3, r2
 80034e0:	d00b      	beq.n	80034fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <UART_AdvFeatureConfig+0x144>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2202      	movs	r2, #2
 8003500:	4013      	ands	r3, r2
 8003502:	d00b      	beq.n	800351c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a43      	ldr	r2, [pc, #268]	; (8003618 <UART_AdvFeatureConfig+0x148>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2204      	movs	r2, #4
 8003522:	4013      	ands	r3, r2
 8003524:	d00b      	beq.n	800353e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a3b      	ldr	r2, [pc, #236]	; (800361c <UART_AdvFeatureConfig+0x14c>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2208      	movs	r2, #8
 8003544:	4013      	ands	r3, r2
 8003546:	d00b      	beq.n	8003560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a34      	ldr	r2, [pc, #208]	; (8003620 <UART_AdvFeatureConfig+0x150>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	2210      	movs	r2, #16
 8003566:	4013      	ands	r3, r2
 8003568:	d00b      	beq.n	8003582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <UART_AdvFeatureConfig+0x154>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2220      	movs	r2, #32
 8003588:	4013      	ands	r3, r2
 800358a:	d00b      	beq.n	80035a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a25      	ldr	r2, [pc, #148]	; (8003628 <UART_AdvFeatureConfig+0x158>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	4013      	ands	r3, r2
 80035ac:	d01d      	beq.n	80035ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <UART_AdvFeatureConfig+0x15c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	0019      	movs	r1, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	035b      	lsls	r3, r3, #13
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10b      	bne.n	80035ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4a15      	ldr	r2, [pc, #84]	; (8003630 <UART_AdvFeatureConfig+0x160>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	4013      	ands	r3, r2
 80035f2:	d00b      	beq.n	800360c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <UART_AdvFeatureConfig+0x164>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
  }
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fffdffff 	.word	0xfffdffff
 8003618:	fffeffff 	.word	0xfffeffff
 800361c:	fffbffff 	.word	0xfffbffff
 8003620:	ffff7fff 	.word	0xffff7fff
 8003624:	ffffefff 	.word	0xffffefff
 8003628:	ffffdfff 	.word	0xffffdfff
 800362c:	ffefffff 	.word	0xffefffff
 8003630:	ff9fffff 	.word	0xff9fffff
 8003634:	fff7ffff 	.word	0xfff7ffff

08003638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800364a:	f7fe f97d 	bl	8001948 <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a21      	ldr	r2, [pc, #132]	; (80036dc <UART_CheckIdleState+0xa4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d004      	beq.n	8003666 <UART_CheckIdleState+0x2e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <UART_CheckIdleState+0xa8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d129      	bne.n	80036ba <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2208      	movs	r2, #8
 800366e:	4013      	ands	r3, r2
 8003670:	2b08      	cmp	r3, #8
 8003672:	d10d      	bne.n	8003690 <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	0399      	lsls	r1, r3, #14
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <UART_CheckIdleState+0xac>)
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	0013      	movs	r3, r2
 8003682:	2200      	movs	r2, #0
 8003684:	f000 f830 	bl	80036e8 <UART_WaitOnFlagUntilTimeout>
 8003688:	1e03      	subs	r3, r0, #0
 800368a:	d001      	beq.n	8003690 <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e021      	b.n	80036d4 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2204      	movs	r2, #4
 8003698:	4013      	ands	r3, r2
 800369a:	2b04      	cmp	r3, #4
 800369c:	d10d      	bne.n	80036ba <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	03d9      	lsls	r1, r3, #15
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <UART_CheckIdleState+0xac>)
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	0013      	movs	r3, r2
 80036ac:	2200      	movs	r2, #0
 80036ae:	f000 f81b 	bl	80036e8 <UART_WaitOnFlagUntilTimeout>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e00c      	b.n	80036d4 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2269      	movs	r2, #105	; 0x69
 80036be:	2120      	movs	r1, #32
 80036c0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	226a      	movs	r2, #106	; 0x6a
 80036c6:	2120      	movs	r1, #32
 80036c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2268      	movs	r2, #104	; 0x68
 80036ce:	2100      	movs	r1, #0
 80036d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40013800 	.word	0x40013800
 80036e0:	40004400 	.word	0x40004400
 80036e4:	01ffffff 	.word	0x01ffffff

080036e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f8:	e02b      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3301      	adds	r3, #1
 80036fe:	d028      	beq.n	8003752 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003706:	f7fe f91f 	bl	8001948 <HAL_GetTick>
 800370a:	0002      	movs	r2, r0
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	429a      	cmp	r2, r3
 8003714:	d21d      	bcs.n	8003752 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <UART_WaitOnFlagUntilTimeout+0x94>)
 8003722:	400a      	ands	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	438a      	bics	r2, r1
 8003734:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2269      	movs	r2, #105	; 0x69
 800373a:	2120      	movs	r1, #32
 800373c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	226a      	movs	r2, #106	; 0x6a
 8003742:	2120      	movs	r1, #32
 8003744:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2268      	movs	r2, #104	; 0x68
 800374a:	2100      	movs	r1, #0
 800374c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00f      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	425a      	negs	r2, r3
 8003762:	4153      	adcs	r3, r2
 8003764:	b2db      	uxtb	r3, r3
 8003766:	001a      	movs	r2, r3
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d0c4      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b004      	add	sp, #16
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	fffffe5f 	.word	0xfffffe5f

08003780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003786:	f7fe f8a3 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800378a:	f000 fa7f 	bl	8003c8c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800378e:	f000 fb69 	bl	8003e64 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8003792:	f000 fb33 	bl	8003dfc <_ZL19MX_USART2_UART_Initv>
  MX_SPI2_Init();
 8003796:	f000 fad9 	bl	8003d4c <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
  TFT_GFX tftDisplay(hspi2.Instance);
 800379a:	4bed      	ldr	r3, [pc, #948]	; (8003b50 <main+0x3d0>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	003b      	movs	r3, r7
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fd40 	bl	8004228 <_ZN7TFT_GFXC1EP11SPI_TypeDef>
  tftDisplay.setRotation(3);
 80037a8:	003b      	movs	r3, r7
 80037aa:	2103      	movs	r1, #3
 80037ac:	0018      	movs	r0, r3
 80037ae:	f001 f9a1 	bl	8004af4 <_ZN7TFT_GFX11setRotationEh>
  //Set background to black
  tftDisplay.setAddrWindow(0, 0, tftDisplay.width(), tftDisplay.height());
 80037b2:	003b      	movs	r3, r7
 80037b4:	0018      	movs	r0, r3
 80037b6:	f001 f9ef 	bl	8004b98 <_ZN7TFT_GFX5widthEv>
 80037ba:	0003      	movs	r3, r0
 80037bc:	001c      	movs	r4, r3
 80037be:	003b      	movs	r3, r7
 80037c0:	0018      	movs	r0, r3
 80037c2:	f001 f9f3 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 80037c6:	0003      	movs	r3, r0
 80037c8:	0038      	movs	r0, r7
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	0023      	movs	r3, r4
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	f000 fd3d 	bl	8004250 <_ZN7TFT_GFX13setAddrWindowEtttt>
  tftDisplay.writeColor(ILI9341_SADDLEBROWN, tftDisplay.height() * tftDisplay.width());
 80037d6:	003b      	movs	r3, r7
 80037d8:	0018      	movs	r0, r3
 80037da:	f001 f9e7 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 80037de:	0003      	movs	r3, r0
 80037e0:	001c      	movs	r4, r3
 80037e2:	003b      	movs	r3, r7
 80037e4:	0018      	movs	r0, r3
 80037e6:	f001 f9d7 	bl	8004b98 <_ZN7TFT_GFX5widthEv>
 80037ea:	0003      	movs	r3, r0
 80037ec:	4363      	muls	r3, r4
 80037ee:	001a      	movs	r2, r3
 80037f0:	49d8      	ldr	r1, [pc, #864]	; (8003b54 <main+0x3d4>)
 80037f2:	003b      	movs	r3, r7
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fee9 	bl	80045cc <_ZN7TFT_GFX10writeColorEtm>
  //Draw on the background
  uint16_t x_inc = 20;
 80037fa:	210e      	movs	r1, #14
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2214      	movs	r2, #20
 8003800:	801a      	strh	r2, [r3, #0]
  int16_t init_x = 30;
 8003802:	250c      	movs	r5, #12
 8003804:	197b      	adds	r3, r7, r5
 8003806:	221e      	movs	r2, #30
 8003808:	801a      	strh	r2, [r3, #0]
  uint16_t displayColor = ILI9341_GREENYELLOW;
 800380a:	260a      	movs	r6, #10
 800380c:	19bb      	adds	r3, r7, r6
 800380e:	4ad2      	ldr	r2, [pc, #840]	; (8003b58 <main+0x3d8>)
 8003810:	801a      	strh	r2, [r3, #0]
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'A', displayColor, displayColor, 5, 5);
 8003812:	197b      	adds	r3, r7, r5
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	187b      	adds	r3, r7, r1
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	18d3      	adds	r3, r2, r3
 800381c:	b29a      	uxth	r2, r3
 800381e:	197b      	adds	r3, r7, r5
 8003820:	801a      	strh	r2, [r3, #0]
 8003822:	003b      	movs	r3, r7
 8003824:	0018      	movs	r0, r3
 8003826:	f001 f9c1 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 800382a:	0003      	movs	r3, r0
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd feb1 	bl	8001594 <__aeabi_i2d>
 8003832:	2200      	movs	r2, #0
 8003834:	4bc9      	ldr	r3, [pc, #804]	; (8003b5c <main+0x3dc>)
 8003836:	f7fd f82d 	bl	8000894 <__aeabi_ddiv>
 800383a:	0003      	movs	r3, r0
 800383c:	000c      	movs	r4, r1
 800383e:	0018      	movs	r0, r3
 8003840:	0021      	movs	r1, r4
 8003842:	f7fd fe71 	bl	8001528 <__aeabi_d2iz>
 8003846:	0003      	movs	r3, r0
 8003848:	b21a      	sxth	r2, r3
 800384a:	197b      	adds	r3, r7, r5
 800384c:	2100      	movs	r1, #0
 800384e:	5e59      	ldrsh	r1, [r3, r1]
 8003850:	0038      	movs	r0, r7
 8003852:	2305      	movs	r3, #5
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	2305      	movs	r3, #5
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	19bb      	adds	r3, r7, r6
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	19bb      	adds	r3, r7, r6
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2341      	movs	r3, #65	; 0x41
 8003868:	f000 ff60 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'l', displayColor, displayColor, 5, 5);
 800386c:	197b      	adds	r3, r7, r5
 800386e:	881a      	ldrh	r2, [r3, #0]
 8003870:	210e      	movs	r1, #14
 8003872:	187b      	adds	r3, r7, r1
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	18d3      	adds	r3, r2, r3
 8003878:	b29a      	uxth	r2, r3
 800387a:	197b      	adds	r3, r7, r5
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	003b      	movs	r3, r7
 8003880:	0018      	movs	r0, r3
 8003882:	f001 f993 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003886:	0003      	movs	r3, r0
 8003888:	0018      	movs	r0, r3
 800388a:	f7fd fe83 	bl	8001594 <__aeabi_i2d>
 800388e:	2200      	movs	r2, #0
 8003890:	4bb2      	ldr	r3, [pc, #712]	; (8003b5c <main+0x3dc>)
 8003892:	f7fc ffff 	bl	8000894 <__aeabi_ddiv>
 8003896:	0003      	movs	r3, r0
 8003898:	000c      	movs	r4, r1
 800389a:	0018      	movs	r0, r3
 800389c:	0021      	movs	r1, r4
 800389e:	f7fd fe43 	bl	8001528 <__aeabi_d2iz>
 80038a2:	0003      	movs	r3, r0
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	197b      	adds	r3, r7, r5
 80038a8:	2100      	movs	r1, #0
 80038aa:	5e59      	ldrsh	r1, [r3, r1]
 80038ac:	0038      	movs	r0, r7
 80038ae:	2305      	movs	r3, #5
 80038b0:	9303      	str	r3, [sp, #12]
 80038b2:	2305      	movs	r3, #5
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	19bb      	adds	r3, r7, r6
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	19bb      	adds	r3, r7, r6
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	236c      	movs	r3, #108	; 0x6c
 80038c4:	f000 ff32 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'e', displayColor, displayColor, 5, 5);
 80038c8:	197b      	adds	r3, r7, r5
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	210e      	movs	r1, #14
 80038ce:	187b      	adds	r3, r7, r1
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	18d3      	adds	r3, r2, r3
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	197b      	adds	r3, r7, r5
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	003b      	movs	r3, r7
 80038dc:	0018      	movs	r0, r3
 80038de:	f001 f965 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 80038e2:	0003      	movs	r3, r0
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fd fe55 	bl	8001594 <__aeabi_i2d>
 80038ea:	2200      	movs	r2, #0
 80038ec:	4b9b      	ldr	r3, [pc, #620]	; (8003b5c <main+0x3dc>)
 80038ee:	f7fc ffd1 	bl	8000894 <__aeabi_ddiv>
 80038f2:	0003      	movs	r3, r0
 80038f4:	000c      	movs	r4, r1
 80038f6:	0018      	movs	r0, r3
 80038f8:	0021      	movs	r1, r4
 80038fa:	f7fd fe15 	bl	8001528 <__aeabi_d2iz>
 80038fe:	0003      	movs	r3, r0
 8003900:	b21a      	sxth	r2, r3
 8003902:	197b      	adds	r3, r7, r5
 8003904:	2100      	movs	r1, #0
 8003906:	5e59      	ldrsh	r1, [r3, r1]
 8003908:	0038      	movs	r0, r7
 800390a:	2305      	movs	r3, #5
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	2305      	movs	r3, #5
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	19bb      	adds	r3, r7, r6
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	19bb      	adds	r3, r7, r6
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2365      	movs	r3, #101	; 0x65
 8003920:	f000 ff04 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'x', displayColor, displayColor, 5, 5);
 8003924:	197b      	adds	r3, r7, r5
 8003926:	881a      	ldrh	r2, [r3, #0]
 8003928:	210e      	movs	r1, #14
 800392a:	187b      	adds	r3, r7, r1
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	18d3      	adds	r3, r2, r3
 8003930:	b29a      	uxth	r2, r3
 8003932:	197b      	adds	r3, r7, r5
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	003b      	movs	r3, r7
 8003938:	0018      	movs	r0, r3
 800393a:	f001 f937 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 800393e:	0003      	movs	r3, r0
 8003940:	0018      	movs	r0, r3
 8003942:	f7fd fe27 	bl	8001594 <__aeabi_i2d>
 8003946:	2200      	movs	r2, #0
 8003948:	4b84      	ldr	r3, [pc, #528]	; (8003b5c <main+0x3dc>)
 800394a:	f7fc ffa3 	bl	8000894 <__aeabi_ddiv>
 800394e:	0003      	movs	r3, r0
 8003950:	000c      	movs	r4, r1
 8003952:	0018      	movs	r0, r3
 8003954:	0021      	movs	r1, r4
 8003956:	f7fd fde7 	bl	8001528 <__aeabi_d2iz>
 800395a:	0003      	movs	r3, r0
 800395c:	b21a      	sxth	r2, r3
 800395e:	197b      	adds	r3, r7, r5
 8003960:	2100      	movs	r1, #0
 8003962:	5e59      	ldrsh	r1, [r3, r1]
 8003964:	0038      	movs	r0, r7
 8003966:	2305      	movs	r3, #5
 8003968:	9303      	str	r3, [sp, #12]
 800396a:	2305      	movs	r3, #5
 800396c:	9302      	str	r3, [sp, #8]
 800396e:	19bb      	adds	r3, r7, r6
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	19bb      	adds	r3, r7, r6
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2378      	movs	r3, #120	; 0x78
 800397c:	f000 fed6 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, ' ', displayColor, displayColor, 5, 5);
 8003980:	197b      	adds	r3, r7, r5
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	210e      	movs	r1, #14
 8003986:	187b      	adds	r3, r7, r1
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	18d3      	adds	r3, r2, r3
 800398c:	b29a      	uxth	r2, r3
 800398e:	197b      	adds	r3, r7, r5
 8003990:	801a      	strh	r2, [r3, #0]
 8003992:	003b      	movs	r3, r7
 8003994:	0018      	movs	r0, r3
 8003996:	f001 f909 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 800399a:	0003      	movs	r3, r0
 800399c:	0018      	movs	r0, r3
 800399e:	f7fd fdf9 	bl	8001594 <__aeabi_i2d>
 80039a2:	2200      	movs	r2, #0
 80039a4:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <main+0x3dc>)
 80039a6:	f7fc ff75 	bl	8000894 <__aeabi_ddiv>
 80039aa:	0003      	movs	r3, r0
 80039ac:	000c      	movs	r4, r1
 80039ae:	0018      	movs	r0, r3
 80039b0:	0021      	movs	r1, r4
 80039b2:	f7fd fdb9 	bl	8001528 <__aeabi_d2iz>
 80039b6:	0003      	movs	r3, r0
 80039b8:	b21a      	sxth	r2, r3
 80039ba:	197b      	adds	r3, r7, r5
 80039bc:	2100      	movs	r1, #0
 80039be:	5e59      	ldrsh	r1, [r3, r1]
 80039c0:	0038      	movs	r0, r7
 80039c2:	2305      	movs	r3, #5
 80039c4:	9303      	str	r3, [sp, #12]
 80039c6:	2305      	movs	r3, #5
 80039c8:	9302      	str	r3, [sp, #8]
 80039ca:	19bb      	adds	r3, r7, r6
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	19bb      	adds	r3, r7, r6
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2320      	movs	r3, #32
 80039d8:	f000 fea8 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'i', displayColor, displayColor, 5, 5);
 80039dc:	197b      	adds	r3, r7, r5
 80039de:	881a      	ldrh	r2, [r3, #0]
 80039e0:	210e      	movs	r1, #14
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	18d3      	adds	r3, r2, r3
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	197b      	adds	r3, r7, r5
 80039ec:	801a      	strh	r2, [r3, #0]
 80039ee:	003b      	movs	r3, r7
 80039f0:	0018      	movs	r0, r3
 80039f2:	f001 f8db 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 80039f6:	0003      	movs	r3, r0
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7fd fdcb 	bl	8001594 <__aeabi_i2d>
 80039fe:	2200      	movs	r2, #0
 8003a00:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <main+0x3dc>)
 8003a02:	f7fc ff47 	bl	8000894 <__aeabi_ddiv>
 8003a06:	0003      	movs	r3, r0
 8003a08:	000c      	movs	r4, r1
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	0021      	movs	r1, r4
 8003a0e:	f7fd fd8b 	bl	8001528 <__aeabi_d2iz>
 8003a12:	0003      	movs	r3, r0
 8003a14:	b21a      	sxth	r2, r3
 8003a16:	197b      	adds	r3, r7, r5
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5e59      	ldrsh	r1, [r3, r1]
 8003a1c:	0038      	movs	r0, r7
 8003a1e:	2305      	movs	r3, #5
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	2305      	movs	r3, #5
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	19bb      	adds	r3, r7, r6
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	19bb      	adds	r3, r7, r6
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2369      	movs	r3, #105	; 0x69
 8003a34:	f000 fe7a 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, tftDisplay.height()/4.0, 'x', displayColor, displayColor, 5, 5);
 8003a38:	197b      	adds	r3, r7, r5
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	210e      	movs	r1, #14
 8003a3e:	187b      	adds	r3, r7, r1
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	197b      	adds	r3, r7, r5
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	003b      	movs	r3, r7
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f001 f8ad 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003a52:	0003      	movs	r3, r0
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7fd fd9d 	bl	8001594 <__aeabi_i2d>
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <main+0x3dc>)
 8003a5e:	f7fc ff19 	bl	8000894 <__aeabi_ddiv>
 8003a62:	0003      	movs	r3, r0
 8003a64:	000c      	movs	r4, r1
 8003a66:	0018      	movs	r0, r3
 8003a68:	0021      	movs	r1, r4
 8003a6a:	f7fd fd5d 	bl	8001528 <__aeabi_d2iz>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	b21a      	sxth	r2, r3
 8003a72:	197b      	adds	r3, r7, r5
 8003a74:	2100      	movs	r1, #0
 8003a76:	5e59      	ldrsh	r1, [r3, r1]
 8003a78:	0038      	movs	r0, r7
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	2305      	movs	r3, #5
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	19bb      	adds	r3, r7, r6
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	19bb      	adds	r3, r7, r6
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2378      	movs	r3, #120	; 0x78
 8003a90:	f000 fe4c 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  x_inc = 60;
 8003a94:	210e      	movs	r1, #14
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	223c      	movs	r2, #60	; 0x3c
 8003a9a:	801a      	strh	r2, [r3, #0]
  init_x = -20;
 8003a9c:	197b      	adds	r3, r7, r5
 8003a9e:	2214      	movs	r2, #20
 8003aa0:	4252      	negs	r2, r2
 8003aa2:	801a      	strh	r2, [r3, #0]
  tftDisplay.drawChar(init_x += x_inc, 2*(tftDisplay.height()/4.0), 'G', displayColor, displayColor, 10, 10);
 8003aa4:	197b      	adds	r3, r7, r5
 8003aa6:	881a      	ldrh	r2, [r3, #0]
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	18d3      	adds	r3, r2, r3
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	197b      	adds	r3, r7, r5
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	003b      	movs	r3, r7
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f001 f878 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003abc:	0003      	movs	r3, r0
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7fd fd68 	bl	8001594 <__aeabi_i2d>
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <main+0x3dc>)
 8003ac8:	f7fc fee4 	bl	8000894 <__aeabi_ddiv>
 8003acc:	0003      	movs	r3, r0
 8003ace:	000c      	movs	r4, r1
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	0021      	movs	r1, r4
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	000b      	movs	r3, r1
 8003ad8:	f7fc fbc0 	bl	800025c <__aeabi_dadd>
 8003adc:	0003      	movs	r3, r0
 8003ade:	000c      	movs	r4, r1
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	0021      	movs	r1, r4
 8003ae4:	f7fd fd20 	bl	8001528 <__aeabi_d2iz>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	b21a      	sxth	r2, r3
 8003aec:	197b      	adds	r3, r7, r5
 8003aee:	2100      	movs	r1, #0
 8003af0:	5e59      	ldrsh	r1, [r3, r1]
 8003af2:	0038      	movs	r0, r7
 8003af4:	230a      	movs	r3, #10
 8003af6:	9303      	str	r3, [sp, #12]
 8003af8:	230a      	movs	r3, #10
 8003afa:	9302      	str	r3, [sp, #8]
 8003afc:	19bb      	adds	r3, r7, r6
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	19bb      	adds	r3, r7, r6
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2347      	movs	r3, #71	; 0x47
 8003b0a:	f000 fe0f 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, 2*(tftDisplay.height()/4.0), 'A', displayColor, displayColor, 10, 10);
 8003b0e:	197b      	adds	r3, r7, r5
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	210e      	movs	r1, #14
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	197b      	adds	r3, r7, r5
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	003b      	movs	r3, r7
 8003b22:	0018      	movs	r0, r3
 8003b24:	f001 f842 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7fd fd32 	bl	8001594 <__aeabi_i2d>
 8003b30:	2200      	movs	r2, #0
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <main+0x3dc>)
 8003b34:	f7fc feae 	bl	8000894 <__aeabi_ddiv>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	000c      	movs	r4, r1
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	0021      	movs	r1, r4
 8003b40:	0002      	movs	r2, r0
 8003b42:	000b      	movs	r3, r1
 8003b44:	f7fc fb8a 	bl	800025c <__aeabi_dadd>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	000c      	movs	r4, r1
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	e007      	b.n	8003b60 <main+0x3e0>
 8003b50:	20000020 	.word	0x20000020
 8003b54:	00008a22 	.word	0x00008a22
 8003b58:	ffffafe5 	.word	0xffffafe5
 8003b5c:	40100000 	.word	0x40100000
 8003b60:	0021      	movs	r1, r4
 8003b62:	f7fd fce1 	bl	8001528 <__aeabi_d2iz>
 8003b66:	0003      	movs	r3, r0
 8003b68:	b21a      	sxth	r2, r3
 8003b6a:	197b      	adds	r3, r7, r5
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5e59      	ldrsh	r1, [r3, r1]
 8003b70:	0038      	movs	r0, r7
 8003b72:	230a      	movs	r3, #10
 8003b74:	9303      	str	r3, [sp, #12]
 8003b76:	230a      	movs	r3, #10
 8003b78:	9302      	str	r3, [sp, #8]
 8003b7a:	19bb      	adds	r3, r7, r6
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	19bb      	adds	r3, r7, r6
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2341      	movs	r3, #65	; 0x41
 8003b88:	f000 fdd0 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>
  tftDisplay.drawChar(init_x += x_inc, 2*(tftDisplay.height()/4.0), 'Y', displayColor, displayColor, 10, 10);
 8003b8c:	197b      	adds	r3, r7, r5
 8003b8e:	881a      	ldrh	r2, [r3, #0]
 8003b90:	210e      	movs	r1, #14
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	18d3      	adds	r3, r2, r3
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	197b      	adds	r3, r7, r5
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	003b      	movs	r3, r7
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f001 f803 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fd fcf3 	bl	8001594 <__aeabi_i2d>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <main+0x504>)
 8003bb2:	f7fc fe6f 	bl	8000894 <__aeabi_ddiv>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	000c      	movs	r4, r1
 8003bba:	0018      	movs	r0, r3
 8003bbc:	0021      	movs	r1, r4
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	000b      	movs	r3, r1
 8003bc2:	f7fc fb4b 	bl	800025c <__aeabi_dadd>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	000c      	movs	r4, r1
 8003bca:	0018      	movs	r0, r3
 8003bcc:	0021      	movs	r1, r4
 8003bce:	f7fd fcab 	bl	8001528 <__aeabi_d2iz>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	b21a      	sxth	r2, r3
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5e59      	ldrsh	r1, [r3, r1]
 8003bdc:	0038      	movs	r0, r7
 8003bde:	230a      	movs	r3, #10
 8003be0:	9303      	str	r3, [sp, #12]
 8003be2:	230a      	movs	r3, #10
 8003be4:	9302      	str	r3, [sp, #8]
 8003be6:	19bb      	adds	r3, r7, r6
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	19bb      	adds	r3, r7, r6
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2359      	movs	r3, #89	; 0x59
 8003bf4:	f000 fd9a 	bl	800472c <_ZN7TFT_GFX8drawCharEsshtthh>

  //tftDisplay.writeFastVLine(tftDisplay.width()/2.0, 0, tftDisplay.height(), ILI9341_CYAN);
  tftDisplay.setAddrWindow(tftDisplay.width()/2.0, 0, 10, tftDisplay.height());
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 ffcc 	bl	8004b98 <_ZN7TFT_GFX5widthEv>
 8003c00:	0003      	movs	r3, r0
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7fd fcc6 	bl	8001594 <__aeabi_i2d>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	05db      	lsls	r3, r3, #23
 8003c0e:	f7fc fe41 	bl	8000894 <__aeabi_ddiv>
 8003c12:	0003      	movs	r3, r0
 8003c14:	000c      	movs	r4, r1
 8003c16:	0018      	movs	r0, r3
 8003c18:	0021      	movs	r1, r4
 8003c1a:	f7fc fb01 	bl	8000220 <__aeabi_d2uiz>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	b29c      	uxth	r4, r3
 8003c22:	003b      	movs	r3, r7
 8003c24:	0018      	movs	r0, r3
 8003c26:	f000 ffc1 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	0038      	movs	r0, r7
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	230a      	movs	r3, #10
 8003c32:	2200      	movs	r2, #0
 8003c34:	0021      	movs	r1, r4
 8003c36:	f000 fb0b 	bl	8004250 <_ZN7TFT_GFX13setAddrWindowEtttt>
  tftDisplay.writeFillRect(tftDisplay.width()/2.0, 0, 10, tftDisplay.height(), ILI9341_CYAN);
 8003c3a:	003b      	movs	r3, r7
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 ffab 	bl	8004b98 <_ZN7TFT_GFX5widthEv>
 8003c42:	0003      	movs	r3, r0
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fd fca5 	bl	8001594 <__aeabi_i2d>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	05db      	lsls	r3, r3, #23
 8003c50:	f7fc fe20 	bl	8000894 <__aeabi_ddiv>
 8003c54:	0003      	movs	r3, r0
 8003c56:	000c      	movs	r4, r1
 8003c58:	0018      	movs	r0, r3
 8003c5a:	0021      	movs	r1, r4
 8003c5c:	f7fd fc64 	bl	8001528 <__aeabi_d2iz>
 8003c60:	0003      	movs	r3, r0
 8003c62:	b21c      	sxth	r4, r3
 8003c64:	003b      	movs	r3, r7
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 ffa0 	bl	8004bac <_ZN7TFT_GFX6heightEv>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	0038      	movs	r0, r7
 8003c72:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <main+0x508>)
 8003c74:	9201      	str	r2, [sp, #4]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	230a      	movs	r3, #10
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	0021      	movs	r1, r4
 8003c7e:	f000 fb8e 	bl	800439e <_ZN7TFT_GFX13writeFillRectEsssst>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <main+0x502>
 8003c84:	40100000 	.word	0x40100000
 8003c88:	000007ff 	.word	0x000007ff

08003c8c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b099      	sub	sp, #100	; 0x64
 8003c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c92:	242c      	movs	r4, #44	; 0x2c
 8003c94:	193b      	adds	r3, r7, r4
 8003c96:	0018      	movs	r0, r3
 8003c98:	2334      	movs	r3, #52	; 0x34
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	f001 fa67 	bl	8005170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca2:	231c      	movs	r3, #28
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	2310      	movs	r3, #16
 8003caa:	001a      	movs	r2, r3
 8003cac:	2100      	movs	r1, #0
 8003cae:	f001 fa5f 	bl	8005170 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cb2:	003b      	movs	r3, r7
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	231c      	movs	r3, #28
 8003cb8:	001a      	movs	r2, r3
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f001 fa58 	bl	8005170 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8003cc0:	193b      	adds	r3, r7, r4
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	2201      	movs	r2, #1
 8003cca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ccc:	193b      	adds	r3, r7, r4
 8003cce:	2200      	movs	r2, #0
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cd2:	193b      	adds	r3, r7, r4
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fe f8ad 	bl	8001e34 <HAL_RCC_OscConfig>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	1e5a      	subs	r2, r3, #1
 8003cde:	4193      	sbcs	r3, r2
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8003ce6:	f000 f955 	bl	8003f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cea:	211c      	movs	r1, #28
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2207      	movs	r2, #7
 8003cf0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2200      	movs	r2, #0
 8003d02:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2101      	movs	r1, #1
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fe fbf3 	bl	80024f4 <HAL_RCC_ClockConfig>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	4193      	sbcs	r3, r2
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8003d1a:	f000 f93b 	bl	8003f94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d1e:	003b      	movs	r3, r7
 8003d20:	2202      	movs	r2, #2
 8003d22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d24:	003b      	movs	r3, r7
 8003d26:	2200      	movs	r2, #0
 8003d28:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fe fd89 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 8003d32:	0003      	movs	r3, r0
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	4193      	sbcs	r3, r2
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8003d3e:	f000 f929 	bl	8003f94 <Error_Handler>
  }
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b019      	add	sp, #100	; 0x64
 8003d48:	bd90      	pop	{r4, r7, pc}
	...

08003d4c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d52:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d54:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <_ZL12MX_SPI2_Initv+0xac>)
 8003d56:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d5a:	2282      	movs	r2, #130	; 0x82
 8003d5c:	0052      	lsls	r2, r2, #1
 8003d5e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d68:	22e0      	movs	r2, #224	; 0xe0
 8003d6a:	00d2      	lsls	r2, r2, #3
 8003d6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d70:	2202      	movs	r2, #2
 8003d72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	0092      	lsls	r2, r2, #2
 8003d80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d84:	2210      	movs	r2, #16
 8003d86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d88:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d8e:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7fe fe48 	bl	8002a44 <HAL_SPI_Init>
 8003db4:	0003      	movs	r3, r0
 8003db6:	1e5a      	subs	r2, r3, #1
 8003db8:	4193      	sbcs	r3, r2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8003dc0:	f000 f8e8 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  //Send 1 random byte to reset the sck
  uint8_t temp = 0;
 8003dc4:	1dfb      	adds	r3, r7, #7
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi2, &temp, sizeof(temp), HAL_MAX_DELAY);
 8003dca:	2301      	movs	r3, #1
 8003dcc:	425b      	negs	r3, r3
 8003dce:	1df9      	adds	r1, r7, #7
 8003dd0:	4808      	ldr	r0, [pc, #32]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f7fe fed0 	bl	8002b78 <HAL_SPI_Transmit>
  resetTftBoard();
 8003dd8:	f000 fef2 	bl	8004bc0 <resetTftBoard>
  pullCSLow();
 8003ddc:	f000 ff0c 	bl	8004bf8 <pullCSLow>
  ili9341_hspi_init(hspi2.Instance);
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <_ZL12MX_SPI2_Initv+0xa8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 ffaa 	bl	8004d3e <ili9341_hspi_init>
  /* USER CODE END SPI2_Init 2 */

}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b002      	add	sp, #8
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	20000020 	.word	0x20000020
 8003df8:	40003800 	.word	0x40003800

08003dfc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <_ZL19MX_USART2_UART_Initv+0x64>)
 8003e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e08:	2296      	movs	r2, #150	; 0x96
 8003e0a:	0212      	lsls	r2, r2, #8
 8003e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e20:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <_ZL19MX_USART2_UART_Initv+0x60>)
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff f931 	bl	80030a8 <HAL_UART_Init>
 8003e46:	0003      	movs	r3, r0
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	4193      	sbcs	r3, r2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8003e52:	f000 f89f 	bl	8003f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000084 	.word	0x20000084
 8003e60:	40004400 	.word	0x40004400

08003e64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b08b      	sub	sp, #44	; 0x2c
 8003e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6a:	2414      	movs	r4, #20
 8003e6c:	193b      	adds	r3, r7, r4
 8003e6e:	0018      	movs	r0, r3
 8003e70:	2314      	movs	r3, #20
 8003e72:	001a      	movs	r2, r3
 8003e74:	2100      	movs	r1, #0
 8003e76:	f001 f97b 	bl	8005170 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	0309      	lsls	r1, r1, #12
 8003e84:	430a      	orrs	r2, r1
 8003e86:	615a      	str	r2, [r3, #20]
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	031b      	lsls	r3, r3, #12
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	03c9      	lsls	r1, r1, #15
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	615a      	str	r2, [r3, #20]
 8003ea4:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	03db      	lsls	r3, r3, #15
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	4b35      	ldr	r3, [pc, #212]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003eb8:	2180      	movs	r1, #128	; 0x80
 8003eba:	0289      	lsls	r1, r1, #10
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	615a      	str	r2, [r3, #20]
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	029b      	lsls	r3, r3, #10
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	02c9      	lsls	r1, r1, #11
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	615a      	str	r2, [r3, #20]
 8003edc:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <_ZL12MX_GPIO_Initv+0x124>)
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	02db      	lsls	r3, r3, #11
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_D_C_GPIO_Port, TFT_D_C_Pin, GPIO_PIN_RESET);
 8003eea:	4b28      	ldr	r3, [pc, #160]	; (8003f8c <_ZL12MX_GPIO_Initv+0x128>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	2101      	movs	r1, #1
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fd ff81 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <_ZL12MX_GPIO_Initv+0x128>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	2102      	movs	r1, #2
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fd ff7b 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003f02:	2390      	movs	r3, #144	; 0x90
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	2200      	movs	r2, #0
 8003f08:	2121      	movs	r1, #33	; 0x21
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fd ff74 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	0192      	lsls	r2, r2, #6
 8003f16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <_ZL12MX_GPIO_Initv+0x12c>)
 8003f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	193b      	adds	r3, r7, r4
 8003f20:	2200      	movs	r2, #0
 8003f22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f24:	193b      	adds	r3, r7, r4
 8003f26:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <_ZL12MX_GPIO_Initv+0x128>)
 8003f28:	0019      	movs	r1, r3
 8003f2a:	0010      	movs	r0, r2
 8003f2c:	f7fd fde8 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_D_C_Pin SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = TFT_D_C_Pin|SPI2_NSS_Pin;
 8003f30:	0021      	movs	r1, r4
 8003f32:	187b      	adds	r3, r7, r1
 8003f34:	2203      	movs	r2, #3
 8003f36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	2203      	movs	r2, #3
 8003f48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4a:	000c      	movs	r4, r1
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	4a0f      	ldr	r2, [pc, #60]	; (8003f8c <_ZL12MX_GPIO_Initv+0x128>)
 8003f50:	0019      	movs	r1, r3
 8003f52:	0010      	movs	r0, r2
 8003f54:	f7fd fdd4 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|LD2_Pin;
 8003f58:	0021      	movs	r1, r4
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	2221      	movs	r2, #33	; 0x21
 8003f5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	2201      	movs	r2, #1
 8003f64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	2200      	movs	r2, #0
 8003f6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6c:	187b      	adds	r3, r7, r1
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f72:	187a      	adds	r2, r7, r1
 8003f74:	2390      	movs	r3, #144	; 0x90
 8003f76:	05db      	lsls	r3, r3, #23
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7fd fdc0 	bl	8001b00 <HAL_GPIO_Init>

}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b00b      	add	sp, #44	; 0x2c
 8003f86:	bd90      	pop	{r4, r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	48000800 	.word	0x48000800
 8003f90:	10210000 	.word	0x10210000

08003f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_MspInit+0x44>)
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HAL_MspInit+0x44>)
 8003fac:	2101      	movs	r1, #1
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	619a      	str	r2, [r3, #24]
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_MspInit+0x44>)
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_MspInit+0x44>)
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_MspInit+0x44>)
 8003fc4:	2180      	movs	r1, #128	; 0x80
 8003fc6:	0549      	lsls	r1, r1, #21
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	61da      	str	r2, [r3, #28]
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_MspInit+0x44>)
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	055b      	lsls	r3, r3, #21
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b002      	add	sp, #8
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b08b      	sub	sp, #44	; 0x2c
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	2314      	movs	r3, #20
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	2314      	movs	r3, #20
 8003ff8:	001a      	movs	r2, r3
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f001 f8b8 	bl	8005170 <memset>
  if(hspi->Instance==SPI2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2f      	ldr	r2, [pc, #188]	; (80040c4 <HAL_SPI_MspInit+0xdc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d157      	bne.n	80040ba <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	01c9      	lsls	r1, r1, #7
 8004014:	430a      	orrs	r2, r1
 8004016:	61da      	str	r2, [r3, #28]
 8004018:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	01db      	lsls	r3, r3, #7
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	0309      	lsls	r1, r1, #12
 8004030:	430a      	orrs	r2, r1
 8004032:	615a      	str	r2, [r3, #20]
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	031b      	lsls	r3, r3, #12
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	02c9      	lsls	r1, r1, #11
 800404c:	430a      	orrs	r2, r1
 800404e:	615a      	str	r2, [r3, #20]
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_SPI_MspInit+0xe0>)
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	02db      	lsls	r3, r3, #11
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800405e:	2114      	movs	r1, #20
 8004060:	187b      	adds	r3, r7, r1
 8004062:	220c      	movs	r2, #12
 8004064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004066:	187b      	adds	r3, r7, r1
 8004068:	2202      	movs	r2, #2
 800406a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	187b      	adds	r3, r7, r1
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004072:	187b      	adds	r3, r7, r1
 8004074:	2203      	movs	r2, #3
 8004076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004078:	187b      	adds	r3, r7, r1
 800407a:	2201      	movs	r2, #1
 800407c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800407e:	000c      	movs	r4, r1
 8004080:	187b      	adds	r3, r7, r1
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <HAL_SPI_MspInit+0xe4>)
 8004084:	0019      	movs	r1, r3
 8004086:	0010      	movs	r0, r2
 8004088:	f7fd fd3a 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800408c:	0021      	movs	r1, r4
 800408e:	187b      	adds	r3, r7, r1
 8004090:	2280      	movs	r2, #128	; 0x80
 8004092:	00d2      	lsls	r2, r2, #3
 8004094:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	187b      	adds	r3, r7, r1
 8004098:	2202      	movs	r2, #2
 800409a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	2203      	movs	r2, #3
 80040a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	2205      	movs	r2, #5
 80040ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <HAL_SPI_MspInit+0xe8>)
 80040b2:	0019      	movs	r1, r3
 80040b4:	0010      	movs	r0, r2
 80040b6:	f7fd fd23 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b00b      	add	sp, #44	; 0x2c
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	40003800 	.word	0x40003800
 80040c8:	40021000 	.word	0x40021000
 80040cc:	48000800 	.word	0x48000800
 80040d0:	48000400 	.word	0x48000400

080040d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	2314      	movs	r3, #20
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	0018      	movs	r0, r3
 80040e2:	2314      	movs	r3, #20
 80040e4:	001a      	movs	r2, r3
 80040e6:	2100      	movs	r1, #0
 80040e8:	f001 f842 	bl	8005170 <memset>
  if(huart->Instance==USART2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <HAL_UART_MspInit+0x90>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d132      	bne.n	800415c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040f6:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <HAL_UART_MspInit+0x94>)
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <HAL_UART_MspInit+0x94>)
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	0289      	lsls	r1, r1, #10
 8004100:	430a      	orrs	r2, r1
 8004102:	61da      	str	r2, [r3, #28]
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <HAL_UART_MspInit+0x94>)
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	029b      	lsls	r3, r3, #10
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <HAL_UART_MspInit+0x94>)
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_UART_MspInit+0x94>)
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	0289      	lsls	r1, r1, #10
 800411c:	430a      	orrs	r2, r1
 800411e:	615a      	str	r2, [r3, #20]
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_UART_MspInit+0x94>)
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800412e:	2114      	movs	r1, #20
 8004130:	187b      	adds	r3, r7, r1
 8004132:	220c      	movs	r2, #12
 8004134:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004136:	187b      	adds	r3, r7, r1
 8004138:	2202      	movs	r2, #2
 800413a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	187b      	adds	r3, r7, r1
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004142:	187b      	adds	r3, r7, r1
 8004144:	2200      	movs	r2, #0
 8004146:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004148:	187b      	adds	r3, r7, r1
 800414a:	2201      	movs	r2, #1
 800414c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414e:	187a      	adds	r2, r7, r1
 8004150:	2390      	movs	r3, #144	; 0x90
 8004152:	05db      	lsls	r3, r3, #23
 8004154:	0011      	movs	r1, r2
 8004156:	0018      	movs	r0, r3
 8004158:	f7fd fcd2 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b00a      	add	sp, #40	; 0x28
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40004400 	.word	0x40004400
 8004168:	40021000 	.word	0x40021000

0800416c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800417a:	e7fe      	b.n	800417a <HardFault_Handler+0x4>

0800417c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004194:	f7fd fbcc 	bl	8001930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <SystemInit+0x70>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <SystemInit+0x70>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80041b0:	4b17      	ldr	r3, [pc, #92]	; (8004210 <SystemInit+0x70>)
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4b16      	ldr	r3, [pc, #88]	; (8004210 <SystemInit+0x70>)
 80041b6:	4917      	ldr	r1, [pc, #92]	; (8004214 <SystemInit+0x74>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <SystemInit+0x70>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <SystemInit+0x70>)
 80041c2:	4915      	ldr	r1, [pc, #84]	; (8004218 <SystemInit+0x78>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <SystemInit+0x70>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <SystemInit+0x70>)
 80041ce:	4913      	ldr	r1, [pc, #76]	; (800421c <SystemInit+0x7c>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <SystemInit+0x70>)
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <SystemInit+0x70>)
 80041da:	4911      	ldr	r1, [pc, #68]	; (8004220 <SystemInit+0x80>)
 80041dc:	400a      	ands	r2, r1
 80041de:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <SystemInit+0x70>)
 80041e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <SystemInit+0x70>)
 80041e6:	210f      	movs	r1, #15
 80041e8:	438a      	bics	r2, r1
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <SystemInit+0x70>)
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	4b07      	ldr	r3, [pc, #28]	; (8004210 <SystemInit+0x70>)
 80041f2:	490c      	ldr	r1, [pc, #48]	; (8004224 <SystemInit+0x84>)
 80041f4:	400a      	ands	r2, r1
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <SystemInit+0x70>)
 80041fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <SystemInit+0x70>)
 80041fe:	2101      	movs	r1, #1
 8004200:	438a      	bics	r2, r1
 8004202:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <SystemInit+0x70>)
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]

}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	08ffb80c 	.word	0x08ffb80c
 8004218:	fef6ffff 	.word	0xfef6ffff
 800421c:	fffbffff 	.word	0xfffbffff
 8004220:	ffc0ffff 	.word	0xffc0ffff
 8004224:	fffcfe2c 	.word	0xfffcfe2c

08004228 <_ZN7TFT_GFXC1EP11SPI_TypeDef>:
//Public Function Prototypes

//Private Function Definitions

//Public Function Definitions
TFT_GFX::TFT_GFX(SPI_TypeDef *SPIx):
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
spiInstance{SPIx}, _width{ILI9341_TFTWIDTH}, _height{ILI9341_TFTHEIGHT}
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	22f0      	movs	r2, #240	; 0xf0
 800423c:	809a      	strh	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	22a0      	movs	r2, #160	; 0xa0
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	80da      	strh	r2, [r3, #6]
{}
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <_ZN7TFT_GFX13setAddrWindowEtttt>:

void TFT_GFX::setAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	000c      	movs	r4, r1
 800425a:	0010      	movs	r0, r2
 800425c:	0019      	movs	r1, r3
 800425e:	250a      	movs	r5, #10
 8004260:	197b      	adds	r3, r7, r5
 8004262:	1c22      	adds	r2, r4, #0
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	2608      	movs	r6, #8
 8004268:	19bb      	adds	r3, r7, r6
 800426a:	1c02      	adds	r2, r0, #0
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	1dbb      	adds	r3, r7, #6
 8004270:	1c0a      	adds	r2, r1, #0
 8004272:	801a      	strh	r2, [r3, #0]
    uint16_t x2 = (x1 + w - 1);
 8004274:	002c      	movs	r4, r5
 8004276:	193a      	adds	r2, r7, r4
 8004278:	1dbb      	adds	r3, r7, #6
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	b29a      	uxth	r2, r3
 8004282:	2316      	movs	r3, #22
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	3a01      	subs	r2, #1
 8004288:	801a      	strh	r2, [r3, #0]
    uint16_t y2 = (y1 + h - 1);
 800428a:	0035      	movs	r5, r6
 800428c:	197b      	adds	r3, r7, r5
 800428e:	2228      	movs	r2, #40	; 0x28
 8004290:	2108      	movs	r1, #8
 8004292:	1879      	adds	r1, r7, r1
 8004294:	1889      	adds	r1, r1, r2
 8004296:	881a      	ldrh	r2, [r3, #0]
 8004298:	880b      	ldrh	r3, [r1, #0]
 800429a:	18d3      	adds	r3, r2, r3
 800429c:	b29a      	uxth	r2, r3
 800429e:	2614      	movs	r6, #20
 80042a0:	19bb      	adds	r3, r7, r6
 80042a2:	3a01      	subs	r2, #1
 80042a4:	801a      	strh	r2, [r3, #0]
	// Set column range.
	hspi_cmd(this->spiInstance, 0x2A);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	212a      	movs	r1, #42	; 0x2a
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 fceb 	bl	8004c88 <hspi_cmd>
	hspi_w16(this->spiInstance, x1);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	193b      	adds	r3, r7, r4
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	0019      	movs	r1, r3
 80042bc:	0010      	movs	r0, r2
 80042be:	f000 fcbf 	bl	8004c40 <hspi_w16>
	hspi_w16(this->spiInstance, x2);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2316      	movs	r3, #22
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	0019      	movs	r1, r3
 80042ce:	0010      	movs	r0, r2
 80042d0:	f000 fcb6 	bl	8004c40 <hspi_w16>
	
	// Set row range.
	hspi_cmd(this->spiInstance, 0x2B);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	212b      	movs	r1, #43	; 0x2b
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 fcd4 	bl	8004c88 <hspi_cmd>
	hspi_w16(this->spiInstance, y1);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	197b      	adds	r3, r7, r5
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	0019      	movs	r1, r3
 80042ea:	0010      	movs	r0, r2
 80042ec:	f000 fca8 	bl	8004c40 <hspi_w16>
	hspi_w16(this->spiInstance, y2);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	19bb      	adds	r3, r7, r6
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	0019      	movs	r1, r3
 80042fa:	0010      	movs	r0, r2
 80042fc:	f000 fca0 	bl	8004c40 <hspi_w16>
	
	// Set 'write to RAM'
	hspi_cmd(this->spiInstance, 0x2C);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fcbe 	bl	8004c88 <hspi_cmd>
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b007      	add	sp, #28
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004314 <_ZN7TFT_GFX10writePixelEsst>:

void TFT_GFX::writePixel(int16_t x, int16_t y, uint16_t color) 
{
 8004314:	b5b0      	push	{r4, r5, r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	000c      	movs	r4, r1
 800431e:	0010      	movs	r0, r2
 8004320:	0019      	movs	r1, r3
 8004322:	250a      	movs	r5, #10
 8004324:	197b      	adds	r3, r7, r5
 8004326:	1c22      	adds	r2, r4, #0
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	2308      	movs	r3, #8
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	1c02      	adds	r2, r0, #0
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	1dbb      	adds	r3, r7, #6
 8004334:	1c0a      	adds	r2, r1, #0
 8004336:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && (y >= 0) && (y < this->_height)) 
 8004338:	197b      	adds	r3, r7, r5
 800433a:	2200      	movs	r2, #0
 800433c:	5e9b      	ldrsh	r3, [r3, r2]
 800433e:	2b00      	cmp	r3, #0
 8004340:	db29      	blt.n	8004396 <_ZN7TFT_GFX10writePixelEsst+0x82>
 8004342:	230a      	movs	r3, #10
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2200      	movs	r2, #0
 8004348:	5e9b      	ldrsh	r3, [r3, r2]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	8892      	ldrh	r2, [r2, #4]
 800434e:	4293      	cmp	r3, r2
 8004350:	da21      	bge.n	8004396 <_ZN7TFT_GFX10writePixelEsst+0x82>
 8004352:	2308      	movs	r3, #8
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	2200      	movs	r2, #0
 8004358:	5e9b      	ldrsh	r3, [r3, r2]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db1b      	blt.n	8004396 <_ZN7TFT_GFX10writePixelEsst+0x82>
 800435e:	2308      	movs	r3, #8
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2200      	movs	r2, #0
 8004364:	5e9b      	ldrsh	r3, [r3, r2]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	88d2      	ldrh	r2, [r2, #6]
 800436a:	4293      	cmp	r3, r2
 800436c:	da13      	bge.n	8004396 <_ZN7TFT_GFX10writePixelEsst+0x82>
    {
        setAddrWindow(x, y, 1, 1);
 800436e:	230a      	movs	r3, #10
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	8819      	ldrh	r1, [r3, #0]
 8004374:	2308      	movs	r3, #8
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	2301      	movs	r3, #1
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2301      	movs	r3, #1
 8004382:	f7ff ff65 	bl	8004250 <_ZN7TFT_GFX13setAddrWindowEtttt>
        hspi_w16(this->spiInstance, color);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	1dbb      	adds	r3, r7, #6
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	0019      	movs	r1, r3
 8004390:	0010      	movs	r0, r2
 8004392:	f000 fc55 	bl	8004c40 <hspi_w16>
    }
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bdb0      	pop	{r4, r5, r7, pc}

0800439e <_ZN7TFT_GFX13writeFillRectEsssst>:

void TFT_GFX::writeFillRect(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 800439e:	b5b0      	push	{r4, r5, r7, lr}
 80043a0:	b088      	sub	sp, #32
 80043a2:	af02      	add	r7, sp, #8
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	000c      	movs	r4, r1
 80043a8:	0010      	movs	r0, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	230a      	movs	r3, #10
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	1c22      	adds	r2, r4, #0
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	2308      	movs	r3, #8
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	1c02      	adds	r2, r0, #0
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	1dbb      	adds	r3, r7, #6
 80043be:	1c0a      	adds	r2, r1, #0
 80043c0:	801a      	strh	r2, [r3, #0]
    if(w && h) {                            // Nonzero width and height?
 80043c2:	1dbb      	adds	r3, r7, #6
 80043c4:	2200      	movs	r2, #0
 80043c6:	5e9b      	ldrsh	r3, [r3, r2]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d100      	bne.n	80043ce <_ZN7TFT_GFX13writeFillRectEsssst+0x30>
 80043cc:	e0c8      	b.n	8004560 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
 80043ce:	2328      	movs	r3, #40	; 0x28
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2200      	movs	r2, #0
 80043d4:	5e9b      	ldrsh	r3, [r3, r2]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d100      	bne.n	80043dc <_ZN7TFT_GFX13writeFillRectEsssst+0x3e>
 80043da:	e0c1      	b.n	8004560 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
        if(w < 0) {                         // If negative width...
 80043dc:	1dbb      	adds	r3, r7, #6
 80043de:	2200      	movs	r2, #0
 80043e0:	5e9b      	ldrsh	r3, [r3, r2]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da10      	bge.n	8004408 <_ZN7TFT_GFX13writeFillRectEsssst+0x6a>
            x +=  w + 1;                    //   Move X to left edge
 80043e6:	1dbb      	adds	r3, r7, #6
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	210a      	movs	r1, #10
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	187b      	adds	r3, r7, r1
 80043fa:	801a      	strh	r2, [r3, #0]
            w  = -w;                        //   Use positive width
 80043fc:	1dbb      	adds	r3, r7, #6
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	425b      	negs	r3, r3
 8004402:	b29a      	uxth	r2, r3
 8004404:	1dbb      	adds	r3, r7, #6
 8004406:	801a      	strh	r2, [r3, #0]
        }
        if(x < this->_width) {                    // Not off right
 8004408:	230a      	movs	r3, #10
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	2200      	movs	r2, #0
 800440e:	5e9b      	ldrsh	r3, [r3, r2]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	8892      	ldrh	r2, [r2, #4]
 8004414:	4293      	cmp	r3, r2
 8004416:	db00      	blt.n	800441a <_ZN7TFT_GFX13writeFillRectEsssst+0x7c>
 8004418:	e0a2      	b.n	8004560 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
            if(h < 0) {                     // If negative height...
 800441a:	2328      	movs	r3, #40	; 0x28
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	2200      	movs	r2, #0
 8004420:	5e9b      	ldrsh	r3, [r3, r2]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da11      	bge.n	800444a <_ZN7TFT_GFX13writeFillRectEsssst+0xac>
                y +=  h + 1;                //   Move Y to top edge
 8004426:	2128      	movs	r1, #40	; 0x28
 8004428:	187b      	adds	r3, r7, r1
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	2008      	movs	r0, #8
 800442e:	183b      	adds	r3, r7, r0
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	b29b      	uxth	r3, r3
 8004436:	3301      	adds	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	183b      	adds	r3, r7, r0
 800443c:	801a      	strh	r2, [r3, #0]
                h  = -h;                    //   Use positive height
 800443e:	187b      	adds	r3, r7, r1
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	425b      	negs	r3, r3
 8004444:	b29a      	uxth	r2, r3
 8004446:	187b      	adds	r3, r7, r1
 8004448:	801a      	strh	r2, [r3, #0]
            }
            if(y < this->_height) {               // Not off bottom
 800444a:	2308      	movs	r3, #8
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	2200      	movs	r2, #0
 8004450:	5e9b      	ldrsh	r3, [r3, r2]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	88d2      	ldrh	r2, [r2, #6]
 8004456:	4293      	cmp	r3, r2
 8004458:	db00      	blt.n	800445c <_ZN7TFT_GFX13writeFillRectEsssst+0xbe>
 800445a:	e081      	b.n	8004560 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                int16_t x2 = x + w - 1;
 800445c:	230a      	movs	r3, #10
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	18d3      	adds	r3, r2, r3
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	2116      	movs	r1, #22
 8004470:	187b      	adds	r3, r7, r1
 8004472:	801a      	strh	r2, [r3, #0]
                if(x2 >= 0) {               // Not off left
 8004474:	187b      	adds	r3, r7, r1
 8004476:	2200      	movs	r2, #0
 8004478:	5e9b      	ldrsh	r3, [r3, r2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da00      	bge.n	8004480 <_ZN7TFT_GFX13writeFillRectEsssst+0xe2>
 800447e:	e06f      	b.n	8004560 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                    int16_t y2 = y + h - 1;
 8004480:	2308      	movs	r3, #8
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	2328      	movs	r3, #40	; 0x28
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	18d3      	adds	r3, r2, r3
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	2114      	movs	r1, #20
 8004496:	187b      	adds	r3, r7, r1
 8004498:	801a      	strh	r2, [r3, #0]
                    if(y2 >= 0) {           // Not off top
 800449a:	187b      	adds	r3, r7, r1
 800449c:	2200      	movs	r2, #0
 800449e:	5e9b      	ldrsh	r3, [r3, r2]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	db5d      	blt.n	8004560 <_ZN7TFT_GFX13writeFillRectEsssst+0x1c2>
                        // Rectangle partly or fully overlaps screen
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 80044a4:	230a      	movs	r3, #10
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	5e9b      	ldrsh	r3, [r3, r2]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	da0a      	bge.n	80044c6 <_ZN7TFT_GFX13writeFillRectEsssst+0x128>
 80044b0:	230a      	movs	r3, #10
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2200      	movs	r2, #0
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	2316      	movs	r3, #22
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	1dbb      	adds	r3, r7, #6
 80044c4:	801a      	strh	r2, [r3, #0]
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 80044c6:	2308      	movs	r3, #8
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	2200      	movs	r2, #0
 80044cc:	5e9b      	ldrsh	r3, [r3, r2]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	da0b      	bge.n	80044ea <_ZN7TFT_GFX13writeFillRectEsssst+0x14c>
 80044d2:	2308      	movs	r3, #8
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2200      	movs	r2, #0
 80044d8:	801a      	strh	r2, [r3, #0]
 80044da:	2314      	movs	r3, #20
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	2328      	movs	r3, #40	; 0x28
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	801a      	strh	r2, [r3, #0]
                        if(x2 >= this->_width)  { w = this->_width  - x;   } // Clip right
 80044ea:	2316      	movs	r3, #22
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	5e9b      	ldrsh	r3, [r3, r2]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	8892      	ldrh	r2, [r2, #4]
 80044f6:	4293      	cmp	r3, r2
 80044f8:	db08      	blt.n	800450c <_ZN7TFT_GFX13writeFillRectEsssst+0x16e>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	889a      	ldrh	r2, [r3, #4]
 80044fe:	230a      	movs	r3, #10
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	b29a      	uxth	r2, r3
 8004508:	1dbb      	adds	r3, r7, #6
 800450a:	801a      	strh	r2, [r3, #0]
                        if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 800450c:	2314      	movs	r3, #20
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	2200      	movs	r2, #0
 8004512:	5e9b      	ldrsh	r3, [r3, r2]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	88d2      	ldrh	r2, [r2, #6]
 8004518:	4293      	cmp	r3, r2
 800451a:	db09      	blt.n	8004530 <_ZN7TFT_GFX13writeFillRectEsssst+0x192>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88da      	ldrh	r2, [r3, #6]
 8004520:	2308      	movs	r3, #8
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	b29a      	uxth	r2, r3
 800452a:	2328      	movs	r3, #40	; 0x28
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	801a      	strh	r2, [r3, #0]
                        writeFillRectPreclipped(x, y, w, h, color);
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	2400      	movs	r4, #0
 8004534:	5f1c      	ldrsh	r4, [r3, r4]
 8004536:	2308      	movs	r3, #8
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2200      	movs	r2, #0
 800453c:	5e9a      	ldrsh	r2, [r3, r2]
 800453e:	230a      	movs	r3, #10
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2100      	movs	r1, #0
 8004544:	5e59      	ldrsh	r1, [r3, r1]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	232c      	movs	r3, #44	; 0x2c
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	2328      	movs	r3, #40	; 0x28
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2500      	movs	r5, #0
 8004556:	5f5b      	ldrsh	r3, [r3, r5]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	0023      	movs	r3, r4
 800455c:	f000 f804 	bl	8004568 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
                    }
                }
            }
        }
    }
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bdb0      	pop	{r4, r5, r7, pc}

08004568 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>:

inline void TFT_GFX::writeFillRectPreclipped(int16_t x, int16_t y,
  int16_t w, int16_t h, uint16_t color) {
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	000c      	movs	r4, r1
 8004572:	0010      	movs	r0, r2
 8004574:	0019      	movs	r1, r3
 8004576:	250a      	movs	r5, #10
 8004578:	197b      	adds	r3, r7, r5
 800457a:	1c22      	adds	r2, r4, #0
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	2408      	movs	r4, #8
 8004580:	193b      	adds	r3, r7, r4
 8004582:	1c02      	adds	r2, r0, #0
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	1c0a      	adds	r2, r1, #0
 800458a:	801a      	strh	r2, [r3, #0]
    setAddrWindow(x, y, w, h);
 800458c:	197b      	adds	r3, r7, r5
 800458e:	8819      	ldrh	r1, [r3, #0]
 8004590:	193b      	adds	r3, r7, r4
 8004592:	881a      	ldrh	r2, [r3, #0]
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	881c      	ldrh	r4, [r3, #0]
 8004598:	2520      	movs	r5, #32
 800459a:	197b      	adds	r3, r7, r5
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	0023      	movs	r3, r4
 80045a4:	f7ff fe54 	bl	8004250 <_ZN7TFT_GFX13setAddrWindowEtttt>
    writeColor(color, (uint32_t)w * h);
 80045a8:	1dbb      	adds	r3, r7, #6
 80045aa:	2200      	movs	r2, #0
 80045ac:	5e9b      	ldrsh	r3, [r3, r2]
 80045ae:	197a      	adds	r2, r7, r5
 80045b0:	2100      	movs	r1, #0
 80045b2:	5e52      	ldrsh	r2, [r2, r1]
 80045b4:	435a      	muls	r2, r3
 80045b6:	2324      	movs	r3, #36	; 0x24
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	8819      	ldrh	r1, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 f804 	bl	80045cc <_ZN7TFT_GFX10writeColorEtm>
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}

080045cc <_ZN7TFT_GFX10writeColorEtm>:

void TFT_GFX::writeColor(uint16_t color, uint32_t len){
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	230a      	movs	r3, #10
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	1c0a      	adds	r2, r1, #0
 80045dc:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < len; i++){
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d20c      	bcs.n	8004604 <_ZN7TFT_GFX10writeColorEtm+0x38>
		hspi_w16(this->spiInstance, color);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	230a      	movs	r3, #10
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	0019      	movs	r1, r3
 80045f6:	0010      	movs	r0, r2
 80045f8:	f000 fb22 	bl	8004c40 <hspi_w16>
	for(uint32_t i = 0; i < len; i++){
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3301      	adds	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e7ee      	b.n	80045e2 <_ZN7TFT_GFX10writeColorEtm+0x16>
	}
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b006      	add	sp, #24
 800460a:	bd80      	pop	{r7, pc}

0800460c <_ZN7TFT_GFX14writeFastVLineEssst>:

void inline TFT_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800460c:	b5b0      	push	{r4, r5, r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	000c      	movs	r4, r1
 8004616:	0010      	movs	r0, r2
 8004618:	0019      	movs	r1, r3
 800461a:	250a      	movs	r5, #10
 800461c:	197b      	adds	r3, r7, r5
 800461e:	1c22      	adds	r2, r4, #0
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	2308      	movs	r3, #8
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	1c02      	adds	r2, r0, #0
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	1c0a      	adds	r2, r1, #0
 800462e:	801a      	strh	r2, [r3, #0]
    if((x >= 0) && (x < this->_width) && h) { // X on screen, nonzero height
 8004630:	197b      	adds	r3, r7, r5
 8004632:	2200      	movs	r2, #0
 8004634:	5e9b      	ldrsh	r3, [r3, r2]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da00      	bge.n	800463c <_ZN7TFT_GFX14writeFastVLineEssst+0x30>
 800463a:	e072      	b.n	8004722 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 800463c:	230a      	movs	r3, #10
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2200      	movs	r2, #0
 8004642:	5e9b      	ldrsh	r3, [r3, r2]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	8892      	ldrh	r2, [r2, #4]
 8004648:	4293      	cmp	r3, r2
 800464a:	db00      	blt.n	800464e <_ZN7TFT_GFX14writeFastVLineEssst+0x42>
 800464c:	e069      	b.n	8004722 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
 800464e:	1dbb      	adds	r3, r7, #6
 8004650:	2200      	movs	r2, #0
 8004652:	5e9b      	ldrsh	r3, [r3, r2]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d064      	beq.n	8004722 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
        if(h < 0) {                     // If negative height...
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	2200      	movs	r2, #0
 800465c:	5e9b      	ldrsh	r3, [r3, r2]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da10      	bge.n	8004684 <_ZN7TFT_GFX14writeFastVLineEssst+0x78>
            y +=  h + 1;                //   Move Y to top edge
 8004662:	1dbb      	adds	r3, r7, #6
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	2108      	movs	r1, #8
 8004668:	187b      	adds	r3, r7, r1
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	187b      	adds	r3, r7, r1
 8004676:	801a      	strh	r2, [r3, #0]
            h  = -h;                    //   Use positive height
 8004678:	1dbb      	adds	r3, r7, #6
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	425b      	negs	r3, r3
 800467e:	b29a      	uxth	r2, r3
 8004680:	1dbb      	adds	r3, r7, #6
 8004682:	801a      	strh	r2, [r3, #0]
        }
        if(y < this->_height) {               // Not off bottom
 8004684:	2308      	movs	r3, #8
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2200      	movs	r2, #0
 800468a:	5e9b      	ldrsh	r3, [r3, r2]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	88d2      	ldrh	r2, [r2, #6]
 8004690:	4293      	cmp	r3, r2
 8004692:	da46      	bge.n	8004722 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
            int16_t y2 = y + h - 1;
 8004694:	2308      	movs	r3, #8
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	18d3      	adds	r3, r2, r3
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	2116      	movs	r1, #22
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	801a      	strh	r2, [r3, #0]
            if(y2 >= 0) {               // Not off top
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	2200      	movs	r2, #0
 80046b0:	5e9b      	ldrsh	r3, [r3, r2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	db35      	blt.n	8004722 <_ZN7TFT_GFX14writeFastVLineEssst+0x116>
                // Line partly or fully overlaps screen
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 80046b6:	2308      	movs	r3, #8
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	2200      	movs	r2, #0
 80046bc:	5e9b      	ldrsh	r3, [r3, r2]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da0a      	bge.n	80046d8 <_ZN7TFT_GFX14writeFastVLineEssst+0xcc>
 80046c2:	2308      	movs	r3, #8
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	2200      	movs	r2, #0
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	2316      	movs	r3, #22
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	1dbb      	adds	r3, r7, #6
 80046d6:	801a      	strh	r2, [r3, #0]
                if(y2 >= this->_height) { h = this->_height - y;   } // Clip bottom
 80046d8:	2316      	movs	r3, #22
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	5e9b      	ldrsh	r3, [r3, r2]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	88d2      	ldrh	r2, [r2, #6]
 80046e4:	4293      	cmp	r3, r2
 80046e6:	db08      	blt.n	80046fa <_ZN7TFT_GFX14writeFastVLineEssst+0xee>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88da      	ldrh	r2, [r3, #6]
 80046ec:	2308      	movs	r3, #8
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	1dbb      	adds	r3, r7, #6
 80046f8:	801a      	strh	r2, [r3, #0]
                writeFillRectPreclipped(x, y, 1, h, color);
 80046fa:	2308      	movs	r3, #8
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	2200      	movs	r2, #0
 8004700:	5e9a      	ldrsh	r2, [r3, r2]
 8004702:	230a      	movs	r3, #10
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	2100      	movs	r1, #0
 8004708:	5e59      	ldrsh	r1, [r3, r1]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	2328      	movs	r3, #40	; 0x28
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	1dbb      	adds	r3, r7, #6
 8004716:	2400      	movs	r4, #0
 8004718:	5f1b      	ldrsh	r3, [r3, r4]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2301      	movs	r3, #1
 800471e:	f7ff ff23 	bl	8004568 <_ZN7TFT_GFX23writeFillRectPreclippedEsssst>
            }
        }
    }
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b006      	add	sp, #24
 8004728:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800472c <_ZN7TFT_GFX8drawCharEsshtthh>:
        }
    }
}

void TFT_GFX::drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) 
{
 800472c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472e:	b089      	sub	sp, #36	; 0x24
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	000c      	movs	r4, r1
 8004736:	0010      	movs	r0, r2
 8004738:	0019      	movs	r1, r3
 800473a:	250a      	movs	r5, #10
 800473c:	197b      	adds	r3, r7, r5
 800473e:	1c22      	adds	r2, r4, #0
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	2308      	movs	r3, #8
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	1c02      	adds	r2, r0, #0
 8004748:	801a      	strh	r2, [r3, #0]
 800474a:	1dfb      	adds	r3, r7, #7
 800474c:	1c0a      	adds	r2, r1, #0
 800474e:	701a      	strb	r2, [r3, #0]
    if((x >= this->_width)            || // Clip right
 8004750:	197b      	adds	r3, r7, r5
 8004752:	2200      	movs	r2, #0
 8004754:	5e9b      	ldrsh	r3, [r3, r2]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	8892      	ldrh	r2, [r2, #4]
 800475a:	4293      	cmp	r3, r2
 800475c:	db00      	blt.n	8004760 <_ZN7TFT_GFX8drawCharEsshtthh+0x34>
 800475e:	e1c2      	b.n	8004ae6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        (y >= this->_height)           || // Clip bottom
 8004760:	2308      	movs	r3, #8
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	2200      	movs	r2, #0
 8004766:	5e9b      	ldrsh	r3, [r3, r2]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	88d2      	ldrh	r2, [r2, #6]
    if((x >= this->_width)            || // Clip right
 800476c:	4293      	cmp	r3, r2
 800476e:	db00      	blt.n	8004772 <_ZN7TFT_GFX8drawCharEsshtthh+0x46>
 8004770:	e1b9      	b.n	8004ae6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8004772:	230a      	movs	r3, #10
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	2100      	movs	r1, #0
 8004778:	5e59      	ldrsh	r1, [r3, r1]
 800477a:	2330      	movs	r3, #48	; 0x30
 800477c:	2208      	movs	r2, #8
 800477e:	4694      	mov	ip, r2
 8004780:	44bc      	add	ip, r7
 8004782:	4463      	add	r3, ip
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	0013      	movs	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	189b      	adds	r3, r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	18cb      	adds	r3, r1, r3
 8004790:	3b01      	subs	r3, #1
        (y >= this->_height)           || // Clip bottom
 8004792:	2b00      	cmp	r3, #0
 8004794:	da00      	bge.n	8004798 <_ZN7TFT_GFX8drawCharEsshtthh+0x6c>
 8004796:	e1a6      	b.n	8004ae6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8004798:	2308      	movs	r3, #8
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2200      	movs	r2, #0
 800479e:	5e9a      	ldrsh	r2, [r3, r2]
 80047a0:	2334      	movs	r3, #52	; 0x34
 80047a2:	2108      	movs	r1, #8
 80047a4:	468c      	mov	ip, r1
 80047a6:	44bc      	add	ip, r7
 80047a8:	4463      	add	r3, ip
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	3b01      	subs	r3, #1
        ((x + 6 * size_x - 1) < 0) || // Clip left
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da00      	bge.n	80047b8 <_ZN7TFT_GFX8drawCharEsshtthh+0x8c>
 80047b6:	e196      	b.n	8004ae6 <_ZN7TFT_GFX8drawCharEsshtthh+0x3ba>
        return;

    if(c >= 176) c++; // Handle 'classic' charset behavior
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2baf      	cmp	r3, #175	; 0xaf
 80047be:	d904      	bls.n	80047ca <_ZN7TFT_GFX8drawCharEsshtthh+0x9e>
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	3201      	adds	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]

    //startWrite();
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80047ca:	2317      	movs	r3, #23
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	2317      	movs	r3, #23
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b25b      	sxtb	r3, r3
 80047da:	2b04      	cmp	r3, #4
 80047dc:	dd00      	ble.n	80047e0 <_ZN7TFT_GFX8drawCharEsshtthh+0xb4>
 80047de:	e11f      	b.n	8004a20 <_ZN7TFT_GFX8drawCharEsshtthh+0x2f4>
        uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80047e0:	1dfb      	adds	r3, r7, #7
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	0013      	movs	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	189a      	adds	r2, r3, r2
 80047ea:	2317      	movs	r3, #23
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	18d2      	adds	r2, r2, r3
 80047f4:	2316      	movs	r3, #22
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	49bd      	ldr	r1, [pc, #756]	; (8004af0 <_ZN7TFT_GFX8drawCharEsshtthh+0x3c4>)
 80047fa:	5c8a      	ldrb	r2, [r1, r2]
 80047fc:	701a      	strb	r2, [r3, #0]
        for(int8_t j=0; j<8; j++, line >>= 1) {
 80047fe:	2315      	movs	r3, #21
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	2315      	movs	r3, #21
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b25b      	sxtb	r3, r3
 800480e:	2b07      	cmp	r3, #7
 8004810:	dd00      	ble.n	8004814 <_ZN7TFT_GFX8drawCharEsshtthh+0xe8>
 8004812:	e0fb      	b.n	8004a0c <_ZN7TFT_GFX8drawCharEsshtthh+0x2e0>
            if(line & 1) {
 8004814:	2316      	movs	r3, #22
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	4013      	ands	r3, r2
 800481e:	d06c      	beq.n	80048fa <_ZN7TFT_GFX8drawCharEsshtthh+0x1ce>
                if(size_x == 1 && size_y == 1)
 8004820:	2330      	movs	r3, #48	; 0x30
 8004822:	2208      	movs	r2, #8
 8004824:	4694      	mov	ip, r2
 8004826:	44bc      	add	ip, r7
 8004828:	4463      	add	r3, ip
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d127      	bne.n	8004880 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
 8004830:	2334      	movs	r3, #52	; 0x34
 8004832:	2208      	movs	r2, #8
 8004834:	4694      	mov	ip, r2
 8004836:	44bc      	add	ip, r7
 8004838:	4463      	add	r3, ip
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d11f      	bne.n	8004880 <_ZN7TFT_GFX8drawCharEsshtthh+0x154>
                    writePixel(x+i, y+j, color);
 8004840:	2317      	movs	r3, #23
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b25b      	sxtb	r3, r3
 8004848:	b29a      	uxth	r2, r3
 800484a:	230a      	movs	r3, #10
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	18d3      	adds	r3, r2, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	b219      	sxth	r1, r3
 8004856:	2315      	movs	r3, #21
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b25b      	sxtb	r3, r3
 800485e:	b29a      	uxth	r2, r3
 8004860:	2308      	movs	r3, #8
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	18d3      	adds	r3, r2, r3
 8004868:	b29b      	uxth	r3, r3
 800486a:	b21a      	sxth	r2, r3
 800486c:	2328      	movs	r3, #40	; 0x28
 800486e:	2008      	movs	r0, #8
 8004870:	4684      	mov	ip, r0
 8004872:	44bc      	add	ip, r7
 8004874:	4463      	add	r3, ip
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fd4b 	bl	8004314 <_ZN7TFT_GFX10writePixelEsst>
 800487e:	e0b5      	b.n	80049ec <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 8004880:	2317      	movs	r3, #23
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	b25b      	sxtb	r3, r3
 8004888:	b29b      	uxth	r3, r3
 800488a:	2030      	movs	r0, #48	; 0x30
 800488c:	2408      	movs	r4, #8
 800488e:	193a      	adds	r2, r7, r4
 8004890:	1812      	adds	r2, r2, r0
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	b292      	uxth	r2, r2
 8004896:	4353      	muls	r3, r2
 8004898:	b29a      	uxth	r2, r3
 800489a:	230a      	movs	r3, #10
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	18d3      	adds	r3, r2, r3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	b219      	sxth	r1, r3
 80048a6:	2315      	movs	r3, #21
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	b25b      	sxtb	r3, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2634      	movs	r6, #52	; 0x34
 80048b2:	193a      	adds	r2, r7, r4
 80048b4:	1992      	adds	r2, r2, r6
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	b292      	uxth	r2, r2
 80048ba:	4353      	muls	r3, r2
 80048bc:	b29a      	uxth	r2, r3
 80048be:	0023      	movs	r3, r4
 80048c0:	001d      	movs	r5, r3
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	18d3      	adds	r3, r2, r3
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	b21c      	sxth	r4, r3
 80048cc:	002a      	movs	r2, r5
 80048ce:	18bb      	adds	r3, r7, r2
 80048d0:	181b      	adds	r3, r3, r0
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b21d      	sxth	r5, r3
 80048d6:	18bb      	adds	r3, r7, r2
 80048d8:	199b      	adds	r3, r3, r6
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b21b      	sxth	r3, r3
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	2228      	movs	r2, #40	; 0x28
 80048e2:	2608      	movs	r6, #8
 80048e4:	46b4      	mov	ip, r6
 80048e6:	44bc      	add	ip, r7
 80048e8:	4462      	add	r2, ip
 80048ea:	8812      	ldrh	r2, [r2, #0]
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	002b      	movs	r3, r5
 80048f2:	0022      	movs	r2, r4
 80048f4:	f7ff fd53 	bl	800439e <_ZN7TFT_GFX13writeFillRectEsssst>
 80048f8:	e078      	b.n	80049ec <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
            } else if(bg != color) {
 80048fa:	232c      	movs	r3, #44	; 0x2c
 80048fc:	2208      	movs	r2, #8
 80048fe:	4694      	mov	ip, r2
 8004900:	44bc      	add	ip, r7
 8004902:	4463      	add	r3, ip
 8004904:	2228      	movs	r2, #40	; 0x28
 8004906:	2108      	movs	r1, #8
 8004908:	1879      	adds	r1, r7, r1
 800490a:	1889      	adds	r1, r1, r2
 800490c:	881a      	ldrh	r2, [r3, #0]
 800490e:	880b      	ldrh	r3, [r1, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d06b      	beq.n	80049ec <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                if(size_x == 1 && size_y == 1)
 8004914:	2330      	movs	r3, #48	; 0x30
 8004916:	2208      	movs	r2, #8
 8004918:	4694      	mov	ip, r2
 800491a:	44bc      	add	ip, r7
 800491c:	4463      	add	r3, ip
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d127      	bne.n	8004974 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
 8004924:	2334      	movs	r3, #52	; 0x34
 8004926:	2208      	movs	r2, #8
 8004928:	4694      	mov	ip, r2
 800492a:	44bc      	add	ip, r7
 800492c:	4463      	add	r3, ip
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d11f      	bne.n	8004974 <_ZN7TFT_GFX8drawCharEsshtthh+0x248>
                    writePixel(x+i, y+j, bg);
 8004934:	2317      	movs	r3, #23
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b25b      	sxtb	r3, r3
 800493c:	b29a      	uxth	r2, r3
 800493e:	230a      	movs	r3, #10
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	18d3      	adds	r3, r2, r3
 8004946:	b29b      	uxth	r3, r3
 8004948:	b219      	sxth	r1, r3
 800494a:	2315      	movs	r3, #21
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b25b      	sxtb	r3, r3
 8004952:	b29a      	uxth	r2, r3
 8004954:	2308      	movs	r3, #8
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	18d3      	adds	r3, r2, r3
 800495c:	b29b      	uxth	r3, r3
 800495e:	b21a      	sxth	r2, r3
 8004960:	232c      	movs	r3, #44	; 0x2c
 8004962:	2008      	movs	r0, #8
 8004964:	4684      	mov	ip, r0
 8004966:	44bc      	add	ip, r7
 8004968:	4463      	add	r3, ip
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fcd1 	bl	8004314 <_ZN7TFT_GFX10writePixelEsst>
 8004972:	e03b      	b.n	80049ec <_ZN7TFT_GFX8drawCharEsshtthh+0x2c0>
                else
                    writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 8004974:	2317      	movs	r3, #23
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	b25b      	sxtb	r3, r3
 800497c:	b29b      	uxth	r3, r3
 800497e:	2030      	movs	r0, #48	; 0x30
 8004980:	2408      	movs	r4, #8
 8004982:	193a      	adds	r2, r7, r4
 8004984:	1812      	adds	r2, r2, r0
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	b292      	uxth	r2, r2
 800498a:	4353      	muls	r3, r2
 800498c:	b29a      	uxth	r2, r3
 800498e:	230a      	movs	r3, #10
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	18d3      	adds	r3, r2, r3
 8004996:	b29b      	uxth	r3, r3
 8004998:	b219      	sxth	r1, r3
 800499a:	2315      	movs	r3, #21
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2634      	movs	r6, #52	; 0x34
 80049a6:	193a      	adds	r2, r7, r4
 80049a8:	1992      	adds	r2, r2, r6
 80049aa:	7812      	ldrb	r2, [r2, #0]
 80049ac:	b292      	uxth	r2, r2
 80049ae:	4353      	muls	r3, r2
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	0023      	movs	r3, r4
 80049b4:	001d      	movs	r5, r3
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	18d3      	adds	r3, r2, r3
 80049bc:	b29b      	uxth	r3, r3
 80049be:	b21c      	sxth	r4, r3
 80049c0:	002a      	movs	r2, r5
 80049c2:	18bb      	adds	r3, r7, r2
 80049c4:	181b      	adds	r3, r3, r0
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	b21d      	sxth	r5, r3
 80049ca:	18bb      	adds	r3, r7, r2
 80049cc:	199b      	adds	r3, r3, r6
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	222c      	movs	r2, #44	; 0x2c
 80049d6:	2608      	movs	r6, #8
 80049d8:	46b4      	mov	ip, r6
 80049da:	44bc      	add	ip, r7
 80049dc:	4462      	add	r2, ip
 80049de:	8812      	ldrh	r2, [r2, #0]
 80049e0:	9201      	str	r2, [sp, #4]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	002b      	movs	r3, r5
 80049e6:	0022      	movs	r2, r4
 80049e8:	f7ff fcd9 	bl	800439e <_ZN7TFT_GFX13writeFillRectEsssst>
        for(int8_t j=0; j<8; j++, line >>= 1) {
 80049ec:	2115      	movs	r1, #21
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b25b      	sxtb	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	3301      	adds	r3, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	2116      	movs	r1, #22
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	105a      	asrs	r2, r3, #1
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e6fc      	b.n	8004806 <_ZN7TFT_GFX8drawCharEsshtthh+0xda>
    for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8004a0c:	2117      	movs	r1, #23
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3301      	adds	r3, #1
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	187b      	adds	r3, r7, r1
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e6d8      	b.n	80047d2 <_ZN7TFT_GFX8drawCharEsshtthh+0xa6>
            }
        }
    }
    if(bg != color) { // If opaque, draw vertical line for last column
 8004a20:	232c      	movs	r3, #44	; 0x2c
 8004a22:	2208      	movs	r2, #8
 8004a24:	4694      	mov	ip, r2
 8004a26:	44bc      	add	ip, r7
 8004a28:	4463      	add	r3, ip
 8004a2a:	2228      	movs	r2, #40	; 0x28
 8004a2c:	2108      	movs	r1, #8
 8004a2e:	1879      	adds	r1, r7, r1
 8004a30:	1889      	adds	r1, r1, r2
 8004a32:	881a      	ldrh	r2, [r3, #0]
 8004a34:	880b      	ldrh	r3, [r1, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d056      	beq.n	8004ae8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 8004a3a:	2330      	movs	r3, #48	; 0x30
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	4694      	mov	ip, r2
 8004a40:	44bc      	add	ip, r7
 8004a42:	4463      	add	r3, ip
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d11d      	bne.n	8004a86 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 8004a4a:	2334      	movs	r3, #52	; 0x34
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	4694      	mov	ip, r2
 8004a50:	44bc      	add	ip, r7
 8004a52:	4463      	add	r3, ip
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d115      	bne.n	8004a86 <_ZN7TFT_GFX8drawCharEsshtthh+0x35a>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	3305      	adds	r3, #5
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	b219      	sxth	r1, r3
 8004a66:	2308      	movs	r3, #8
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	5e9a      	ldrsh	r2, [r3, r2]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	232c      	movs	r3, #44	; 0x2c
 8004a72:	2408      	movs	r4, #8
 8004a74:	46a4      	mov	ip, r4
 8004a76:	44bc      	add	ip, r7
 8004a78:	4463      	add	r3, ip
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	2308      	movs	r3, #8
 8004a80:	f7ff fdc4 	bl	800460c <_ZN7TFT_GFX14writeFastVLineEssst>
 8004a84:	e030      	b.n	8004ae8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 8004a86:	2030      	movs	r0, #48	; 0x30
 8004a88:	2408      	movs	r4, #8
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	181b      	adds	r3, r3, r0
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	1c1a      	adds	r2, r3, #0
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	18d3      	adds	r3, r2, r3
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	b219      	sxth	r1, r3
 8004aa6:	193b      	adds	r3, r7, r4
 8004aa8:	181b      	adds	r3, r3, r0
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b21d      	sxth	r5, r3
 8004aae:	2334      	movs	r3, #52	; 0x34
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4694      	mov	ip, r2
 8004ab4:	44bc      	add	ip, r7
 8004ab6:	4463      	add	r3, ip
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	b21b      	sxth	r3, r3
 8004ac2:	0022      	movs	r2, r4
 8004ac4:	18ba      	adds	r2, r7, r2
 8004ac6:	2400      	movs	r4, #0
 8004ac8:	5f14      	ldrsh	r4, [r2, r4]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	222c      	movs	r2, #44	; 0x2c
 8004ace:	2608      	movs	r6, #8
 8004ad0:	46b4      	mov	ip, r6
 8004ad2:	44bc      	add	ip, r7
 8004ad4:	4462      	add	r2, ip
 8004ad6:	8812      	ldrh	r2, [r2, #0]
 8004ad8:	9201      	str	r2, [sp, #4]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	002b      	movs	r3, r5
 8004ade:	0022      	movs	r2, r4
 8004ae0:	f7ff fc5d 	bl	800439e <_ZN7TFT_GFX13writeFillRectEsssst>
 8004ae4:	e000      	b.n	8004ae8 <_ZN7TFT_GFX8drawCharEsshtthh+0x3bc>
        return;
 8004ae6:	46c0      	nop			; (mov r8, r8)
    }
    //endWrite();
}
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b007      	add	sp, #28
 8004aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	08005210 	.word	0x08005210

08004af4 <_ZN7TFT_GFX11setRotationEh>:

void TFT_GFX::setRotation(uint8_t m)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	000a      	movs	r2, r1
 8004afe:	1cfb      	adds	r3, r7, #3
 8004b00:	701a      	strb	r2, [r3, #0]
	uint8_t rotation = m % 4; // can't be higher than 3
 8004b02:	1cfb      	adds	r3, r7, #3
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	200f      	movs	r0, #15
 8004b08:	183b      	adds	r3, r7, r0
 8004b0a:	2103      	movs	r1, #3
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	701a      	strb	r2, [r3, #0]
	    switch (rotation) {
 8004b10:	183b      	adds	r3, r7, r0
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d013      	beq.n	8004b40 <_ZN7TFT_GFX11setRotationEh+0x4c>
 8004b18:	dc02      	bgt.n	8004b20 <_ZN7TFT_GFX11setRotationEh+0x2c>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <_ZN7TFT_GFX11setRotationEh+0x36>
 8004b1e:	e030      	b.n	8004b82 <_ZN7TFT_GFX11setRotationEh+0x8e>
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d018      	beq.n	8004b56 <_ZN7TFT_GFX11setRotationEh+0x62>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d021      	beq.n	8004b6c <_ZN7TFT_GFX11setRotationEh+0x78>
 8004b28:	e02b      	b.n	8004b82 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 0:
	            m = (MADCTL_MX | MADCTL_BGR);
 8004b2a:	1cfb      	adds	r3, r7, #3
 8004b2c:	2248      	movs	r2, #72	; 0x48
 8004b2e:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	22f0      	movs	r2, #240	; 0xf0
 8004b34:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	22a0      	movs	r2, #160	; 0xa0
 8004b3a:	0052      	lsls	r2, r2, #1
 8004b3c:	80da      	strh	r2, [r3, #6]
	            break;
 8004b3e:	e020      	b.n	8004b82 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 1:
	            m = (MADCTL_MV | MADCTL_BGR);
 8004b40:	1cfb      	adds	r3, r7, #3
 8004b42:	2228      	movs	r2, #40	; 0x28
 8004b44:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	22a0      	movs	r2, #160	; 0xa0
 8004b4a:	0052      	lsls	r2, r2, #1
 8004b4c:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	22f0      	movs	r2, #240	; 0xf0
 8004b52:	80da      	strh	r2, [r3, #6]
	            break;
 8004b54:	e015      	b.n	8004b82 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 2:
	            m = (MADCTL_MY | MADCTL_BGR);
 8004b56:	1cfb      	adds	r3, r7, #3
 8004b58:	2288      	movs	r2, #136	; 0x88
 8004b5a:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTWIDTH;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	22f0      	movs	r2, #240	; 0xf0
 8004b60:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTHEIGHT;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	22a0      	movs	r2, #160	; 0xa0
 8004b66:	0052      	lsls	r2, r2, #1
 8004b68:	80da      	strh	r2, [r3, #6]
	            break;
 8004b6a:	e00a      	b.n	8004b82 <_ZN7TFT_GFX11setRotationEh+0x8e>
	        case 3:
	            m = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8004b6c:	1cfb      	adds	r3, r7, #3
 8004b6e:	22e8      	movs	r2, #232	; 0xe8
 8004b70:	701a      	strb	r2, [r3, #0]
	            _width  = ILI9341_TFTHEIGHT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	22a0      	movs	r2, #160	; 0xa0
 8004b76:	0052      	lsls	r2, r2, #1
 8004b78:	809a      	strh	r2, [r3, #4]
	            _height = ILI9341_TFTWIDTH;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	22f0      	movs	r2, #240	; 0xf0
 8004b7e:	80da      	strh	r2, [r3, #6]
	            break;
 8004b80:	46c0      	nop			; (mov r8, r8)
	    }
	    sendCommand(this->spiInstance, ILI9341_MADCTL, &m, 1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	1cfa      	adds	r2, r7, #3
 8004b88:	2301      	movs	r3, #1
 8004b8a:	2136      	movs	r1, #54	; 0x36
 8004b8c:	f000 f8a8 	bl	8004ce0 <sendCommand>
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b004      	add	sp, #16
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_ZN7TFT_GFX5widthEv>:

uint16_t TFT_GFX::width(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	return this->_width;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	889b      	ldrh	r3, [r3, #4]
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZN7TFT_GFX6heightEv>:

uint16_t TFT_GFX::height(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	return this->_height;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	88db      	ldrh	r3, [r3, #6]
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <resetTftBoard>:
#include "hspi.h"
#include "pin-definitions.h"

void resetTftBoard(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
	TFT_RST_PORT->ODR &= ~(1 << TFT_RST_PIN);
 8004bc4:	2390      	movs	r3, #144	; 0x90
 8004bc6:	05db      	lsls	r3, r3, #23
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	2390      	movs	r3, #144	; 0x90
 8004bcc:	05db      	lsls	r3, r3, #23
 8004bce:	2101      	movs	r1, #1
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8004bd4:	2096      	movs	r0, #150	; 0x96
 8004bd6:	f7fc fec1 	bl	800195c <HAL_Delay>
	TFT_RST_PORT->ODR |=  (1 << TFT_RST_PIN);
 8004bda:	2390      	movs	r3, #144	; 0x90
 8004bdc:	05db      	lsls	r3, r3, #23
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	2390      	movs	r3, #144	; 0x90
 8004be2:	05db      	lsls	r3, r3, #23
 8004be4:	2101      	movs	r1, #1
 8004be6:	430a      	orrs	r2, r1
 8004be8:	615a      	str	r2, [r3, #20]
	HAL_Delay(150);
 8004bea:	2096      	movs	r0, #150	; 0x96
 8004bec:	f7fc feb6 	bl	800195c <HAL_Delay>
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <pullCSLow>:

void pullCSLow(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	SPI2_CS_PORT->ODR &= ~(1 << SPI2_CS_PIN);
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <pullCSLow+0x18>)
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <pullCSLow+0x18>)
 8004c02:	2102      	movs	r1, #2
 8004c04:	438a      	bics	r2, r1
 8004c06:	615a      	str	r2, [r3, #20]
}
 8004c08:	46c0      	nop			; (mov r8, r8)
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	48000800 	.word	0x48000800

08004c14 <hspi_w8>:
void pullCSHigh(void)
{
	SPI2_CS_PORT->ODR |= (1 << SPI2_CS_PIN);
}

void hspi_w8(SPI_TypeDef *SPIx, uint8_t dat) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	000a      	movs	r2, r1
 8004c1e:	1cfb      	adds	r3, r7, #3
 8004c20:	701a      	strb	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d0fa      	beq.n	8004c24 <hspi_w8+0x10>
  // Send the byte.
  *(uint8_t*)&(SPIx->DR) = dat;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	330c      	adds	r3, #12
 8004c32:	1cfa      	adds	r2, r7, #3
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	701a      	strb	r2, [r3, #0]
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <hspi_w16>:

void hspi_w16(SPI_TypeDef *SPIx, uint16_t dat) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	000a      	movs	r2, r1
 8004c4a:	1cbb      	adds	r3, r7, #2
 8004c4c:	801a      	strh	r2, [r3, #0]
  // Wait for TXE.
  while (!(SPIx->SR & SPI_SR_TXE)) {};
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	d0fa      	beq.n	8004c50 <hspi_w16+0x10>
  // Send the data.
  // (Flip the bytes for the little-endian ARM core.)
  dat = (((dat & 0x00FF) << 8) | ((dat & 0xFF00) >> 8));
 8004c5a:	1cbb      	adds	r3, r7, #2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	b21a      	sxth	r2, r3
 8004c62:	1cbb      	adds	r3, r7, #2
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b21a      	sxth	r2, r3
 8004c70:	1cbb      	adds	r3, r7, #2
 8004c72:	801a      	strh	r2, [r3, #0]
  *(uint16_t*)&(SPIx->DR) = dat;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	330c      	adds	r3, #12
 8004c78:	1cba      	adds	r2, r7, #2
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	801a      	strh	r2, [r3, #0]
}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b002      	add	sp, #8
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <hspi_cmd>:

void hspi_cmd(SPI_TypeDef *SPIx, uint8_t cmd) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	000a      	movs	r2, r1
 8004c92:	1cfb      	adds	r3, r7, #3
 8004c94:	701a      	strb	r2, [r3, #0]
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d1fa      	bne.n	8004c98 <hspi_cmd+0x10>
  TFT_DC_PORT->ODR &= ~(1 << TFT_DC_PIN);
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <hspi_cmd+0x54>)
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <hspi_cmd+0x54>)
 8004ca8:	2101      	movs	r1, #1
 8004caa:	438a      	bics	r2, r1
 8004cac:	615a      	str	r2, [r3, #20]
  hspi_w8(SPIx, cmd);
 8004cae:	1cfb      	adds	r3, r7, #3
 8004cb0:	781a      	ldrb	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0011      	movs	r1, r2
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff ffac 	bl	8004c14 <hspi_w8>
  while ((SPIx->SR & SPI_SR_BSY)) {};
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d1fa      	bne.n	8004cbe <hspi_cmd+0x36>
  TFT_DC_PORT->ODR |=  (1 << TFT_DC_PIN);
 8004cc8:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <hspi_cmd+0x54>)
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <hspi_cmd+0x54>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	615a      	str	r2, [r3, #20]
}
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b002      	add	sp, #8
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	48000800 	.word	0x48000800

08004ce0 <sendCommand>:

void sendCommand(SPI_TypeDef *SPIx, uint8_t cmd, uint8_t* data, uint8_t length)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	0008      	movs	r0, r1
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	0019      	movs	r1, r3
 8004cee:	240b      	movs	r4, #11
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	1c02      	adds	r2, r0, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	230a      	movs	r3, #10
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	1c0a      	adds	r2, r1, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
	hspi_cmd(SPIx,cmd);
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	0011      	movs	r1, r2
 8004d06:	0018      	movs	r0, r3
 8004d08:	f7ff ffbe 	bl	8004c88 <hspi_cmd>
	for(int i = 0; i < length; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e00b      	b.n	8004d2a <sendCommand+0x4a>
	{
		hspi_w8(SPIx, *(data++));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0011      	movs	r1, r2
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff ff78 	bl	8004c14 <hspi_w8>
	for(int i = 0; i < length; i++)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3301      	adds	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	230a      	movs	r3, #10
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	dbed      	blt.n	8004d12 <sendCommand+0x32>
	}
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b007      	add	sp, #28
 8004d3c:	bd90      	pop	{r4, r7, pc}

08004d3e <ili9341_hspi_init>:

void ili9341_hspi_init(SPI_TypeDef *SPIx) {
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  // (Display off)
  //hspi_cmd(SPIx, 0x28);
  // Issue a series of initialization commands from the
  // Adafruit library for a simple 'known good' test.
  // (TODO: Add named macro definitions for these hex values.)
  hspi_cmd(SPIx, 0xEF);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	21ef      	movs	r1, #239	; 0xef
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7ff ff9c 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x03);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2103      	movs	r1, #3
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7ff ff5d 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x80);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2180      	movs	r1, #128	; 0x80
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7ff ff58 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2102      	movs	r1, #2
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7ff ff53 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xCF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	21cf      	movs	r1, #207	; 0xcf
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7ff ff88 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7ff ff49 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	21c1      	movs	r1, #193	; 0xc1
 8004d86:	0018      	movs	r0, r3
 8004d88:	f7ff ff44 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x30);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2130      	movs	r1, #48	; 0x30
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff ff3f 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xED);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	21ed      	movs	r1, #237	; 0xed
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7ff ff74 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x64);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2164      	movs	r1, #100	; 0x64
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7ff ff35 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2103      	movs	r1, #3
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7ff ff30 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x12);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2112      	movs	r1, #18
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7ff ff2b 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x81);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2181      	movs	r1, #129	; 0x81
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f7ff ff26 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xE8);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	21e8      	movs	r1, #232	; 0xe8
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff ff5b 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x85);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2185      	movs	r1, #133	; 0x85
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7ff ff1c 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2100      	movs	r1, #0
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7ff ff17 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x78);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2178      	movs	r1, #120	; 0x78
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7ff ff12 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xCB);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	21cb      	movs	r1, #203	; 0xcb
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff47 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x39);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2139      	movs	r1, #57	; 0x39
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff ff08 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x2C);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	212c      	movs	r1, #44	; 0x2c
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff ff03 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2100      	movs	r1, #0
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7ff fefe 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x34);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2134      	movs	r1, #52	; 0x34
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7ff fef9 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x02);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2102      	movs	r1, #2
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7ff fef4 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xF7);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	21f7      	movs	r1, #247	; 0xf7
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7ff ff29 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x20);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2120      	movs	r1, #32
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7ff feea 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xEA);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	21ea      	movs	r1, #234	; 0xea
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff ff1f 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7ff fee0 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2100      	movs	r1, #0
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff fedb 	bl	8004c14 <hspi_w8>
  // PWCTR1
  hspi_cmd(SPIx, 0xC0);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	21c0      	movs	r1, #192	; 0xc0
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff ff10 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x23);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2123      	movs	r1, #35	; 0x23
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff fed1 	bl	8004c14 <hspi_w8>
  // PWCTR2
  hspi_cmd(SPIx, 0xC1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	21c1      	movs	r1, #193	; 0xc1
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7ff ff06 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x10);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2110      	movs	r1, #16
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7ff fec7 	bl	8004c14 <hspi_w8>
  // VMCTR1
  hspi_cmd(SPIx, 0xC5);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	21c5      	movs	r1, #197	; 0xc5
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f7ff fefc 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x3E);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	213e      	movs	r1, #62	; 0x3e
 8004e94:	0018      	movs	r0, r3
 8004e96:	f7ff febd 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x28);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2128      	movs	r1, #40	; 0x28
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f7ff feb8 	bl	8004c14 <hspi_w8>
  // VMCTR2
  hspi_cmd(SPIx, 0xC7);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	21c7      	movs	r1, #199	; 0xc7
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7ff feed 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x86);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2186      	movs	r1, #134	; 0x86
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7ff feae 	bl	8004c14 <hspi_w8>
  // MADCTL
  hspi_cmd(SPIx, 0x36);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2136      	movs	r1, #54	; 0x36
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7ff fee3 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x48);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2148      	movs	r1, #72	; 0x48
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7ff fea4 	bl	8004c14 <hspi_w8>
  // VSCRSADD
  hspi_cmd(SPIx, 0x37);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2137      	movs	r1, #55	; 0x37
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7ff fed9 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2100      	movs	r1, #0
 8004eda:	0018      	movs	r0, r3
 8004edc:	f7ff fe9a 	bl	8004c14 <hspi_w8>
  // PIXFMT
  hspi_cmd(SPIx, 0x3A);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	213a      	movs	r1, #58	; 0x3a
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7ff fecf 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x55);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2155      	movs	r1, #85	; 0x55
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7ff fe90 	bl	8004c14 <hspi_w8>
  // FRMCTR1
  hspi_cmd(SPIx, 0xB1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	21b1      	movs	r1, #177	; 0xb1
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff fec5 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2100      	movs	r1, #0
 8004f02:	0018      	movs	r0, r3
 8004f04:	f7ff fe86 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x18);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2118      	movs	r1, #24
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f7ff fe81 	bl	8004c14 <hspi_w8>
  // DFUNCTR
  hspi_cmd(SPIx, 0xB6);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	21b6      	movs	r1, #182	; 0xb6
 8004f16:	0018      	movs	r0, r3
 8004f18:	f7ff feb6 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x08);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2108      	movs	r1, #8
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7ff fe77 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x82);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2182      	movs	r1, #130	; 0x82
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7ff fe72 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x27);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2127      	movs	r1, #39	; 0x27
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7ff fe6d 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xF2);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	21f2      	movs	r1, #242	; 0xf2
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f7ff fea2 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2100      	movs	r1, #0
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff fe63 	bl	8004c14 <hspi_w8>
  // GAMMASET
  hspi_cmd(SPIx, 0x26);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2126      	movs	r1, #38	; 0x26
 8004f52:	0018      	movs	r0, r3
 8004f54:	f7ff fe98 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x01);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7ff fe59 	bl	8004c14 <hspi_w8>
  // (Actual gamma settings)
  hspi_cmd(SPIx, 0xE0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	21e0      	movs	r1, #224	; 0xe0
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff fe8e 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x0F);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	210f      	movs	r1, #15
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7ff fe4f 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2131      	movs	r1, #49	; 0x31
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f7ff fe4a 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x2B);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	212b      	movs	r1, #43	; 0x2b
 8004f84:	0018      	movs	r0, r3
 8004f86:	f7ff fe45 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	210c      	movs	r1, #12
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7ff fe40 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	210e      	movs	r1, #14
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff fe3b 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2108      	movs	r1, #8
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff fe36 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x4E);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	214e      	movs	r1, #78	; 0x4e
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7ff fe31 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0xF1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	21f1      	movs	r1, #241	; 0xf1
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7ff fe2c 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x37);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2137      	movs	r1, #55	; 0x37
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7ff fe27 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2107      	movs	r1, #7
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff fe22 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x10);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2110      	movs	r1, #16
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff fe1d 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2103      	movs	r1, #3
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff fe18 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	210e      	movs	r1, #14
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7ff fe13 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x09);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2109      	movs	r1, #9
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f7ff fe0e 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x00);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7ff fe09 	bl	8004c14 <hspi_w8>
  hspi_cmd(SPIx, 0xE1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	21e1      	movs	r1, #225	; 0xe1
 8005006:	0018      	movs	r0, r3
 8005008:	f7ff fe3e 	bl	8004c88 <hspi_cmd>
  hspi_w8(SPIx, 0x00);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2100      	movs	r1, #0
 8005010:	0018      	movs	r0, r3
 8005012:	f7ff fdff 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0E);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	210e      	movs	r1, #14
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff fdfa 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x14);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2114      	movs	r1, #20
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff fdf5 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x03);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2103      	movs	r1, #3
 800502e:	0018      	movs	r0, r3
 8005030:	f7ff fdf0 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x11);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2111      	movs	r1, #17
 8005038:	0018      	movs	r0, r3
 800503a:	f7ff fdeb 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x07);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2107      	movs	r1, #7
 8005042:	0018      	movs	r0, r3
 8005044:	f7ff fde6 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2131      	movs	r1, #49	; 0x31
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff fde1 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0xC1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	21c1      	movs	r1, #193	; 0xc1
 8005056:	0018      	movs	r0, r3
 8005058:	f7ff fddc 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x48);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2148      	movs	r1, #72	; 0x48
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff fdd7 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x08);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2108      	movs	r1, #8
 800506a:	0018      	movs	r0, r3
 800506c:	f7ff fdd2 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	210f      	movs	r1, #15
 8005074:	0018      	movs	r0, r3
 8005076:	f7ff fdcd 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0C);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	210c      	movs	r1, #12
 800507e:	0018      	movs	r0, r3
 8005080:	f7ff fdc8 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x31);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2131      	movs	r1, #49	; 0x31
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff fdc3 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x36);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2136      	movs	r1, #54	; 0x36
 8005092:	0018      	movs	r0, r3
 8005094:	f7ff fdbe 	bl	8004c14 <hspi_w8>
  hspi_w8(SPIx, 0x0F);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	210f      	movs	r1, #15
 800509c:	0018      	movs	r0, r3
 800509e:	f7ff fdb9 	bl	8004c14 <hspi_w8>
  // Exit sleep mode.
  hspi_cmd(SPIx, 0x11);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2111      	movs	r1, #17
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7ff fdee 	bl	8004c88 <hspi_cmd>
  HAL_Delay(150);
 80050ac:	2096      	movs	r0, #150	; 0x96
 80050ae:	f7fc fc55 	bl	800195c <HAL_Delay>
  // Display on.
  hspi_cmd(SPIx, 0x29);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2129      	movs	r1, #41	; 0x29
 80050b6:	0018      	movs	r0, r3
 80050b8:	f7ff fde6 	bl	8004c88 <hspi_cmd>
	HAL_Delay(150);
 80050bc:	2096      	movs	r0, #150	; 0x96
 80050be:	f7fc fc4d 	bl	800195c <HAL_Delay>
  // 'Normal' display mode.
  hspi_cmd(SPIx, 0x13);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2113      	movs	r1, #19
 80050c6:	0018      	movs	r0, r3
 80050c8:	f7ff fdde 	bl	8004c88 <hspi_cmd>
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b002      	add	sp, #8
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050d4:	480d      	ldr	r0, [pc, #52]	; (800510c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050d8:	480d      	ldr	r0, [pc, #52]	; (8005110 <LoopForever+0x6>)
  ldr r1, =_edata
 80050da:	490e      	ldr	r1, [pc, #56]	; (8005114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050dc:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <LoopForever+0xe>)
  movs r3, #0
 80050de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e0:	e002      	b.n	80050e8 <LoopCopyDataInit>

080050e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e6:	3304      	adds	r3, #4

080050e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050ec:	d3f9      	bcc.n	80050e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ee:	4a0b      	ldr	r2, [pc, #44]	; (800511c <LoopForever+0x12>)
  ldr r4, =_ebss
 80050f0:	4c0b      	ldr	r4, [pc, #44]	; (8005120 <LoopForever+0x16>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f4:	e001      	b.n	80050fa <LoopFillZerobss>

080050f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f8:	3204      	adds	r2, #4

080050fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050fc:	d3fb      	bcc.n	80050f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80050fe:	f7ff f84f 	bl	80041a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005102:	f000 f811 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005106:	f7fe fb3b 	bl	8003780 <main>

0800510a <LoopForever>:

LoopForever:
    b LoopForever
 800510a:	e7fe      	b.n	800510a <LoopForever>
  ldr   r0, =_estack
 800510c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005114:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8005118:	08005718 	.word	0x08005718
  ldr r2, =_sbss
 800511c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8005120:	200000f8 	.word	0x200000f8

08005124 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005124:	e7fe      	b.n	8005124 <ADC1_COMP_IRQHandler>
	...

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	2600      	movs	r6, #0
 800512c:	4d0c      	ldr	r5, [pc, #48]	; (8005160 <__libc_init_array+0x38>)
 800512e:	4c0d      	ldr	r4, [pc, #52]	; (8005164 <__libc_init_array+0x3c>)
 8005130:	1b64      	subs	r4, r4, r5
 8005132:	10a4      	asrs	r4, r4, #2
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	2600      	movs	r6, #0
 800513a:	f000 f821 	bl	8005180 <_init>
 800513e:	4d0a      	ldr	r5, [pc, #40]	; (8005168 <__libc_init_array+0x40>)
 8005140:	4c0a      	ldr	r4, [pc, #40]	; (800516c <__libc_init_array+0x44>)
 8005142:	1b64      	subs	r4, r4, r5
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	00b3      	lsls	r3, r6, #2
 800514e:	58eb      	ldr	r3, [r5, r3]
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	00b3      	lsls	r3, r6, #2
 8005158:	58eb      	ldr	r3, [r5, r3]
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	08005710 	.word	0x08005710
 8005164:	08005710 	.word	0x08005710
 8005168:	08005710 	.word	0x08005710
 800516c:	08005714 	.word	0x08005714

08005170 <memset>:
 8005170:	0003      	movs	r3, r0
 8005172:	1812      	adds	r2, r2, r0
 8005174:	4293      	cmp	r3, r2
 8005176:	d100      	bne.n	800517a <memset+0xa>
 8005178:	4770      	bx	lr
 800517a:	7019      	strb	r1, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	e7f9      	b.n	8005174 <memset+0x4>

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
